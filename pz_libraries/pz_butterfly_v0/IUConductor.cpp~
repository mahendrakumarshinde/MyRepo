#include "IUFeatureHandler.h"

IUFeatureHandler::IUFeatureHandler(IUInterface *iuI2C, IUInterface *iuBluetooth, IUInterface *iuWifi)
{
  m_iuI2C = iuI2C;
  m_iuBluetooth = iuBluetooth;
  m_iuWifi = iuWifi;
  resetFeatures();
}

IUFeatureHandler::~IUFeatureHandler()
{
  m_iuI2C = NULL;
  m_iuBluetooth = NULL;
  m_iuWifi = NULL;
  resetFeatures();
}

void IUFeatureHandler::resetFeatures()
{
  for (int i = 0; i < maxFeatureCount; i++)
  {
    delete m_features[i]; m_features[i] = NULL;
  }
  m_featureCount = 0;
}

/**
 * Attempt to add a feature to the collection
 * @return true if success, else false (because the collection is full)
 */
bool IUFeatureHandler::addFeature(IUABCFeature *feature)
{
    if (m_featureCount == maxFeatureCount)
    {
        return false; //Unable to add a new feature because the collection is full
    }
    m_features[m_featureCount] = feature;
    m_featureCount++;
    return true;
}





/* ===================================== Feature Instanciations ======================================== */

/*
uint16_t accelSourceSize[3] = {512, 512, 512};
uint16_t velocitySourceSize[3] = {1, 1, 512};

showRecordFFT = IUMultiQ15SourceDataCollectionFeature(0, "accel_data");
showRecordFFT.prepareSource(3, accelSourceSize);
showRecordFFT.setDefaultDataTransform();
showRecordFFT.activate();

accelerationEnergy = IUMultiQ15SourceFeature(1, "acceleration_energy");
accelerationEnergy.prepareSource(3, accelSourceSize);
accelerationEnergy.prepareSendingQueue(1);
accelerationEnergy.setComputeFunction(computeSignalEnergy);
accelerationEnergy.activate();

velocityX = IUMultiQ15SourceFeature(2, "velocity_x");
VelocityX.prepareSource(3, velocitySourceSize);
VelocityX.prepareSendingQueue(1);
VelocityX.setComputeFunction(computeVelocity);
VelocityX.activate();

velocityY = IUMultiQ15SourceFeature(3, "velocity_y");
velocityY.prepareSource(3, velocitySourceSize);
velocityY.prepareSendingQueue(1);
velocityY.setComputeFunction(computeVelocity);
velocityY.activate();

velocityZ = IUMultiQ15SourceFeature(4, "velocity_z");
velocityZ.prepareSource(3, velocitySourceSize);
velocityZ.prepareSendingQueue(1);
velocityZ.setComputeFunction(computeVelocity);
velocityZ.activate();

temperature = IUSingleFloatSourceFeature(5, "current_temperature");
temperature.prepareSource(1);
temperature.prepareSendingQueue(1);
temperature.setDefaultComputeFunction();
temperature.activate();

audioDB = IUSingleFloatSourceFeature(6, "audio_db");
audioDB.prepareSource(1);
audioDB.prepareSendingQueue(1);
audioDB.setDefaultComputeFunction();
audioDB.activate();
*/


