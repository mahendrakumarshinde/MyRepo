
ota_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d04  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002bc  08003eb0  08003eb0  00013eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800416c  0800416c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800416c  0800416c  0001416c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004174  08004174  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004174  08004174  00014174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004178  08004178  00014178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800417c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  2000000c  08004188  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  08004188  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aad8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001bfb  00000000  00000000  0002ab14  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a08  00000000  00000000  0002c710  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000920  00000000  00000000  0002d118  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027a20  00000000  00000000  0002da38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008578  00000000  00000000  00055458  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f3075  00000000  00000000  0005d9d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00150a45  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000278c  00000000  00000000  00150ac0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003e98 	.word	0x08003e98

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08003e98 	.word	0x08003e98

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b972 	b.w	80004e8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	4688      	mov	r8, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14b      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022a:	428a      	cmp	r2, r1
 800022c:	4615      	mov	r5, r2
 800022e:	d967      	bls.n	8000300 <__udivmoddi4+0xe4>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0720 	rsb	r7, r2, #32
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	fa20 f707 	lsr.w	r7, r0, r7
 8000242:	4095      	lsls	r5, r2
 8000244:	ea47 0803 	orr.w	r8, r7, r3
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbb8 f7fe 	udiv	r7, r8, lr
 8000254:	fa1f fc85 	uxth.w	ip, r5
 8000258:	fb0e 8817 	mls	r8, lr, r7, r8
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	fb07 f10c 	mul.w	r1, r7, ip
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18eb      	adds	r3, r5, r3
 800026a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800026e:	f080 811b 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8118 	bls.w	80004a8 <__udivmoddi4+0x28c>
 8000278:	3f02      	subs	r7, #2
 800027a:	442b      	add	r3, r5
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0fe 	udiv	r0, r3, lr
 8000284:	fb0e 3310 	mls	r3, lr, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000290:	45a4      	cmp	ip, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	192c      	adds	r4, r5, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x290>
 800029e:	45a4      	cmp	ip, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x290>
 80002a4:	3802      	subs	r0, #2
 80002a6:	442c      	add	r4, r5
 80002a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ac:	eba4 040c 	sub.w	r4, r4, ip
 80002b0:	2700      	movs	r7, #0
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xbe>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80eb 	beq.w	80004a2 <__udivmoddi4+0x286>
 80002cc:	2700      	movs	r7, #0
 80002ce:	e9c6 0100 	strd	r0, r1, [r6]
 80002d2:	4638      	mov	r0, r7
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f783 	clz	r7, r3
 80002de:	2f00      	cmp	r7, #0
 80002e0:	d147      	bne.n	8000372 <__udivmoddi4+0x156>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd0>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2c4>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	4698      	mov	r8, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa0>
 80002fa:	e9c6 4800 	strd	r4, r8, [r6]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa0>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xe8>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 808f 	bne.w	800042c <__udivmoddi4+0x210>
 800030e:	1b49      	subs	r1, r1, r5
 8000310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000314:	fa1f f885 	uxth.w	r8, r5
 8000318:	2701      	movs	r7, #1
 800031a:	fbb1 fcfe 	udiv	ip, r1, lr
 800031e:	0c23      	lsrs	r3, r4, #16
 8000320:	fb0e 111c 	mls	r1, lr, ip, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb08 f10c 	mul.w	r1, r8, ip
 800032c:	4299      	cmp	r1, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x124>
 8000330:	18eb      	adds	r3, r5, r3
 8000332:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4299      	cmp	r1, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 800033e:	4684      	mov	ip, r0
 8000340:	1a59      	subs	r1, r3, r1
 8000342:	b2a3      	uxth	r3, r4
 8000344:	fbb1 f0fe 	udiv	r0, r1, lr
 8000348:	fb0e 1410 	mls	r4, lr, r0, r1
 800034c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	45a0      	cmp	r8, r4
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x14c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14a>
 8000360:	45a0      	cmp	r8, r4
 8000362:	f200 80b6 	bhi.w	80004d2 <__udivmoddi4+0x2b6>
 8000366:	4618      	mov	r0, r3
 8000368:	eba4 0408 	sub.w	r4, r4, r8
 800036c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000370:	e79f      	b.n	80002b2 <__udivmoddi4+0x96>
 8000372:	f1c7 0c20 	rsb	ip, r7, #32
 8000376:	40bb      	lsls	r3, r7
 8000378:	fa22 fe0c 	lsr.w	lr, r2, ip
 800037c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000380:	fa01 f407 	lsl.w	r4, r1, r7
 8000384:	fa20 f50c 	lsr.w	r5, r0, ip
 8000388:	fa21 f30c 	lsr.w	r3, r1, ip
 800038c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000390:	4325      	orrs	r5, r4
 8000392:	fbb3 f9f8 	udiv	r9, r3, r8
 8000396:	0c2c      	lsrs	r4, r5, #16
 8000398:	fb08 3319 	mls	r3, r8, r9, r3
 800039c:	fa1f fa8e 	uxth.w	sl, lr
 80003a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a4:	fb09 f40a 	mul.w	r4, r9, sl
 80003a8:	429c      	cmp	r4, r3
 80003aa:	fa02 f207 	lsl.w	r2, r2, r7
 80003ae:	fa00 f107 	lsl.w	r1, r0, r7
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1e 0303 	adds.w	r3, lr, r3
 80003b8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003bc:	f080 8087 	bcs.w	80004ce <__udivmoddi4+0x2b2>
 80003c0:	429c      	cmp	r4, r3
 80003c2:	f240 8084 	bls.w	80004ce <__udivmoddi4+0x2b2>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4473      	add	r3, lr
 80003cc:	1b1b      	subs	r3, r3, r4
 80003ce:	b2ad      	uxth	r5, r5
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3310 	mls	r3, r8, r0, r3
 80003d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1e 0404 	adds.w	r4, lr, r4
 80003e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003ec:	d26b      	bcs.n	80004c6 <__udivmoddi4+0x2aa>
 80003ee:	45a2      	cmp	sl, r4
 80003f0:	d969      	bls.n	80004c6 <__udivmoddi4+0x2aa>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4474      	add	r4, lr
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	fba0 8902 	umull	r8, r9, r0, r2
 80003fe:	eba4 040a 	sub.w	r4, r4, sl
 8000402:	454c      	cmp	r4, r9
 8000404:	46c2      	mov	sl, r8
 8000406:	464b      	mov	r3, r9
 8000408:	d354      	bcc.n	80004b4 <__udivmoddi4+0x298>
 800040a:	d051      	beq.n	80004b0 <__udivmoddi4+0x294>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2c8>
 8000410:	ebb1 050a 	subs.w	r5, r1, sl
 8000414:	eb64 0403 	sbc.w	r4, r4, r3
 8000418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800041c:	40fd      	lsrs	r5, r7
 800041e:	40fc      	lsrs	r4, r7
 8000420:	ea4c 0505 	orr.w	r5, ip, r5
 8000424:	e9c6 5400 	strd	r5, r4, [r6]
 8000428:	2700      	movs	r7, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa0>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f703 	lsr.w	r7, r0, r3
 8000434:	4095      	lsls	r5, r2
 8000436:	fa01 f002 	lsl.w	r0, r1, r2
 800043a:	fa21 f303 	lsr.w	r3, r1, r3
 800043e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000442:	4338      	orrs	r0, r7
 8000444:	0c01      	lsrs	r1, r0, #16
 8000446:	fbb3 f7fe 	udiv	r7, r3, lr
 800044a:	fa1f f885 	uxth.w	r8, r5
 800044e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb07 f308 	mul.w	r3, r7, r8
 800045a:	428b      	cmp	r3, r1
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x256>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000468:	d22f      	bcs.n	80004ca <__udivmoddi4+0x2ae>
 800046a:	428b      	cmp	r3, r1
 800046c:	d92d      	bls.n	80004ca <__udivmoddi4+0x2ae>
 800046e:	3f02      	subs	r7, #2
 8000470:	4429      	add	r1, r5
 8000472:	1acb      	subs	r3, r1, r3
 8000474:	b281      	uxth	r1, r0
 8000476:	fbb3 f0fe 	udiv	r0, r3, lr
 800047a:	fb0e 3310 	mls	r3, lr, r0, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb00 f308 	mul.w	r3, r0, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x27e>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000490:	d217      	bcs.n	80004c2 <__udivmoddi4+0x2a6>
 8000492:	428b      	cmp	r3, r1
 8000494:	d915      	bls.n	80004c2 <__udivmoddi4+0x2a6>
 8000496:	3802      	subs	r0, #2
 8000498:	4429      	add	r1, r5
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a0:	e73b      	b.n	800031a <__udivmoddi4+0xfe>
 80004a2:	4637      	mov	r7, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e709      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a8:	4607      	mov	r7, r0
 80004aa:	e6e7      	b.n	800027c <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004b0:	4541      	cmp	r1, r8
 80004b2:	d2ab      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b8:	eb69 020e 	sbc.w	r2, r9, lr
 80004bc:	3801      	subs	r0, #1
 80004be:	4613      	mov	r3, r2
 80004c0:	e7a4      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c2:	4660      	mov	r0, ip
 80004c4:	e7e9      	b.n	800049a <__udivmoddi4+0x27e>
 80004c6:	4618      	mov	r0, r3
 80004c8:	e795      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004ca:	4667      	mov	r7, ip
 80004cc:	e7d1      	b.n	8000472 <__udivmoddi4+0x256>
 80004ce:	4681      	mov	r9, r0
 80004d0:	e77c      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d2:	3802      	subs	r0, #2
 80004d4:	442c      	add	r4, r5
 80004d6:	e747      	b.n	8000368 <__udivmoddi4+0x14c>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	442b      	add	r3, r5
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x124>
 80004e0:	4638      	mov	r0, r7
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xda>
 80004e4:	4637      	mov	r7, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa0>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004f2:	2300      	movs	r3, #0
 80004f4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f6:	2003      	movs	r0, #3
 80004f8:	f000 f970 	bl	80007dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004fc:	2000      	movs	r0, #0
 80004fe:	f000 f841 	bl	8000584 <HAL_InitTick>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d002      	beq.n	800050e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000508:	2301      	movs	r3, #1
 800050a:	71fb      	strb	r3, [r7, #7]
 800050c:	e001      	b.n	8000512 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800050e:	f003 fb53 	bl	8003bb8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000512:	79fb      	ldrb	r3, [r7, #7]
}
 8000514:	4618      	mov	r0, r3
 8000516:	3708      	adds	r7, #8
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}

0800051c <HAL_DeInit>:
  * @brief De-initialize common part of the HAL and stop the source of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000520:	4b13      	ldr	r3, [pc, #76]	; (8000570 <HAL_DeInit+0x54>)
 8000522:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000526:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_RCC_APB1_RELEASE_RESET();
 8000528:	4b11      	ldr	r3, [pc, #68]	; (8000570 <HAL_DeInit+0x54>)
 800052a:	2200      	movs	r2, #0
 800052c:	639a      	str	r2, [r3, #56]	; 0x38

  __HAL_RCC_APB2_FORCE_RESET();
 800052e:	4b10      	ldr	r3, [pc, #64]	; (8000570 <HAL_DeInit+0x54>)
 8000530:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000534:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_RCC_APB2_RELEASE_RESET();
 8000536:	4b0e      	ldr	r3, [pc, #56]	; (8000570 <HAL_DeInit+0x54>)
 8000538:	2200      	movs	r2, #0
 800053a:	641a      	str	r2, [r3, #64]	; 0x40

  __HAL_RCC_AHB1_FORCE_RESET();
 800053c:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <HAL_DeInit+0x54>)
 800053e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000542:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000544:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <HAL_DeInit+0x54>)
 8000546:	2200      	movs	r2, #0
 8000548:	629a      	str	r2, [r3, #40]	; 0x28

  __HAL_RCC_AHB2_FORCE_RESET();
 800054a:	4b09      	ldr	r3, [pc, #36]	; (8000570 <HAL_DeInit+0x54>)
 800054c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000550:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000552:	4b07      	ldr	r3, [pc, #28]	; (8000570 <HAL_DeInit+0x54>)
 8000554:	2200      	movs	r2, #0
 8000556:	62da      	str	r2, [r3, #44]	; 0x2c

  __HAL_RCC_AHB3_FORCE_RESET();
 8000558:	4b05      	ldr	r3, [pc, #20]	; (8000570 <HAL_DeInit+0x54>)
 800055a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800055e:	631a      	str	r2, [r3, #48]	; 0x30
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000560:	4b03      	ldr	r3, [pc, #12]	; (8000570 <HAL_DeInit+0x54>)
 8000562:	2200      	movs	r2, #0
 8000564:	631a      	str	r2, [r3, #48]	; 0x30

  // De-Init the low level hardware
  HAL_MspDeInit();
 8000566:	f000 f805 	bl	8000574 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 800056a:	2300      	movs	r3, #0
}
 800056c:	4618      	mov	r0, r3
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40021000 	.word	0x40021000

08000574 <HAL_MspDeInit>:
/**
  * @brief  DeInitialize the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
	...

08000584 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800058c:	2300      	movs	r3, #0
 800058e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000590:	4b16      	ldr	r3, [pc, #88]	; (80005ec <HAL_InitTick+0x68>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d022      	beq.n	80005de <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000598:	4b15      	ldr	r3, [pc, #84]	; (80005f0 <HAL_InitTick+0x6c>)
 800059a:	681a      	ldr	r2, [r3, #0]
 800059c:	4b13      	ldr	r3, [pc, #76]	; (80005ec <HAL_InitTick+0x68>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80005a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 f93c 	bl	800082a <HAL_SYSTICK_Config>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d10f      	bne.n	80005d8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2b0f      	cmp	r3, #15
 80005bc:	d809      	bhi.n	80005d2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005be:	2200      	movs	r2, #0
 80005c0:	6879      	ldr	r1, [r7, #4]
 80005c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005c6:	f000 f914 	bl	80007f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005ca:	4a0a      	ldr	r2, [pc, #40]	; (80005f4 <HAL_InitTick+0x70>)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	e007      	b.n	80005e2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80005d2:	2301      	movs	r3, #1
 80005d4:	73fb      	strb	r3, [r7, #15]
 80005d6:	e004      	b.n	80005e2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005d8:	2301      	movs	r3, #1
 80005da:	73fb      	strb	r3, [r7, #15]
 80005dc:	e001      	b.n	80005e2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005de:	2301      	movs	r3, #1
 80005e0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80005e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000004 	.word	0x20000004
 80005f0:	20000008 	.word	0x20000008
 80005f4:	20000000 	.word	0x20000000

080005f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005fc:	4b05      	ldr	r3, [pc, #20]	; (8000614 <HAL_IncTick+0x1c>)
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	4b05      	ldr	r3, [pc, #20]	; (8000618 <HAL_IncTick+0x20>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4413      	add	r3, r2
 8000606:	4a03      	ldr	r2, [pc, #12]	; (8000614 <HAL_IncTick+0x1c>)
 8000608:	6013      	str	r3, [r2, #0]
}
 800060a:	bf00      	nop
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	20000028 	.word	0x20000028
 8000618:	20000004 	.word	0x20000004

0800061c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  return uwTick;
 8000620:	4b03      	ldr	r3, [pc, #12]	; (8000630 <HAL_GetTick+0x14>)
 8000622:	681b      	ldr	r3, [r3, #0]
}
 8000624:	4618      	mov	r0, r3
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	20000028 	.word	0x20000028

08000634 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800063c:	f7ff ffee 	bl	800061c <HAL_GetTick>
 8000640:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800064c:	d004      	beq.n	8000658 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800064e:	4b09      	ldr	r3, [pc, #36]	; (8000674 <HAL_Delay+0x40>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	68fa      	ldr	r2, [r7, #12]
 8000654:	4413      	add	r3, r2
 8000656:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000658:	bf00      	nop
 800065a:	f7ff ffdf 	bl	800061c <HAL_GetTick>
 800065e:	4602      	mov	r2, r0
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	1ad3      	subs	r3, r2, r3
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	429a      	cmp	r2, r3
 8000668:	d8f7      	bhi.n	800065a <HAL_Delay+0x26>
  {
  }
}
 800066a:	bf00      	nop
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000004 	.word	0x20000004

08000678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	f003 0307 	and.w	r3, r3, #7
 8000686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000688:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <__NVIC_SetPriorityGrouping+0x44>)
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800068e:	68ba      	ldr	r2, [r7, #8]
 8000690:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000694:	4013      	ands	r3, r2
 8000696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006aa:	4a04      	ldr	r2, [pc, #16]	; (80006bc <__NVIC_SetPriorityGrouping+0x44>)
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	60d3      	str	r3, [r2, #12]
}
 80006b0:	bf00      	nop
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	e000ed00 	.word	0xe000ed00

080006c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006c4:	4b04      	ldr	r3, [pc, #16]	; (80006d8 <__NVIC_GetPriorityGrouping+0x18>)
 80006c6:	68db      	ldr	r3, [r3, #12]
 80006c8:	0a1b      	lsrs	r3, r3, #8
 80006ca:	f003 0307 	and.w	r3, r3, #7
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00

080006dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	6039      	str	r1, [r7, #0]
 80006e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	db0a      	blt.n	8000706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	490c      	ldr	r1, [pc, #48]	; (8000728 <__NVIC_SetPriority+0x4c>)
 80006f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fa:	0112      	lsls	r2, r2, #4
 80006fc:	b2d2      	uxtb	r2, r2
 80006fe:	440b      	add	r3, r1
 8000700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000704:	e00a      	b.n	800071c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4908      	ldr	r1, [pc, #32]	; (800072c <__NVIC_SetPriority+0x50>)
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	f003 030f 	and.w	r3, r3, #15
 8000712:	3b04      	subs	r3, #4
 8000714:	0112      	lsls	r2, r2, #4
 8000716:	b2d2      	uxtb	r2, r2
 8000718:	440b      	add	r3, r1
 800071a:	761a      	strb	r2, [r3, #24]
}
 800071c:	bf00      	nop
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	e000e100 	.word	0xe000e100
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000730:	b480      	push	{r7}
 8000732:	b089      	sub	sp, #36	; 0x24
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	f003 0307 	and.w	r3, r3, #7
 8000742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000744:	69fb      	ldr	r3, [r7, #28]
 8000746:	f1c3 0307 	rsb	r3, r3, #7
 800074a:	2b04      	cmp	r3, #4
 800074c:	bf28      	it	cs
 800074e:	2304      	movcs	r3, #4
 8000750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000752:	69fb      	ldr	r3, [r7, #28]
 8000754:	3304      	adds	r3, #4
 8000756:	2b06      	cmp	r3, #6
 8000758:	d902      	bls.n	8000760 <NVIC_EncodePriority+0x30>
 800075a:	69fb      	ldr	r3, [r7, #28]
 800075c:	3b03      	subs	r3, #3
 800075e:	e000      	b.n	8000762 <NVIC_EncodePriority+0x32>
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000764:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000768:	69bb      	ldr	r3, [r7, #24]
 800076a:	fa02 f303 	lsl.w	r3, r2, r3
 800076e:	43da      	mvns	r2, r3
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	401a      	ands	r2, r3
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000778:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	fa01 f303 	lsl.w	r3, r1, r3
 8000782:	43d9      	mvns	r1, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000788:	4313      	orrs	r3, r2
         );
}
 800078a:	4618      	mov	r0, r3
 800078c:	3724      	adds	r7, #36	; 0x24
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
	...

08000798 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	3b01      	subs	r3, #1
 80007a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007a8:	d301      	bcc.n	80007ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007aa:	2301      	movs	r3, #1
 80007ac:	e00f      	b.n	80007ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ae:	4a0a      	ldr	r2, [pc, #40]	; (80007d8 <SysTick_Config+0x40>)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	3b01      	subs	r3, #1
 80007b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007b6:	210f      	movs	r1, #15
 80007b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007bc:	f7ff ff8e 	bl	80006dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007c0:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <SysTick_Config+0x40>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007c6:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <SysTick_Config+0x40>)
 80007c8:	2207      	movs	r2, #7
 80007ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007cc:	2300      	movs	r3, #0
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	e000e010 	.word	0xe000e010

080007dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f7ff ff47 	bl	8000678 <__NVIC_SetPriorityGrouping>
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b086      	sub	sp, #24
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	4603      	mov	r3, r0
 80007fa:	60b9      	str	r1, [r7, #8]
 80007fc:	607a      	str	r2, [r7, #4]
 80007fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000804:	f7ff ff5c 	bl	80006c0 <__NVIC_GetPriorityGrouping>
 8000808:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	68b9      	ldr	r1, [r7, #8]
 800080e:	6978      	ldr	r0, [r7, #20]
 8000810:	f7ff ff8e 	bl	8000730 <NVIC_EncodePriority>
 8000814:	4602      	mov	r2, r0
 8000816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800081a:	4611      	mov	r1, r2
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff ff5d 	bl	80006dc <__NVIC_SetPriority>
}
 8000822:	bf00      	nop
 8000824:	3718      	adds	r7, #24
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	b082      	sub	sp, #8
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f7ff ffb0 	bl	8000798 <SysTick_Config>
 8000838:	4603      	mov	r3, r0
}
 800083a:	4618      	mov	r0, r3
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800084a:	2300      	movs	r3, #0
 800084c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <HAL_FLASH_Unlock+0x38>)
 8000850:	695b      	ldr	r3, [r3, #20]
 8000852:	2b00      	cmp	r3, #0
 8000854:	da0b      	bge.n	800086e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <HAL_FLASH_Unlock+0x38>)
 8000858:	4a09      	ldr	r2, [pc, #36]	; (8000880 <HAL_FLASH_Unlock+0x3c>)
 800085a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800085c:	4b07      	ldr	r3, [pc, #28]	; (800087c <HAL_FLASH_Unlock+0x38>)
 800085e:	4a09      	ldr	r2, [pc, #36]	; (8000884 <HAL_FLASH_Unlock+0x40>)
 8000860:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <HAL_FLASH_Unlock+0x38>)
 8000864:	695b      	ldr	r3, [r3, #20]
 8000866:	2b00      	cmp	r3, #0
 8000868:	da01      	bge.n	800086e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800086a:	2301      	movs	r3, #1
 800086c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800086e:	79fb      	ldrb	r3, [r7, #7]
}
 8000870:	4618      	mov	r0, r3
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	40022000 	.word	0x40022000
 8000880:	45670123 	.word	0x45670123
 8000884:	cdef89ab 	.word	0xcdef89ab

08000888 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800088c:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <HAL_FLASH_Lock+0x1c>)
 800088e:	695b      	ldr	r3, [r3, #20]
 8000890:	4a04      	ldr	r2, [pc, #16]	; (80008a4 <HAL_FLASH_Lock+0x1c>)
 8000892:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000896:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8000898:	2300      	movs	r3, #0
}
 800089a:	4618      	mov	r0, r3
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr
 80008a4:	40022000 	.word	0x40022000

080008a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b087      	sub	sp, #28
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008b6:	e166      	b.n	8000b86 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	2101      	movs	r1, #1
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	fa01 f303 	lsl.w	r3, r1, r3
 80008c4:	4013      	ands	r3, r2
 80008c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	f000 8158 	beq.w	8000b80 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	2b02      	cmp	r3, #2
 80008d6:	d003      	beq.n	80008e0 <HAL_GPIO_Init+0x38>
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	2b12      	cmp	r3, #18
 80008de:	d123      	bne.n	8000928 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	08da      	lsrs	r2, r3, #3
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	3208      	adds	r2, #8
 80008e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	f003 0307 	and.w	r3, r3, #7
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	220f      	movs	r2, #15
 80008f8:	fa02 f303 	lsl.w	r3, r2, r3
 80008fc:	43db      	mvns	r3, r3
 80008fe:	693a      	ldr	r2, [r7, #16]
 8000900:	4013      	ands	r3, r2
 8000902:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	691a      	ldr	r2, [r3, #16]
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	f003 0307 	and.w	r3, r3, #7
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	fa02 f303 	lsl.w	r3, r2, r3
 8000914:	693a      	ldr	r2, [r7, #16]
 8000916:	4313      	orrs	r3, r2
 8000918:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	08da      	lsrs	r2, r3, #3
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	3208      	adds	r2, #8
 8000922:	6939      	ldr	r1, [r7, #16]
 8000924:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	005b      	lsls	r3, r3, #1
 8000932:	2203      	movs	r2, #3
 8000934:	fa02 f303 	lsl.w	r3, r2, r3
 8000938:	43db      	mvns	r3, r3
 800093a:	693a      	ldr	r2, [r7, #16]
 800093c:	4013      	ands	r3, r2
 800093e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	f003 0203 	and.w	r2, r3, #3
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	fa02 f303 	lsl.w	r3, r2, r3
 8000950:	693a      	ldr	r2, [r7, #16]
 8000952:	4313      	orrs	r3, r2
 8000954:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	693a      	ldr	r2, [r7, #16]
 800095a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d00b      	beq.n	800097c <HAL_GPIO_Init+0xd4>
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	2b02      	cmp	r3, #2
 800096a:	d007      	beq.n	800097c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000970:	2b11      	cmp	r3, #17
 8000972:	d003      	beq.n	800097c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	2b12      	cmp	r3, #18
 800097a:	d130      	bne.n	80009de <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	689b      	ldr	r3, [r3, #8]
 8000980:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	2203      	movs	r2, #3
 8000988:	fa02 f303 	lsl.w	r3, r2, r3
 800098c:	43db      	mvns	r3, r3
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	4013      	ands	r3, r2
 8000992:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	68da      	ldr	r2, [r3, #12]
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	fa02 f303 	lsl.w	r3, r2, r3
 80009a0:	693a      	ldr	r2, [r7, #16]
 80009a2:	4313      	orrs	r3, r2
 80009a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	693a      	ldr	r2, [r7, #16]
 80009aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009b2:	2201      	movs	r2, #1
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ba:	43db      	mvns	r3, r3
 80009bc:	693a      	ldr	r2, [r7, #16]
 80009be:	4013      	ands	r3, r2
 80009c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	091b      	lsrs	r3, r3, #4
 80009c8:	f003 0201 	and.w	r2, r3, #1
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	4313      	orrs	r3, r2
 80009d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	68db      	ldr	r3, [r3, #12]
 80009e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	2203      	movs	r2, #3
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	43db      	mvns	r3, r3
 80009f0:	693a      	ldr	r2, [r7, #16]
 80009f2:	4013      	ands	r3, r2
 80009f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	689a      	ldr	r2, [r3, #8]
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	4313      	orrs	r3, r2
 8000a06:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	f000 80b2 	beq.w	8000b80 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1c:	4b61      	ldr	r3, [pc, #388]	; (8000ba4 <HAL_GPIO_Init+0x2fc>)
 8000a1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a20:	4a60      	ldr	r2, [pc, #384]	; (8000ba4 <HAL_GPIO_Init+0x2fc>)
 8000a22:	f043 0301 	orr.w	r3, r3, #1
 8000a26:	6613      	str	r3, [r2, #96]	; 0x60
 8000a28:	4b5e      	ldr	r3, [pc, #376]	; (8000ba4 <HAL_GPIO_Init+0x2fc>)
 8000a2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a2c:	f003 0301 	and.w	r3, r3, #1
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a34:	4a5c      	ldr	r2, [pc, #368]	; (8000ba8 <HAL_GPIO_Init+0x300>)
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	089b      	lsrs	r3, r3, #2
 8000a3a:	3302      	adds	r3, #2
 8000a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	f003 0303 	and.w	r3, r3, #3
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	220f      	movs	r2, #15
 8000a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a50:	43db      	mvns	r3, r3
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	4013      	ands	r3, r2
 8000a56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a5e:	d02b      	beq.n	8000ab8 <HAL_GPIO_Init+0x210>
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4a52      	ldr	r2, [pc, #328]	; (8000bac <HAL_GPIO_Init+0x304>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d025      	beq.n	8000ab4 <HAL_GPIO_Init+0x20c>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	4a51      	ldr	r2, [pc, #324]	; (8000bb0 <HAL_GPIO_Init+0x308>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d01f      	beq.n	8000ab0 <HAL_GPIO_Init+0x208>
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	4a50      	ldr	r2, [pc, #320]	; (8000bb4 <HAL_GPIO_Init+0x30c>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d019      	beq.n	8000aac <HAL_GPIO_Init+0x204>
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	4a4f      	ldr	r2, [pc, #316]	; (8000bb8 <HAL_GPIO_Init+0x310>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d013      	beq.n	8000aa8 <HAL_GPIO_Init+0x200>
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	4a4e      	ldr	r2, [pc, #312]	; (8000bbc <HAL_GPIO_Init+0x314>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d00d      	beq.n	8000aa4 <HAL_GPIO_Init+0x1fc>
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4a4d      	ldr	r2, [pc, #308]	; (8000bc0 <HAL_GPIO_Init+0x318>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d007      	beq.n	8000aa0 <HAL_GPIO_Init+0x1f8>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4a4c      	ldr	r2, [pc, #304]	; (8000bc4 <HAL_GPIO_Init+0x31c>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d101      	bne.n	8000a9c <HAL_GPIO_Init+0x1f4>
 8000a98:	2307      	movs	r3, #7
 8000a9a:	e00e      	b.n	8000aba <HAL_GPIO_Init+0x212>
 8000a9c:	2308      	movs	r3, #8
 8000a9e:	e00c      	b.n	8000aba <HAL_GPIO_Init+0x212>
 8000aa0:	2306      	movs	r3, #6
 8000aa2:	e00a      	b.n	8000aba <HAL_GPIO_Init+0x212>
 8000aa4:	2305      	movs	r3, #5
 8000aa6:	e008      	b.n	8000aba <HAL_GPIO_Init+0x212>
 8000aa8:	2304      	movs	r3, #4
 8000aaa:	e006      	b.n	8000aba <HAL_GPIO_Init+0x212>
 8000aac:	2303      	movs	r3, #3
 8000aae:	e004      	b.n	8000aba <HAL_GPIO_Init+0x212>
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	e002      	b.n	8000aba <HAL_GPIO_Init+0x212>
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	e000      	b.n	8000aba <HAL_GPIO_Init+0x212>
 8000ab8:	2300      	movs	r3, #0
 8000aba:	697a      	ldr	r2, [r7, #20]
 8000abc:	f002 0203 	and.w	r2, r2, #3
 8000ac0:	0092      	lsls	r2, r2, #2
 8000ac2:	4093      	lsls	r3, r2
 8000ac4:	693a      	ldr	r2, [r7, #16]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000aca:	4937      	ldr	r1, [pc, #220]	; (8000ba8 <HAL_GPIO_Init+0x300>)
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	089b      	lsrs	r3, r3, #2
 8000ad0:	3302      	adds	r3, #2
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ad8:	4b3b      	ldr	r3, [pc, #236]	; (8000bc8 <HAL_GPIO_Init+0x320>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d003      	beq.n	8000afc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000af4:	693a      	ldr	r2, [r7, #16]
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000afc:	4a32      	ldr	r2, [pc, #200]	; (8000bc8 <HAL_GPIO_Init+0x320>)
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000b02:	4b31      	ldr	r3, [pc, #196]	; (8000bc8 <HAL_GPIO_Init+0x320>)
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	43db      	mvns	r3, r3
 8000b0c:	693a      	ldr	r2, [r7, #16]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d003      	beq.n	8000b26 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b26:	4a28      	ldr	r2, [pc, #160]	; (8000bc8 <HAL_GPIO_Init+0x320>)
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b2c:	4b26      	ldr	r3, [pc, #152]	; (8000bc8 <HAL_GPIO_Init+0x320>)
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	43db      	mvns	r3, r3
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d003      	beq.n	8000b50 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b50:	4a1d      	ldr	r2, [pc, #116]	; (8000bc8 <HAL_GPIO_Init+0x320>)
 8000b52:	693b      	ldr	r3, [r7, #16]
 8000b54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b56:	4b1c      	ldr	r3, [pc, #112]	; (8000bc8 <HAL_GPIO_Init+0x320>)
 8000b58:	68db      	ldr	r3, [r3, #12]
 8000b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	43db      	mvns	r3, r3
 8000b60:	693a      	ldr	r2, [r7, #16]
 8000b62:	4013      	ands	r3, r2
 8000b64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d003      	beq.n	8000b7a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	4313      	orrs	r3, r2
 8000b78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b7a:	4a13      	ldr	r2, [pc, #76]	; (8000bc8 <HAL_GPIO_Init+0x320>)
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	3301      	adds	r3, #1
 8000b84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	f47f ae91 	bne.w	80008b8 <HAL_GPIO_Init+0x10>
  }
}
 8000b96:	bf00      	nop
 8000b98:	371c      	adds	r7, #28
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	40010000 	.word	0x40010000
 8000bac:	48000400 	.word	0x48000400
 8000bb0:	48000800 	.word	0x48000800
 8000bb4:	48000c00 	.word	0x48000c00
 8000bb8:	48001000 	.word	0x48001000
 8000bbc:	48001400 	.word	0x48001400
 8000bc0:	48001800 	.word	0x48001800
 8000bc4:	48001c00 	.word	0x48001c00
 8000bc8:	40010400 	.word	0x40010400

08000bcc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	691a      	ldr	r2, [r3, #16]
 8000bdc:	887b      	ldrh	r3, [r7, #2]
 8000bde:	4013      	ands	r3, r2
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d002      	beq.n	8000bea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000be4:	2301      	movs	r3, #1
 8000be6:	73fb      	strb	r3, [r7, #15]
 8000be8:	e001      	b.n	8000bee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000bea:	2300      	movs	r3, #0
 8000bec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	460b      	mov	r3, r1
 8000c06:	807b      	strh	r3, [r7, #2]
 8000c08:	4613      	mov	r3, r2
 8000c0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c0c:	787b      	ldrb	r3, [r7, #1]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d003      	beq.n	8000c1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c12:	887a      	ldrh	r2, [r7, #2]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c18:	e002      	b.n	8000c20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c1a:	887a      	ldrh	r2, [r7, #2]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	460b      	mov	r3, r1
 8000c36:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	695a      	ldr	r2, [r3, #20]
 8000c3c:	887b      	ldrh	r3, [r7, #2]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d003      	beq.n	8000c4c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c44:	887a      	ldrh	r2, [r7, #2]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000c4a:	e002      	b.n	8000c52 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c4c:	887a      	ldrh	r2, [r7, #2]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	619a      	str	r2, [r3, #24]
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
	...

08000c60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000c64:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <HAL_PWREx_GetVoltageRange+0x18>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	40007000 	.word	0x40007000

08000c7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c8a:	d130      	bne.n	8000cee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c8c:	4b23      	ldr	r3, [pc, #140]	; (8000d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c98:	d038      	beq.n	8000d0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c9a:	4b20      	ldr	r3, [pc, #128]	; (8000d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ca2:	4a1e      	ldr	r2, [pc, #120]	; (8000d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ca4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ca8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000caa:	4b1d      	ldr	r3, [pc, #116]	; (8000d20 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2232      	movs	r2, #50	; 0x32
 8000cb0:	fb02 f303 	mul.w	r3, r2, r3
 8000cb4:	4a1b      	ldr	r2, [pc, #108]	; (8000d24 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cba:	0c9b      	lsrs	r3, r3, #18
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cc0:	e002      	b.n	8000cc8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	3b01      	subs	r3, #1
 8000cc6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cc8:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cca:	695b      	ldr	r3, [r3, #20]
 8000ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cd4:	d102      	bne.n	8000cdc <HAL_PWREx_ControlVoltageScaling+0x60>
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d1f2      	bne.n	8000cc2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cde:	695b      	ldr	r3, [r3, #20]
 8000ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ce4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ce8:	d110      	bne.n	8000d0c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000cea:	2303      	movs	r3, #3
 8000cec:	e00f      	b.n	8000d0e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000cee:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000cf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cfa:	d007      	beq.n	8000d0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cfc:	4b07      	ldr	r3, [pc, #28]	; (8000d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d04:	4a05      	ldr	r2, [pc, #20]	; (8000d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d0a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3714      	adds	r7, #20
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	40007000 	.word	0x40007000
 8000d20:	20000008 	.word	0x20000008
 8000d24:	431bde83 	.word	0x431bde83

08000d28 <HAL_RCC_DeInit>:
  *            - Peripheral clock sources
  *            - LSI, LSE and RTC clocks (Backup domain)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Reset to default System clock */
  /* Set MSION bit */
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000d2e:	4b4a      	ldr	r3, [pc, #296]	; (8000e58 <HAL_RCC_DeInit+0x130>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a49      	ldr	r2, [pc, #292]	; (8000e58 <HAL_RCC_DeInit+0x130>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	6013      	str	r3, [r2, #0]

  /* Insure MSIRDY bit is set before writing default MSIRANGE value */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8000d3a:	f7ff fc6f 	bl	800061c <HAL_GetTick>
 8000d3e:	6078      	str	r0, [r7, #4]

  /* Wait till MSI is ready */
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000d40:	e008      	b.n	8000d54 <HAL_RCC_DeInit+0x2c>
  {
    if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d42:	f7ff fc6b 	bl	800061c <HAL_GetTick>
 8000d46:	4602      	mov	r2, r0
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	1ad3      	subs	r3, r2, r3
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	d901      	bls.n	8000d54 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8000d50:	2303      	movs	r3, #3
 8000d52:	e07c      	b.n	8000e4e <HAL_RCC_DeInit+0x126>
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000d54:	4b40      	ldr	r3, [pc, #256]	; (8000e58 <HAL_RCC_DeInit+0x130>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f003 0302 	and.w	r3, r3, #2
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d0f0      	beq.n	8000d42 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set MSIRANGE default value */
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, RCC_MSIRANGE_6);
 8000d60:	4b3d      	ldr	r3, [pc, #244]	; (8000e58 <HAL_RCC_DeInit+0x130>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000d68:	4a3b      	ldr	r2, [pc, #236]	; (8000e58 <HAL_RCC_DeInit+0x130>)
 8000d6a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000d6e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register (MSI is selected as system clock source) */
  CLEAR_REG(RCC->CFGR);
 8000d70:	4b39      	ldr	r3, [pc, #228]	; (8000e58 <HAL_RCC_DeInit+0x130>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]

  /* Update the SystemCoreClock global variable for MSI as system clock source */
  SystemCoreClock = MSI_VALUE;
 8000d76:	4b39      	ldr	r3, [pc, #228]	; (8000e5c <HAL_RCC_DeInit+0x134>)
 8000d78:	4a39      	ldr	r2, [pc, #228]	; (8000e60 <HAL_RCC_DeInit+0x138>)
 8000d7a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clock settings  */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8000d7c:	4b39      	ldr	r3, [pc, #228]	; (8000e64 <HAL_RCC_DeInit+0x13c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fbff 	bl	8000584 <HAL_InitTick>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <HAL_RCC_DeInit+0x68>
  {
    return HAL_ERROR;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	e05e      	b.n	8000e4e <HAL_RCC_DeInit+0x126>
  }

  /* Insure MSI selected as system clock source */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8000d90:	f7ff fc44 	bl	800061c <HAL_GetTick>
 8000d94:	6078      	str	r0, [r7, #4]

  /* Wait till system clock source is ready */
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 8000d96:	e00a      	b.n	8000dae <HAL_RCC_DeInit+0x86>
  {
    if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d98:	f7ff fc40 	bl	800061c <HAL_GetTick>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d901      	bls.n	8000dae <HAL_RCC_DeInit+0x86>
    {
      return HAL_TIMEOUT;
 8000daa:	2303      	movs	r3, #3
 8000dac:	e04f      	b.n	8000e4e <HAL_RCC_DeInit+0x126>
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 8000dae:	4b2a      	ldr	r3, [pc, #168]	; (8000e58 <HAL_RCC_DeInit+0x130>)
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	f003 030c 	and.w	r3, r3, #12
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d1ee      	bne.n	8000d98 <HAL_RCC_DeInit+0x70>
  }

  /* Reset HSION, HSIKERON, HSIASFS, HSEON, HSECSSON, PLLON, PLLSAIxON bits */
#if defined(RCC_PLLSAI2_SUPPORT)

  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSION | RCC_CR_HSIKERON| RCC_CR_HSIASFS | RCC_CR_PLLON | RCC_CR_PLLSAI1ON | RCC_CR_PLLSAI2ON);
 8000dba:	4b27      	ldr	r3, [pc, #156]	; (8000e58 <HAL_RCC_DeInit+0x130>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	4926      	ldr	r1, [pc, #152]	; (8000e58 <HAL_RCC_DeInit+0x130>)
 8000dc0:	4b29      	ldr	r3, [pc, #164]	; (8000e68 <HAL_RCC_DeInit+0x140>)
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	600b      	str	r3, [r1, #0]

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Insure PLLRDY, PLLSAI1RDY and PLLSAI2RDY (if present) are reset */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8000dc6:	f7ff fc29 	bl	800061c <HAL_GetTick>
 8000dca:	6078      	str	r0, [r7, #4]

#if defined(RCC_PLLSAI2_SUPPORT)

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY) != 0U)
 8000dcc:	e008      	b.n	8000de0 <HAL_RCC_DeInit+0xb8>

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)

#endif
  {
    if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000dce:	f7ff fc25 	bl	800061c <HAL_GetTick>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d901      	bls.n	8000de0 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	e036      	b.n	8000e4e <HAL_RCC_DeInit+0x126>
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY) != 0U)
 8000de0:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <HAL_RCC_DeInit+0x130>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f003 5328 	and.w	r3, r3, #704643072	; 0x2a000000
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d1f0      	bne.n	8000dce <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Reset PLLCFGR register */
  CLEAR_REG(RCC->PLLCFGR);
 8000dec:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <HAL_RCC_DeInit+0x130>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN_4 );
 8000df2:	4b19      	ldr	r3, [pc, #100]	; (8000e58 <HAL_RCC_DeInit+0x130>)
 8000df4:	68db      	ldr	r3, [r3, #12]
 8000df6:	4a18      	ldr	r2, [pc, #96]	; (8000e58 <HAL_RCC_DeInit+0x130>)
 8000df8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dfc:	60d3      	str	r3, [r2, #12]

#if defined(RCC_PLLSAI1_SUPPORT)

  /* Reset PLLSAI1CFGR register */
  CLEAR_REG(RCC->PLLSAI1CFGR);
 8000dfe:	4b16      	ldr	r3, [pc, #88]	; (8000e58 <HAL_RCC_DeInit+0x130>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->PLLSAI1CFGR,  RCC_PLLSAI1CFGR_PLLSAI1N_4 );
 8000e04:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <HAL_RCC_DeInit+0x130>)
 8000e06:	691b      	ldr	r3, [r3, #16]
 8000e08:	4a13      	ldr	r2, [pc, #76]	; (8000e58 <HAL_RCC_DeInit+0x130>)
 8000e0a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e0e:	6113      	str	r3, [r2, #16]
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(RCC_PLLSAI2_SUPPORT)

  /* Reset PLLSAI2CFGR register */
  CLEAR_REG(RCC->PLLSAI2CFGR);
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <HAL_RCC_DeInit+0x130>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	615a      	str	r2, [r3, #20]
  SET_BIT(RCC->PLLSAI2CFGR,  RCC_PLLSAI2CFGR_PLLSAI2N_4 );
 8000e16:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <HAL_RCC_DeInit+0x130>)
 8000e18:	695b      	ldr	r3, [r3, #20]
 8000e1a:	4a0f      	ldr	r2, [pc, #60]	; (8000e58 <HAL_RCC_DeInit+0x130>)
 8000e1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e20:	6153      	str	r3, [r2, #20]

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8000e22:	4b0d      	ldr	r3, [pc, #52]	; (8000e58 <HAL_RCC_DeInit+0x130>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a0c      	ldr	r2, [pc, #48]	; (8000e58 <HAL_RCC_DeInit+0x130>)
 8000e28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e2c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <HAL_RCC_DeInit+0x130>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	619a      	str	r2, [r3, #24]

  /* Clear all interrupt flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 8000e34:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <HAL_RCC_DeInit+0x130>)
 8000e36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e3a:	621a      	str	r2, [r3, #32]

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <HAL_RCC_DeInit+0x130>)
 8000e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e42:	4a05      	ldr	r2, [pc, #20]	; (8000e58 <HAL_RCC_DeInit+0x130>)
 8000e44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  return HAL_OK;
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	20000008 	.word	0x20000008
 8000e60:	003d0900 	.word	0x003d0900
 8000e64:	20000000 	.word	0x20000000
 8000e68:	eafef4ff 	.word	0xeafef4ff

08000e6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b088      	sub	sp, #32
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d101      	bne.n	8000e7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e3db      	b.n	8001636 <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e7e:	4ba4      	ldr	r3, [pc, #656]	; (8001110 <HAL_RCC_OscConfig+0x2a4>)
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	f003 030c 	and.w	r3, r3, #12
 8000e86:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e88:	4ba1      	ldr	r3, [pc, #644]	; (8001110 <HAL_RCC_OscConfig+0x2a4>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	f003 0303 	and.w	r3, r3, #3
 8000e90:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f003 0310 	and.w	r3, r3, #16
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	f000 80e1 	beq.w	8001062 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d007      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x4a>
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	2b0c      	cmp	r3, #12
 8000eaa:	f040 8088 	bne.w	8000fbe <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	f040 8084 	bne.w	8000fbe <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000eb6:	4b96      	ldr	r3, [pc, #600]	; (8001110 <HAL_RCC_OscConfig+0x2a4>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d005      	beq.n	8000ece <HAL_RCC_OscConfig+0x62>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	699b      	ldr	r3, [r3, #24]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d101      	bne.n	8000ece <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e3b3      	b.n	8001636 <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6a1a      	ldr	r2, [r3, #32]
 8000ed2:	4b8f      	ldr	r3, [pc, #572]	; (8001110 <HAL_RCC_OscConfig+0x2a4>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f003 0308 	and.w	r3, r3, #8
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d004      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x7c>
 8000ede:	4b8c      	ldr	r3, [pc, #560]	; (8001110 <HAL_RCC_OscConfig+0x2a4>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ee6:	e005      	b.n	8000ef4 <HAL_RCC_OscConfig+0x88>
 8000ee8:	4b89      	ldr	r3, [pc, #548]	; (8001110 <HAL_RCC_OscConfig+0x2a4>)
 8000eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000eee:	091b      	lsrs	r3, r3, #4
 8000ef0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d223      	bcs.n	8000f40 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6a1b      	ldr	r3, [r3, #32]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f000 fd47 	bl	8001990 <RCC_SetFlashLatencyFromMSIRange>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e394      	b.n	8001636 <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f0c:	4b80      	ldr	r3, [pc, #512]	; (8001110 <HAL_RCC_OscConfig+0x2a4>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a7f      	ldr	r2, [pc, #508]	; (8001110 <HAL_RCC_OscConfig+0x2a4>)
 8000f12:	f043 0308 	orr.w	r3, r3, #8
 8000f16:	6013      	str	r3, [r2, #0]
 8000f18:	4b7d      	ldr	r3, [pc, #500]	; (8001110 <HAL_RCC_OscConfig+0x2a4>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6a1b      	ldr	r3, [r3, #32]
 8000f24:	497a      	ldr	r1, [pc, #488]	; (8001110 <HAL_RCC_OscConfig+0x2a4>)
 8000f26:	4313      	orrs	r3, r2
 8000f28:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f2a:	4b79      	ldr	r3, [pc, #484]	; (8001110 <HAL_RCC_OscConfig+0x2a4>)
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	021b      	lsls	r3, r3, #8
 8000f38:	4975      	ldr	r1, [pc, #468]	; (8001110 <HAL_RCC_OscConfig+0x2a4>)
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	604b      	str	r3, [r1, #4]
 8000f3e:	e022      	b.n	8000f86 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f40:	4b73      	ldr	r3, [pc, #460]	; (8001110 <HAL_RCC_OscConfig+0x2a4>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a72      	ldr	r2, [pc, #456]	; (8001110 <HAL_RCC_OscConfig+0x2a4>)
 8000f46:	f043 0308 	orr.w	r3, r3, #8
 8000f4a:	6013      	str	r3, [r2, #0]
 8000f4c:	4b70      	ldr	r3, [pc, #448]	; (8001110 <HAL_RCC_OscConfig+0x2a4>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6a1b      	ldr	r3, [r3, #32]
 8000f58:	496d      	ldr	r1, [pc, #436]	; (8001110 <HAL_RCC_OscConfig+0x2a4>)
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f5e:	4b6c      	ldr	r3, [pc, #432]	; (8001110 <HAL_RCC_OscConfig+0x2a4>)
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	021b      	lsls	r3, r3, #8
 8000f6c:	4968      	ldr	r1, [pc, #416]	; (8001110 <HAL_RCC_OscConfig+0x2a4>)
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6a1b      	ldr	r3, [r3, #32]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 fd0a 	bl	8001990 <RCC_SetFlashLatencyFromMSIRange>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e357      	b.n	8001636 <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000f86:	f000 fc41 	bl	800180c <HAL_RCC_GetSysClockFreq>
 8000f8a:	4601      	mov	r1, r0
 8000f8c:	4b60      	ldr	r3, [pc, #384]	; (8001110 <HAL_RCC_OscConfig+0x2a4>)
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	091b      	lsrs	r3, r3, #4
 8000f92:	f003 030f 	and.w	r3, r3, #15
 8000f96:	4a5f      	ldr	r2, [pc, #380]	; (8001114 <HAL_RCC_OscConfig+0x2a8>)
 8000f98:	5cd3      	ldrb	r3, [r2, r3]
 8000f9a:	f003 031f 	and.w	r3, r3, #31
 8000f9e:	fa21 f303 	lsr.w	r3, r1, r3
 8000fa2:	4a5d      	ldr	r2, [pc, #372]	; (8001118 <HAL_RCC_OscConfig+0x2ac>)
 8000fa4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000fa6:	4b5d      	ldr	r3, [pc, #372]	; (800111c <HAL_RCC_OscConfig+0x2b0>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff faea 	bl	8000584 <HAL_InitTick>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d052      	beq.n	8001060 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
 8000fbc:	e33b      	b.n	8001636 <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	699b      	ldr	r3, [r3, #24]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d032      	beq.n	800102c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000fc6:	4b52      	ldr	r3, [pc, #328]	; (8001110 <HAL_RCC_OscConfig+0x2a4>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a51      	ldr	r2, [pc, #324]	; (8001110 <HAL_RCC_OscConfig+0x2a4>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000fd2:	f7ff fb23 	bl	800061c <HAL_GetTick>
 8000fd6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000fd8:	e008      	b.n	8000fec <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fda:	f7ff fb1f 	bl	800061c <HAL_GetTick>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d901      	bls.n	8000fec <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e324      	b.n	8001636 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000fec:	4b48      	ldr	r3, [pc, #288]	; (8001110 <HAL_RCC_OscConfig+0x2a4>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f003 0302 	and.w	r3, r3, #2
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d0f0      	beq.n	8000fda <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ff8:	4b45      	ldr	r3, [pc, #276]	; (8001110 <HAL_RCC_OscConfig+0x2a4>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a44      	ldr	r2, [pc, #272]	; (8001110 <HAL_RCC_OscConfig+0x2a4>)
 8000ffe:	f043 0308 	orr.w	r3, r3, #8
 8001002:	6013      	str	r3, [r2, #0]
 8001004:	4b42      	ldr	r3, [pc, #264]	; (8001110 <HAL_RCC_OscConfig+0x2a4>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6a1b      	ldr	r3, [r3, #32]
 8001010:	493f      	ldr	r1, [pc, #252]	; (8001110 <HAL_RCC_OscConfig+0x2a4>)
 8001012:	4313      	orrs	r3, r2
 8001014:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001016:	4b3e      	ldr	r3, [pc, #248]	; (8001110 <HAL_RCC_OscConfig+0x2a4>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	69db      	ldr	r3, [r3, #28]
 8001022:	021b      	lsls	r3, r3, #8
 8001024:	493a      	ldr	r1, [pc, #232]	; (8001110 <HAL_RCC_OscConfig+0x2a4>)
 8001026:	4313      	orrs	r3, r2
 8001028:	604b      	str	r3, [r1, #4]
 800102a:	e01a      	b.n	8001062 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800102c:	4b38      	ldr	r3, [pc, #224]	; (8001110 <HAL_RCC_OscConfig+0x2a4>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a37      	ldr	r2, [pc, #220]	; (8001110 <HAL_RCC_OscConfig+0x2a4>)
 8001032:	f023 0301 	bic.w	r3, r3, #1
 8001036:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001038:	f7ff faf0 	bl	800061c <HAL_GetTick>
 800103c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800103e:	e008      	b.n	8001052 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001040:	f7ff faec 	bl	800061c <HAL_GetTick>
 8001044:	4602      	mov	r2, r0
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	2b02      	cmp	r3, #2
 800104c:	d901      	bls.n	8001052 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800104e:	2303      	movs	r3, #3
 8001050:	e2f1      	b.n	8001636 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001052:	4b2f      	ldr	r3, [pc, #188]	; (8001110 <HAL_RCC_OscConfig+0x2a4>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	2b00      	cmp	r3, #0
 800105c:	d1f0      	bne.n	8001040 <HAL_RCC_OscConfig+0x1d4>
 800105e:	e000      	b.n	8001062 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001060:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	2b00      	cmp	r3, #0
 800106c:	d074      	beq.n	8001158 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	2b08      	cmp	r3, #8
 8001072:	d005      	beq.n	8001080 <HAL_RCC_OscConfig+0x214>
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	2b0c      	cmp	r3, #12
 8001078:	d10e      	bne.n	8001098 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	2b03      	cmp	r3, #3
 800107e:	d10b      	bne.n	8001098 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001080:	4b23      	ldr	r3, [pc, #140]	; (8001110 <HAL_RCC_OscConfig+0x2a4>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d064      	beq.n	8001156 <HAL_RCC_OscConfig+0x2ea>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d160      	bne.n	8001156 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e2ce      	b.n	8001636 <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010a0:	d106      	bne.n	80010b0 <HAL_RCC_OscConfig+0x244>
 80010a2:	4b1b      	ldr	r3, [pc, #108]	; (8001110 <HAL_RCC_OscConfig+0x2a4>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a1a      	ldr	r2, [pc, #104]	; (8001110 <HAL_RCC_OscConfig+0x2a4>)
 80010a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ac:	6013      	str	r3, [r2, #0]
 80010ae:	e01d      	b.n	80010ec <HAL_RCC_OscConfig+0x280>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010b8:	d10c      	bne.n	80010d4 <HAL_RCC_OscConfig+0x268>
 80010ba:	4b15      	ldr	r3, [pc, #84]	; (8001110 <HAL_RCC_OscConfig+0x2a4>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a14      	ldr	r2, [pc, #80]	; (8001110 <HAL_RCC_OscConfig+0x2a4>)
 80010c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010c4:	6013      	str	r3, [r2, #0]
 80010c6:	4b12      	ldr	r3, [pc, #72]	; (8001110 <HAL_RCC_OscConfig+0x2a4>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a11      	ldr	r2, [pc, #68]	; (8001110 <HAL_RCC_OscConfig+0x2a4>)
 80010cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d0:	6013      	str	r3, [r2, #0]
 80010d2:	e00b      	b.n	80010ec <HAL_RCC_OscConfig+0x280>
 80010d4:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <HAL_RCC_OscConfig+0x2a4>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a0d      	ldr	r2, [pc, #52]	; (8001110 <HAL_RCC_OscConfig+0x2a4>)
 80010da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010de:	6013      	str	r3, [r2, #0]
 80010e0:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <HAL_RCC_OscConfig+0x2a4>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <HAL_RCC_OscConfig+0x2a4>)
 80010e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d01c      	beq.n	800112e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f4:	f7ff fa92 	bl	800061c <HAL_GetTick>
 80010f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010fa:	e011      	b.n	8001120 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010fc:	f7ff fa8e 	bl	800061c <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b64      	cmp	r3, #100	; 0x64
 8001108:	d90a      	bls.n	8001120 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e293      	b.n	8001636 <HAL_RCC_OscConfig+0x7ca>
 800110e:	bf00      	nop
 8001110:	40021000 	.word	0x40021000
 8001114:	08004124 	.word	0x08004124
 8001118:	20000008 	.word	0x20000008
 800111c:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001120:	4bae      	ldr	r3, [pc, #696]	; (80013dc <HAL_RCC_OscConfig+0x570>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d0e7      	beq.n	80010fc <HAL_RCC_OscConfig+0x290>
 800112c:	e014      	b.n	8001158 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800112e:	f7ff fa75 	bl	800061c <HAL_GetTick>
 8001132:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001134:	e008      	b.n	8001148 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001136:	f7ff fa71 	bl	800061c <HAL_GetTick>
 800113a:	4602      	mov	r2, r0
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	2b64      	cmp	r3, #100	; 0x64
 8001142:	d901      	bls.n	8001148 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8001144:	2303      	movs	r3, #3
 8001146:	e276      	b.n	8001636 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001148:	4ba4      	ldr	r3, [pc, #656]	; (80013dc <HAL_RCC_OscConfig+0x570>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d1f0      	bne.n	8001136 <HAL_RCC_OscConfig+0x2ca>
 8001154:	e000      	b.n	8001158 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001156:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0302 	and.w	r3, r3, #2
 8001160:	2b00      	cmp	r3, #0
 8001162:	d060      	beq.n	8001226 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	2b04      	cmp	r3, #4
 8001168:	d005      	beq.n	8001176 <HAL_RCC_OscConfig+0x30a>
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	2b0c      	cmp	r3, #12
 800116e:	d119      	bne.n	80011a4 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	2b02      	cmp	r3, #2
 8001174:	d116      	bne.n	80011a4 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001176:	4b99      	ldr	r3, [pc, #612]	; (80013dc <HAL_RCC_OscConfig+0x570>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800117e:	2b00      	cmp	r3, #0
 8001180:	d005      	beq.n	800118e <HAL_RCC_OscConfig+0x322>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d101      	bne.n	800118e <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e253      	b.n	8001636 <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800118e:	4b93      	ldr	r3, [pc, #588]	; (80013dc <HAL_RCC_OscConfig+0x570>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	691b      	ldr	r3, [r3, #16]
 800119a:	061b      	lsls	r3, r3, #24
 800119c:	498f      	ldr	r1, [pc, #572]	; (80013dc <HAL_RCC_OscConfig+0x570>)
 800119e:	4313      	orrs	r3, r2
 80011a0:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011a2:	e040      	b.n	8001226 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d023      	beq.n	80011f4 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011ac:	4b8b      	ldr	r3, [pc, #556]	; (80013dc <HAL_RCC_OscConfig+0x570>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a8a      	ldr	r2, [pc, #552]	; (80013dc <HAL_RCC_OscConfig+0x570>)
 80011b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011b8:	f7ff fa30 	bl	800061c <HAL_GetTick>
 80011bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011be:	e008      	b.n	80011d2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011c0:	f7ff fa2c 	bl	800061c <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e231      	b.n	8001636 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011d2:	4b82      	ldr	r3, [pc, #520]	; (80013dc <HAL_RCC_OscConfig+0x570>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d0f0      	beq.n	80011c0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011de:	4b7f      	ldr	r3, [pc, #508]	; (80013dc <HAL_RCC_OscConfig+0x570>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	691b      	ldr	r3, [r3, #16]
 80011ea:	061b      	lsls	r3, r3, #24
 80011ec:	497b      	ldr	r1, [pc, #492]	; (80013dc <HAL_RCC_OscConfig+0x570>)
 80011ee:	4313      	orrs	r3, r2
 80011f0:	604b      	str	r3, [r1, #4]
 80011f2:	e018      	b.n	8001226 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011f4:	4b79      	ldr	r3, [pc, #484]	; (80013dc <HAL_RCC_OscConfig+0x570>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a78      	ldr	r2, [pc, #480]	; (80013dc <HAL_RCC_OscConfig+0x570>)
 80011fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001200:	f7ff fa0c 	bl	800061c <HAL_GetTick>
 8001204:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001206:	e008      	b.n	800121a <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001208:	f7ff fa08 	bl	800061c <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2b02      	cmp	r3, #2
 8001214:	d901      	bls.n	800121a <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e20d      	b.n	8001636 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800121a:	4b70      	ldr	r3, [pc, #448]	; (80013dc <HAL_RCC_OscConfig+0x570>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001222:	2b00      	cmp	r3, #0
 8001224:	d1f0      	bne.n	8001208 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0308 	and.w	r3, r3, #8
 800122e:	2b00      	cmp	r3, #0
 8001230:	d03c      	beq.n	80012ac <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d01c      	beq.n	8001274 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800123a:	4b68      	ldr	r3, [pc, #416]	; (80013dc <HAL_RCC_OscConfig+0x570>)
 800123c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001240:	4a66      	ldr	r2, [pc, #408]	; (80013dc <HAL_RCC_OscConfig+0x570>)
 8001242:	f043 0301 	orr.w	r3, r3, #1
 8001246:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800124a:	f7ff f9e7 	bl	800061c <HAL_GetTick>
 800124e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001250:	e008      	b.n	8001264 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001252:	f7ff f9e3 	bl	800061c <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	2b02      	cmp	r3, #2
 800125e:	d901      	bls.n	8001264 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	e1e8      	b.n	8001636 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001264:	4b5d      	ldr	r3, [pc, #372]	; (80013dc <HAL_RCC_OscConfig+0x570>)
 8001266:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d0ef      	beq.n	8001252 <HAL_RCC_OscConfig+0x3e6>
 8001272:	e01b      	b.n	80012ac <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001274:	4b59      	ldr	r3, [pc, #356]	; (80013dc <HAL_RCC_OscConfig+0x570>)
 8001276:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800127a:	4a58      	ldr	r2, [pc, #352]	; (80013dc <HAL_RCC_OscConfig+0x570>)
 800127c:	f023 0301 	bic.w	r3, r3, #1
 8001280:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001284:	f7ff f9ca 	bl	800061c <HAL_GetTick>
 8001288:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800128a:	e008      	b.n	800129e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800128c:	f7ff f9c6 	bl	800061c <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b02      	cmp	r3, #2
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e1cb      	b.n	8001636 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800129e:	4b4f      	ldr	r3, [pc, #316]	; (80013dc <HAL_RCC_OscConfig+0x570>)
 80012a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d1ef      	bne.n	800128c <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0304 	and.w	r3, r3, #4
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	f000 80a5 	beq.w	8001404 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ba:	2300      	movs	r3, #0
 80012bc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80012be:	4b47      	ldr	r3, [pc, #284]	; (80013dc <HAL_RCC_OscConfig+0x570>)
 80012c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d10d      	bne.n	80012e6 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012ca:	4b44      	ldr	r3, [pc, #272]	; (80013dc <HAL_RCC_OscConfig+0x570>)
 80012cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ce:	4a43      	ldr	r2, [pc, #268]	; (80013dc <HAL_RCC_OscConfig+0x570>)
 80012d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d4:	6593      	str	r3, [r2, #88]	; 0x58
 80012d6:	4b41      	ldr	r3, [pc, #260]	; (80013dc <HAL_RCC_OscConfig+0x570>)
 80012d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012de:	60bb      	str	r3, [r7, #8]
 80012e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012e2:	2301      	movs	r3, #1
 80012e4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012e6:	4b3e      	ldr	r3, [pc, #248]	; (80013e0 <HAL_RCC_OscConfig+0x574>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d118      	bne.n	8001324 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012f2:	4b3b      	ldr	r3, [pc, #236]	; (80013e0 <HAL_RCC_OscConfig+0x574>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a3a      	ldr	r2, [pc, #232]	; (80013e0 <HAL_RCC_OscConfig+0x574>)
 80012f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012fe:	f7ff f98d 	bl	800061c <HAL_GetTick>
 8001302:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001304:	e008      	b.n	8001318 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001306:	f7ff f989 	bl	800061c <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e18e      	b.n	8001636 <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001318:	4b31      	ldr	r3, [pc, #196]	; (80013e0 <HAL_RCC_OscConfig+0x574>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001320:	2b00      	cmp	r3, #0
 8001322:	d0f0      	beq.n	8001306 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d108      	bne.n	800133e <HAL_RCC_OscConfig+0x4d2>
 800132c:	4b2b      	ldr	r3, [pc, #172]	; (80013dc <HAL_RCC_OscConfig+0x570>)
 800132e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001332:	4a2a      	ldr	r2, [pc, #168]	; (80013dc <HAL_RCC_OscConfig+0x570>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800133c:	e024      	b.n	8001388 <HAL_RCC_OscConfig+0x51c>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	2b05      	cmp	r3, #5
 8001344:	d110      	bne.n	8001368 <HAL_RCC_OscConfig+0x4fc>
 8001346:	4b25      	ldr	r3, [pc, #148]	; (80013dc <HAL_RCC_OscConfig+0x570>)
 8001348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800134c:	4a23      	ldr	r2, [pc, #140]	; (80013dc <HAL_RCC_OscConfig+0x570>)
 800134e:	f043 0304 	orr.w	r3, r3, #4
 8001352:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001356:	4b21      	ldr	r3, [pc, #132]	; (80013dc <HAL_RCC_OscConfig+0x570>)
 8001358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800135c:	4a1f      	ldr	r2, [pc, #124]	; (80013dc <HAL_RCC_OscConfig+0x570>)
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001366:	e00f      	b.n	8001388 <HAL_RCC_OscConfig+0x51c>
 8001368:	4b1c      	ldr	r3, [pc, #112]	; (80013dc <HAL_RCC_OscConfig+0x570>)
 800136a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800136e:	4a1b      	ldr	r2, [pc, #108]	; (80013dc <HAL_RCC_OscConfig+0x570>)
 8001370:	f023 0301 	bic.w	r3, r3, #1
 8001374:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001378:	4b18      	ldr	r3, [pc, #96]	; (80013dc <HAL_RCC_OscConfig+0x570>)
 800137a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800137e:	4a17      	ldr	r2, [pc, #92]	; (80013dc <HAL_RCC_OscConfig+0x570>)
 8001380:	f023 0304 	bic.w	r3, r3, #4
 8001384:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d016      	beq.n	80013be <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001390:	f7ff f944 	bl	800061c <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001396:	e00a      	b.n	80013ae <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001398:	f7ff f940 	bl	800061c <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e143      	b.n	8001636 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013ae:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <HAL_RCC_OscConfig+0x570>)
 80013b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d0ed      	beq.n	8001398 <HAL_RCC_OscConfig+0x52c>
 80013bc:	e019      	b.n	80013f2 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013be:	f7ff f92d 	bl	800061c <HAL_GetTick>
 80013c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013c4:	e00e      	b.n	80013e4 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013c6:	f7ff f929 	bl	800061c <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d905      	bls.n	80013e4 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e12c      	b.n	8001636 <HAL_RCC_OscConfig+0x7ca>
 80013dc:	40021000 	.word	0x40021000
 80013e0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013e4:	4b96      	ldr	r3, [pc, #600]	; (8001640 <HAL_RCC_OscConfig+0x7d4>)
 80013e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1e9      	bne.n	80013c6 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013f2:	7ffb      	ldrb	r3, [r7, #31]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d105      	bne.n	8001404 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013f8:	4b91      	ldr	r3, [pc, #580]	; (8001640 <HAL_RCC_OscConfig+0x7d4>)
 80013fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013fc:	4a90      	ldr	r2, [pc, #576]	; (8001640 <HAL_RCC_OscConfig+0x7d4>)
 80013fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001402:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0320 	and.w	r3, r3, #32
 800140c:	2b00      	cmp	r3, #0
 800140e:	d03c      	beq.n	800148a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001414:	2b00      	cmp	r3, #0
 8001416:	d01c      	beq.n	8001452 <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001418:	4b89      	ldr	r3, [pc, #548]	; (8001640 <HAL_RCC_OscConfig+0x7d4>)
 800141a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800141e:	4a88      	ldr	r2, [pc, #544]	; (8001640 <HAL_RCC_OscConfig+0x7d4>)
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001428:	f7ff f8f8 	bl	800061c <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001430:	f7ff f8f4 	bl	800061c <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e0f9      	b.n	8001636 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001442:	4b7f      	ldr	r3, [pc, #508]	; (8001640 <HAL_RCC_OscConfig+0x7d4>)
 8001444:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d0ef      	beq.n	8001430 <HAL_RCC_OscConfig+0x5c4>
 8001450:	e01b      	b.n	800148a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001452:	4b7b      	ldr	r3, [pc, #492]	; (8001640 <HAL_RCC_OscConfig+0x7d4>)
 8001454:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001458:	4a79      	ldr	r2, [pc, #484]	; (8001640 <HAL_RCC_OscConfig+0x7d4>)
 800145a:	f023 0301 	bic.w	r3, r3, #1
 800145e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001462:	f7ff f8db 	bl	800061c <HAL_GetTick>
 8001466:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001468:	e008      	b.n	800147c <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800146a:	f7ff f8d7 	bl	800061c <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e0dc      	b.n	8001636 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800147c:	4b70      	ldr	r3, [pc, #448]	; (8001640 <HAL_RCC_OscConfig+0x7d4>)
 800147e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1ef      	bne.n	800146a <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800148e:	2b00      	cmp	r3, #0
 8001490:	f000 80d0 	beq.w	8001634 <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	2b0c      	cmp	r3, #12
 8001498:	f000 808d 	beq.w	80015b6 <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d15a      	bne.n	800155a <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a4:	4b66      	ldr	r3, [pc, #408]	; (8001640 <HAL_RCC_OscConfig+0x7d4>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a65      	ldr	r2, [pc, #404]	; (8001640 <HAL_RCC_OscConfig+0x7d4>)
 80014aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b0:	f7ff f8b4 	bl	800061c <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b8:	f7ff f8b0 	bl	800061c <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e0b5      	b.n	8001636 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014ca:	4b5d      	ldr	r3, [pc, #372]	; (8001640 <HAL_RCC_OscConfig+0x7d4>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f0      	bne.n	80014b8 <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014d6:	4b5a      	ldr	r3, [pc, #360]	; (8001640 <HAL_RCC_OscConfig+0x7d4>)
 80014d8:	68da      	ldr	r2, [r3, #12]
 80014da:	4b5a      	ldr	r3, [pc, #360]	; (8001644 <HAL_RCC_OscConfig+0x7d8>)
 80014dc:	4013      	ands	r3, r2
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80014e6:	3a01      	subs	r2, #1
 80014e8:	0112      	lsls	r2, r2, #4
 80014ea:	4311      	orrs	r1, r2
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80014f0:	0212      	lsls	r2, r2, #8
 80014f2:	4311      	orrs	r1, r2
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80014f8:	0852      	lsrs	r2, r2, #1
 80014fa:	3a01      	subs	r2, #1
 80014fc:	0552      	lsls	r2, r2, #21
 80014fe:	4311      	orrs	r1, r2
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001504:	0852      	lsrs	r2, r2, #1
 8001506:	3a01      	subs	r2, #1
 8001508:	0652      	lsls	r2, r2, #25
 800150a:	4311      	orrs	r1, r2
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001510:	06d2      	lsls	r2, r2, #27
 8001512:	430a      	orrs	r2, r1
 8001514:	494a      	ldr	r1, [pc, #296]	; (8001640 <HAL_RCC_OscConfig+0x7d4>)
 8001516:	4313      	orrs	r3, r2
 8001518:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800151a:	4b49      	ldr	r3, [pc, #292]	; (8001640 <HAL_RCC_OscConfig+0x7d4>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a48      	ldr	r2, [pc, #288]	; (8001640 <HAL_RCC_OscConfig+0x7d4>)
 8001520:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001524:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001526:	4b46      	ldr	r3, [pc, #280]	; (8001640 <HAL_RCC_OscConfig+0x7d4>)
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	4a45      	ldr	r2, [pc, #276]	; (8001640 <HAL_RCC_OscConfig+0x7d4>)
 800152c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001530:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001532:	f7ff f873 	bl	800061c <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800153a:	f7ff f86f 	bl	800061c <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e074      	b.n	8001636 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800154c:	4b3c      	ldr	r3, [pc, #240]	; (8001640 <HAL_RCC_OscConfig+0x7d4>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d0f0      	beq.n	800153a <HAL_RCC_OscConfig+0x6ce>
 8001558:	e06c      	b.n	8001634 <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800155a:	4b39      	ldr	r3, [pc, #228]	; (8001640 <HAL_RCC_OscConfig+0x7d4>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a38      	ldr	r2, [pc, #224]	; (8001640 <HAL_RCC_OscConfig+0x7d4>)
 8001560:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001564:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001566:	4b36      	ldr	r3, [pc, #216]	; (8001640 <HAL_RCC_OscConfig+0x7d4>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d105      	bne.n	800157e <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001572:	4b33      	ldr	r3, [pc, #204]	; (8001640 <HAL_RCC_OscConfig+0x7d4>)
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	4a32      	ldr	r2, [pc, #200]	; (8001640 <HAL_RCC_OscConfig+0x7d4>)
 8001578:	f023 0303 	bic.w	r3, r3, #3
 800157c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800157e:	4b30      	ldr	r3, [pc, #192]	; (8001640 <HAL_RCC_OscConfig+0x7d4>)
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	4a2f      	ldr	r2, [pc, #188]	; (8001640 <HAL_RCC_OscConfig+0x7d4>)
 8001584:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001588:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800158c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158e:	f7ff f845 	bl	800061c <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001596:	f7ff f841 	bl	800061c <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e046      	b.n	8001636 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015a8:	4b25      	ldr	r3, [pc, #148]	; (8001640 <HAL_RCC_OscConfig+0x7d4>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d1f0      	bne.n	8001596 <HAL_RCC_OscConfig+0x72a>
 80015b4:	e03e      	b.n	8001634 <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d101      	bne.n	80015c2 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e039      	b.n	8001636 <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80015c2:	4b1f      	ldr	r3, [pc, #124]	; (8001640 <HAL_RCC_OscConfig+0x7d4>)
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	f003 0203 	and.w	r2, r3, #3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d12c      	bne.n	8001630 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e0:	3b01      	subs	r3, #1
 80015e2:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d123      	bne.n	8001630 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015f2:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d11b      	bne.n	8001630 <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001602:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001604:	429a      	cmp	r2, r3
 8001606:	d113      	bne.n	8001630 <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001612:	085b      	lsrs	r3, r3, #1
 8001614:	3b01      	subs	r3, #1
 8001616:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001618:	429a      	cmp	r2, r3
 800161a:	d109      	bne.n	8001630 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	085b      	lsrs	r3, r3, #1
 8001628:	3b01      	subs	r3, #1
 800162a:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800162c:	429a      	cmp	r2, r3
 800162e:	d001      	beq.n	8001634 <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e000      	b.n	8001636 <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3720      	adds	r7, #32
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40021000 	.word	0x40021000
 8001644:	019d808c 	.word	0x019d808c

08001648 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d101      	bne.n	800165c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e0c8      	b.n	80017ee <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800165c:	4b66      	ldr	r3, [pc, #408]	; (80017f8 <HAL_RCC_ClockConfig+0x1b0>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0307 	and.w	r3, r3, #7
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	429a      	cmp	r2, r3
 8001668:	d910      	bls.n	800168c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800166a:	4b63      	ldr	r3, [pc, #396]	; (80017f8 <HAL_RCC_ClockConfig+0x1b0>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f023 0207 	bic.w	r2, r3, #7
 8001672:	4961      	ldr	r1, [pc, #388]	; (80017f8 <HAL_RCC_ClockConfig+0x1b0>)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	4313      	orrs	r3, r2
 8001678:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800167a:	4b5f      	ldr	r3, [pc, #380]	; (80017f8 <HAL_RCC_ClockConfig+0x1b0>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	429a      	cmp	r2, r3
 8001686:	d001      	beq.n	800168c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e0b0      	b.n	80017ee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	2b00      	cmp	r3, #0
 8001696:	d04c      	beq.n	8001732 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	2b03      	cmp	r3, #3
 800169e:	d107      	bne.n	80016b0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016a0:	4b56      	ldr	r3, [pc, #344]	; (80017fc <HAL_RCC_ClockConfig+0x1b4>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d121      	bne.n	80016f0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e09e      	b.n	80017ee <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d107      	bne.n	80016c8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016b8:	4b50      	ldr	r3, [pc, #320]	; (80017fc <HAL_RCC_ClockConfig+0x1b4>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d115      	bne.n	80016f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e092      	b.n	80017ee <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d107      	bne.n	80016e0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016d0:	4b4a      	ldr	r3, [pc, #296]	; (80017fc <HAL_RCC_ClockConfig+0x1b4>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d109      	bne.n	80016f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e086      	b.n	80017ee <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016e0:	4b46      	ldr	r3, [pc, #280]	; (80017fc <HAL_RCC_ClockConfig+0x1b4>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d101      	bne.n	80016f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e07e      	b.n	80017ee <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80016f0:	4b42      	ldr	r3, [pc, #264]	; (80017fc <HAL_RCC_ClockConfig+0x1b4>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f023 0203 	bic.w	r2, r3, #3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	493f      	ldr	r1, [pc, #252]	; (80017fc <HAL_RCC_ClockConfig+0x1b4>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001702:	f7fe ff8b 	bl	800061c <HAL_GetTick>
 8001706:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001708:	e00a      	b.n	8001720 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800170a:	f7fe ff87 	bl	800061c <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	f241 3288 	movw	r2, #5000	; 0x1388
 8001718:	4293      	cmp	r3, r2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e066      	b.n	80017ee <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001720:	4b36      	ldr	r3, [pc, #216]	; (80017fc <HAL_RCC_ClockConfig+0x1b4>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f003 020c 	and.w	r2, r3, #12
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	429a      	cmp	r2, r3
 8001730:	d1eb      	bne.n	800170a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d008      	beq.n	8001750 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800173e:	4b2f      	ldr	r3, [pc, #188]	; (80017fc <HAL_RCC_ClockConfig+0x1b4>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	492c      	ldr	r1, [pc, #176]	; (80017fc <HAL_RCC_ClockConfig+0x1b4>)
 800174c:	4313      	orrs	r3, r2
 800174e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001750:	4b29      	ldr	r3, [pc, #164]	; (80017f8 <HAL_RCC_ClockConfig+0x1b0>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	429a      	cmp	r2, r3
 800175c:	d210      	bcs.n	8001780 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175e:	4b26      	ldr	r3, [pc, #152]	; (80017f8 <HAL_RCC_ClockConfig+0x1b0>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f023 0207 	bic.w	r2, r3, #7
 8001766:	4924      	ldr	r1, [pc, #144]	; (80017f8 <HAL_RCC_ClockConfig+0x1b0>)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	4313      	orrs	r3, r2
 800176c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800176e:	4b22      	ldr	r3, [pc, #136]	; (80017f8 <HAL_RCC_ClockConfig+0x1b0>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	429a      	cmp	r2, r3
 800177a:	d001      	beq.n	8001780 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e036      	b.n	80017ee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	2b00      	cmp	r3, #0
 800178a:	d008      	beq.n	800179e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800178c:	4b1b      	ldr	r3, [pc, #108]	; (80017fc <HAL_RCC_ClockConfig+0x1b4>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	4918      	ldr	r1, [pc, #96]	; (80017fc <HAL_RCC_ClockConfig+0x1b4>)
 800179a:	4313      	orrs	r3, r2
 800179c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0308 	and.w	r3, r3, #8
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d009      	beq.n	80017be <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017aa:	4b14      	ldr	r3, [pc, #80]	; (80017fc <HAL_RCC_ClockConfig+0x1b4>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	4910      	ldr	r1, [pc, #64]	; (80017fc <HAL_RCC_ClockConfig+0x1b4>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017be:	f000 f825 	bl	800180c <HAL_RCC_GetSysClockFreq>
 80017c2:	4601      	mov	r1, r0
 80017c4:	4b0d      	ldr	r3, [pc, #52]	; (80017fc <HAL_RCC_ClockConfig+0x1b4>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	091b      	lsrs	r3, r3, #4
 80017ca:	f003 030f 	and.w	r3, r3, #15
 80017ce:	4a0c      	ldr	r2, [pc, #48]	; (8001800 <HAL_RCC_ClockConfig+0x1b8>)
 80017d0:	5cd3      	ldrb	r3, [r2, r3]
 80017d2:	f003 031f 	and.w	r3, r3, #31
 80017d6:	fa21 f303 	lsr.w	r3, r1, r3
 80017da:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80017dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80017de:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <HAL_RCC_ClockConfig+0x1c0>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7fe fece 	bl	8000584 <HAL_InitTick>
 80017e8:	4603      	mov	r3, r0
 80017ea:	72fb      	strb	r3, [r7, #11]

  return status;
 80017ec:	7afb      	ldrb	r3, [r7, #11]
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40022000 	.word	0x40022000
 80017fc:	40021000 	.word	0x40021000
 8001800:	08004124 	.word	0x08004124
 8001804:	20000008 	.word	0x20000008
 8001808:	20000000 	.word	0x20000000

0800180c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800180c:	b480      	push	{r7}
 800180e:	b089      	sub	sp, #36	; 0x24
 8001810:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
 8001816:	2300      	movs	r3, #0
 8001818:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800181a:	4b3d      	ldr	r3, [pc, #244]	; (8001910 <HAL_RCC_GetSysClockFreq+0x104>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f003 030c 	and.w	r3, r3, #12
 8001822:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001824:	4b3a      	ldr	r3, [pc, #232]	; (8001910 <HAL_RCC_GetSysClockFreq+0x104>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	f003 0303 	and.w	r3, r3, #3
 800182c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d005      	beq.n	8001840 <HAL_RCC_GetSysClockFreq+0x34>
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	2b0c      	cmp	r3, #12
 8001838:	d121      	bne.n	800187e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d11e      	bne.n	800187e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001840:	4b33      	ldr	r3, [pc, #204]	; (8001910 <HAL_RCC_GetSysClockFreq+0x104>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0308 	and.w	r3, r3, #8
 8001848:	2b00      	cmp	r3, #0
 800184a:	d107      	bne.n	800185c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800184c:	4b30      	ldr	r3, [pc, #192]	; (8001910 <HAL_RCC_GetSysClockFreq+0x104>)
 800184e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001852:	0a1b      	lsrs	r3, r3, #8
 8001854:	f003 030f 	and.w	r3, r3, #15
 8001858:	61fb      	str	r3, [r7, #28]
 800185a:	e005      	b.n	8001868 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800185c:	4b2c      	ldr	r3, [pc, #176]	; (8001910 <HAL_RCC_GetSysClockFreq+0x104>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	091b      	lsrs	r3, r3, #4
 8001862:	f003 030f 	and.w	r3, r3, #15
 8001866:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001868:	4a2a      	ldr	r2, [pc, #168]	; (8001914 <HAL_RCC_GetSysClockFreq+0x108>)
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001870:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d10d      	bne.n	8001894 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800187c:	e00a      	b.n	8001894 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	2b04      	cmp	r3, #4
 8001882:	d102      	bne.n	800188a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001884:	4b24      	ldr	r3, [pc, #144]	; (8001918 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001886:	61bb      	str	r3, [r7, #24]
 8001888:	e004      	b.n	8001894 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	2b08      	cmp	r3, #8
 800188e:	d101      	bne.n	8001894 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001890:	4b22      	ldr	r3, [pc, #136]	; (800191c <HAL_RCC_GetSysClockFreq+0x110>)
 8001892:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	2b0c      	cmp	r3, #12
 8001898:	d133      	bne.n	8001902 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800189a:	4b1d      	ldr	r3, [pc, #116]	; (8001910 <HAL_RCC_GetSysClockFreq+0x104>)
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	f003 0303 	and.w	r3, r3, #3
 80018a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d002      	beq.n	80018b0 <HAL_RCC_GetSysClockFreq+0xa4>
 80018aa:	2b03      	cmp	r3, #3
 80018ac:	d003      	beq.n	80018b6 <HAL_RCC_GetSysClockFreq+0xaa>
 80018ae:	e005      	b.n	80018bc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80018b0:	4b19      	ldr	r3, [pc, #100]	; (8001918 <HAL_RCC_GetSysClockFreq+0x10c>)
 80018b2:	617b      	str	r3, [r7, #20]
      break;
 80018b4:	e005      	b.n	80018c2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80018b6:	4b19      	ldr	r3, [pc, #100]	; (800191c <HAL_RCC_GetSysClockFreq+0x110>)
 80018b8:	617b      	str	r3, [r7, #20]
      break;
 80018ba:	e002      	b.n	80018c2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	617b      	str	r3, [r7, #20]
      break;
 80018c0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018c2:	4b13      	ldr	r3, [pc, #76]	; (8001910 <HAL_RCC_GetSysClockFreq+0x104>)
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	091b      	lsrs	r3, r3, #4
 80018c8:	f003 0307 	and.w	r3, r3, #7
 80018cc:	3301      	adds	r3, #1
 80018ce:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80018d0:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <HAL_RCC_GetSysClockFreq+0x104>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	0a1b      	lsrs	r3, r3, #8
 80018d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	fb02 f203 	mul.w	r2, r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80018e8:	4b09      	ldr	r3, [pc, #36]	; (8001910 <HAL_RCC_GetSysClockFreq+0x104>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	0e5b      	lsrs	r3, r3, #25
 80018ee:	f003 0303 	and.w	r3, r3, #3
 80018f2:	3301      	adds	r3, #1
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001900:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001902:	69bb      	ldr	r3, [r7, #24]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3724      	adds	r7, #36	; 0x24
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	40021000 	.word	0x40021000
 8001914:	0800413c 	.word	0x0800413c
 8001918:	00f42400 	.word	0x00f42400
 800191c:	007a1200 	.word	0x007a1200

08001920 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001924:	4b03      	ldr	r3, [pc, #12]	; (8001934 <HAL_RCC_GetHCLKFreq+0x14>)
 8001926:	681b      	ldr	r3, [r3, #0]
}
 8001928:	4618      	mov	r0, r3
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	20000008 	.word	0x20000008

08001938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800193c:	f7ff fff0 	bl	8001920 <HAL_RCC_GetHCLKFreq>
 8001940:	4601      	mov	r1, r0
 8001942:	4b06      	ldr	r3, [pc, #24]	; (800195c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	0a1b      	lsrs	r3, r3, #8
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	4a04      	ldr	r2, [pc, #16]	; (8001960 <HAL_RCC_GetPCLK1Freq+0x28>)
 800194e:	5cd3      	ldrb	r3, [r2, r3]
 8001950:	f003 031f 	and.w	r3, r3, #31
 8001954:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001958:	4618      	mov	r0, r3
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40021000 	.word	0x40021000
 8001960:	08004134 	.word	0x08004134

08001964 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001968:	f7ff ffda 	bl	8001920 <HAL_RCC_GetHCLKFreq>
 800196c:	4601      	mov	r1, r0
 800196e:	4b06      	ldr	r3, [pc, #24]	; (8001988 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	0adb      	lsrs	r3, r3, #11
 8001974:	f003 0307 	and.w	r3, r3, #7
 8001978:	4a04      	ldr	r2, [pc, #16]	; (800198c <HAL_RCC_GetPCLK2Freq+0x28>)
 800197a:	5cd3      	ldrb	r3, [r2, r3]
 800197c:	f003 031f 	and.w	r3, r3, #31
 8001980:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001984:	4618      	mov	r0, r3
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40021000 	.word	0x40021000
 800198c:	08004134 	.word	0x08004134

08001990 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001998:	2300      	movs	r3, #0
 800199a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800199c:	4b2a      	ldr	r3, [pc, #168]	; (8001a48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800199e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d003      	beq.n	80019b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80019a8:	f7ff f95a 	bl	8000c60 <HAL_PWREx_GetVoltageRange>
 80019ac:	6178      	str	r0, [r7, #20]
 80019ae:	e014      	b.n	80019da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80019b0:	4b25      	ldr	r3, [pc, #148]	; (8001a48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b4:	4a24      	ldr	r2, [pc, #144]	; (8001a48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ba:	6593      	str	r3, [r2, #88]	; 0x58
 80019bc:	4b22      	ldr	r3, [pc, #136]	; (8001a48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80019c8:	f7ff f94a 	bl	8000c60 <HAL_PWREx_GetVoltageRange>
 80019cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80019ce:	4b1e      	ldr	r3, [pc, #120]	; (8001a48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d2:	4a1d      	ldr	r2, [pc, #116]	; (8001a48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019e0:	d10b      	bne.n	80019fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2b80      	cmp	r3, #128	; 0x80
 80019e6:	d919      	bls.n	8001a1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2ba0      	cmp	r3, #160	; 0xa0
 80019ec:	d902      	bls.n	80019f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019ee:	2302      	movs	r3, #2
 80019f0:	613b      	str	r3, [r7, #16]
 80019f2:	e013      	b.n	8001a1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019f4:	2301      	movs	r3, #1
 80019f6:	613b      	str	r3, [r7, #16]
 80019f8:	e010      	b.n	8001a1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b80      	cmp	r3, #128	; 0x80
 80019fe:	d902      	bls.n	8001a06 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001a00:	2303      	movs	r3, #3
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	e00a      	b.n	8001a1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b80      	cmp	r3, #128	; 0x80
 8001a0a:	d102      	bne.n	8001a12 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	613b      	str	r3, [r7, #16]
 8001a10:	e004      	b.n	8001a1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b70      	cmp	r3, #112	; 0x70
 8001a16:	d101      	bne.n	8001a1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a18:	2301      	movs	r3, #1
 8001a1a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a1c:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f023 0207 	bic.w	r2, r3, #7
 8001a24:	4909      	ldr	r1, [pc, #36]	; (8001a4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001a2c:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0307 	and.w	r3, r3, #7
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d001      	beq.n	8001a3e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e000      	b.n	8001a40 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3718      	adds	r7, #24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40022000 	.word	0x40022000

08001a50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001a58:	2300      	movs	r3, #0
 8001a5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d03f      	beq.n	8001aec <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a74:	d01c      	beq.n	8001ab0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001a76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a7a:	d802      	bhi.n	8001a82 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d00e      	beq.n	8001a9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001a80:	e01f      	b.n	8001ac2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001a82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001a86:	d003      	beq.n	8001a90 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001a88:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001a8c:	d01c      	beq.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8001a8e:	e018      	b.n	8001ac2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001a90:	4b85      	ldr	r3, [pc, #532]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	4a84      	ldr	r2, [pc, #528]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a9a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001a9c:	e015      	b.n	8001aca <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f000 facb 	bl	8002040 <RCCEx_PLLSAI1_Config>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001aae:	e00c      	b.n	8001aca <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3320      	adds	r3, #32
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f000 fbb2 	bl	8002220 <RCCEx_PLLSAI2_Config>
 8001abc:	4603      	mov	r3, r0
 8001abe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ac0:	e003      	b.n	8001aca <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	74fb      	strb	r3, [r7, #19]
      break;
 8001ac6:	e000      	b.n	8001aca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8001ac8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001aca:	7cfb      	ldrb	r3, [r7, #19]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d10b      	bne.n	8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ad0:	4b75      	ldr	r3, [pc, #468]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ad6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ade:	4972      	ldr	r1, [pc, #456]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001ae6:	e001      	b.n	8001aec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ae8:	7cfb      	ldrb	r3, [r7, #19]
 8001aea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d03f      	beq.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001afc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b00:	d01c      	beq.n	8001b3c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8001b02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b06:	d802      	bhi.n	8001b0e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d00e      	beq.n	8001b2a <HAL_RCCEx_PeriphCLKConfig+0xda>
 8001b0c:	e01f      	b.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8001b0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b12:	d003      	beq.n	8001b1c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001b14:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001b18:	d01c      	beq.n	8001b54 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8001b1a:	e018      	b.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001b1c:	4b62      	ldr	r3, [pc, #392]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	4a61      	ldr	r2, [pc, #388]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b26:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001b28:	e015      	b.n	8001b56 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	2100      	movs	r1, #0
 8001b30:	4618      	mov	r0, r3
 8001b32:	f000 fa85 	bl	8002040 <RCCEx_PLLSAI1_Config>
 8001b36:	4603      	mov	r3, r0
 8001b38:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001b3a:	e00c      	b.n	8001b56 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3320      	adds	r3, #32
 8001b40:	2100      	movs	r1, #0
 8001b42:	4618      	mov	r0, r3
 8001b44:	f000 fb6c 	bl	8002220 <RCCEx_PLLSAI2_Config>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001b4c:	e003      	b.n	8001b56 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	74fb      	strb	r3, [r7, #19]
      break;
 8001b52:	e000      	b.n	8001b56 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8001b54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001b56:	7cfb      	ldrb	r3, [r7, #19]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d10b      	bne.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001b5c:	4b52      	ldr	r3, [pc, #328]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b62:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b6a:	494f      	ldr	r1, [pc, #316]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001b72:	e001      	b.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001b74:	7cfb      	ldrb	r3, [r7, #19]
 8001b76:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f000 80a0 	beq.w	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b86:	2300      	movs	r3, #0
 8001b88:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b8a:	4b47      	ldr	r3, [pc, #284]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8001b96:	2301      	movs	r3, #1
 8001b98:	e000      	b.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d00d      	beq.n	8001bbc <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ba0:	4b41      	ldr	r3, [pc, #260]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba4:	4a40      	ldr	r2, [pc, #256]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001baa:	6593      	str	r3, [r2, #88]	; 0x58
 8001bac:	4b3e      	ldr	r3, [pc, #248]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bbc:	4b3b      	ldr	r3, [pc, #236]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a3a      	ldr	r2, [pc, #232]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001bc8:	f7fe fd28 	bl	800061c <HAL_GetTick>
 8001bcc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001bce:	e009      	b.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bd0:	f7fe fd24 	bl	800061c <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d902      	bls.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	74fb      	strb	r3, [r7, #19]
        break;
 8001be2:	e005      	b.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001be4:	4b31      	ldr	r3, [pc, #196]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0ef      	beq.n	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8001bf0:	7cfb      	ldrb	r3, [r7, #19]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d15c      	bne.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001bf6:	4b2c      	ldr	r3, [pc, #176]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c00:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d01f      	beq.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d019      	beq.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001c14:	4b24      	ldr	r3, [pc, #144]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001c20:	4b21      	ldr	r3, [pc, #132]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c26:	4a20      	ldr	r2, [pc, #128]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001c30:	4b1d      	ldr	r3, [pc, #116]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c36:	4a1c      	ldr	r2, [pc, #112]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001c40:	4a19      	ldr	r2, [pc, #100]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d016      	beq.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c52:	f7fe fce3 	bl	800061c <HAL_GetTick>
 8001c56:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c58:	e00b      	b.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5a:	f7fe fcdf 	bl	800061c <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d902      	bls.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	74fb      	strb	r3, [r7, #19]
            break;
 8001c70:	e006      	b.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c72:	4b0d      	ldr	r3, [pc, #52]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0ec      	beq.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8001c80:	7cfb      	ldrb	r3, [r7, #19]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10c      	bne.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c86:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c96:	4904      	ldr	r1, [pc, #16]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001c9e:	e009      	b.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001ca0:	7cfb      	ldrb	r3, [r7, #19]
 8001ca2:	74bb      	strb	r3, [r7, #18]
 8001ca4:	e006      	b.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8001ca6:	bf00      	nop
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001cb0:	7cfb      	ldrb	r3, [r7, #19]
 8001cb2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cb4:	7c7b      	ldrb	r3, [r7, #17]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d105      	bne.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cba:	4ba6      	ldr	r3, [pc, #664]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cbe:	4aa5      	ldr	r2, [pc, #660]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001cc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cc4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d00a      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001cd2:	4ba0      	ldr	r3, [pc, #640]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cd8:	f023 0203 	bic.w	r2, r3, #3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce0:	499c      	ldr	r1, [pc, #624]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d00a      	beq.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001cf4:	4b97      	ldr	r3, [pc, #604]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cfa:	f023 020c 	bic.w	r2, r3, #12
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d02:	4994      	ldr	r1, [pc, #592]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00a      	beq.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001d16:	4b8f      	ldr	r3, [pc, #572]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d1c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d24:	498b      	ldr	r1, [pc, #556]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0308 	and.w	r3, r3, #8
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d00a      	beq.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001d38:	4b86      	ldr	r3, [pc, #536]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d3e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d46:	4983      	ldr	r1, [pc, #524]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0310 	and.w	r3, r3, #16
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00a      	beq.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001d5a:	4b7e      	ldr	r3, [pc, #504]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d68:	497a      	ldr	r1, [pc, #488]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0320 	and.w	r3, r3, #32
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d00a      	beq.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001d7c:	4b75      	ldr	r3, [pc, #468]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d82:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8a:	4972      	ldr	r1, [pc, #456]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00a      	beq.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001d9e:	4b6d      	ldr	r3, [pc, #436]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001da4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dac:	4969      	ldr	r1, [pc, #420]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d00a      	beq.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001dc0:	4b64      	ldr	r3, [pc, #400]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dc6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001dce:	4961      	ldr	r1, [pc, #388]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00a      	beq.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001de2:	4b5c      	ldr	r3, [pc, #368]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001de8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001df0:	4958      	ldr	r1, [pc, #352]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d00a      	beq.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001e04:	4b53      	ldr	r3, [pc, #332]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e0a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e12:	4950      	ldr	r1, [pc, #320]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00a      	beq.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001e26:	4b4b      	ldr	r3, [pc, #300]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e34:	4947      	ldr	r1, [pc, #284]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d00a      	beq.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001e48:	4b42      	ldr	r3, [pc, #264]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001e4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001e4e:	f023 0203 	bic.w	r2, r3, #3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e56:	493f      	ldr	r1, [pc, #252]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d028      	beq.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e6a:	4b3a      	ldr	r3, [pc, #232]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e70:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e78:	4936      	ldr	r1, [pc, #216]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e88:	d106      	bne.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e8a:	4b32      	ldr	r3, [pc, #200]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	4a31      	ldr	r2, [pc, #196]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001e90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e94:	60d3      	str	r3, [r2, #12]
 8001e96:	e011      	b.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001ea0:	d10c      	bne.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f000 f8c9 	bl	8002040 <RCCEx_PLLSAI1_Config>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001eb2:	7cfb      	ldrb	r3, [r7, #19]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8001eb8:	7cfb      	ldrb	r3, [r7, #19]
 8001eba:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d028      	beq.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001ec8:	4b22      	ldr	r3, [pc, #136]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ece:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ed6:	491f      	ldr	r1, [pc, #124]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ee2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001ee6:	d106      	bne.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ee8:	4b1a      	ldr	r3, [pc, #104]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	4a19      	ldr	r2, [pc, #100]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001eee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ef2:	60d3      	str	r3, [r2, #12]
 8001ef4:	e011      	b.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001efa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001efe:	d10c      	bne.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3304      	adds	r3, #4
 8001f04:	2101      	movs	r1, #1
 8001f06:	4618      	mov	r0, r3
 8001f08:	f000 f89a 	bl	8002040 <RCCEx_PLLSAI1_Config>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001f10:	7cfb      	ldrb	r3, [r7, #19]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      {
        /* set overall return value */
        status = ret;
 8001f16:	7cfb      	ldrb	r3, [r7, #19]
 8001f18:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d02a      	beq.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001f26:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f2c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f34:	4907      	ldr	r1, [pc, #28]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f44:	d108      	bne.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f46:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	4a02      	ldr	r2, [pc, #8]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8001f4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f50:	60d3      	str	r3, [r2, #12]
 8001f52:	e013      	b.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8001f54:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001f60:	d10c      	bne.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	3304      	adds	r3, #4
 8001f66:	2101      	movs	r1, #1
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f000 f869 	bl	8002040 <RCCEx_PLLSAI1_Config>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001f72:	7cfb      	ldrb	r3, [r7, #19]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* set overall return value */
        status = ret;
 8001f78:	7cfb      	ldrb	r3, [r7, #19]
 8001f7a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d02f      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f88:	4b2c      	ldr	r3, [pc, #176]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8001f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f8e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f96:	4929      	ldr	r1, [pc, #164]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001fa2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001fa6:	d10d      	bne.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x574>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3304      	adds	r3, #4
 8001fac:	2102      	movs	r1, #2
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f000 f846 	bl	8002040 <RCCEx_PLLSAI1_Config>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001fb8:	7cfb      	ldrb	r3, [r7, #19]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d014      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 8001fbe:	7cfb      	ldrb	r3, [r7, #19]
 8001fc0:	74bb      	strb	r3, [r7, #18]
 8001fc2:	e011      	b.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001fc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fcc:	d10c      	bne.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	3320      	adds	r3, #32
 8001fd2:	2102      	movs	r1, #2
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f000 f923 	bl	8002220 <RCCEx_PLLSAI2_Config>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001fde:	7cfb      	ldrb	r3, [r7, #19]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 8001fe4:	7cfb      	ldrb	r3, [r7, #19]
 8001fe6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d00b      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001ff4:	4b11      	ldr	r3, [pc, #68]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8001ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ffa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002004:	490d      	ldr	r1, [pc, #52]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002006:	4313      	orrs	r3, r2
 8002008:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00b      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002018:	4b08      	ldr	r3, [pc, #32]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800201a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800201e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002028:	4904      	ldr	r1, [pc, #16]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800202a:	4313      	orrs	r3, r2
 800202c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002030:	7cbb      	ldrb	r3, [r7, #18]
}
 8002032:	4618      	mov	r0, r3
 8002034:	3718      	adds	r7, #24
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40021000 	.word	0x40021000

08002040 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800204a:	2300      	movs	r3, #0
 800204c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800204e:	4b73      	ldr	r3, [pc, #460]	; (800221c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d018      	beq.n	800208c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800205a:	4b70      	ldr	r3, [pc, #448]	; (800221c <RCCEx_PLLSAI1_Config+0x1dc>)
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	f003 0203 	and.w	r2, r3, #3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d10d      	bne.n	8002086 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
       ||
 800206e:	2b00      	cmp	r3, #0
 8002070:	d009      	beq.n	8002086 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002072:	4b6a      	ldr	r3, [pc, #424]	; (800221c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	091b      	lsrs	r3, r3, #4
 8002078:	f003 0307 	and.w	r3, r3, #7
 800207c:	1c5a      	adds	r2, r3, #1
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
       ||
 8002082:	429a      	cmp	r2, r3
 8002084:	d044      	beq.n	8002110 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	73fb      	strb	r3, [r7, #15]
 800208a:	e041      	b.n	8002110 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2b02      	cmp	r3, #2
 8002092:	d00c      	beq.n	80020ae <RCCEx_PLLSAI1_Config+0x6e>
 8002094:	2b03      	cmp	r3, #3
 8002096:	d013      	beq.n	80020c0 <RCCEx_PLLSAI1_Config+0x80>
 8002098:	2b01      	cmp	r3, #1
 800209a:	d120      	bne.n	80020de <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800209c:	4b5f      	ldr	r3, [pc, #380]	; (800221c <RCCEx_PLLSAI1_Config+0x1dc>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d11d      	bne.n	80020e4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020ac:	e01a      	b.n	80020e4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80020ae:	4b5b      	ldr	r3, [pc, #364]	; (800221c <RCCEx_PLLSAI1_Config+0x1dc>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d116      	bne.n	80020e8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020be:	e013      	b.n	80020e8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80020c0:	4b56      	ldr	r3, [pc, #344]	; (800221c <RCCEx_PLLSAI1_Config+0x1dc>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d10f      	bne.n	80020ec <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80020cc:	4b53      	ldr	r3, [pc, #332]	; (800221c <RCCEx_PLLSAI1_Config+0x1dc>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d109      	bne.n	80020ec <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80020dc:	e006      	b.n	80020ec <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	73fb      	strb	r3, [r7, #15]
      break;
 80020e2:	e004      	b.n	80020ee <RCCEx_PLLSAI1_Config+0xae>
      break;
 80020e4:	bf00      	nop
 80020e6:	e002      	b.n	80020ee <RCCEx_PLLSAI1_Config+0xae>
      break;
 80020e8:	bf00      	nop
 80020ea:	e000      	b.n	80020ee <RCCEx_PLLSAI1_Config+0xae>
      break;
 80020ec:	bf00      	nop
    }

    if(status == HAL_OK)
 80020ee:	7bfb      	ldrb	r3, [r7, #15]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d10d      	bne.n	8002110 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80020f4:	4b49      	ldr	r3, [pc, #292]	; (800221c <RCCEx_PLLSAI1_Config+0x1dc>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6819      	ldr	r1, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	3b01      	subs	r3, #1
 8002106:	011b      	lsls	r3, r3, #4
 8002108:	430b      	orrs	r3, r1
 800210a:	4944      	ldr	r1, [pc, #272]	; (800221c <RCCEx_PLLSAI1_Config+0x1dc>)
 800210c:	4313      	orrs	r3, r2
 800210e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002110:	7bfb      	ldrb	r3, [r7, #15]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d17c      	bne.n	8002210 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002116:	4b41      	ldr	r3, [pc, #260]	; (800221c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a40      	ldr	r2, [pc, #256]	; (800221c <RCCEx_PLLSAI1_Config+0x1dc>)
 800211c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002120:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002122:	f7fe fa7b 	bl	800061c <HAL_GetTick>
 8002126:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002128:	e009      	b.n	800213e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800212a:	f7fe fa77 	bl	800061c <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d902      	bls.n	800213e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	73fb      	strb	r3, [r7, #15]
        break;
 800213c:	e005      	b.n	800214a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800213e:	4b37      	ldr	r3, [pc, #220]	; (800221c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1ef      	bne.n	800212a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800214a:	7bfb      	ldrb	r3, [r7, #15]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d15f      	bne.n	8002210 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d110      	bne.n	8002178 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002156:	4b31      	ldr	r3, [pc, #196]	; (800221c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800215e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	6892      	ldr	r2, [r2, #8]
 8002166:	0211      	lsls	r1, r2, #8
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	68d2      	ldr	r2, [r2, #12]
 800216c:	06d2      	lsls	r2, r2, #27
 800216e:	430a      	orrs	r2, r1
 8002170:	492a      	ldr	r1, [pc, #168]	; (800221c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002172:	4313      	orrs	r3, r2
 8002174:	610b      	str	r3, [r1, #16]
 8002176:	e027      	b.n	80021c8 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d112      	bne.n	80021a4 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800217e:	4b27      	ldr	r3, [pc, #156]	; (800221c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002186:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	6892      	ldr	r2, [r2, #8]
 800218e:	0211      	lsls	r1, r2, #8
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	6912      	ldr	r2, [r2, #16]
 8002194:	0852      	lsrs	r2, r2, #1
 8002196:	3a01      	subs	r2, #1
 8002198:	0552      	lsls	r2, r2, #21
 800219a:	430a      	orrs	r2, r1
 800219c:	491f      	ldr	r1, [pc, #124]	; (800221c <RCCEx_PLLSAI1_Config+0x1dc>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	610b      	str	r3, [r1, #16]
 80021a2:	e011      	b.n	80021c8 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80021a4:	4b1d      	ldr	r3, [pc, #116]	; (800221c <RCCEx_PLLSAI1_Config+0x1dc>)
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80021ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6892      	ldr	r2, [r2, #8]
 80021b4:	0211      	lsls	r1, r2, #8
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	6952      	ldr	r2, [r2, #20]
 80021ba:	0852      	lsrs	r2, r2, #1
 80021bc:	3a01      	subs	r2, #1
 80021be:	0652      	lsls	r2, r2, #25
 80021c0:	430a      	orrs	r2, r1
 80021c2:	4916      	ldr	r1, [pc, #88]	; (800221c <RCCEx_PLLSAI1_Config+0x1dc>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80021c8:	4b14      	ldr	r3, [pc, #80]	; (800221c <RCCEx_PLLSAI1_Config+0x1dc>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a13      	ldr	r2, [pc, #76]	; (800221c <RCCEx_PLLSAI1_Config+0x1dc>)
 80021ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80021d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d4:	f7fe fa22 	bl	800061c <HAL_GetTick>
 80021d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80021da:	e009      	b.n	80021f0 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80021dc:	f7fe fa1e 	bl	800061c <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d902      	bls.n	80021f0 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	73fb      	strb	r3, [r7, #15]
          break;
 80021ee:	e005      	b.n	80021fc <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80021f0:	4b0a      	ldr	r3, [pc, #40]	; (800221c <RCCEx_PLLSAI1_Config+0x1dc>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0ef      	beq.n	80021dc <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 80021fc:	7bfb      	ldrb	r3, [r7, #15]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d106      	bne.n	8002210 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002202:	4b06      	ldr	r3, [pc, #24]	; (800221c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002204:	691a      	ldr	r2, [r3, #16]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	4904      	ldr	r1, [pc, #16]	; (800221c <RCCEx_PLLSAI1_Config+0x1dc>)
 800220c:	4313      	orrs	r3, r2
 800220e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002210:	7bfb      	ldrb	r3, [r7, #15]
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40021000 	.word	0x40021000

08002220 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800222a:	2300      	movs	r3, #0
 800222c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800222e:	4b68      	ldr	r3, [pc, #416]	; (80023d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	f003 0303 	and.w	r3, r3, #3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d018      	beq.n	800226c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800223a:	4b65      	ldr	r3, [pc, #404]	; (80023d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	f003 0203 	and.w	r2, r3, #3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	429a      	cmp	r2, r3
 8002248:	d10d      	bne.n	8002266 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
       ||
 800224e:	2b00      	cmp	r3, #0
 8002250:	d009      	beq.n	8002266 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002252:	4b5f      	ldr	r3, [pc, #380]	; (80023d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	091b      	lsrs	r3, r3, #4
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	1c5a      	adds	r2, r3, #1
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
       ||
 8002262:	429a      	cmp	r2, r3
 8002264:	d044      	beq.n	80022f0 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	73fb      	strb	r3, [r7, #15]
 800226a:	e041      	b.n	80022f0 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2b02      	cmp	r3, #2
 8002272:	d00c      	beq.n	800228e <RCCEx_PLLSAI2_Config+0x6e>
 8002274:	2b03      	cmp	r3, #3
 8002276:	d013      	beq.n	80022a0 <RCCEx_PLLSAI2_Config+0x80>
 8002278:	2b01      	cmp	r3, #1
 800227a:	d120      	bne.n	80022be <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800227c:	4b54      	ldr	r3, [pc, #336]	; (80023d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d11d      	bne.n	80022c4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800228c:	e01a      	b.n	80022c4 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800228e:	4b50      	ldr	r3, [pc, #320]	; (80023d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002296:	2b00      	cmp	r3, #0
 8002298:	d116      	bne.n	80022c8 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800229e:	e013      	b.n	80022c8 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80022a0:	4b4b      	ldr	r3, [pc, #300]	; (80023d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d10f      	bne.n	80022cc <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80022ac:	4b48      	ldr	r3, [pc, #288]	; (80023d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d109      	bne.n	80022cc <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80022bc:	e006      	b.n	80022cc <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	73fb      	strb	r3, [r7, #15]
      break;
 80022c2:	e004      	b.n	80022ce <RCCEx_PLLSAI2_Config+0xae>
      break;
 80022c4:	bf00      	nop
 80022c6:	e002      	b.n	80022ce <RCCEx_PLLSAI2_Config+0xae>
      break;
 80022c8:	bf00      	nop
 80022ca:	e000      	b.n	80022ce <RCCEx_PLLSAI2_Config+0xae>
      break;
 80022cc:	bf00      	nop
    }

    if(status == HAL_OK)
 80022ce:	7bfb      	ldrb	r3, [r7, #15]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10d      	bne.n	80022f0 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80022d4:	4b3e      	ldr	r3, [pc, #248]	; (80023d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6819      	ldr	r1, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	3b01      	subs	r3, #1
 80022e6:	011b      	lsls	r3, r3, #4
 80022e8:	430b      	orrs	r3, r1
 80022ea:	4939      	ldr	r1, [pc, #228]	; (80023d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80022f0:	7bfb      	ldrb	r3, [r7, #15]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d166      	bne.n	80023c4 <RCCEx_PLLSAI2_Config+0x1a4>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80022f6:	4b36      	ldr	r3, [pc, #216]	; (80023d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a35      	ldr	r2, [pc, #212]	; (80023d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80022fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002300:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002302:	f7fe f98b 	bl	800061c <HAL_GetTick>
 8002306:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002308:	e009      	b.n	800231e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800230a:	f7fe f987 	bl	800061c <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d902      	bls.n	800231e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	73fb      	strb	r3, [r7, #15]
        break;
 800231c:	e005      	b.n	800232a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800231e:	4b2c      	ldr	r3, [pc, #176]	; (80023d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1ef      	bne.n	800230a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800232a:	7bfb      	ldrb	r3, [r7, #15]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d149      	bne.n	80023c4 <RCCEx_PLLSAI2_Config+0x1a4>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d110      	bne.n	8002358 <RCCEx_PLLSAI2_Config+0x138>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002336:	4b26      	ldr	r3, [pc, #152]	; (80023d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800233e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6892      	ldr	r2, [r2, #8]
 8002346:	0211      	lsls	r1, r2, #8
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	68d2      	ldr	r2, [r2, #12]
 800234c:	06d2      	lsls	r2, r2, #27
 800234e:	430a      	orrs	r2, r1
 8002350:	491f      	ldr	r1, [pc, #124]	; (80023d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002352:	4313      	orrs	r3, r2
 8002354:	614b      	str	r3, [r1, #20]
 8002356:	e011      	b.n	800237c <RCCEx_PLLSAI2_Config+0x15c>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002358:	4b1d      	ldr	r3, [pc, #116]	; (80023d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002360:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6892      	ldr	r2, [r2, #8]
 8002368:	0211      	lsls	r1, r2, #8
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	6912      	ldr	r2, [r2, #16]
 800236e:	0852      	lsrs	r2, r2, #1
 8002370:	3a01      	subs	r2, #1
 8002372:	0652      	lsls	r2, r2, #25
 8002374:	430a      	orrs	r2, r1
 8002376:	4916      	ldr	r1, [pc, #88]	; (80023d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002378:	4313      	orrs	r3, r2
 800237a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800237c:	4b14      	ldr	r3, [pc, #80]	; (80023d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a13      	ldr	r2, [pc, #76]	; (80023d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002386:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002388:	f7fe f948 	bl	800061c <HAL_GetTick>
 800238c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800238e:	e009      	b.n	80023a4 <RCCEx_PLLSAI2_Config+0x184>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002390:	f7fe f944 	bl	800061c <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d902      	bls.n	80023a4 <RCCEx_PLLSAI2_Config+0x184>
        {
          status = HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	73fb      	strb	r3, [r7, #15]
          break;
 80023a2:	e005      	b.n	80023b0 <RCCEx_PLLSAI2_Config+0x190>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80023a4:	4b0a      	ldr	r3, [pc, #40]	; (80023d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0ef      	beq.n	8002390 <RCCEx_PLLSAI2_Config+0x170>
        }
      }

      if(status == HAL_OK)
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d106      	bne.n	80023c4 <RCCEx_PLLSAI2_Config+0x1a4>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80023b6:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80023b8:	695a      	ldr	r2, [r3, #20]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	4904      	ldr	r1, [pc, #16]	; (80023d0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40021000 	.word	0x40021000

080023d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e040      	b.n	8002468 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d106      	bne.n	80023fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f001 fc02 	bl	8003c00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2224      	movs	r2, #36	; 0x24
 8002400:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 0201 	bic.w	r2, r2, #1
 8002410:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f98c 	bl	8002730 <UART_SetConfig>
 8002418:	4603      	mov	r3, r0
 800241a:	2b01      	cmp	r3, #1
 800241c:	d101      	bne.n	8002422 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e022      	b.n	8002468 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002426:	2b00      	cmp	r3, #0
 8002428:	d002      	beq.n	8002430 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 fcc8 	bl	8002dc0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800243e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689a      	ldr	r2, [r3, #8]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800244e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f042 0201 	orr.w	r2, r2, #1
 800245e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 fd4f 	bl	8002f04 <UART_CheckIdleState>
 8002466:	4603      	mov	r3, r0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b08a      	sub	sp, #40	; 0x28
 8002474:	af02      	add	r7, sp, #8
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	603b      	str	r3, [r7, #0]
 800247c:	4613      	mov	r3, r2
 800247e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002484:	2b20      	cmp	r3, #32
 8002486:	f040 8081 	bne.w	800258c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d002      	beq.n	8002496 <HAL_UART_Transmit+0x26>
 8002490:	88fb      	ldrh	r3, [r7, #6]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e079      	b.n	800258e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d101      	bne.n	80024a8 <HAL_UART_Transmit+0x38>
 80024a4:	2302      	movs	r3, #2
 80024a6:	e072      	b.n	800258e <HAL_UART_Transmit+0x11e>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2221      	movs	r2, #33	; 0x21
 80024ba:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80024bc:	f7fe f8ae 	bl	800061c <HAL_GetTick>
 80024c0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	88fa      	ldrh	r2, [r7, #6]
 80024c6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	88fa      	ldrh	r2, [r7, #6]
 80024ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024da:	d108      	bne.n	80024ee <HAL_UART_Transmit+0x7e>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d104      	bne.n	80024ee <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	61bb      	str	r3, [r7, #24]
 80024ec:	e003      	b.n	80024f6 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024f2:	2300      	movs	r3, #0
 80024f4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80024f6:	e02d      	b.n	8002554 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	9300      	str	r3, [sp, #0]
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	2200      	movs	r2, #0
 8002500:	2180      	movs	r1, #128	; 0x80
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f000 fd43 	bl	8002f8e <UART_WaitOnFlagUntilTimeout>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e03d      	b.n	800258e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10b      	bne.n	8002530 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	881a      	ldrh	r2, [r3, #0]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002524:	b292      	uxth	r2, r2
 8002526:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	3302      	adds	r3, #2
 800252c:	61bb      	str	r3, [r7, #24]
 800252e:	e008      	b.n	8002542 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	781a      	ldrb	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	b292      	uxth	r2, r2
 800253a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	3301      	adds	r3, #1
 8002540:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002548:	b29b      	uxth	r3, r3
 800254a:	3b01      	subs	r3, #1
 800254c:	b29a      	uxth	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800255a:	b29b      	uxth	r3, r3
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1cb      	bne.n	80024f8 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	2200      	movs	r2, #0
 8002568:	2140      	movs	r1, #64	; 0x40
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f000 fd0f 	bl	8002f8e <UART_WaitOnFlagUntilTimeout>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e009      	b.n	800258e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2220      	movs	r2, #32
 800257e:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002588:	2300      	movs	r3, #0
 800258a:	e000      	b.n	800258e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800258c:	2302      	movs	r3, #2
  }
}
 800258e:	4618      	mov	r0, r3
 8002590:	3720      	adds	r7, #32
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_UART_Receive>:
  * @param Size    Amount of data to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b08a      	sub	sp, #40	; 0x28
 800259a:	af02      	add	r7, sp, #8
 800259c:	60f8      	str	r0, [r7, #12]
 800259e:	60b9      	str	r1, [r7, #8]
 80025a0:	603b      	str	r3, [r7, #0]
 80025a2:	4613      	mov	r3, r2
 80025a4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025aa:	2b20      	cmp	r3, #32
 80025ac:	f040 80bb 	bne.w	8002726 <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d002      	beq.n	80025bc <HAL_UART_Receive+0x26>
 80025b6:	88fb      	ldrh	r3, [r7, #6]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e0b3      	b.n	8002728 <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d101      	bne.n	80025ce <HAL_UART_Receive+0x38>
 80025ca:	2302      	movs	r3, #2
 80025cc:	e0ac      	b.n	8002728 <HAL_UART_Receive+0x192>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2222      	movs	r2, #34	; 0x22
 80025e0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80025e2:	f7fe f81b 	bl	800061c <HAL_GetTick>
 80025e6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	88fa      	ldrh	r2, [r7, #6]
 80025ec:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	88fa      	ldrh	r2, [r7, #6]
 80025f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002600:	d10e      	bne.n	8002620 <HAL_UART_Receive+0x8a>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d105      	bne.n	8002616 <HAL_UART_Receive+0x80>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002610:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002614:	e02d      	b.n	8002672 <HAL_UART_Receive+0xdc>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	22ff      	movs	r2, #255	; 0xff
 800261a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800261e:	e028      	b.n	8002672 <HAL_UART_Receive+0xdc>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d10d      	bne.n	8002644 <HAL_UART_Receive+0xae>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d104      	bne.n	800263a <HAL_UART_Receive+0xa4>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	22ff      	movs	r2, #255	; 0xff
 8002634:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002638:	e01b      	b.n	8002672 <HAL_UART_Receive+0xdc>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	227f      	movs	r2, #127	; 0x7f
 800263e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002642:	e016      	b.n	8002672 <HAL_UART_Receive+0xdc>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800264c:	d10d      	bne.n	800266a <HAL_UART_Receive+0xd4>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d104      	bne.n	8002660 <HAL_UART_Receive+0xca>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	227f      	movs	r2, #127	; 0x7f
 800265a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800265e:	e008      	b.n	8002672 <HAL_UART_Receive+0xdc>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	223f      	movs	r2, #63	; 0x3f
 8002664:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002668:	e003      	b.n	8002672 <HAL_UART_Receive+0xdc>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002678:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002682:	d108      	bne.n	8002696 <HAL_UART_Receive+0x100>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d104      	bne.n	8002696 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 800268c:	2300      	movs	r3, #0
 800268e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	61bb      	str	r3, [r7, #24]
 8002694:	e003      	b.n	800269e <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800269a:	2300      	movs	r3, #0
 800269c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800269e:	e033      	b.n	8002708 <HAL_UART_Receive+0x172>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	2200      	movs	r2, #0
 80026a8:	2120      	movs	r1, #32
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 fc6f 	bl	8002f8e <UART_WaitOnFlagUntilTimeout>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <HAL_UART_Receive+0x124>
      {
        return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e036      	b.n	8002728 <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d10c      	bne.n	80026da <HAL_UART_Receive+0x144>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	8a7b      	ldrh	r3, [r7, #18]
 80026ca:	4013      	ands	r3, r2
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	3302      	adds	r3, #2
 80026d6:	61bb      	str	r3, [r7, #24]
 80026d8:	e00d      	b.n	80026f6 <HAL_UART_Receive+0x160>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	b2da      	uxtb	r2, r3
 80026e4:	8a7b      	ldrh	r3, [r7, #18]
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	4013      	ands	r3, r2
 80026ea:	b2da      	uxtb	r2, r3
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	3301      	adds	r3, #1
 80026f4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	3b01      	subs	r3, #1
 8002700:	b29a      	uxth	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800270e:	b29b      	uxth	r3, r3
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1c5      	bne.n	80026a0 <HAL_UART_Receive+0x10a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2220      	movs	r2, #32
 8002718:	679a      	str	r2, [r3, #120]	; 0x78

    __HAL_UNLOCK(huart);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002722:	2300      	movs	r3, #0
 8002724:	e000      	b.n	8002728 <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 8002726:	2302      	movs	r3, #2
  }
}
 8002728:	4618      	mov	r0, r3
 800272a:	3720      	adds	r7, #32
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002730:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002734:	b088      	sub	sp, #32
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800273a:	2300      	movs	r3, #0
 800273c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 800273e:	2300      	movs	r3, #0
 8002740:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002742:	2300      	movs	r3, #0
 8002744:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	431a      	orrs	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	431a      	orrs	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	4313      	orrs	r3, r2
 800275c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	4bac      	ldr	r3, [pc, #688]	; (8002a18 <UART_SetConfig+0x2e8>)
 8002766:	4013      	ands	r3, r2
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	6812      	ldr	r2, [r2, #0]
 800276c:	69f9      	ldr	r1, [r7, #28]
 800276e:	430b      	orrs	r3, r1
 8002770:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68da      	ldr	r2, [r3, #12]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4aa2      	ldr	r2, [pc, #648]	; (8002a1c <UART_SetConfig+0x2ec>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d004      	beq.n	80027a2 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	69fa      	ldr	r2, [r7, #28]
 800279e:	4313      	orrs	r3, r2
 80027a0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	69fa      	ldr	r2, [r7, #28]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a99      	ldr	r2, [pc, #612]	; (8002a20 <UART_SetConfig+0x2f0>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d121      	bne.n	8002804 <UART_SetConfig+0xd4>
 80027c0:	4b98      	ldr	r3, [pc, #608]	; (8002a24 <UART_SetConfig+0x2f4>)
 80027c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c6:	f003 0303 	and.w	r3, r3, #3
 80027ca:	2b03      	cmp	r3, #3
 80027cc:	d816      	bhi.n	80027fc <UART_SetConfig+0xcc>
 80027ce:	a201      	add	r2, pc, #4	; (adr r2, 80027d4 <UART_SetConfig+0xa4>)
 80027d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d4:	080027e5 	.word	0x080027e5
 80027d8:	080027f1 	.word	0x080027f1
 80027dc:	080027eb 	.word	0x080027eb
 80027e0:	080027f7 	.word	0x080027f7
 80027e4:	2301      	movs	r3, #1
 80027e6:	76fb      	strb	r3, [r7, #27]
 80027e8:	e0e8      	b.n	80029bc <UART_SetConfig+0x28c>
 80027ea:	2302      	movs	r3, #2
 80027ec:	76fb      	strb	r3, [r7, #27]
 80027ee:	e0e5      	b.n	80029bc <UART_SetConfig+0x28c>
 80027f0:	2304      	movs	r3, #4
 80027f2:	76fb      	strb	r3, [r7, #27]
 80027f4:	e0e2      	b.n	80029bc <UART_SetConfig+0x28c>
 80027f6:	2308      	movs	r3, #8
 80027f8:	76fb      	strb	r3, [r7, #27]
 80027fa:	e0df      	b.n	80029bc <UART_SetConfig+0x28c>
 80027fc:	2310      	movs	r3, #16
 80027fe:	76fb      	strb	r3, [r7, #27]
 8002800:	bf00      	nop
 8002802:	e0db      	b.n	80029bc <UART_SetConfig+0x28c>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a87      	ldr	r2, [pc, #540]	; (8002a28 <UART_SetConfig+0x2f8>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d134      	bne.n	8002878 <UART_SetConfig+0x148>
 800280e:	4b85      	ldr	r3, [pc, #532]	; (8002a24 <UART_SetConfig+0x2f4>)
 8002810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002814:	f003 030c 	and.w	r3, r3, #12
 8002818:	2b0c      	cmp	r3, #12
 800281a:	d829      	bhi.n	8002870 <UART_SetConfig+0x140>
 800281c:	a201      	add	r2, pc, #4	; (adr r2, 8002824 <UART_SetConfig+0xf4>)
 800281e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002822:	bf00      	nop
 8002824:	08002859 	.word	0x08002859
 8002828:	08002871 	.word	0x08002871
 800282c:	08002871 	.word	0x08002871
 8002830:	08002871 	.word	0x08002871
 8002834:	08002865 	.word	0x08002865
 8002838:	08002871 	.word	0x08002871
 800283c:	08002871 	.word	0x08002871
 8002840:	08002871 	.word	0x08002871
 8002844:	0800285f 	.word	0x0800285f
 8002848:	08002871 	.word	0x08002871
 800284c:	08002871 	.word	0x08002871
 8002850:	08002871 	.word	0x08002871
 8002854:	0800286b 	.word	0x0800286b
 8002858:	2300      	movs	r3, #0
 800285a:	76fb      	strb	r3, [r7, #27]
 800285c:	e0ae      	b.n	80029bc <UART_SetConfig+0x28c>
 800285e:	2302      	movs	r3, #2
 8002860:	76fb      	strb	r3, [r7, #27]
 8002862:	e0ab      	b.n	80029bc <UART_SetConfig+0x28c>
 8002864:	2304      	movs	r3, #4
 8002866:	76fb      	strb	r3, [r7, #27]
 8002868:	e0a8      	b.n	80029bc <UART_SetConfig+0x28c>
 800286a:	2308      	movs	r3, #8
 800286c:	76fb      	strb	r3, [r7, #27]
 800286e:	e0a5      	b.n	80029bc <UART_SetConfig+0x28c>
 8002870:	2310      	movs	r3, #16
 8002872:	76fb      	strb	r3, [r7, #27]
 8002874:	bf00      	nop
 8002876:	e0a1      	b.n	80029bc <UART_SetConfig+0x28c>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a6b      	ldr	r2, [pc, #428]	; (8002a2c <UART_SetConfig+0x2fc>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d120      	bne.n	80028c4 <UART_SetConfig+0x194>
 8002882:	4b68      	ldr	r3, [pc, #416]	; (8002a24 <UART_SetConfig+0x2f4>)
 8002884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002888:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800288c:	2b10      	cmp	r3, #16
 800288e:	d00f      	beq.n	80028b0 <UART_SetConfig+0x180>
 8002890:	2b10      	cmp	r3, #16
 8002892:	d802      	bhi.n	800289a <UART_SetConfig+0x16a>
 8002894:	2b00      	cmp	r3, #0
 8002896:	d005      	beq.n	80028a4 <UART_SetConfig+0x174>
 8002898:	e010      	b.n	80028bc <UART_SetConfig+0x18c>
 800289a:	2b20      	cmp	r3, #32
 800289c:	d005      	beq.n	80028aa <UART_SetConfig+0x17a>
 800289e:	2b30      	cmp	r3, #48	; 0x30
 80028a0:	d009      	beq.n	80028b6 <UART_SetConfig+0x186>
 80028a2:	e00b      	b.n	80028bc <UART_SetConfig+0x18c>
 80028a4:	2300      	movs	r3, #0
 80028a6:	76fb      	strb	r3, [r7, #27]
 80028a8:	e088      	b.n	80029bc <UART_SetConfig+0x28c>
 80028aa:	2302      	movs	r3, #2
 80028ac:	76fb      	strb	r3, [r7, #27]
 80028ae:	e085      	b.n	80029bc <UART_SetConfig+0x28c>
 80028b0:	2304      	movs	r3, #4
 80028b2:	76fb      	strb	r3, [r7, #27]
 80028b4:	e082      	b.n	80029bc <UART_SetConfig+0x28c>
 80028b6:	2308      	movs	r3, #8
 80028b8:	76fb      	strb	r3, [r7, #27]
 80028ba:	e07f      	b.n	80029bc <UART_SetConfig+0x28c>
 80028bc:	2310      	movs	r3, #16
 80028be:	76fb      	strb	r3, [r7, #27]
 80028c0:	bf00      	nop
 80028c2:	e07b      	b.n	80029bc <UART_SetConfig+0x28c>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a59      	ldr	r2, [pc, #356]	; (8002a30 <UART_SetConfig+0x300>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d120      	bne.n	8002910 <UART_SetConfig+0x1e0>
 80028ce:	4b55      	ldr	r3, [pc, #340]	; (8002a24 <UART_SetConfig+0x2f4>)
 80028d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80028d8:	2b40      	cmp	r3, #64	; 0x40
 80028da:	d00f      	beq.n	80028fc <UART_SetConfig+0x1cc>
 80028dc:	2b40      	cmp	r3, #64	; 0x40
 80028de:	d802      	bhi.n	80028e6 <UART_SetConfig+0x1b6>
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d005      	beq.n	80028f0 <UART_SetConfig+0x1c0>
 80028e4:	e010      	b.n	8002908 <UART_SetConfig+0x1d8>
 80028e6:	2b80      	cmp	r3, #128	; 0x80
 80028e8:	d005      	beq.n	80028f6 <UART_SetConfig+0x1c6>
 80028ea:	2bc0      	cmp	r3, #192	; 0xc0
 80028ec:	d009      	beq.n	8002902 <UART_SetConfig+0x1d2>
 80028ee:	e00b      	b.n	8002908 <UART_SetConfig+0x1d8>
 80028f0:	2300      	movs	r3, #0
 80028f2:	76fb      	strb	r3, [r7, #27]
 80028f4:	e062      	b.n	80029bc <UART_SetConfig+0x28c>
 80028f6:	2302      	movs	r3, #2
 80028f8:	76fb      	strb	r3, [r7, #27]
 80028fa:	e05f      	b.n	80029bc <UART_SetConfig+0x28c>
 80028fc:	2304      	movs	r3, #4
 80028fe:	76fb      	strb	r3, [r7, #27]
 8002900:	e05c      	b.n	80029bc <UART_SetConfig+0x28c>
 8002902:	2308      	movs	r3, #8
 8002904:	76fb      	strb	r3, [r7, #27]
 8002906:	e059      	b.n	80029bc <UART_SetConfig+0x28c>
 8002908:	2310      	movs	r3, #16
 800290a:	76fb      	strb	r3, [r7, #27]
 800290c:	bf00      	nop
 800290e:	e055      	b.n	80029bc <UART_SetConfig+0x28c>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a47      	ldr	r2, [pc, #284]	; (8002a34 <UART_SetConfig+0x304>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d124      	bne.n	8002964 <UART_SetConfig+0x234>
 800291a:	4b42      	ldr	r3, [pc, #264]	; (8002a24 <UART_SetConfig+0x2f4>)
 800291c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002920:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002924:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002928:	d012      	beq.n	8002950 <UART_SetConfig+0x220>
 800292a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800292e:	d802      	bhi.n	8002936 <UART_SetConfig+0x206>
 8002930:	2b00      	cmp	r3, #0
 8002932:	d007      	beq.n	8002944 <UART_SetConfig+0x214>
 8002934:	e012      	b.n	800295c <UART_SetConfig+0x22c>
 8002936:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800293a:	d006      	beq.n	800294a <UART_SetConfig+0x21a>
 800293c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002940:	d009      	beq.n	8002956 <UART_SetConfig+0x226>
 8002942:	e00b      	b.n	800295c <UART_SetConfig+0x22c>
 8002944:	2300      	movs	r3, #0
 8002946:	76fb      	strb	r3, [r7, #27]
 8002948:	e038      	b.n	80029bc <UART_SetConfig+0x28c>
 800294a:	2302      	movs	r3, #2
 800294c:	76fb      	strb	r3, [r7, #27]
 800294e:	e035      	b.n	80029bc <UART_SetConfig+0x28c>
 8002950:	2304      	movs	r3, #4
 8002952:	76fb      	strb	r3, [r7, #27]
 8002954:	e032      	b.n	80029bc <UART_SetConfig+0x28c>
 8002956:	2308      	movs	r3, #8
 8002958:	76fb      	strb	r3, [r7, #27]
 800295a:	e02f      	b.n	80029bc <UART_SetConfig+0x28c>
 800295c:	2310      	movs	r3, #16
 800295e:	76fb      	strb	r3, [r7, #27]
 8002960:	bf00      	nop
 8002962:	e02b      	b.n	80029bc <UART_SetConfig+0x28c>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a2c      	ldr	r2, [pc, #176]	; (8002a1c <UART_SetConfig+0x2ec>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d124      	bne.n	80029b8 <UART_SetConfig+0x288>
 800296e:	4b2d      	ldr	r3, [pc, #180]	; (8002a24 <UART_SetConfig+0x2f4>)
 8002970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002974:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002978:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800297c:	d012      	beq.n	80029a4 <UART_SetConfig+0x274>
 800297e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002982:	d802      	bhi.n	800298a <UART_SetConfig+0x25a>
 8002984:	2b00      	cmp	r3, #0
 8002986:	d007      	beq.n	8002998 <UART_SetConfig+0x268>
 8002988:	e012      	b.n	80029b0 <UART_SetConfig+0x280>
 800298a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800298e:	d006      	beq.n	800299e <UART_SetConfig+0x26e>
 8002990:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002994:	d009      	beq.n	80029aa <UART_SetConfig+0x27a>
 8002996:	e00b      	b.n	80029b0 <UART_SetConfig+0x280>
 8002998:	2300      	movs	r3, #0
 800299a:	76fb      	strb	r3, [r7, #27]
 800299c:	e00e      	b.n	80029bc <UART_SetConfig+0x28c>
 800299e:	2302      	movs	r3, #2
 80029a0:	76fb      	strb	r3, [r7, #27]
 80029a2:	e00b      	b.n	80029bc <UART_SetConfig+0x28c>
 80029a4:	2304      	movs	r3, #4
 80029a6:	76fb      	strb	r3, [r7, #27]
 80029a8:	e008      	b.n	80029bc <UART_SetConfig+0x28c>
 80029aa:	2308      	movs	r3, #8
 80029ac:	76fb      	strb	r3, [r7, #27]
 80029ae:	e005      	b.n	80029bc <UART_SetConfig+0x28c>
 80029b0:	2310      	movs	r3, #16
 80029b2:	76fb      	strb	r3, [r7, #27]
 80029b4:	bf00      	nop
 80029b6:	e001      	b.n	80029bc <UART_SetConfig+0x28c>
 80029b8:	2310      	movs	r3, #16
 80029ba:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a16      	ldr	r2, [pc, #88]	; (8002a1c <UART_SetConfig+0x2ec>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	f040 80fa 	bne.w	8002bbc <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80029c8:	7efb      	ldrb	r3, [r7, #27]
 80029ca:	2b08      	cmp	r3, #8
 80029cc:	d836      	bhi.n	8002a3c <UART_SetConfig+0x30c>
 80029ce:	a201      	add	r2, pc, #4	; (adr r2, 80029d4 <UART_SetConfig+0x2a4>)
 80029d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d4:	080029f9 	.word	0x080029f9
 80029d8:	08002a3d 	.word	0x08002a3d
 80029dc:	08002a01 	.word	0x08002a01
 80029e0:	08002a3d 	.word	0x08002a3d
 80029e4:	08002a07 	.word	0x08002a07
 80029e8:	08002a3d 	.word	0x08002a3d
 80029ec:	08002a3d 	.word	0x08002a3d
 80029f0:	08002a3d 	.word	0x08002a3d
 80029f4:	08002a0f 	.word	0x08002a0f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80029f8:	f7fe ff9e 	bl	8001938 <HAL_RCC_GetPCLK1Freq>
 80029fc:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80029fe:	e020      	b.n	8002a42 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002a00:	4b0d      	ldr	r3, [pc, #52]	; (8002a38 <UART_SetConfig+0x308>)
 8002a02:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002a04:	e01d      	b.n	8002a42 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002a06:	f7fe ff01 	bl	800180c <HAL_RCC_GetSysClockFreq>
 8002a0a:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002a0c:	e019      	b.n	8002a42 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002a0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a12:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002a14:	e015      	b.n	8002a42 <UART_SetConfig+0x312>
 8002a16:	bf00      	nop
 8002a18:	efff69f3 	.word	0xefff69f3
 8002a1c:	40008000 	.word	0x40008000
 8002a20:	40013800 	.word	0x40013800
 8002a24:	40021000 	.word	0x40021000
 8002a28:	40004400 	.word	0x40004400
 8002a2c:	40004800 	.word	0x40004800
 8002a30:	40004c00 	.word	0x40004c00
 8002a34:	40005000 	.word	0x40005000
 8002a38:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	74fb      	strb	r3, [r7, #19]
        break;
 8002a40:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f000 81ac 	beq.w	8002da2 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	4413      	add	r3, r2
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d305      	bcc.n	8002a66 <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d902      	bls.n	8002a6c <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	74fb      	strb	r3, [r7, #19]
 8002a6a:	e19a      	b.n	8002da2 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8002a6c:	7efb      	ldrb	r3, [r7, #27]
 8002a6e:	2b08      	cmp	r3, #8
 8002a70:	f200 8091 	bhi.w	8002b96 <UART_SetConfig+0x466>
 8002a74:	a201      	add	r2, pc, #4	; (adr r2, 8002a7c <UART_SetConfig+0x34c>)
 8002a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a7a:	bf00      	nop
 8002a7c:	08002aa1 	.word	0x08002aa1
 8002a80:	08002b97 	.word	0x08002b97
 8002a84:	08002aed 	.word	0x08002aed
 8002a88:	08002b97 	.word	0x08002b97
 8002a8c:	08002b21 	.word	0x08002b21
 8002a90:	08002b97 	.word	0x08002b97
 8002a94:	08002b97 	.word	0x08002b97
 8002a98:	08002b97 	.word	0x08002b97
 8002a9c:	08002b6d 	.word	0x08002b6d
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002aa0:	f7fe ff4a 	bl	8001938 <HAL_RCC_GetPCLK1Freq>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	f04f 0200 	mov.w	r2, #0
 8002aac:	f04f 0300 	mov.w	r3, #0
 8002ab0:	f04f 0400 	mov.w	r4, #0
 8002ab4:	0214      	lsls	r4, r2, #8
 8002ab6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002aba:	020b      	lsls	r3, r1, #8
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6852      	ldr	r2, [r2, #4]
 8002ac0:	0852      	lsrs	r2, r2, #1
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	f04f 0200 	mov.w	r2, #0
 8002ac8:	eb13 0b01 	adds.w	fp, r3, r1
 8002acc:	eb44 0c02 	adc.w	ip, r4, r2
 8002ad0:	4658      	mov	r0, fp
 8002ad2:	4661      	mov	r1, ip
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f04f 0400 	mov.w	r4, #0
 8002adc:	461a      	mov	r2, r3
 8002ade:	4623      	mov	r3, r4
 8002ae0:	f7fd fb84 	bl	80001ec <__aeabi_uldivmod>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	460c      	mov	r4, r1
 8002ae8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002aea:	e057      	b.n	8002b9c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	085b      	lsrs	r3, r3, #1
 8002af2:	f04f 0400 	mov.w	r4, #0
 8002af6:	49b1      	ldr	r1, [pc, #708]	; (8002dbc <UART_SetConfig+0x68c>)
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	eb13 0b01 	adds.w	fp, r3, r1
 8002b00:	eb44 0c02 	adc.w	ip, r4, r2
 8002b04:	4658      	mov	r0, fp
 8002b06:	4661      	mov	r1, ip
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f04f 0400 	mov.w	r4, #0
 8002b10:	461a      	mov	r2, r3
 8002b12:	4623      	mov	r3, r4
 8002b14:	f7fd fb6a 	bl	80001ec <__aeabi_uldivmod>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	460c      	mov	r4, r1
 8002b1c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002b1e:	e03d      	b.n	8002b9c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002b20:	f7fe fe74 	bl	800180c <HAL_RCC_GetSysClockFreq>
 8002b24:	4603      	mov	r3, r0
 8002b26:	4619      	mov	r1, r3
 8002b28:	f04f 0200 	mov.w	r2, #0
 8002b2c:	f04f 0300 	mov.w	r3, #0
 8002b30:	f04f 0400 	mov.w	r4, #0
 8002b34:	0214      	lsls	r4, r2, #8
 8002b36:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002b3a:	020b      	lsls	r3, r1, #8
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	6852      	ldr	r2, [r2, #4]
 8002b40:	0852      	lsrs	r2, r2, #1
 8002b42:	4611      	mov	r1, r2
 8002b44:	f04f 0200 	mov.w	r2, #0
 8002b48:	eb13 0b01 	adds.w	fp, r3, r1
 8002b4c:	eb44 0c02 	adc.w	ip, r4, r2
 8002b50:	4658      	mov	r0, fp
 8002b52:	4661      	mov	r1, ip
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f04f 0400 	mov.w	r4, #0
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	4623      	mov	r3, r4
 8002b60:	f7fd fb44 	bl	80001ec <__aeabi_uldivmod>
 8002b64:	4603      	mov	r3, r0
 8002b66:	460c      	mov	r4, r1
 8002b68:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002b6a:	e017      	b.n	8002b9c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	085b      	lsrs	r3, r3, #1
 8002b72:	f04f 0400 	mov.w	r4, #0
 8002b76:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8002b7a:	f144 0100 	adc.w	r1, r4, #0
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f04f 0400 	mov.w	r4, #0
 8002b86:	461a      	mov	r2, r3
 8002b88:	4623      	mov	r3, r4
 8002b8a:	f7fd fb2f 	bl	80001ec <__aeabi_uldivmod>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	460c      	mov	r4, r1
 8002b92:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002b94:	e002      	b.n	8002b9c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	74fb      	strb	r3, [r7, #19]
            break;
 8002b9a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ba2:	d308      	bcc.n	8002bb6 <UART_SetConfig+0x486>
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002baa:	d204      	bcs.n	8002bb6 <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	60da      	str	r2, [r3, #12]
 8002bb4:	e0f5      	b.n	8002da2 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	74fb      	strb	r3, [r7, #19]
 8002bba:	e0f2      	b.n	8002da2 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bc4:	d17f      	bne.n	8002cc6 <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8002bc6:	7efb      	ldrb	r3, [r7, #27]
 8002bc8:	2b08      	cmp	r3, #8
 8002bca:	d85c      	bhi.n	8002c86 <UART_SetConfig+0x556>
 8002bcc:	a201      	add	r2, pc, #4	; (adr r2, 8002bd4 <UART_SetConfig+0x4a4>)
 8002bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd2:	bf00      	nop
 8002bd4:	08002bf9 	.word	0x08002bf9
 8002bd8:	08002c17 	.word	0x08002c17
 8002bdc:	08002c35 	.word	0x08002c35
 8002be0:	08002c87 	.word	0x08002c87
 8002be4:	08002c51 	.word	0x08002c51
 8002be8:	08002c87 	.word	0x08002c87
 8002bec:	08002c87 	.word	0x08002c87
 8002bf0:	08002c87 	.word	0x08002c87
 8002bf4:	08002c6f 	.word	0x08002c6f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002bf8:	f7fe fe9e 	bl	8001938 <HAL_RCC_GetPCLK1Freq>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	005a      	lsls	r2, r3, #1
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	085b      	lsrs	r3, r3, #1
 8002c06:	441a      	add	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002c14:	e03a      	b.n	8002c8c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002c16:	f7fe fea5 	bl	8001964 <HAL_RCC_GetPCLK2Freq>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	005a      	lsls	r2, r3, #1
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	085b      	lsrs	r3, r3, #1
 8002c24:	441a      	add	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002c32:	e02b      	b.n	8002c8c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	085b      	lsrs	r3, r3, #1
 8002c3a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002c3e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	6852      	ldr	r2, [r2, #4]
 8002c46:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002c4e:	e01d      	b.n	8002c8c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002c50:	f7fe fddc 	bl	800180c <HAL_RCC_GetSysClockFreq>
 8002c54:	4603      	mov	r3, r0
 8002c56:	005a      	lsls	r2, r3, #1
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	085b      	lsrs	r3, r3, #1
 8002c5e:	441a      	add	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002c6c:	e00e      	b.n	8002c8c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	085b      	lsrs	r3, r3, #1
 8002c74:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002c84:	e002      	b.n	8002c8c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	74fb      	strb	r3, [r7, #19]
        break;
 8002c8a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	2b0f      	cmp	r3, #15
 8002c90:	d916      	bls.n	8002cc0 <UART_SetConfig+0x590>
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c98:	d212      	bcs.n	8002cc0 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	f023 030f 	bic.w	r3, r3, #15
 8002ca2:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	085b      	lsrs	r3, r3, #1
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	f003 0307 	and.w	r3, r3, #7
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	897b      	ldrh	r3, [r7, #10]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	897a      	ldrh	r2, [r7, #10]
 8002cbc:	60da      	str	r2, [r3, #12]
 8002cbe:	e070      	b.n	8002da2 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	74fb      	strb	r3, [r7, #19]
 8002cc4:	e06d      	b.n	8002da2 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 8002cc6:	7efb      	ldrb	r3, [r7, #27]
 8002cc8:	2b08      	cmp	r3, #8
 8002cca:	d859      	bhi.n	8002d80 <UART_SetConfig+0x650>
 8002ccc:	a201      	add	r2, pc, #4	; (adr r2, 8002cd4 <UART_SetConfig+0x5a4>)
 8002cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd2:	bf00      	nop
 8002cd4:	08002cf9 	.word	0x08002cf9
 8002cd8:	08002d15 	.word	0x08002d15
 8002cdc:	08002d31 	.word	0x08002d31
 8002ce0:	08002d81 	.word	0x08002d81
 8002ce4:	08002d4d 	.word	0x08002d4d
 8002ce8:	08002d81 	.word	0x08002d81
 8002cec:	08002d81 	.word	0x08002d81
 8002cf0:	08002d81 	.word	0x08002d81
 8002cf4:	08002d69 	.word	0x08002d69
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002cf8:	f7fe fe1e 	bl	8001938 <HAL_RCC_GetPCLK1Freq>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	085b      	lsrs	r3, r3, #1
 8002d04:	441a      	add	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002d12:	e038      	b.n	8002d86 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002d14:	f7fe fe26 	bl	8001964 <HAL_RCC_GetPCLK2Freq>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	085b      	lsrs	r3, r3, #1
 8002d20:	441a      	add	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002d2e:	e02a      	b.n	8002d86 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	085b      	lsrs	r3, r3, #1
 8002d36:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002d3a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	6852      	ldr	r2, [r2, #4]
 8002d42:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002d4a:	e01c      	b.n	8002d86 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002d4c:	f7fe fd5e 	bl	800180c <HAL_RCC_GetSysClockFreq>
 8002d50:	4602      	mov	r2, r0
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	085b      	lsrs	r3, r3, #1
 8002d58:	441a      	add	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002d66:	e00e      	b.n	8002d86 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	085b      	lsrs	r3, r3, #1
 8002d6e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002d7e:	e002      	b.n	8002d86 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	74fb      	strb	r3, [r7, #19]
        break;
 8002d84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	2b0f      	cmp	r3, #15
 8002d8a:	d908      	bls.n	8002d9e <UART_SetConfig+0x66e>
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d92:	d204      	bcs.n	8002d9e <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	60da      	str	r2, [r3, #12]
 8002d9c:	e001      	b.n	8002da2 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002dae:	7cfb      	ldrb	r3, [r7, #19]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3720      	adds	r7, #32
 8002db4:	46bd      	mov	sp, r7
 8002db6:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8002dba:	bf00      	nop
 8002dbc:	f4240000 	.word	0xf4240000

08002dc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00a      	beq.n	8002dea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00a      	beq.n	8002e0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00a      	beq.n	8002e2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e32:	f003 0308 	and.w	r3, r3, #8
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00a      	beq.n	8002e50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e54:	f003 0310 	and.w	r3, r3, #16
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00a      	beq.n	8002e72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e76:	f003 0320 	and.w	r3, r3, #32
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00a      	beq.n	8002e94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	430a      	orrs	r2, r1
 8002e92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d01a      	beq.n	8002ed6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ebe:	d10a      	bne.n	8002ed6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00a      	beq.n	8002ef8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	605a      	str	r2, [r3, #4]
  }
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af02      	add	r7, sp, #8
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002f12:	f7fd fb83 	bl	800061c <HAL_GetTick>
 8002f16:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0308 	and.w	r3, r3, #8
 8002f22:	2b08      	cmp	r3, #8
 8002f24:	d10e      	bne.n	8002f44 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f26:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 f82a 	bl	8002f8e <UART_WaitOnFlagUntilTimeout>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e020      	b.n	8002f86 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0304 	and.w	r3, r3, #4
 8002f4e:	2b04      	cmp	r3, #4
 8002f50:	d10e      	bne.n	8002f70 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f52:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 f814 	bl	8002f8e <UART_WaitOnFlagUntilTimeout>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e00a      	b.n	8002f86 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2220      	movs	r2, #32
 8002f74:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2220      	movs	r2, #32
 8002f7a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b084      	sub	sp, #16
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	60f8      	str	r0, [r7, #12]
 8002f96:	60b9      	str	r1, [r7, #8]
 8002f98:	603b      	str	r3, [r7, #0]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f9e:	e02a      	b.n	8002ff6 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fa6:	d026      	beq.n	8002ff6 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fa8:	f7fd fb38 	bl	800061c <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d302      	bcc.n	8002fbe <UART_WaitOnFlagUntilTimeout+0x30>
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d11b      	bne.n	8002ff6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002fcc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 0201 	bic.w	r2, r2, #1
 8002fdc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e00f      	b.n	8003016 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	69da      	ldr	r2, [r3, #28]
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	4013      	ands	r3, r2
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	429a      	cmp	r2, r3
 8003004:	bf0c      	ite	eq
 8003006:	2301      	moveq	r3, #1
 8003008:	2300      	movne	r3, #0
 800300a:	b2db      	uxtb	r3, r3
 800300c:	461a      	mov	r2, r3
 800300e:	79fb      	ldrb	r3, [r7, #7]
 8003010:	429a      	cmp	r2, r3
 8003012:	d0c5      	beq.n	8002fa0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
	...

08003020 <flash_jump_to_factory_firmware>:
typedef void (*pFunction)(void);

static uint32_t flash_ptr = FLAG_ADDRESS;

void flash_jump_to_factory_firmware(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
  /* Function pointer to the address of the user application. */
	uart_transmit_str((uint8_t*)"inside fuct.... \n\r");
 8003026:	4811      	ldr	r0, [pc, #68]	; (800306c <flash_jump_to_factory_firmware+0x4c>)
 8003028:	f000 f8cc 	bl	80031c4 <uart_transmit_str>
  fnc_ptr jump_to_app;
  jump_to_app = (fnc_ptr)(*(volatile uint32_t*) (FLASH_FFW_START_ADDRESS+4u));
 800302c:	4b10      	ldr	r3, [pc, #64]	; (8003070 <flash_jump_to_factory_firmware+0x50>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	607b      	str	r3, [r7, #4]
  HAL_RCC_DeInit();
 8003032:	f7fd fe79 	bl	8000d28 <HAL_RCC_DeInit>
  HAL_DeInit();
 8003036:	f7fd fa71 	bl	800051c <HAL_DeInit>
  SysTick->CTRL = 0;
 800303a:	4b0e      	ldr	r3, [pc, #56]	; (8003074 <flash_jump_to_factory_firmware+0x54>)
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = 0;
 8003040:	4b0c      	ldr	r3, [pc, #48]	; (8003074 <flash_jump_to_factory_firmware+0x54>)
 8003042:	2200      	movs	r2, #0
 8003044:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;
 8003046:	4b0b      	ldr	r3, [pc, #44]	; (8003074 <flash_jump_to_factory_firmware+0x54>)
 8003048:	2200      	movs	r2, #0
 800304a:	609a      	str	r2, [r3, #8]
  SCB->VTOR = FLASH_FFW_START_ADDRESS;
 800304c:	4b0a      	ldr	r3, [pc, #40]	; (8003078 <flash_jump_to_factory_firmware+0x58>)
 800304e:	4a0b      	ldr	r2, [pc, #44]	; (800307c <flash_jump_to_factory_firmware+0x5c>)
 8003050:	609a      	str	r2, [r3, #8]
  /* Change the main stack pointer. */
  __set_MSP(*(volatile uint32_t*)FLASH_FFW_START_ADDRESS);
 8003052:	4b0a      	ldr	r3, [pc, #40]	; (800307c <flash_jump_to_factory_firmware+0x5c>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	f383 8808 	msr	MSP, r3
  jump_to_app();
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4798      	blx	r3
}
 8003062:	bf00      	nop
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	08003eb0 	.word	0x08003eb0
 8003070:	08010004 	.word	0x08010004
 8003074:	e000e010 	.word	0xe000e010
 8003078:	e000ed00 	.word	0xe000ed00
 800307c:	08010000 	.word	0x08010000

08003080 <flash_jump_to_main_firmware>:
void flash_jump_to_main_firmware(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
  /* Function pointer to the address of the user application. */
  fnc_ptr jump_to_app;
  jump_to_app = (fnc_ptr)(*(volatile uint32_t*) (FLASH_MFW_START_ADDRESS+4u));
 8003086:	4b0f      	ldr	r3, [pc, #60]	; (80030c4 <flash_jump_to_main_firmware+0x44>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	607b      	str	r3, [r7, #4]
  HAL_RCC_DeInit();
 800308c:	f7fd fe4c 	bl	8000d28 <HAL_RCC_DeInit>
  HAL_DeInit();
 8003090:	f7fd fa44 	bl	800051c <HAL_DeInit>
  SysTick->CTRL = 0;
 8003094:	4b0c      	ldr	r3, [pc, #48]	; (80030c8 <flash_jump_to_main_firmware+0x48>)
 8003096:	2200      	movs	r2, #0
 8003098:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = 0;
 800309a:	4b0b      	ldr	r3, [pc, #44]	; (80030c8 <flash_jump_to_main_firmware+0x48>)
 800309c:	2200      	movs	r2, #0
 800309e:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;
 80030a0:	4b09      	ldr	r3, [pc, #36]	; (80030c8 <flash_jump_to_main_firmware+0x48>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	609a      	str	r2, [r3, #8]
  SCB->VTOR = FLASH_MFW_START_ADDRESS;
 80030a6:	4b09      	ldr	r3, [pc, #36]	; (80030cc <flash_jump_to_main_firmware+0x4c>)
 80030a8:	4a09      	ldr	r2, [pc, #36]	; (80030d0 <flash_jump_to_main_firmware+0x50>)
 80030aa:	609a      	str	r2, [r3, #8]
  /* Change the main stack pointer. */
  __set_MSP(*(volatile uint32_t*)FLASH_MFW_START_ADDRESS);
 80030ac:	4b08      	ldr	r3, [pc, #32]	; (80030d0 <flash_jump_to_main_firmware+0x50>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	603b      	str	r3, [r7, #0]
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	f383 8808 	msr	MSP, r3
  jump_to_app();
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4798      	blx	r3
}
 80030bc:	bf00      	nop
 80030be:	3708      	adds	r7, #8
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	08060004 	.word	0x08060004
 80030c8:	e000e010 	.word	0xe000e010
 80030cc:	e000ed00 	.word	0xe000ed00
 80030d0:	08060000 	.word	0x08060000

080030d4 <Bootloader_Init>:
void Bootloader_Init(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030da:	4b15      	ldr	r3, [pc, #84]	; (8003130 <Bootloader_Init+0x5c>)
 80030dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030de:	4a14      	ldr	r2, [pc, #80]	; (8003130 <Bootloader_Init+0x5c>)
 80030e0:	f043 0301 	orr.w	r3, r3, #1
 80030e4:	6613      	str	r3, [r2, #96]	; 0x60
 80030e6:	4b12      	ldr	r3, [pc, #72]	; (8003130 <Bootloader_Init+0x5c>)
 80030e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	607b      	str	r3, [r7, #4]
 80030f0:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_FLASH_CLK_ENABLE();
 80030f2:	4b0f      	ldr	r3, [pc, #60]	; (8003130 <Bootloader_Init+0x5c>)
 80030f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030f6:	4a0e      	ldr	r2, [pc, #56]	; (8003130 <Bootloader_Init+0x5c>)
 80030f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030fc:	6493      	str	r3, [r2, #72]	; 0x48
 80030fe:	4b0c      	ldr	r3, [pc, #48]	; (8003130 <Bootloader_Init+0x5c>)
 8003100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003106:	603b      	str	r3, [r7, #0]
 8003108:	683b      	ldr	r3, [r7, #0]

    /* Clear flash flags */
    HAL_FLASH_Unlock();
 800310a:	f7fd fb9b 	bl	8000844 <HAL_FLASH_Unlock>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 800310e:	4b09      	ldr	r3, [pc, #36]	; (8003134 <Bootloader_Init+0x60>)
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	4a08      	ldr	r2, [pc, #32]	; (8003134 <Bootloader_Init+0x60>)
 8003114:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003118:	6193      	str	r3, [r2, #24]
 800311a:	4b06      	ldr	r3, [pc, #24]	; (8003134 <Bootloader_Init+0x60>)
 800311c:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8003120:	611a      	str	r2, [r3, #16]
    HAL_FLASH_Lock();
 8003122:	f7fd fbb1 	bl	8000888 <HAL_FLASH_Lock>
}
 8003126:	bf00      	nop
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	40021000 	.word	0x40021000
 8003134:	40022000 	.word	0x40022000

08003138 <Flag_Erase_All>:

uint8_t Flag_Erase_All(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b088      	sub	sp, #32
 800313c:	af00      	add	r7, sp, #0
    uint32_t NbrOfPages = 0;
 800313e:	2300      	movs	r3, #0
 8003140:	61fb      	str	r3, [r7, #28]
    uint32_t PageError  = 0;
 8003142:	2300      	movs	r3, #0
 8003144:	61bb      	str	r3, [r7, #24]
    FLASH_EraseInitTypeDef  pEraseInit;
    HAL_StatusTypeDef       status = HAL_OK;
 8003146:	2300      	movs	r3, #0
 8003148:	75fb      	strb	r3, [r7, #23]

    HAL_FLASH_Unlock();
 800314a:	f7fd fb7b 	bl	8000844 <HAL_FLASH_Unlock>
        NbrOfPages = FLASH_PAGE_NBPERBANK;
    }*/

 //   if(status == HAL_OK)
   // {
        pEraseInit.Banks = FLASH_BANK_2;
 800314e:	2302      	movs	r3, #2
 8003150:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbPages = 4;
 8003152:	2304      	movs	r3, #4
 8003154:	613b      	str	r3, [r7, #16]
        //pEraseInit.Page = FLASH_PAGE_NBPERBANK - pEraseInit.NbPages;
        pEraseInit.Page = 508;
 8003156:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
 800315a:	60fb      	str	r3, [r7, #12]
        pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 800315c:	2300      	movs	r3, #0
 800315e:	607b      	str	r3, [r7, #4]
       // status = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
      //  status = HAL_FLASHEx_Erase(&pEraseInit, PageError);
   // }

    HAL_FLASH_Lock();
 8003160:	f7fd fb92 	bl	8000888 <HAL_FLASH_Lock>

    return (status == HAL_OK) ? BL_OK : BL_ERASE_ERROR;
 8003164:	7dfb      	ldrb	r3, [r7, #23]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <Flag_Erase_All+0x36>
 800316a:	2300      	movs	r3, #0
 800316c:	e000      	b.n	8003170 <Flag_Erase_All+0x38>
 800316e:	2304      	movs	r3, #4
}
 8003170:	4618      	mov	r0, r3
 8003172:	3720      	adds	r7, #32
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <Bootloader_FlashBegin>:

void Bootloader_FlashBegin(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
    /* Reset flash destination address */
   // flash_ptr = FLAG_ADDRESS;

    /* Unlock flash */
    HAL_FLASH_Unlock();
 800317c:	f7fd fb62 	bl	8000844 <HAL_FLASH_Unlock>
}
 8003180:	bf00      	nop
 8003182:	bd80      	pop	{r7, pc}

08003184 <Bootloader_FlashEnd>:
    }

    return BL_OK;
}
void Bootloader_FlashEnd(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
    /* Lock flash */
    HAL_FLASH_Lock();
 8003188:	f7fd fb7e 	bl	8000888 <HAL_FLASH_Lock>
}
 800318c:	bf00      	nop
 800318e:	bd80      	pop	{r7, pc}

08003190 <Read_Flag>:
uint32_t Read_Flag(uint8_t FlagAddr)
{
 8003190:	b480      	push	{r7}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	4603      	mov	r3, r0
 8003198:	71fb      	strb	r3, [r7, #7]
	uint32_t FlashValue = 0;
 800319a:	2300      	movs	r3, #0
 800319c:	60fb      	str	r3, [r7, #12]

	uint32_t FlagAddr_temp = (FlagAddr*8)+FLAG_ADDRESS;
 800319e:	79fb      	ldrb	r3, [r7, #7]
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	461a      	mov	r2, r3
 80031a4:	4b06      	ldr	r3, [pc, #24]	; (80031c0 <Read_Flag+0x30>)
 80031a6:	4413      	add	r3, r2
 80031a8:	60bb      	str	r3, [r7, #8]
	FlashValue = *(uint32_t*)(FlagAddr_temp);
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	60fb      	str	r3, [r7, #12]
	return FlashValue;
 80031b0:	68fb      	ldr	r3, [r7, #12]

}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3714      	adds	r7, #20
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	080ff800 	.word	0x080ff800

080031c4 <uart_transmit_str>:
 * @brief   Transmits a string to UART.
 * @param   *data: Array of the data.
 * @return  status: Report about the success of the transmission.
 */
uart_status uart_transmit_str(uint8_t *data)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uart_status status = UART_ERROR;
 80031cc:	23ff      	movs	r3, #255	; 0xff
 80031ce:	73fb      	strb	r3, [r7, #15]
  uint16_t length = 0u;
 80031d0:	2300      	movs	r3, #0
 80031d2:	81bb      	strh	r3, [r7, #12]

  /* Calculate the length. */
  while ('\0' != data[length])
 80031d4:	e002      	b.n	80031dc <uart_transmit_str+0x18>
  {
    length++;
 80031d6:	89bb      	ldrh	r3, [r7, #12]
 80031d8:	3301      	adds	r3, #1
 80031da:	81bb      	strh	r3, [r7, #12]
  while ('\0' != data[length])
 80031dc:	89bb      	ldrh	r3, [r7, #12]
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	4413      	add	r3, r2
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1f6      	bne.n	80031d6 <uart_transmit_str+0x12>
  }

  if (HAL_OK == HAL_UART_Transmit(&DEBUG_UART, data, length, UART_TIMEOUT))
 80031e8:	89ba      	ldrh	r2, [r7, #12]
 80031ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031ee:	6879      	ldr	r1, [r7, #4]
 80031f0:	4806      	ldr	r0, [pc, #24]	; (800320c <uart_transmit_str+0x48>)
 80031f2:	f7ff f93d 	bl	8002470 <HAL_UART_Transmit>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <uart_transmit_str+0x3c>
  {
    status = UART_OK;
 80031fc:	2300      	movs	r3, #0
 80031fe:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003200:	7bfb      	ldrb	r3, [r7, #15]
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	20000030 	.word	0x20000030

08003210 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

int boot_value = 3 ;
 8003216:	2303      	movs	r3, #3
 8003218:	607b      	str	r3, [r7, #4]
uint8_t  FlashValue = 0;
 800321a:	2300      	movs	r3, #0
 800321c:	70fb      	strb	r3, [r7, #3]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800321e:	f7fd f965 	bl	80004ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003222:	f000 fba2 	bl	800396a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003226:	f000 fc67 	bl	8003af8 <MX_GPIO_Init>
  MX_UART5_Init();
 800322a:	f000 fc05 	bl	8003a38 <MX_UART5_Init>
  MX_USART3_UART_Init();
 800322e:	f000 fc33 	bl	8003a98 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  //--------------------------------------led toggle----------------------------------------//

  led_blink();
 8003232:	f000 fb09 	bl	8003848 <led_blink>

  //----------------------------------------------------------------------------------------//
  //---------------------------------------Debug UART---------------------------------------//
  uart_transmit_str((uint8_t*)"\n\r================================\n\r");
 8003236:	482e      	ldr	r0, [pc, #184]	; (80032f0 <main+0xe0>)
 8003238:	f7ff ffc4 	bl	80031c4 <uart_transmit_str>
  uart_transmit_str((uint8_t*)"IU Bootloader v0.01 \n\r");
 800323c:	482d      	ldr	r0, [pc, #180]	; (80032f4 <main+0xe4>)
 800323e:	f7ff ffc1 	bl	80031c4 <uart_transmit_str>
  uart_transmit_str((uint8_t*)"================================\n\r\n\r");
 8003242:	482d      	ldr	r0, [pc, #180]	; (80032f8 <main+0xe8>)
 8003244:	f7ff ffbe 	bl	80031c4 <uart_transmit_str>
//   uint8_t FlashValue_2 = *(uint8_t*)(FLAG_ADDRESS+16);
//  uint32_t FlashValue_1 = Read_Flag(MAIN_FW);
//  uint32_t FlashValue_2 = Read_Flag(FACTORY_FW);
//  uint32_t FlashValue_3 = Read_Flag(MFW_VER);
  //---------------------------------------GPIO INPUT---------------------------------------//
  boot_value =  boot_pins_read();
 8003248:	f000 f8d8 	bl	80033fc <boot_pins_read>
 800324c:	6078      	str	r0, [r7, #4]
  boot_value = 1; //forcing to uart
 800324e:	2301      	movs	r3, #1
 8003250:	607b      	str	r3, [r7, #4]


  switch(boot_value)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d007      	beq.n	8003268 <main+0x58>
 8003258:	2b02      	cmp	r3, #2
 800325a:	d009      	beq.n	8003270 <main+0x60>
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10b      	bne.n	8003278 <main+0x68>
  {
  case 0: Boot_FFW_Flag = 1 ;//set Factory Image;
 8003260:	4b26      	ldr	r3, [pc, #152]	; (80032fc <main+0xec>)
 8003262:	2201      	movs	r2, #1
 8003264:	701a      	strb	r2, [r3, #0]
	  break;
 8003266:	e00a      	b.n	800327e <main+0x6e>
  case 1: Debug_UART_Flag = 1; //uart_debug(); //pass control to UART
 8003268:	4b25      	ldr	r3, [pc, #148]	; (8003300 <main+0xf0>)
 800326a:	2201      	movs	r2, #1
 800326c:	701a      	strb	r2, [r3, #0]
	  break;
 800326e:	e006      	b.n	800327e <main+0x6e>
  case 2: Boot_RB_MFW_Flag = 1; //roll back main firmware
 8003270:	4b24      	ldr	r3, [pc, #144]	; (8003304 <main+0xf4>)
 8003272:	2201      	movs	r2, #1
 8003274:	701a      	strb	r2, [r3, #0]
	  break;
 8003276:	e002      	b.n	800327e <main+0x6e>
  default :  Boot_MFW_Flag =1 ;//normal boot / boot main firmware (default)
 8003278:	4b23      	ldr	r3, [pc, #140]	; (8003308 <main+0xf8>)
 800327a:	2201      	movs	r2, #1
 800327c:	701a      	strb	r2, [r3, #0]
  }
  if(Debug_UART_Flag == 1)
 800327e:	4b20      	ldr	r3, [pc, #128]	; (8003300 <main+0xf0>)
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d101      	bne.n	800328a <main+0x7a>

	  boot_uart_read(&rx_buffer_temp);
	  HAL_Delay(1000);
*/

	  uart_debug();
 8003286:	f000 f98b 	bl	80035a0 <uart_debug>
  }

  if(Boot_RB_MFW_Flag == 1)
 800328a:	4b1e      	ldr	r3, [pc, #120]	; (8003304 <main+0xf4>)
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d10d      	bne.n	80032ae <main+0x9e>
  {

	  update_flag(FW_ROLLBACK, 1);
 8003292:	2101      	movs	r1, #1
 8003294:	2004      	movs	r0, #4
 8003296:	f000 f83f 	bl	8003318 <update_flag>
	  uart_transmit_str((uint8_t*)"Jumping to ROLLBACK MFW.... \n\r");
 800329a:	481c      	ldr	r0, [pc, #112]	; (800330c <main+0xfc>)
 800329c:	f7ff ff92 	bl	80031c4 <uart_transmit_str>
	  HAL_Delay(1000);
 80032a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032a4:	f7fd f9c6 	bl	8000634 <HAL_Delay>
	  flash_jump_to_factory_firmware();
 80032a8:	f7ff feba 	bl	8003020 <flash_jump_to_factory_firmware>
 80032ac:	e01a      	b.n	80032e4 <main+0xd4>

  }else if(Boot_FFW_Flag == 1)
 80032ae:	4b13      	ldr	r3, [pc, #76]	; (80032fc <main+0xec>)
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d109      	bne.n	80032ca <main+0xba>
  {
	  uart_transmit_str((uint8_t*)"Jumping to FFW.... \n\r");
 80032b6:	4816      	ldr	r0, [pc, #88]	; (8003310 <main+0x100>)
 80032b8:	f7ff ff84 	bl	80031c4 <uart_transmit_str>
	  HAL_Delay(1000);
 80032bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032c0:	f7fd f9b8 	bl	8000634 <HAL_Delay>
	  flash_jump_to_factory_firmware();
 80032c4:	f7ff feac 	bl	8003020 <flash_jump_to_factory_firmware>
 80032c8:	e00c      	b.n	80032e4 <main+0xd4>

  }else if(Boot_MFW_Flag == 1)
 80032ca:	4b0f      	ldr	r3, [pc, #60]	; (8003308 <main+0xf8>)
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d108      	bne.n	80032e4 <main+0xd4>
  {
	  uart_transmit_str((uint8_t*)"Jumping to MFW.... \n\r");
 80032d2:	4810      	ldr	r0, [pc, #64]	; (8003314 <main+0x104>)
 80032d4:	f7ff ff76 	bl	80031c4 <uart_transmit_str>
	  HAL_Delay(1000);
 80032d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032dc:	f7fd f9aa 	bl	8000634 <HAL_Delay>
	  flash_jump_to_main_firmware();
 80032e0:	f7ff fece 	bl	8003080 <flash_jump_to_main_firmware>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(1000);
 80032e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032e8:	f7fd f9a4 	bl	8000634 <HAL_Delay>
 80032ec:	e7fa      	b.n	80032e4 <main+0xd4>
 80032ee:	bf00      	nop
 80032f0:	08003ec4 	.word	0x08003ec4
 80032f4:	08003eec 	.word	0x08003eec
 80032f8:	08003f04 	.word	0x08003f04
 80032fc:	20000131 	.word	0x20000131
 8003300:	2000002d 	.word	0x2000002d
 8003304:	20000130 	.word	0x20000130
 8003308:	2000002c 	.word	0x2000002c
 800330c:	08003f2c 	.word	0x08003f2c
 8003310:	08003f4c 	.word	0x08003f4c
 8003314:	08003f64 	.word	0x08003f64

08003318 <update_flag>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void update_flag(uint8_t flag_addr, uint32_t flag_data)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	4603      	mov	r3, r0
 8003320:	6039      	str	r1, [r7, #0]
 8003322:	71fb      	strb	r3, [r7, #7]
	  read_all_flags();
 8003324:	f000 f812 	bl	800334c <read_all_flags>
	  all_flags[flag_addr] = flag_data;
 8003328:	79fb      	ldrb	r3, [r7, #7]
 800332a:	4907      	ldr	r1, [pc, #28]	; (8003348 <update_flag+0x30>)
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  write_flag_init();
 8003332:	f000 f859 	bl	80033e8 <write_flag_init>
	  write_all_flags();
 8003336:	f000 f825 	bl	8003384 <write_all_flags>
	  Bootloader_FlashEnd();
 800333a:	f7ff ff23 	bl	8003184 <Bootloader_FlashEnd>

}
 800333e:	bf00      	nop
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	200000b0 	.word	0x200000b0

0800334c <read_all_flags>:
void read_all_flags()
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
//	   ESP_FW_VER_TEMP 		= Read_Flag(ESP_FW_VER);
//	   ESP_FW_UPGRAD_TEMP 	= Read_Flag(ESP_FW_UPGRAD);
//	   ESP_RUNNING_VER_TEMP = Read_Flag(ESP_RUNNING_VER);
//	   ESP_ROLLBACK_TEMP 	= Read_Flag(ESP_ROLLBACK);

	for(int i =0 ; i<32 ; i++)
 8003352:	2300      	movs	r3, #0
 8003354:	607b      	str	r3, [r7, #4]
 8003356:	e00c      	b.n	8003372 <read_all_flags+0x26>
	{

		all_flags[i] = Read_Flag(i);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	b2db      	uxtb	r3, r3
 800335c:	4618      	mov	r0, r3
 800335e:	f7ff ff17 	bl	8003190 <Read_Flag>
 8003362:	4601      	mov	r1, r0
 8003364:	4a06      	ldr	r2, [pc, #24]	; (8003380 <read_all_flags+0x34>)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i =0 ; i<32 ; i++)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	3301      	adds	r3, #1
 8003370:	607b      	str	r3, [r7, #4]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2b1f      	cmp	r3, #31
 8003376:	ddef      	ble.n	8003358 <read_all_flags+0xc>
	}


}
 8003378:	bf00      	nop
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	200000b0 	.word	0x200000b0

08003384 <write_all_flags>:
void write_all_flags()
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b0a2      	sub	sp, #136	; 0x88
 8003388:	af00      	add	r7, sp, #0
//		Write_Flag(ESP_ROLLBACK,ESP_ROLLBACK_TEMP);


	uint32_t all_flag_temp[32];

	Buffercpy(all_flags ,all_flag_temp, 32 );
 800338a:	1d3b      	adds	r3, r7, #4
 800338c:	2220      	movs	r2, #32
 800338e:	4619      	mov	r1, r3
 8003390:	4812      	ldr	r0, [pc, #72]	; (80033dc <write_all_flags+0x58>)
 8003392:	f000 fac9 	bl	8003928 <Buffercpy>

	for(int i =0 ; i<32 ; i++)
 8003396:	2300      	movs	r3, #0
 8003398:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800339c:	e004      	b.n	80033a8 <write_all_flags+0x24>
 800339e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033a2:	3301      	adds	r3, #1
 80033a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80033a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033ac:	2b1f      	cmp	r3, #31
 80033ae:	ddf6      	ble.n	800339e <write_all_flags+0x1a>
	{
		//Write_Flag(i,all_flags[i]);
		//HAL_Delay(1000);
	}
	read_all_flags();
 80033b0:	f7ff ffcc 	bl	800334c <read_all_flags>

	if(Buffercmp32(all_flag_temp , all_flags, 32))
 80033b4:	1d3b      	adds	r3, r7, #4
 80033b6:	2220      	movs	r2, #32
 80033b8:	4908      	ldr	r1, [pc, #32]	; (80033dc <write_all_flags+0x58>)
 80033ba:	4618      	mov	r0, r3
 80033bc:	f000 fa92 	bl	80038e4 <Buffercmp32>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <write_all_flags+0x4a>
	{
		uart_transmit_str((uint8_t*)"Success.... \n\r");
 80033c6:	4806      	ldr	r0, [pc, #24]	; (80033e0 <write_all_flags+0x5c>)
 80033c8:	f7ff fefc 	bl	80031c4 <uart_transmit_str>
	{
		uart_transmit_str((uint8_t*)"Failed.... \n\r");

	}

}
 80033cc:	e002      	b.n	80033d4 <write_all_flags+0x50>
		uart_transmit_str((uint8_t*)"Failed.... \n\r");
 80033ce:	4805      	ldr	r0, [pc, #20]	; (80033e4 <write_all_flags+0x60>)
 80033d0:	f7ff fef8 	bl	80031c4 <uart_transmit_str>
}
 80033d4:	bf00      	nop
 80033d6:	3788      	adds	r7, #136	; 0x88
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	200000b0 	.word	0x200000b0
 80033e0:	08003f7c 	.word	0x08003f7c
 80033e4:	08003f8c 	.word	0x08003f8c

080033e8 <write_flag_init>:
void write_flag_init()
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
	Bootloader_Init();
 80033ec:	f7ff fe72 	bl	80030d4 <Bootloader_Init>
	Flag_Erase_All();
 80033f0:	f7ff fea2 	bl	8003138 <Flag_Erase_All>
	Bootloader_FlashBegin();
 80033f4:	f7ff fec0 	bl	8003178 <Bootloader_FlashBegin>
}
 80033f8:	bf00      	nop
 80033fa:	bd80      	pop	{r7, pc}

080033fc <boot_pins_read>:
int boot_pins_read()
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
int boot_0 = 1;
 8003402:	2301      	movs	r3, #1
 8003404:	617b      	str	r3, [r7, #20]
int boot_1 = 1;
 8003406:	2301      	movs	r3, #1
 8003408:	613b      	str	r3, [r7, #16]
int boot_value = 3;
 800340a:	2303      	movs	r3, #3
 800340c:	60fb      	str	r3, [r7, #12]

_Bool boot0_1 = HAL_GPIO_ReadPin(Boot_button_port, Boot_button_0);
 800340e:	2101      	movs	r1, #1
 8003410:	4862      	ldr	r0, [pc, #392]	; (800359c <boot_pins_read+0x1a0>)
 8003412:	f7fd fbdb 	bl	8000bcc <HAL_GPIO_ReadPin>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	bf14      	ite	ne
 800341c:	2301      	movne	r3, #1
 800341e:	2300      	moveq	r3, #0
 8003420:	72fb      	strb	r3, [r7, #11]
_Bool boot1_1 = HAL_GPIO_ReadPin(Boot_button_port, Boot_button_1);
 8003422:	2102      	movs	r1, #2
 8003424:	485d      	ldr	r0, [pc, #372]	; (800359c <boot_pins_read+0x1a0>)
 8003426:	f7fd fbd1 	bl	8000bcc <HAL_GPIO_ReadPin>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	bf14      	ite	ne
 8003430:	2301      	movne	r3, #1
 8003432:	2300      	moveq	r3, #0
 8003434:	72bb      	strb	r3, [r7, #10]
	HAL_Delay(1);
 8003436:	2001      	movs	r0, #1
 8003438:	f7fd f8fc 	bl	8000634 <HAL_Delay>
_Bool boot0_2 = HAL_GPIO_ReadPin(Boot_button_port, Boot_button_0);
 800343c:	2101      	movs	r1, #1
 800343e:	4857      	ldr	r0, [pc, #348]	; (800359c <boot_pins_read+0x1a0>)
 8003440:	f7fd fbc4 	bl	8000bcc <HAL_GPIO_ReadPin>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	bf14      	ite	ne
 800344a:	2301      	movne	r3, #1
 800344c:	2300      	moveq	r3, #0
 800344e:	727b      	strb	r3, [r7, #9]
_Bool boot1_2 = HAL_GPIO_ReadPin(Boot_button_port, Boot_button_1);
 8003450:	2102      	movs	r1, #2
 8003452:	4852      	ldr	r0, [pc, #328]	; (800359c <boot_pins_read+0x1a0>)
 8003454:	f7fd fbba 	bl	8000bcc <HAL_GPIO_ReadPin>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	bf14      	ite	ne
 800345e:	2301      	movne	r3, #1
 8003460:	2300      	moveq	r3, #0
 8003462:	723b      	strb	r3, [r7, #8]
	HAL_Delay(1);
 8003464:	2001      	movs	r0, #1
 8003466:	f7fd f8e5 	bl	8000634 <HAL_Delay>
_Bool boot0_3 = HAL_GPIO_ReadPin(Boot_button_port, Boot_button_0);
 800346a:	2101      	movs	r1, #1
 800346c:	484b      	ldr	r0, [pc, #300]	; (800359c <boot_pins_read+0x1a0>)
 800346e:	f7fd fbad 	bl	8000bcc <HAL_GPIO_ReadPin>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	bf14      	ite	ne
 8003478:	2301      	movne	r3, #1
 800347a:	2300      	moveq	r3, #0
 800347c:	71fb      	strb	r3, [r7, #7]
_Bool boot1_3 = HAL_GPIO_ReadPin(Boot_button_port, Boot_button_1);
 800347e:	2102      	movs	r1, #2
 8003480:	4846      	ldr	r0, [pc, #280]	; (800359c <boot_pins_read+0x1a0>)
 8003482:	f7fd fba3 	bl	8000bcc <HAL_GPIO_ReadPin>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	bf14      	ite	ne
 800348c:	2301      	movne	r3, #1
 800348e:	2300      	moveq	r3, #0
 8003490:	71bb      	strb	r3, [r7, #6]
	HAL_Delay(1);
 8003492:	2001      	movs	r0, #1
 8003494:	f7fd f8ce 	bl	8000634 <HAL_Delay>
_Bool boot0_4 = HAL_GPIO_ReadPin(Boot_button_port, Boot_button_0);
 8003498:	2101      	movs	r1, #1
 800349a:	4840      	ldr	r0, [pc, #256]	; (800359c <boot_pins_read+0x1a0>)
 800349c:	f7fd fb96 	bl	8000bcc <HAL_GPIO_ReadPin>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	bf14      	ite	ne
 80034a6:	2301      	movne	r3, #1
 80034a8:	2300      	moveq	r3, #0
 80034aa:	717b      	strb	r3, [r7, #5]
_Bool boot1_4 = HAL_GPIO_ReadPin(Boot_button_port, Boot_button_1);
 80034ac:	2102      	movs	r1, #2
 80034ae:	483b      	ldr	r0, [pc, #236]	; (800359c <boot_pins_read+0x1a0>)
 80034b0:	f7fd fb8c 	bl	8000bcc <HAL_GPIO_ReadPin>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	bf14      	ite	ne
 80034ba:	2301      	movne	r3, #1
 80034bc:	2300      	moveq	r3, #0
 80034be:	713b      	strb	r3, [r7, #4]
	HAL_Delay(1);
 80034c0:	2001      	movs	r0, #1
 80034c2:	f7fd f8b7 	bl	8000634 <HAL_Delay>


if(boot0_1 && boot0_2 && boot0_3 && boot0_4)
 80034c6:	7afb      	ldrb	r3, [r7, #11]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00b      	beq.n	80034e4 <boot_pins_read+0xe8>
 80034cc:	7a7b      	ldrb	r3, [r7, #9]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d008      	beq.n	80034e4 <boot_pins_read+0xe8>
 80034d2:	79fb      	ldrb	r3, [r7, #7]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d005      	beq.n	80034e4 <boot_pins_read+0xe8>
 80034d8:	797b      	ldrb	r3, [r7, #5]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d002      	beq.n	80034e4 <boot_pins_read+0xe8>
	{
	boot_0 = 1;
 80034de:	2301      	movs	r3, #1
 80034e0:	617b      	str	r3, [r7, #20]
 80034e2:	e01c      	b.n	800351e <boot_pins_read+0x122>
	}else if (!boot0_1 && !boot0_2 && !boot0_3 && !boot0_4)
 80034e4:	7afb      	ldrb	r3, [r7, #11]
 80034e6:	f083 0301 	eor.w	r3, r3, #1
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d014      	beq.n	800351a <boot_pins_read+0x11e>
 80034f0:	7a7b      	ldrb	r3, [r7, #9]
 80034f2:	f083 0301 	eor.w	r3, r3, #1
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00e      	beq.n	800351a <boot_pins_read+0x11e>
 80034fc:	79fb      	ldrb	r3, [r7, #7]
 80034fe:	f083 0301 	eor.w	r3, r3, #1
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	d008      	beq.n	800351a <boot_pins_read+0x11e>
 8003508:	797b      	ldrb	r3, [r7, #5]
 800350a:	f083 0301 	eor.w	r3, r3, #1
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b00      	cmp	r3, #0
 8003512:	d002      	beq.n	800351a <boot_pins_read+0x11e>
	{
		boot_0 = 0;
 8003514:	2300      	movs	r3, #0
 8003516:	617b      	str	r3, [r7, #20]
 8003518:	e001      	b.n	800351e <boot_pins_read+0x122>
	}else{
		boot_0 = 2;
 800351a:	2302      	movs	r3, #2
 800351c:	617b      	str	r3, [r7, #20]
	}
if(boot1_1 && boot1_2 && boot1_3 && boot1_4)
 800351e:	7abb      	ldrb	r3, [r7, #10]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00b      	beq.n	800353c <boot_pins_read+0x140>
 8003524:	7a3b      	ldrb	r3, [r7, #8]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d008      	beq.n	800353c <boot_pins_read+0x140>
 800352a:	79bb      	ldrb	r3, [r7, #6]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d005      	beq.n	800353c <boot_pins_read+0x140>
 8003530:	793b      	ldrb	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d002      	beq.n	800353c <boot_pins_read+0x140>
	{
	boot_1 = 1;
 8003536:	2301      	movs	r3, #1
 8003538:	613b      	str	r3, [r7, #16]
 800353a:	e01c      	b.n	8003576 <boot_pins_read+0x17a>
	}else if (!boot1_1 && !boot1_2 && !boot1_3 && !boot1_4)
 800353c:	7abb      	ldrb	r3, [r7, #10]
 800353e:	f083 0301 	eor.w	r3, r3, #1
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b00      	cmp	r3, #0
 8003546:	d014      	beq.n	8003572 <boot_pins_read+0x176>
 8003548:	7a3b      	ldrb	r3, [r7, #8]
 800354a:	f083 0301 	eor.w	r3, r3, #1
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00e      	beq.n	8003572 <boot_pins_read+0x176>
 8003554:	79bb      	ldrb	r3, [r7, #6]
 8003556:	f083 0301 	eor.w	r3, r3, #1
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b00      	cmp	r3, #0
 800355e:	d008      	beq.n	8003572 <boot_pins_read+0x176>
 8003560:	793b      	ldrb	r3, [r7, #4]
 8003562:	f083 0301 	eor.w	r3, r3, #1
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	d002      	beq.n	8003572 <boot_pins_read+0x176>
	{
		boot_1 = 0;
 800356c:	2300      	movs	r3, #0
 800356e:	613b      	str	r3, [r7, #16]
 8003570:	e001      	b.n	8003576 <boot_pins_read+0x17a>
	}else
	{
		boot_1 = 2;
 8003572:	2302      	movs	r3, #2
 8003574:	613b      	str	r3, [r7, #16]
	}
if((boot_0 >= 2) && (boot_1 >= 2) )
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	2b01      	cmp	r3, #1
 800357a:	dd08      	ble.n	800358e <boot_pins_read+0x192>
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	2b01      	cmp	r3, #1
 8003580:	dd05      	ble.n	800358e <boot_pins_read+0x192>
	{
	 boot_value = boot_0 *2 + boot_1;
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	4413      	add	r3, r2
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	e001      	b.n	8003592 <boot_pins_read+0x196>
	}else
	{
		boot_value = 3;
 800358e:	2303      	movs	r3, #3
 8003590:	60fb      	str	r3, [r7, #12]
	}
return boot_value;
 8003592:	68fb      	ldr	r3, [r7, #12]
}
 8003594:	4618      	mov	r0, r3
 8003596:	3718      	adds	r7, #24
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	48000800 	.word	0x48000800

080035a0 <uart_debug>:
void uart_debug()
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b0ae      	sub	sp, #184	; 0xb8
 80035a4:	af00      	add	r7, sp, #0
	unsigned char rx_buffer[50];
	unsigned char rx_flag_address_buffer[50];
	unsigned char rx_data_buffer[50];
	unsigned char cmd_0[3]={'B','M','F'};
 80035a6:	4a6e      	ldr	r2, [pc, #440]	; (8003760 <uart_debug+0x1c0>)
 80035a8:	f107 0318 	add.w	r3, r7, #24
 80035ac:	6812      	ldr	r2, [r2, #0]
 80035ae:	4611      	mov	r1, r2
 80035b0:	8019      	strh	r1, [r3, #0]
 80035b2:	3302      	adds	r3, #2
 80035b4:	0c12      	lsrs	r2, r2, #16
 80035b6:	701a      	strb	r2, [r3, #0]
	unsigned char cmd_1[3]={'B','F','F'};
 80035b8:	4a6a      	ldr	r2, [pc, #424]	; (8003764 <uart_debug+0x1c4>)
 80035ba:	f107 0314 	add.w	r3, r7, #20
 80035be:	6812      	ldr	r2, [r2, #0]
 80035c0:	4611      	mov	r1, r2
 80035c2:	8019      	strh	r1, [r3, #0]
 80035c4:	3302      	adds	r3, #2
 80035c6:	0c12      	lsrs	r2, r2, #16
 80035c8:	701a      	strb	r2, [r3, #0]
	unsigned char cmd_2[3]={'R','B','M'};
 80035ca:	4a67      	ldr	r2, [pc, #412]	; (8003768 <uart_debug+0x1c8>)
 80035cc:	f107 0310 	add.w	r3, r7, #16
 80035d0:	6812      	ldr	r2, [r2, #0]
 80035d2:	4611      	mov	r1, r2
 80035d4:	8019      	strh	r1, [r3, #0]
 80035d6:	3302      	adds	r3, #2
 80035d8:	0c12      	lsrs	r2, r2, #16
 80035da:	701a      	strb	r2, [r3, #0]
	unsigned char cmd_3[3]={'R','F','L'};
 80035dc:	4a63      	ldr	r2, [pc, #396]	; (800376c <uart_debug+0x1cc>)
 80035de:	f107 030c 	add.w	r3, r7, #12
 80035e2:	6812      	ldr	r2, [r2, #0]
 80035e4:	4611      	mov	r1, r2
 80035e6:	8019      	strh	r1, [r3, #0]
 80035e8:	3302      	adds	r3, #2
 80035ea:	0c12      	lsrs	r2, r2, #16
 80035ec:	701a      	strb	r2, [r3, #0]
	unsigned char cmd_4[3]={'W','F','L'};
 80035ee:	4a60      	ldr	r2, [pc, #384]	; (8003770 <uart_debug+0x1d0>)
 80035f0:	f107 0308 	add.w	r3, r7, #8
 80035f4:	6812      	ldr	r2, [r2, #0]
 80035f6:	4611      	mov	r1, r2
 80035f8:	8019      	strh	r1, [r3, #0]
 80035fa:	3302      	adds	r3, #2
 80035fc:	0c12      	lsrs	r2, r2, #16
 80035fe:	701a      	strb	r2, [r3, #0]
	unsigned char cmd_5[4]={'H','E','L','P'};
 8003600:	4b5c      	ldr	r3, [pc, #368]	; (8003774 <uart_debug+0x1d4>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	607b      	str	r3, [r7, #4]

label1:uart_transmit_str((uint8_t*)"Waiting for command");
 8003606:	485c      	ldr	r0, [pc, #368]	; (8003778 <uart_debug+0x1d8>)
 8003608:	f7ff fddc 	bl	80031c4 <uart_transmit_str>
	boot_uart_read((uint8_t*)rx_buffer);
 800360c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003610:	4618      	mov	r0, r3
 8003612:	f000 f8d5 	bl	80037c0 <boot_uart_read>

	  if(Buffercmp((uint8_t*)cmd_0,(uint8_t*)rx_buffer,3))
 8003616:	f107 0184 	add.w	r1, r7, #132	; 0x84
 800361a:	f107 0318 	add.w	r3, r7, #24
 800361e:	2203      	movs	r2, #3
 8003620:	4618      	mov	r0, r3
 8003622:	f000 f93d 	bl	80038a0 <Buffercmp>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d006      	beq.n	800363a <uart_debug+0x9a>
	  {
		  uart_transmit_str((uint8_t*)"received BMF.......\n\r");
 800362c:	4853      	ldr	r0, [pc, #332]	; (800377c <uart_debug+0x1dc>)
 800362e:	f7ff fdc9 	bl	80031c4 <uart_transmit_str>
		  Boot_MFW_Flag = 1; // Boot main firmware.
 8003632:	4b53      	ldr	r3, [pc, #332]	; (8003780 <uart_debug+0x1e0>)
 8003634:	2201      	movs	r2, #1
 8003636:	701a      	strb	r2, [r3, #0]
		  //uart_transmit_str((uint8_t*)"Waiting for command.......\n\r");
		  goto label1;
	  }


}
 8003638:	e08e      	b.n	8003758 <uart_debug+0x1b8>
	  }else if(Buffercmp((uint8_t*)cmd_1,(uint8_t*)rx_buffer,3))
 800363a:	f107 0184 	add.w	r1, r7, #132	; 0x84
 800363e:	f107 0314 	add.w	r3, r7, #20
 8003642:	2203      	movs	r2, #3
 8003644:	4618      	mov	r0, r3
 8003646:	f000 f92b 	bl	80038a0 <Buffercmp>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d006      	beq.n	800365e <uart_debug+0xbe>
		  uart_transmit_str((uint8_t*)"received BFF.......\n\r");
 8003650:	484c      	ldr	r0, [pc, #304]	; (8003784 <uart_debug+0x1e4>)
 8003652:	f7ff fdb7 	bl	80031c4 <uart_transmit_str>
		  Boot_FFW_Flag = 1; // Boot Factory firmware.
 8003656:	4b4c      	ldr	r3, [pc, #304]	; (8003788 <uart_debug+0x1e8>)
 8003658:	2201      	movs	r2, #1
 800365a:	701a      	strb	r2, [r3, #0]
}
 800365c:	e07c      	b.n	8003758 <uart_debug+0x1b8>
	  }else if(Buffercmp((uint8_t*)cmd_2,(uint8_t*)rx_buffer,3))
 800365e:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8003662:	f107 0310 	add.w	r3, r7, #16
 8003666:	2203      	movs	r2, #3
 8003668:	4618      	mov	r0, r3
 800366a:	f000 f919 	bl	80038a0 <Buffercmp>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d006      	beq.n	8003682 <uart_debug+0xe2>
		  uart_transmit_str((uint8_t*)"Received RBM.......\n\r");
 8003674:	4845      	ldr	r0, [pc, #276]	; (800378c <uart_debug+0x1ec>)
 8003676:	f7ff fda5 	bl	80031c4 <uart_transmit_str>
		  Boot_RB_MFW_Flag = 1; // Rollback main firmware.
 800367a:	4b45      	ldr	r3, [pc, #276]	; (8003790 <uart_debug+0x1f0>)
 800367c:	2201      	movs	r2, #1
 800367e:	701a      	strb	r2, [r3, #0]
}
 8003680:	e06a      	b.n	8003758 <uart_debug+0x1b8>
	  }else if(Buffercmp((uint8_t*)cmd_3,(uint8_t*)rx_buffer,3))
 8003682:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8003686:	f107 030c 	add.w	r3, r7, #12
 800368a:	2203      	movs	r2, #3
 800368c:	4618      	mov	r0, r3
 800368e:	f000 f907 	bl	80038a0 <Buffercmp>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d01e      	beq.n	80036d6 <uart_debug+0x136>
		  uart_transmit_str((uint8_t*)"Received RFL.......\n\r");
 8003698:	483e      	ldr	r0, [pc, #248]	; (8003794 <uart_debug+0x1f4>)
 800369a:	f7ff fd93 	bl	80031c4 <uart_transmit_str>
		  uart_transmit_str((uint8_t*)"Enter the flag address...");
 800369e:	483e      	ldr	r0, [pc, #248]	; (8003798 <uart_debug+0x1f8>)
 80036a0:	f7ff fd90 	bl	80031c4 <uart_transmit_str>
		  boot_uart_read((uint8_t*)rx_flag_address_buffer);
 80036a4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80036a8:	4618      	mov	r0, r3
 80036aa:	f000 f889 	bl	80037c0 <boot_uart_read>
		  uart_transmit_str((uint8_t*)"Received address :");
 80036ae:	483b      	ldr	r0, [pc, #236]	; (800379c <uart_debug+0x1fc>)
 80036b0:	f7ff fd88 	bl	80031c4 <uart_transmit_str>
		  uart_transmit_str(rx_flag_address_buffer);
 80036b4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7ff fd83 	bl	80031c4 <uart_transmit_str>
		  uart_transmit_str((uint8_t*)"Flag value at");
 80036be:	4838      	ldr	r0, [pc, #224]	; (80037a0 <uart_debug+0x200>)
 80036c0:	f7ff fd80 	bl	80031c4 <uart_transmit_str>
		  uart_transmit_str(rx_flag_address_buffer);
 80036c4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7ff fd7b 	bl	80031c4 <uart_transmit_str>
		  uart_transmit_str((uint8_t*)"is ");
 80036ce:	4835      	ldr	r0, [pc, #212]	; (80037a4 <uart_debug+0x204>)
 80036d0:	f7ff fd78 	bl	80031c4 <uart_transmit_str>
		  goto label1;
 80036d4:	e797      	b.n	8003606 <uart_debug+0x66>
	  }else if(Buffercmp((uint8_t*)cmd_4,(uint8_t*)rx_buffer,3))
 80036d6:	f107 0184 	add.w	r1, r7, #132	; 0x84
 80036da:	f107 0308 	add.w	r3, r7, #8
 80036de:	2203      	movs	r2, #3
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 f8dd 	bl	80038a0 <Buffercmp>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d023      	beq.n	8003734 <uart_debug+0x194>
		  uart_transmit_str((uint8_t*)"Received WFL.......\n\r");
 80036ec:	482e      	ldr	r0, [pc, #184]	; (80037a8 <uart_debug+0x208>)
 80036ee:	f7ff fd69 	bl	80031c4 <uart_transmit_str>
		  uart_transmit_str((uint8_t*)"Enter the flag address...");
 80036f2:	4829      	ldr	r0, [pc, #164]	; (8003798 <uart_debug+0x1f8>)
 80036f4:	f7ff fd66 	bl	80031c4 <uart_transmit_str>
		  boot_uart_read((uint8_t*)rx_flag_address_buffer);
 80036f8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 f85f 	bl	80037c0 <boot_uart_read>
		  uart_transmit_str((uint8_t*)"received address :");
 8003702:	482a      	ldr	r0, [pc, #168]	; (80037ac <uart_debug+0x20c>)
 8003704:	f7ff fd5e 	bl	80031c4 <uart_transmit_str>
		  uart_transmit_str(rx_flag_address_buffer);
 8003708:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800370c:	4618      	mov	r0, r3
 800370e:	f7ff fd59 	bl	80031c4 <uart_transmit_str>
		  uart_transmit_str((uint8_t*)"Enter the flag value...");
 8003712:	4827      	ldr	r0, [pc, #156]	; (80037b0 <uart_debug+0x210>)
 8003714:	f7ff fd56 	bl	80031c4 <uart_transmit_str>
		  boot_uart_read((uint8_t*)rx_data_buffer);
 8003718:	f107 031c 	add.w	r3, r7, #28
 800371c:	4618      	mov	r0, r3
 800371e:	f000 f84f 	bl	80037c0 <boot_uart_read>
		  uart_transmit_str((uint8_t*)"received data :");
 8003722:	4824      	ldr	r0, [pc, #144]	; (80037b4 <uart_debug+0x214>)
 8003724:	f7ff fd4e 	bl	80031c4 <uart_transmit_str>
		  uart_transmit_str(rx_data_buffer);
 8003728:	f107 031c 	add.w	r3, r7, #28
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff fd49 	bl	80031c4 <uart_transmit_str>
		  goto label1;
 8003732:	e768      	b.n	8003606 <uart_debug+0x66>
	  }else if(Buffercmp((uint8_t*)cmd_5,(uint8_t*)rx_buffer,4))
 8003734:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8003738:	1d3b      	adds	r3, r7, #4
 800373a:	2204      	movs	r2, #4
 800373c:	4618      	mov	r0, r3
 800373e:	f000 f8af 	bl	80038a0 <Buffercmp>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d003      	beq.n	8003750 <uart_debug+0x1b0>
		  uart_transmit_str((uint8_t*)"WFL : Write flag\n\r");
 8003748:	481b      	ldr	r0, [pc, #108]	; (80037b8 <uart_debug+0x218>)
 800374a:	f7ff fd3b 	bl	80031c4 <uart_transmit_str>
}
 800374e:	e003      	b.n	8003758 <uart_debug+0x1b8>
		  uart_transmit_str((uint8_t*)"invalid command.......\n\r");
 8003750:	481a      	ldr	r0, [pc, #104]	; (80037bc <uart_debug+0x21c>)
 8003752:	f7ff fd37 	bl	80031c4 <uart_transmit_str>
		  goto label1;
 8003756:	e756      	b.n	8003606 <uart_debug+0x66>
}
 8003758:	37b8      	adds	r7, #184	; 0xb8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	080040d8 	.word	0x080040d8
 8003764:	080040dc 	.word	0x080040dc
 8003768:	080040e0 	.word	0x080040e0
 800376c:	080040e4 	.word	0x080040e4
 8003770:	080040e8 	.word	0x080040e8
 8003774:	080040ec 	.word	0x080040ec
 8003778:	08003f9c 	.word	0x08003f9c
 800377c:	08003fb0 	.word	0x08003fb0
 8003780:	2000002c 	.word	0x2000002c
 8003784:	08003fc8 	.word	0x08003fc8
 8003788:	20000131 	.word	0x20000131
 800378c:	08003fe0 	.word	0x08003fe0
 8003790:	20000130 	.word	0x20000130
 8003794:	08003ff8 	.word	0x08003ff8
 8003798:	08004010 	.word	0x08004010
 800379c:	0800402c 	.word	0x0800402c
 80037a0:	08004040 	.word	0x08004040
 80037a4:	08004050 	.word	0x08004050
 80037a8:	08004054 	.word	0x08004054
 80037ac:	0800406c 	.word	0x0800406c
 80037b0:	08004080 	.word	0x08004080
 80037b4:	08004098 	.word	0x08004098
 80037b8:	080040a8 	.word	0x080040a8
 80037bc:	080040bc 	.word	0x080040bc

080037c0 <boot_uart_read>:
void boot_uart_read(uint8_t* rx_buffer)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]

int uart_receive_timout_1 =0;
 80037c8:	2300      	movs	r3, #0
 80037ca:	60fb      	str	r3, [r7, #12]

//uart_transmit_str((uint8_t*)"waiting for command.......");
	for(int i =0 ;i<=50; i++)
 80037cc:	2300      	movs	r3, #0
 80037ce:	60bb      	str	r3, [r7, #8]
 80037d0:	e007      	b.n	80037e2 <boot_uart_read+0x22>
		{
		rx_buffer[i] = '\0';
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	4413      	add	r3, r2
 80037d8:	2200      	movs	r2, #0
 80037da:	701a      	strb	r2, [r3, #0]
	for(int i =0 ;i<=50; i++)
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	3301      	adds	r3, #1
 80037e0:	60bb      	str	r3, [r7, #8]
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	2b32      	cmp	r3, #50	; 0x32
 80037e6:	ddf4      	ble.n	80037d2 <boot_uart_read+0x12>
		 }
	while(rx_buffer[0] == '\0')
 80037e8:	e01d      	b.n	8003826 <boot_uart_read+0x66>
		{
		uart_transmit_str((uint8_t*)".");
 80037ea:	4813      	ldr	r0, [pc, #76]	; (8003838 <boot_uart_read+0x78>)
 80037ec:	f7ff fcea 	bl	80031c4 <uart_transmit_str>
		HAL_UART_Receive(&DEBUG_UART, &rx_buffer[0], 50, 1000);
 80037f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037f4:	2232      	movs	r2, #50	; 0x32
 80037f6:	6879      	ldr	r1, [r7, #4]
 80037f8:	4810      	ldr	r0, [pc, #64]	; (800383c <boot_uart_read+0x7c>)
 80037fa:	f7fe fecc 	bl	8002596 <HAL_UART_Receive>
		uart_receive_timout_1++;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	3301      	adds	r3, #1
 8003802:	60fb      	str	r3, [r7, #12]
		if(uart_receive_timout_1 >=60)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2b3b      	cmp	r3, #59	; 0x3b
 8003808:	dd03      	ble.n	8003812 <boot_uart_read+0x52>
		 	 {
		 	 	uart_transmit_str((uint8_t*)"uart timeout.......\n\r");
 800380a:	480d      	ldr	r0, [pc, #52]	; (8003840 <boot_uart_read+0x80>)
 800380c:	f7ff fcda 	bl	80031c4 <uart_transmit_str>
		 	 	break;
 8003810:	e00d      	b.n	800382e <boot_uart_read+0x6e>
		 	 }
		 if(rx_buffer[0]!='\0')
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d005      	beq.n	8003826 <boot_uart_read+0x66>
		 	 {
			 	 uart_receive_timout_1 = 0;
 800381a:	2300      	movs	r3, #0
 800381c:	60fb      	str	r3, [r7, #12]
		 		uart_transmit_str((uint8_t*)"\n\r command received !\n\r");
 800381e:	4809      	ldr	r0, [pc, #36]	; (8003844 <boot_uart_read+0x84>)
 8003820:	f7ff fcd0 	bl	80031c4 <uart_transmit_str>
		 		break;
 8003824:	e003      	b.n	800382e <boot_uart_read+0x6e>
	while(rx_buffer[0] == '\0')
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d0dd      	beq.n	80037ea <boot_uart_read+0x2a>

		 	 }
		  }// end of loop

}
 800382e:	bf00      	nop
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	080040f0 	.word	0x080040f0
 800383c:	20000030 	.word	0x20000030
 8003840:	080040f4 	.word	0x080040f4
 8003844:	0800410c 	.word	0x0800410c

08003848 <led_blink>:
void led_blink(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
	  HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 800384c:	2104      	movs	r1, #4
 800384e:	4813      	ldr	r0, [pc, #76]	; (800389c <led_blink+0x54>)
 8003850:	f7fd f9ec 	bl	8000c2c <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8003854:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003858:	f7fc feec 	bl	8000634 <HAL_Delay>
	  HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 800385c:	2104      	movs	r1, #4
 800385e:	480f      	ldr	r0, [pc, #60]	; (800389c <led_blink+0x54>)
 8003860:	f7fd f9e4 	bl	8000c2c <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8003864:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003868:	f7fc fee4 	bl	8000634 <HAL_Delay>
	  HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 800386c:	2104      	movs	r1, #4
 800386e:	480b      	ldr	r0, [pc, #44]	; (800389c <led_blink+0x54>)
 8003870:	f7fd f9dc 	bl	8000c2c <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8003874:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003878:	f7fc fedc 	bl	8000634 <HAL_Delay>
	  HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 800387c:	2104      	movs	r1, #4
 800387e:	4807      	ldr	r0, [pc, #28]	; (800389c <led_blink+0x54>)
 8003880:	f7fd f9d4 	bl	8000c2c <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8003884:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003888:	f7fc fed4 	bl	8000634 <HAL_Delay>
	  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 0);
 800388c:	2200      	movs	r2, #0
 800388e:	2104      	movs	r1, #4
 8003890:	4802      	ldr	r0, [pc, #8]	; (800389c <led_blink+0x54>)
 8003892:	f7fd f9b3 	bl	8000bfc <HAL_GPIO_WritePin>

}
 8003896:	bf00      	nop
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	48000400 	.word	0x48000400

080038a0 <Buffercmp>:
static uint16_t Buffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	4613      	mov	r3, r2
 80038ac:	80fb      	strh	r3, [r7, #6]
  while (BufferLength--)
 80038ae:	e00d      	b.n	80038cc <Buffercmp+0x2c>
  {
    if ((*pBuffer1) != *pBuffer2)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	781a      	ldrb	r2, [r3, #0]
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d001      	beq.n	80038c0 <Buffercmp+0x20>
    {
      return 0;
 80038bc:	2300      	movs	r3, #0
 80038be:	e00b      	b.n	80038d8 <Buffercmp+0x38>
    }
    pBuffer1++;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	3301      	adds	r3, #1
 80038c4:	60fb      	str	r3, [r7, #12]
    pBuffer2++;
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	3301      	adds	r3, #1
 80038ca:	60bb      	str	r3, [r7, #8]
  while (BufferLength--)
 80038cc:	88fb      	ldrh	r3, [r7, #6]
 80038ce:	1e5a      	subs	r2, r3, #1
 80038d0:	80fa      	strh	r2, [r7, #6]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1ec      	bne.n	80038b0 <Buffercmp+0x10>
  }

  return 1;
 80038d6:	2301      	movs	r3, #1
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3714      	adds	r7, #20
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <Buffercmp32>:
static uint16_t Buffercmp32(uint32_t* pBuffer1, uint32_t* pBuffer2, uint16_t BufferLength)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	4613      	mov	r3, r2
 80038f0:	80fb      	strh	r3, [r7, #6]
  while (BufferLength--)
 80038f2:	e00d      	b.n	8003910 <Buffercmp32+0x2c>
  {
    if ((*pBuffer1) != *pBuffer2)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d001      	beq.n	8003904 <Buffercmp32+0x20>
    {
      return 0;
 8003900:	2300      	movs	r3, #0
 8003902:	e00b      	b.n	800391c <Buffercmp32+0x38>
    }
    pBuffer1++;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	3304      	adds	r3, #4
 8003908:	60fb      	str	r3, [r7, #12]
    pBuffer2++;
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	3304      	adds	r3, #4
 800390e:	60bb      	str	r3, [r7, #8]
  while (BufferLength--)
 8003910:	88fb      	ldrh	r3, [r7, #6]
 8003912:	1e5a      	subs	r2, r3, #1
 8003914:	80fa      	strh	r2, [r7, #6]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1ec      	bne.n	80038f4 <Buffercmp32+0x10>
  }

  return 1;
 800391a:	2301      	movs	r3, #1
}
 800391c:	4618      	mov	r0, r3
 800391e:	3714      	adds	r7, #20
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <Buffercpy>:
void Buffercpy(uint32_t* sBuffer, uint32_t* dBuffer, uint16_t BufferLength)
{
 8003928:	b480      	push	{r7}
 800392a:	b087      	sub	sp, #28
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	4613      	mov	r3, r2
 8003934:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i=0 ; i< BufferLength ; i++)
 8003936:	2300      	movs	r3, #0
 8003938:	82fb      	strh	r3, [r7, #22]
 800393a:	e00c      	b.n	8003956 <Buffercpy+0x2e>
	{

		dBuffer[i] = sBuffer[i];
 800393c:	8afb      	ldrh	r3, [r7, #22]
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	441a      	add	r2, r3
 8003944:	8afb      	ldrh	r3, [r7, #22]
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	68b9      	ldr	r1, [r7, #8]
 800394a:	440b      	add	r3, r1
 800394c:	6812      	ldr	r2, [r2, #0]
 800394e:	601a      	str	r2, [r3, #0]
	for(uint16_t i=0 ; i< BufferLength ; i++)
 8003950:	8afb      	ldrh	r3, [r7, #22]
 8003952:	3301      	adds	r3, #1
 8003954:	82fb      	strh	r3, [r7, #22]
 8003956:	8afa      	ldrh	r2, [r7, #22]
 8003958:	88fb      	ldrh	r3, [r7, #6]
 800395a:	429a      	cmp	r2, r3
 800395c:	d3ee      	bcc.n	800393c <Buffercpy+0x14>
	}

}
 800395e:	bf00      	nop
 8003960:	371c      	adds	r7, #28
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr

0800396a <SystemClock_Config>:

void SystemClock_Config(void)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b0ba      	sub	sp, #232	; 0xe8
 800396e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003970:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003974:	2244      	movs	r2, #68	; 0x44
 8003976:	2100      	movs	r1, #0
 8003978:	4618      	mov	r0, r3
 800397a:	f000 fa85 	bl	8003e88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800397e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003982:	2200      	movs	r2, #0
 8003984:	601a      	str	r2, [r3, #0]
 8003986:	605a      	str	r2, [r3, #4]
 8003988:	609a      	str	r2, [r3, #8]
 800398a:	60da      	str	r2, [r3, #12]
 800398c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800398e:	1d3b      	adds	r3, r7, #4
 8003990:	228c      	movs	r2, #140	; 0x8c
 8003992:	2100      	movs	r1, #0
 8003994:	4618      	mov	r0, r3
 8003996:	f000 fa77 	bl	8003e88 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800399a:	2310      	movs	r3, #16
 800399c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80039a0:	2301      	movs	r3, #1
 80039a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80039a6:	2300      	movs	r3, #0
 80039a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80039ac:	2360      	movs	r3, #96	; 0x60
 80039ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80039b2:	2300      	movs	r3, #0
 80039b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039b8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80039bc:	4618      	mov	r0, r3
 80039be:	f7fd fa55 	bl	8000e6c <HAL_RCC_OscConfig>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <SystemClock_Config+0x62>
  {
    Error_Handler();
 80039c8:	f000 f8ee 	bl	8003ba8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80039cc:	230f      	movs	r3, #15
 80039ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80039d2:	2300      	movs	r3, #0
 80039d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80039d8:	2300      	movs	r3, #0
 80039da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80039de:	2300      	movs	r3, #0
 80039e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80039e4:	2300      	movs	r3, #0
 80039e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80039ea:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80039ee:	2100      	movs	r1, #0
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7fd fe29 	bl	8001648 <HAL_RCC_ClockConfig>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80039fc:	f000 f8d4 	bl	8003ba8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART5;
 8003a00:	2314      	movs	r3, #20
 8003a02:	607b      	str	r3, [r7, #4]
  //PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003a04:	2300      	movs	r3, #0
 8003a06:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a0c:	1d3b      	adds	r3, r7, #4
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fe f81e 	bl	8001a50 <HAL_RCCEx_PeriphCLKConfig>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8003a1a:	f000 f8c5 	bl	8003ba8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003a1e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003a22:	f7fd f92b 	bl	8000c7c <HAL_PWREx_ControlVoltageScaling>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003a2c:	f000 f8bc 	bl	8003ba8 <Error_Handler>
  }
}
 8003a30:	bf00      	nop
 8003a32:	37e8      	adds	r7, #232	; 0xe8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003a3c:	4b14      	ldr	r3, [pc, #80]	; (8003a90 <MX_UART5_Init+0x58>)
 8003a3e:	4a15      	ldr	r2, [pc, #84]	; (8003a94 <MX_UART5_Init+0x5c>)
 8003a40:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8003a42:	4b13      	ldr	r3, [pc, #76]	; (8003a90 <MX_UART5_Init+0x58>)
 8003a44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003a48:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003a4a:	4b11      	ldr	r3, [pc, #68]	; (8003a90 <MX_UART5_Init+0x58>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003a50:	4b0f      	ldr	r3, [pc, #60]	; (8003a90 <MX_UART5_Init+0x58>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003a56:	4b0e      	ldr	r3, [pc, #56]	; (8003a90 <MX_UART5_Init+0x58>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003a5c:	4b0c      	ldr	r3, [pc, #48]	; (8003a90 <MX_UART5_Init+0x58>)
 8003a5e:	220c      	movs	r2, #12
 8003a60:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a62:	4b0b      	ldr	r3, [pc, #44]	; (8003a90 <MX_UART5_Init+0x58>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a68:	4b09      	ldr	r3, [pc, #36]	; (8003a90 <MX_UART5_Init+0x58>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a6e:	4b08      	ldr	r3, [pc, #32]	; (8003a90 <MX_UART5_Init+0x58>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a74:	4b06      	ldr	r3, [pc, #24]	; (8003a90 <MX_UART5_Init+0x58>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003a7a:	4805      	ldr	r0, [pc, #20]	; (8003a90 <MX_UART5_Init+0x58>)
 8003a7c:	f7fe fcaa 	bl	80023d4 <HAL_UART_Init>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8003a86:	f000 f88f 	bl	8003ba8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003a8a:	bf00      	nop
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	20000134 	.word	0x20000134
 8003a94:	40005000 	.word	0x40005000

08003a98 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003a9c:	4b14      	ldr	r3, [pc, #80]	; (8003af0 <MX_USART3_UART_Init+0x58>)
 8003a9e:	4a15      	ldr	r2, [pc, #84]	; (8003af4 <MX_USART3_UART_Init+0x5c>)
 8003aa0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003aa2:	4b13      	ldr	r3, [pc, #76]	; (8003af0 <MX_USART3_UART_Init+0x58>)
 8003aa4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003aa8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003aaa:	4b11      	ldr	r3, [pc, #68]	; (8003af0 <MX_USART3_UART_Init+0x58>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003ab0:	4b0f      	ldr	r3, [pc, #60]	; (8003af0 <MX_USART3_UART_Init+0x58>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003ab6:	4b0e      	ldr	r3, [pc, #56]	; (8003af0 <MX_USART3_UART_Init+0x58>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003abc:	4b0c      	ldr	r3, [pc, #48]	; (8003af0 <MX_USART3_UART_Init+0x58>)
 8003abe:	220c      	movs	r2, #12
 8003ac0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ac2:	4b0b      	ldr	r3, [pc, #44]	; (8003af0 <MX_USART3_UART_Init+0x58>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ac8:	4b09      	ldr	r3, [pc, #36]	; (8003af0 <MX_USART3_UART_Init+0x58>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003ace:	4b08      	ldr	r3, [pc, #32]	; (8003af0 <MX_USART3_UART_Init+0x58>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ad4:	4b06      	ldr	r3, [pc, #24]	; (8003af0 <MX_USART3_UART_Init+0x58>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003ada:	4805      	ldr	r0, [pc, #20]	; (8003af0 <MX_USART3_UART_Init+0x58>)
 8003adc:	f7fe fc7a 	bl	80023d4 <HAL_UART_Init>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003ae6:	f000 f85f 	bl	8003ba8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003aea:	bf00      	nop
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	20000030 	.word	0x20000030
 8003af4:	40004800 	.word	0x40004800

08003af8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b088      	sub	sp, #32
 8003afc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003afe:	f107 030c 	add.w	r3, r7, #12
 8003b02:	2200      	movs	r2, #0
 8003b04:	601a      	str	r2, [r3, #0]
 8003b06:	605a      	str	r2, [r3, #4]
 8003b08:	609a      	str	r2, [r3, #8]
 8003b0a:	60da      	str	r2, [r3, #12]
 8003b0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b0e:	4b23      	ldr	r3, [pc, #140]	; (8003b9c <MX_GPIO_Init+0xa4>)
 8003b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b12:	4a22      	ldr	r2, [pc, #136]	; (8003b9c <MX_GPIO_Init+0xa4>)
 8003b14:	f043 0304 	orr.w	r3, r3, #4
 8003b18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b1a:	4b20      	ldr	r3, [pc, #128]	; (8003b9c <MX_GPIO_Init+0xa4>)
 8003b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b1e:	f003 0304 	and.w	r3, r3, #4
 8003b22:	60bb      	str	r3, [r7, #8]
 8003b24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b26:	4b1d      	ldr	r3, [pc, #116]	; (8003b9c <MX_GPIO_Init+0xa4>)
 8003b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b2a:	4a1c      	ldr	r2, [pc, #112]	; (8003b9c <MX_GPIO_Init+0xa4>)
 8003b2c:	f043 0302 	orr.w	r3, r3, #2
 8003b30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b32:	4b1a      	ldr	r3, [pc, #104]	; (8003b9c <MX_GPIO_Init+0xa4>)
 8003b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	607b      	str	r3, [r7, #4]
 8003b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b3e:	4b17      	ldr	r3, [pc, #92]	; (8003b9c <MX_GPIO_Init+0xa4>)
 8003b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b42:	4a16      	ldr	r2, [pc, #88]	; (8003b9c <MX_GPIO_Init+0xa4>)
 8003b44:	f043 0308 	orr.w	r3, r3, #8
 8003b48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b4a:	4b14      	ldr	r3, [pc, #80]	; (8003b9c <MX_GPIO_Init+0xa4>)
 8003b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b4e:	f003 0308 	and.w	r3, r3, #8
 8003b52:	603b      	str	r3, [r7, #0]
 8003b54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8003b56:	2201      	movs	r2, #1
 8003b58:	2104      	movs	r1, #4
 8003b5a:	4811      	ldr	r0, [pc, #68]	; (8003ba0 <MX_GPIO_Init+0xa8>)
 8003b5c:	f7fd f84e 	bl	8000bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003b60:	2303      	movs	r3, #3
 8003b62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b64:	2300      	movs	r3, #0
 8003b66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b6c:	f107 030c 	add.w	r3, r7, #12
 8003b70:	4619      	mov	r1, r3
 8003b72:	480c      	ldr	r0, [pc, #48]	; (8003ba4 <MX_GPIO_Init+0xac>)
 8003b74:	f7fc fe98 	bl	80008a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RED_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 8003b78:	2304      	movs	r3, #4
 8003b7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b80:	2300      	movs	r3, #0
 8003b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b84:	2300      	movs	r3, #0
 8003b86:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 8003b88:	f107 030c 	add.w	r3, r7, #12
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	4804      	ldr	r0, [pc, #16]	; (8003ba0 <MX_GPIO_Init+0xa8>)
 8003b90:	f7fc fe8a 	bl	80008a8 <HAL_GPIO_Init>

}
 8003b94:	bf00      	nop
 8003b96:	3720      	adds	r7, #32
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	48000400 	.word	0x48000400
 8003ba4:	48000800 	.word	0x48000800

08003ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003bac:	bf00      	nop
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
	...

08003bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bbe:	4b0f      	ldr	r3, [pc, #60]	; (8003bfc <HAL_MspInit+0x44>)
 8003bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bc2:	4a0e      	ldr	r2, [pc, #56]	; (8003bfc <HAL_MspInit+0x44>)
 8003bc4:	f043 0301 	orr.w	r3, r3, #1
 8003bc8:	6613      	str	r3, [r2, #96]	; 0x60
 8003bca:	4b0c      	ldr	r3, [pc, #48]	; (8003bfc <HAL_MspInit+0x44>)
 8003bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	607b      	str	r3, [r7, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003bd6:	4b09      	ldr	r3, [pc, #36]	; (8003bfc <HAL_MspInit+0x44>)
 8003bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bda:	4a08      	ldr	r2, [pc, #32]	; (8003bfc <HAL_MspInit+0x44>)
 8003bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003be0:	6593      	str	r3, [r2, #88]	; 0x58
 8003be2:	4b06      	ldr	r3, [pc, #24]	; (8003bfc <HAL_MspInit+0x44>)
 8003be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bea:	603b      	str	r3, [r7, #0]
 8003bec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bee:	bf00      	nop
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	40021000 	.word	0x40021000

08003c00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b08c      	sub	sp, #48	; 0x30
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c08:	f107 031c 	add.w	r3, r7, #28
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	601a      	str	r2, [r3, #0]
 8003c10:	605a      	str	r2, [r3, #4]
 8003c12:	609a      	str	r2, [r3, #8]
 8003c14:	60da      	str	r2, [r3, #12]
 8003c16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a3c      	ldr	r2, [pc, #240]	; (8003d10 <HAL_UART_MspInit+0x110>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d145      	bne.n	8003cae <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8003c22:	4b3c      	ldr	r3, [pc, #240]	; (8003d14 <HAL_UART_MspInit+0x114>)
 8003c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c26:	4a3b      	ldr	r2, [pc, #236]	; (8003d14 <HAL_UART_MspInit+0x114>)
 8003c28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c2c:	6593      	str	r3, [r2, #88]	; 0x58
 8003c2e:	4b39      	ldr	r3, [pc, #228]	; (8003d14 <HAL_UART_MspInit+0x114>)
 8003c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c36:	61bb      	str	r3, [r7, #24]
 8003c38:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c3a:	4b36      	ldr	r3, [pc, #216]	; (8003d14 <HAL_UART_MspInit+0x114>)
 8003c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c3e:	4a35      	ldr	r2, [pc, #212]	; (8003d14 <HAL_UART_MspInit+0x114>)
 8003c40:	f043 0304 	orr.w	r3, r3, #4
 8003c44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c46:	4b33      	ldr	r3, [pc, #204]	; (8003d14 <HAL_UART_MspInit+0x114>)
 8003c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c4a:	f003 0304 	and.w	r3, r3, #4
 8003c4e:	617b      	str	r3, [r7, #20]
 8003c50:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c52:	4b30      	ldr	r3, [pc, #192]	; (8003d14 <HAL_UART_MspInit+0x114>)
 8003c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c56:	4a2f      	ldr	r2, [pc, #188]	; (8003d14 <HAL_UART_MspInit+0x114>)
 8003c58:	f043 0308 	orr.w	r3, r3, #8
 8003c5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c5e:	4b2d      	ldr	r3, [pc, #180]	; (8003d14 <HAL_UART_MspInit+0x114>)
 8003c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c62:	f003 0308 	and.w	r3, r3, #8
 8003c66:	613b      	str	r3, [r7, #16]
 8003c68:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003c6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c70:	2302      	movs	r3, #2
 8003c72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c74:	2300      	movs	r3, #0
 8003c76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003c7c:	2308      	movs	r3, #8
 8003c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c80:	f107 031c 	add.w	r3, r7, #28
 8003c84:	4619      	mov	r1, r3
 8003c86:	4824      	ldr	r0, [pc, #144]	; (8003d18 <HAL_UART_MspInit+0x118>)
 8003c88:	f7fc fe0e 	bl	80008a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003c8c:	2304      	movs	r3, #4
 8003c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c90:	2302      	movs	r3, #2
 8003c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c94:	2300      	movs	r3, #0
 8003c96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003c9c:	2308      	movs	r3, #8
 8003c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ca0:	f107 031c 	add.w	r3, r7, #28
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	481d      	ldr	r0, [pc, #116]	; (8003d1c <HAL_UART_MspInit+0x11c>)
 8003ca8:	f7fc fdfe 	bl	80008a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003cac:	e02c      	b.n	8003d08 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART3)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a1b      	ldr	r2, [pc, #108]	; (8003d20 <HAL_UART_MspInit+0x120>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d127      	bne.n	8003d08 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003cb8:	4b16      	ldr	r3, [pc, #88]	; (8003d14 <HAL_UART_MspInit+0x114>)
 8003cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cbc:	4a15      	ldr	r2, [pc, #84]	; (8003d14 <HAL_UART_MspInit+0x114>)
 8003cbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cc2:	6593      	str	r3, [r2, #88]	; 0x58
 8003cc4:	4b13      	ldr	r3, [pc, #76]	; (8003d14 <HAL_UART_MspInit+0x114>)
 8003cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ccc:	60fb      	str	r3, [r7, #12]
 8003cce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cd0:	4b10      	ldr	r3, [pc, #64]	; (8003d14 <HAL_UART_MspInit+0x114>)
 8003cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cd4:	4a0f      	ldr	r2, [pc, #60]	; (8003d14 <HAL_UART_MspInit+0x114>)
 8003cd6:	f043 0304 	orr.w	r3, r3, #4
 8003cda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cdc:	4b0d      	ldr	r3, [pc, #52]	; (8003d14 <HAL_UART_MspInit+0x114>)
 8003cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ce0:	f003 0304 	and.w	r3, r3, #4
 8003ce4:	60bb      	str	r3, [r7, #8]
 8003ce6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003ce8:	2330      	movs	r3, #48	; 0x30
 8003cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cec:	2302      	movs	r3, #2
 8003cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003cf8:	2307      	movs	r3, #7
 8003cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cfc:	f107 031c 	add.w	r3, r7, #28
 8003d00:	4619      	mov	r1, r3
 8003d02:	4805      	ldr	r0, [pc, #20]	; (8003d18 <HAL_UART_MspInit+0x118>)
 8003d04:	f7fc fdd0 	bl	80008a8 <HAL_GPIO_Init>
}
 8003d08:	bf00      	nop
 8003d0a:	3730      	adds	r7, #48	; 0x30
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40005000 	.word	0x40005000
 8003d14:	40021000 	.word	0x40021000
 8003d18:	48000800 	.word	0x48000800
 8003d1c:	48000c00 	.word	0x48000c00
 8003d20:	40004800 	.word	0x40004800

08003d24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003d28:	bf00      	nop
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr

08003d32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d32:	b480      	push	{r7}
 8003d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d36:	e7fe      	b.n	8003d36 <HardFault_Handler+0x4>

08003d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d3c:	e7fe      	b.n	8003d3c <MemManage_Handler+0x4>

08003d3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d42:	e7fe      	b.n	8003d42 <BusFault_Handler+0x4>

08003d44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d44:	b480      	push	{r7}
 8003d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d48:	e7fe      	b.n	8003d48 <UsageFault_Handler+0x4>

08003d4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d4e:	bf00      	nop
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d5c:	bf00      	nop
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr

08003d66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d66:	b480      	push	{r7}
 8003d68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d6a:	bf00      	nop
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d78:	f7fc fc3e 	bl	80005f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d7c:	bf00      	nop
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d84:	4b17      	ldr	r3, [pc, #92]	; (8003de4 <SystemInit+0x64>)
 8003d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d8a:	4a16      	ldr	r2, [pc, #88]	; (8003de4 <SystemInit+0x64>)
 8003d8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003d94:	4b14      	ldr	r3, [pc, #80]	; (8003de8 <SystemInit+0x68>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a13      	ldr	r2, [pc, #76]	; (8003de8 <SystemInit+0x68>)
 8003d9a:	f043 0301 	orr.w	r3, r3, #1
 8003d9e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003da0:	4b11      	ldr	r3, [pc, #68]	; (8003de8 <SystemInit+0x68>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003da6:	4b10      	ldr	r3, [pc, #64]	; (8003de8 <SystemInit+0x68>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a0f      	ldr	r2, [pc, #60]	; (8003de8 <SystemInit+0x68>)
 8003dac:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003db0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003db4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003db6:	4b0c      	ldr	r3, [pc, #48]	; (8003de8 <SystemInit+0x68>)
 8003db8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003dbc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003dbe:	4b0a      	ldr	r3, [pc, #40]	; (8003de8 <SystemInit+0x68>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a09      	ldr	r2, [pc, #36]	; (8003de8 <SystemInit+0x68>)
 8003dc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dc8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003dca:	4b07      	ldr	r3, [pc, #28]	; (8003de8 <SystemInit+0x68>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003dd0:	4b04      	ldr	r3, [pc, #16]	; (8003de4 <SystemInit+0x64>)
 8003dd2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003dd6:	609a      	str	r2, [r3, #8]
#endif
}
 8003dd8:	bf00      	nop
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	e000ed00 	.word	0xe000ed00
 8003de8:	40021000 	.word	0x40021000

08003dec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003dec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e24 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003df0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003df2:	e003      	b.n	8003dfc <LoopCopyDataInit>

08003df4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003df4:	4b0c      	ldr	r3, [pc, #48]	; (8003e28 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003df6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003df8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003dfa:	3104      	adds	r1, #4

08003dfc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003dfc:	480b      	ldr	r0, [pc, #44]	; (8003e2c <LoopForever+0xa>)
	ldr	r3, =_edata
 8003dfe:	4b0c      	ldr	r3, [pc, #48]	; (8003e30 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003e00:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003e02:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003e04:	d3f6      	bcc.n	8003df4 <CopyDataInit>
	ldr	r2, =_sbss
 8003e06:	4a0b      	ldr	r2, [pc, #44]	; (8003e34 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003e08:	e002      	b.n	8003e10 <LoopFillZerobss>

08003e0a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003e0a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003e0c:	f842 3b04 	str.w	r3, [r2], #4

08003e10 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003e10:	4b09      	ldr	r3, [pc, #36]	; (8003e38 <LoopForever+0x16>)
	cmp	r2, r3
 8003e12:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003e14:	d3f9      	bcc.n	8003e0a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003e16:	f7ff ffb3 	bl	8003d80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e1a:	f000 f811 	bl	8003e40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003e1e:	f7ff f9f7 	bl	8003210 <main>

08003e22 <LoopForever>:

LoopForever:
    b LoopForever
 8003e22:	e7fe      	b.n	8003e22 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003e24:	2004ffff 	.word	0x2004ffff
	ldr	r3, =_sidata
 8003e28:	0800417c 	.word	0x0800417c
	ldr	r0, =_sdata
 8003e2c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003e30:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8003e34:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8003e38:	200001b4 	.word	0x200001b4

08003e3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003e3c:	e7fe      	b.n	8003e3c <ADC1_2_IRQHandler>
	...

08003e40 <__libc_init_array>:
 8003e40:	b570      	push	{r4, r5, r6, lr}
 8003e42:	4e0d      	ldr	r6, [pc, #52]	; (8003e78 <__libc_init_array+0x38>)
 8003e44:	4c0d      	ldr	r4, [pc, #52]	; (8003e7c <__libc_init_array+0x3c>)
 8003e46:	1ba4      	subs	r4, r4, r6
 8003e48:	10a4      	asrs	r4, r4, #2
 8003e4a:	2500      	movs	r5, #0
 8003e4c:	42a5      	cmp	r5, r4
 8003e4e:	d109      	bne.n	8003e64 <__libc_init_array+0x24>
 8003e50:	4e0b      	ldr	r6, [pc, #44]	; (8003e80 <__libc_init_array+0x40>)
 8003e52:	4c0c      	ldr	r4, [pc, #48]	; (8003e84 <__libc_init_array+0x44>)
 8003e54:	f000 f820 	bl	8003e98 <_init>
 8003e58:	1ba4      	subs	r4, r4, r6
 8003e5a:	10a4      	asrs	r4, r4, #2
 8003e5c:	2500      	movs	r5, #0
 8003e5e:	42a5      	cmp	r5, r4
 8003e60:	d105      	bne.n	8003e6e <__libc_init_array+0x2e>
 8003e62:	bd70      	pop	{r4, r5, r6, pc}
 8003e64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e68:	4798      	blx	r3
 8003e6a:	3501      	adds	r5, #1
 8003e6c:	e7ee      	b.n	8003e4c <__libc_init_array+0xc>
 8003e6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e72:	4798      	blx	r3
 8003e74:	3501      	adds	r5, #1
 8003e76:	e7f2      	b.n	8003e5e <__libc_init_array+0x1e>
 8003e78:	08004174 	.word	0x08004174
 8003e7c:	08004174 	.word	0x08004174
 8003e80:	08004174 	.word	0x08004174
 8003e84:	08004178 	.word	0x08004178

08003e88 <memset>:
 8003e88:	4402      	add	r2, r0
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d100      	bne.n	8003e92 <memset+0xa>
 8003e90:	4770      	bx	lr
 8003e92:	f803 1b01 	strb.w	r1, [r3], #1
 8003e96:	e7f9      	b.n	8003e8c <memset+0x4>

08003e98 <_init>:
 8003e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e9a:	bf00      	nop
 8003e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e9e:	bc08      	pop	{r3}
 8003ea0:	469e      	mov	lr, r3
 8003ea2:	4770      	bx	lr

08003ea4 <_fini>:
 8003ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ea6:	bf00      	nop
 8003ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eaa:	bc08      	pop	{r3}
 8003eac:	469e      	mov	lr, r3
 8003eae:	4770      	bx	lr
