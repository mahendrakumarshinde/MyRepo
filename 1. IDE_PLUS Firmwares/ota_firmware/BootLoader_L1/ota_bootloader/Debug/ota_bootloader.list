
ota_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005374  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000908  08005524  08005524  00015524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e2c  08005e2c  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08005e2c  08005e2c  00015e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e34  08005e34  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e34  08005e34  00015e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e38  08005e38  00015e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08005e3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000094  08005ed0  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  08005ed0  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf7e  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f60  00000000  00000000  0002c042  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ad8  00000000  00000000  0002dfa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009d0  00000000  00000000  0002ea80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027ffa  00000000  00000000  0002f450  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000962d  00000000  00000000  0005744a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f7a1d  00000000  00000000  00060a77  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00158494  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dd8  00000000  00000000  00158510  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800550c 	.word	0x0800550c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	0800550c 	.word	0x0800550c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000596:	2300      	movs	r3, #0
 8000598:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800059a:	2003      	movs	r0, #3
 800059c:	f000 f984 	bl	80008a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005a0:	2000      	movs	r0, #0
 80005a2:	f000 f841 	bl	8000628 <HAL_InitTick>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d002      	beq.n	80005b2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005ac:	2301      	movs	r3, #1
 80005ae:	71fb      	strb	r3, [r7, #7]
 80005b0:	e001      	b.n	80005b6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005b2:	f004 fa03 	bl	80049bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005b6:	79fb      	ldrb	r3, [r7, #7]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <HAL_DeInit>:
  * @brief De-initialize common part of the HAL and stop the source of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 80005c4:	4b13      	ldr	r3, [pc, #76]	; (8000614 <HAL_DeInit+0x54>)
 80005c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80005ca:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_RCC_APB1_RELEASE_RESET();
 80005cc:	4b11      	ldr	r3, [pc, #68]	; (8000614 <HAL_DeInit+0x54>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	639a      	str	r2, [r3, #56]	; 0x38

  __HAL_RCC_APB2_FORCE_RESET();
 80005d2:	4b10      	ldr	r3, [pc, #64]	; (8000614 <HAL_DeInit+0x54>)
 80005d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80005d8:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_RCC_APB2_RELEASE_RESET();
 80005da:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <HAL_DeInit+0x54>)
 80005dc:	2200      	movs	r2, #0
 80005de:	641a      	str	r2, [r3, #64]	; 0x40

  __HAL_RCC_AHB1_FORCE_RESET();
 80005e0:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <HAL_DeInit+0x54>)
 80005e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80005e6:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_AHB1_RELEASE_RESET();
 80005e8:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <HAL_DeInit+0x54>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	629a      	str	r2, [r3, #40]	; 0x28

  __HAL_RCC_AHB2_FORCE_RESET();
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <HAL_DeInit+0x54>)
 80005f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80005f4:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_AHB2_RELEASE_RESET();
 80005f6:	4b07      	ldr	r3, [pc, #28]	; (8000614 <HAL_DeInit+0x54>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	62da      	str	r2, [r3, #44]	; 0x2c

  __HAL_RCC_AHB3_FORCE_RESET();
 80005fc:	4b05      	ldr	r3, [pc, #20]	; (8000614 <HAL_DeInit+0x54>)
 80005fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000602:	631a      	str	r2, [r3, #48]	; 0x30
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000604:	4b03      	ldr	r3, [pc, #12]	; (8000614 <HAL_DeInit+0x54>)
 8000606:	2200      	movs	r2, #0
 8000608:	631a      	str	r2, [r3, #48]	; 0x30

  // De-Init the low level hardware
  HAL_MspDeInit();
 800060a:	f000 f805 	bl	8000618 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 800060e:	2300      	movs	r3, #0
}
 8000610:	4618      	mov	r0, r3
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40021000 	.word	0x40021000

08000618 <HAL_MspDeInit>:
/**
  * @brief  DeInitialize the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
	...

08000628 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000630:	2300      	movs	r3, #0
 8000632:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000634:	4b16      	ldr	r3, [pc, #88]	; (8000690 <HAL_InitTick+0x68>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d022      	beq.n	8000682 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800063c:	4b15      	ldr	r3, [pc, #84]	; (8000694 <HAL_InitTick+0x6c>)
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	4b13      	ldr	r3, [pc, #76]	; (8000690 <HAL_InitTick+0x68>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000648:	fbb1 f3f3 	udiv	r3, r1, r3
 800064c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000650:	4618      	mov	r0, r3
 8000652:	f000 f954 	bl	80008fe <HAL_SYSTICK_Config>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d10f      	bne.n	800067c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2b0f      	cmp	r3, #15
 8000660:	d809      	bhi.n	8000676 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000662:	2200      	movs	r2, #0
 8000664:	6879      	ldr	r1, [r7, #4]
 8000666:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800066a:	f000 f928 	bl	80008be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800066e:	4a0a      	ldr	r2, [pc, #40]	; (8000698 <HAL_InitTick+0x70>)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	6013      	str	r3, [r2, #0]
 8000674:	e007      	b.n	8000686 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000676:	2301      	movs	r3, #1
 8000678:	73fb      	strb	r3, [r7, #15]
 800067a:	e004      	b.n	8000686 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800067c:	2301      	movs	r3, #1
 800067e:	73fb      	strb	r3, [r7, #15]
 8000680:	e001      	b.n	8000686 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000682:	2301      	movs	r3, #1
 8000684:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000686:	7bfb      	ldrb	r3, [r7, #15]
}
 8000688:	4618      	mov	r0, r3
 800068a:	3710      	adds	r7, #16
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000004 	.word	0x20000004
 8000694:	2000002c 	.word	0x2000002c
 8000698:	20000000 	.word	0x20000000

0800069c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006a0:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <HAL_IncTick+0x1c>)
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	4b05      	ldr	r3, [pc, #20]	; (80006bc <HAL_IncTick+0x20>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4413      	add	r3, r2
 80006aa:	4a03      	ldr	r2, [pc, #12]	; (80006b8 <HAL_IncTick+0x1c>)
 80006ac:	6013      	str	r3, [r2, #0]
}
 80006ae:	bf00      	nop
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	200000bc 	.word	0x200000bc
 80006bc:	20000004 	.word	0x20000004

080006c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  return uwTick;
 80006c4:	4b03      	ldr	r3, [pc, #12]	; (80006d4 <HAL_GetTick+0x14>)
 80006c6:	681b      	ldr	r3, [r3, #0]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	200000bc 	.word	0x200000bc

080006d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006e0:	f7ff ffee 	bl	80006c0 <HAL_GetTick>
 80006e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80006f0:	d004      	beq.n	80006fc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <HAL_Delay+0x40>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	68fa      	ldr	r2, [r7, #12]
 80006f8:	4413      	add	r3, r2
 80006fa:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80006fc:	bf00      	nop
 80006fe:	f7ff ffdf 	bl	80006c0 <HAL_GetTick>
 8000702:	4602      	mov	r2, r0
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	1ad3      	subs	r3, r2, r3
 8000708:	68fa      	ldr	r2, [r7, #12]
 800070a:	429a      	cmp	r2, r3
 800070c:	d8f7      	bhi.n	80006fe <HAL_Delay+0x26>
  {
  }
}
 800070e:	bf00      	nop
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000004 	.word	0x20000004

0800071c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800071c:	b480      	push	{r7}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	f003 0307 	and.w	r3, r3, #7
 800072a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <__NVIC_SetPriorityGrouping+0x44>)
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000732:	68ba      	ldr	r2, [r7, #8]
 8000734:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000738:	4013      	ands	r3, r2
 800073a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000744:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800074c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800074e:	4a04      	ldr	r2, [pc, #16]	; (8000760 <__NVIC_SetPriorityGrouping+0x44>)
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	60d3      	str	r3, [r2, #12]
}
 8000754:	bf00      	nop
 8000756:	3714      	adds	r7, #20
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	e000ed00 	.word	0xe000ed00

08000764 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000768:	4b04      	ldr	r3, [pc, #16]	; (800077c <__NVIC_GetPriorityGrouping+0x18>)
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	0a1b      	lsrs	r3, r3, #8
 800076e:	f003 0307 	and.w	r3, r3, #7
}
 8000772:	4618      	mov	r0, r3
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	6039      	str	r1, [r7, #0]
 800078a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800078c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000790:	2b00      	cmp	r3, #0
 8000792:	db0a      	blt.n	80007aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	b2da      	uxtb	r2, r3
 8000798:	490c      	ldr	r1, [pc, #48]	; (80007cc <__NVIC_SetPriority+0x4c>)
 800079a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079e:	0112      	lsls	r2, r2, #4
 80007a0:	b2d2      	uxtb	r2, r2
 80007a2:	440b      	add	r3, r1
 80007a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007a8:	e00a      	b.n	80007c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	4908      	ldr	r1, [pc, #32]	; (80007d0 <__NVIC_SetPriority+0x50>)
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	f003 030f 	and.w	r3, r3, #15
 80007b6:	3b04      	subs	r3, #4
 80007b8:	0112      	lsls	r2, r2, #4
 80007ba:	b2d2      	uxtb	r2, r2
 80007bc:	440b      	add	r3, r1
 80007be:	761a      	strb	r2, [r3, #24]
}
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	e000e100 	.word	0xe000e100
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b089      	sub	sp, #36	; 0x24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	60f8      	str	r0, [r7, #12]
 80007dc:	60b9      	str	r1, [r7, #8]
 80007de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	f003 0307 	and.w	r3, r3, #7
 80007e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007e8:	69fb      	ldr	r3, [r7, #28]
 80007ea:	f1c3 0307 	rsb	r3, r3, #7
 80007ee:	2b04      	cmp	r3, #4
 80007f0:	bf28      	it	cs
 80007f2:	2304      	movcs	r3, #4
 80007f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	3304      	adds	r3, #4
 80007fa:	2b06      	cmp	r3, #6
 80007fc:	d902      	bls.n	8000804 <NVIC_EncodePriority+0x30>
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	3b03      	subs	r3, #3
 8000802:	e000      	b.n	8000806 <NVIC_EncodePriority+0x32>
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000808:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800080c:	69bb      	ldr	r3, [r7, #24]
 800080e:	fa02 f303 	lsl.w	r3, r2, r3
 8000812:	43da      	mvns	r2, r3
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	401a      	ands	r2, r3
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800081c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	fa01 f303 	lsl.w	r3, r1, r3
 8000826:	43d9      	mvns	r1, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800082c:	4313      	orrs	r3, r2
         );
}
 800082e:	4618      	mov	r0, r3
 8000830:	3724      	adds	r7, #36	; 0x24
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
	...

0800083c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000840:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000844:	4b05      	ldr	r3, [pc, #20]	; (800085c <__NVIC_SystemReset+0x20>)
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800084c:	4903      	ldr	r1, [pc, #12]	; (800085c <__NVIC_SystemReset+0x20>)
 800084e:	4b04      	ldr	r3, [pc, #16]	; (8000860 <__NVIC_SystemReset+0x24>)
 8000850:	4313      	orrs	r3, r2
 8000852:	60cb      	str	r3, [r1, #12]
 8000854:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000858:	bf00      	nop
 800085a:	e7fd      	b.n	8000858 <__NVIC_SystemReset+0x1c>
 800085c:	e000ed00 	.word	0xe000ed00
 8000860:	05fa0004 	.word	0x05fa0004

08000864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	3b01      	subs	r3, #1
 8000870:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000874:	d301      	bcc.n	800087a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000876:	2301      	movs	r3, #1
 8000878:	e00f      	b.n	800089a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800087a:	4a0a      	ldr	r2, [pc, #40]	; (80008a4 <SysTick_Config+0x40>)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	3b01      	subs	r3, #1
 8000880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000882:	210f      	movs	r1, #15
 8000884:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000888:	f7ff ff7a 	bl	8000780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800088c:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <SysTick_Config+0x40>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000892:	4b04      	ldr	r3, [pc, #16]	; (80008a4 <SysTick_Config+0x40>)
 8000894:	2207      	movs	r2, #7
 8000896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000898:	2300      	movs	r3, #0
}
 800089a:	4618      	mov	r0, r3
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	e000e010 	.word	0xe000e010

080008a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f7ff ff33 	bl	800071c <__NVIC_SetPriorityGrouping>
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	b086      	sub	sp, #24
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	4603      	mov	r3, r0
 80008c6:	60b9      	str	r1, [r7, #8]
 80008c8:	607a      	str	r2, [r7, #4]
 80008ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008d0:	f7ff ff48 	bl	8000764 <__NVIC_GetPriorityGrouping>
 80008d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	68b9      	ldr	r1, [r7, #8]
 80008da:	6978      	ldr	r0, [r7, #20]
 80008dc:	f7ff ff7a 	bl	80007d4 <NVIC_EncodePriority>
 80008e0:	4602      	mov	r2, r0
 80008e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008e6:	4611      	mov	r1, r2
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ff49 	bl	8000780 <__NVIC_SetPriority>
}
 80008ee:	bf00      	nop
 80008f0:	3718      	adds	r7, #24
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80008fa:	f7ff ff9f 	bl	800083c <__NVIC_SystemReset>

080008fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	b082      	sub	sp, #8
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f7ff ffac 	bl	8000864 <SysTick_Config>
 800090c:	4603      	mov	r3, r0
}
 800090e:	4618      	mov	r0, r3
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
	...

08000918 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800092a:	4b2f      	ldr	r3, [pc, #188]	; (80009e8 <HAL_FLASH_Program+0xd0>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	2b01      	cmp	r3, #1
 8000930:	d101      	bne.n	8000936 <HAL_FLASH_Program+0x1e>
 8000932:	2302      	movs	r3, #2
 8000934:	e053      	b.n	80009de <HAL_FLASH_Program+0xc6>
 8000936:	4b2c      	ldr	r3, [pc, #176]	; (80009e8 <HAL_FLASH_Program+0xd0>)
 8000938:	2201      	movs	r2, #1
 800093a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800093c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000940:	f000 f888 	bl	8000a54 <FLASH_WaitForLastOperation>
 8000944:	4603      	mov	r3, r0
 8000946:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8000948:	7dfb      	ldrb	r3, [r7, #23]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d143      	bne.n	80009d6 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800094e:	4b26      	ldr	r3, [pc, #152]	; (80009e8 <HAL_FLASH_Program+0xd0>)
 8000950:	2200      	movs	r2, #0
 8000952:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8000954:	4b25      	ldr	r3, [pc, #148]	; (80009ec <HAL_FLASH_Program+0xd4>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800095c:	2b00      	cmp	r3, #0
 800095e:	d009      	beq.n	8000974 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8000960:	4b22      	ldr	r3, [pc, #136]	; (80009ec <HAL_FLASH_Program+0xd4>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a21      	ldr	r2, [pc, #132]	; (80009ec <HAL_FLASH_Program+0xd4>)
 8000966:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800096a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800096c:	4b1e      	ldr	r3, [pc, #120]	; (80009e8 <HAL_FLASH_Program+0xd0>)
 800096e:	2202      	movs	r2, #2
 8000970:	771a      	strb	r2, [r3, #28]
 8000972:	e002      	b.n	800097a <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8000974:	4b1c      	ldr	r3, [pc, #112]	; (80009e8 <HAL_FLASH_Program+0xd0>)
 8000976:	2200      	movs	r2, #0
 8000978:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d107      	bne.n	8000990 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8000980:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000984:	68b8      	ldr	r0, [r7, #8]
 8000986:	f000 f8c5 	bl	8000b14 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 800098a:	2301      	movs	r3, #1
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	e010      	b.n	80009b2 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	2b01      	cmp	r3, #1
 8000994:	d002      	beq.n	800099c <HAL_FLASH_Program+0x84>
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	2b02      	cmp	r3, #2
 800099a:	d10a      	bne.n	80009b2 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	4619      	mov	r1, r3
 80009a0:	68b8      	ldr	r0, [r7, #8]
 80009a2:	f000 f8db 	bl	8000b5c <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	2b02      	cmp	r3, #2
 80009aa:	d102      	bne.n	80009b2 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 80009ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80009b0:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80009b2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80009b6:	f000 f84d 	bl	8000a54 <FLASH_WaitForLastOperation>
 80009ba:	4603      	mov	r3, r0
 80009bc:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80009be:	693b      	ldr	r3, [r7, #16]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d006      	beq.n	80009d2 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <HAL_FLASH_Program+0xd4>)
 80009c6:	695a      	ldr	r2, [r3, #20]
 80009c8:	693b      	ldr	r3, [r7, #16]
 80009ca:	43db      	mvns	r3, r3
 80009cc:	4907      	ldr	r1, [pc, #28]	; (80009ec <HAL_FLASH_Program+0xd4>)
 80009ce:	4013      	ands	r3, r2
 80009d0:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80009d2:	f000 f9f7 	bl	8000dc4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80009d6:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <HAL_FLASH_Program+0xd0>)
 80009d8:	2200      	movs	r2, #0
 80009da:	701a      	strb	r2, [r3, #0]

  return status;
 80009dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3718      	adds	r7, #24
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000008 	.word	0x20000008
 80009ec:	40022000 	.word	0x40022000

080009f0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80009f6:	2300      	movs	r3, #0
 80009f8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <HAL_FLASH_Unlock+0x38>)
 80009fc:	695b      	ldr	r3, [r3, #20]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	da0b      	bge.n	8000a1a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <HAL_FLASH_Unlock+0x38>)
 8000a04:	4a09      	ldr	r2, [pc, #36]	; (8000a2c <HAL_FLASH_Unlock+0x3c>)
 8000a06:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000a08:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <HAL_FLASH_Unlock+0x38>)
 8000a0a:	4a09      	ldr	r2, [pc, #36]	; (8000a30 <HAL_FLASH_Unlock+0x40>)
 8000a0c:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <HAL_FLASH_Unlock+0x38>)
 8000a10:	695b      	ldr	r3, [r3, #20]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	da01      	bge.n	8000a1a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
 8000a18:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	40022000 	.word	0x40022000
 8000a2c:	45670123 	.word	0x45670123
 8000a30:	cdef89ab 	.word	0xcdef89ab

08000a34 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000a38:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <HAL_FLASH_Lock+0x1c>)
 8000a3a:	695b      	ldr	r3, [r3, #20]
 8000a3c:	4a04      	ldr	r2, [pc, #16]	; (8000a50 <HAL_FLASH_Lock+0x1c>)
 8000a3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a42:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	40022000 	.word	0x40022000

08000a54 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout: maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8000a5c:	f7ff fe30 	bl	80006c0 <HAL_GetTick>
 8000a60:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8000a62:	e00d      	b.n	8000a80 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a6a:	d009      	beq.n	8000a80 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8000a6c:	f7ff fe28 	bl	80006c0 <HAL_GetTick>
 8000a70:	4602      	mov	r2, r0
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	687a      	ldr	r2, [r7, #4]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d801      	bhi.n	8000a80 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	e03e      	b.n	8000afe <FLASH_WaitForLastOperation+0xaa>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8000a80:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <FLASH_WaitForLastOperation+0xb4>)
 8000a82:	691b      	ldr	r3, [r3, #16]
 8000a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a8c:	d0ea      	beq.n	8000a64 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8000a8e:	4b1e      	ldr	r3, [pc, #120]	; (8000b08 <FLASH_WaitForLastOperation+0xb4>)
 8000a90:	691a      	ldr	r2, [r3, #16]
 8000a92:	4b1e      	ldr	r3, [pc, #120]	; (8000b0c <FLASH_WaitForLastOperation+0xb8>)
 8000a94:	4013      	ands	r3, r2
 8000a96:	60bb      	str	r3, [r7, #8]
  error |= (FLASH->ECCR & FLASH_FLAG_ECCD);
 8000a98:	4b1b      	ldr	r3, [pc, #108]	; (8000b08 <FLASH_WaitForLastOperation+0xb4>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000aa0:	68ba      	ldr	r2, [r7, #8]
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d01e      	beq.n	8000aea <FLASH_WaitForLastOperation+0x96>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8000aac:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <FLASH_WaitForLastOperation+0xbc>)
 8000aae:	685a      	ldr	r2, [r3, #4]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	4a16      	ldr	r2, [pc, #88]	; (8000b10 <FLASH_WaitForLastOperation+0xbc>)
 8000ab6:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d007      	beq.n	8000ad2 <FLASH_WaitForLastOperation+0x7e>
 8000ac2:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <FLASH_WaitForLastOperation+0xb4>)
 8000ac4:	699a      	ldr	r2, [r3, #24]
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8000acc:	490e      	ldr	r1, [pc, #56]	; (8000b08 <FLASH_WaitForLastOperation+0xb4>)
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	618b      	str	r3, [r1, #24]
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d004      	beq.n	8000ae6 <FLASH_WaitForLastOperation+0x92>
 8000adc:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <FLASH_WaitForLastOperation+0xb4>)
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000ae4:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e009      	b.n	8000afe <FLASH_WaitForLastOperation+0xaa>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000aea:	4b07      	ldr	r3, [pc, #28]	; (8000b08 <FLASH_WaitForLastOperation+0xb4>)
 8000aec:	691b      	ldr	r3, [r3, #16]
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d102      	bne.n	8000afc <FLASH_WaitForLastOperation+0xa8>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000af6:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <FLASH_WaitForLastOperation+0xb4>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40022000 	.word	0x40022000
 8000b0c:	0002c3fa 	.word	0x0002c3fa
 8000b10:	20000008 	.word	0x20000008

08000b14 <FLASH_Program_DoubleWord>:
  * @param  Address: specifies the address to be programmed.
  * @param  Data: specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8000b14:	b490      	push	{r4, r7}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000b20:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <FLASH_Program_DoubleWord+0x44>)
 8000b22:	695b      	ldr	r3, [r3, #20]
 8000b24:	4a0c      	ldr	r2, [pc, #48]	; (8000b58 <FLASH_Program_DoubleWord+0x44>)
 8000b26:	f043 0301 	orr.w	r3, r3, #1
 8000b2a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	683a      	ldr	r2, [r7, #0]
 8000b30:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8000b32:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8000b36:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000b3a:	f04f 0300 	mov.w	r3, #0
 8000b3e:	f04f 0400 	mov.w	r4, #0
 8000b42:	0013      	movs	r3, r2
 8000b44:	2400      	movs	r4, #0
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	3204      	adds	r2, #4
 8000b4a:	6013      	str	r3, [r2, #0]
}
 8000b4c:	bf00      	nop
 8000b4e:	3710      	adds	r7, #16
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc90      	pop	{r4, r7}
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	40022000 	.word	0x40022000

08000b5c <FLASH_Program_Fast>:
  * @param  Address: specifies the address to be programmed.
  * @param  DataAddress: specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b089      	sub	sp, #36	; 0x24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8000b66:	2340      	movs	r3, #64	; 0x40
 8000b68:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8000b72:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <FLASH_Program_Fast+0x64>)
 8000b74:	695b      	ldr	r3, [r3, #20]
 8000b76:	4a12      	ldr	r2, [pc, #72]	; (8000bc0 <FLASH_Program_Fast+0x64>)
 8000b78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b7c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000b7e:	f3ef 8310 	mrs	r3, PRIMASK
 8000b82:	60fb      	str	r3, [r7, #12]
  return(result);
 8000b84:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8000b86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8000b88:	b672      	cpsid	i
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	69bb      	ldr	r3, [r7, #24]
 8000b90:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8000b92:	69bb      	ldr	r3, [r7, #24]
 8000b94:	3304      	adds	r3, #4
 8000b96:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	3304      	adds	r3, #4
 8000b9c:	617b      	str	r3, [r7, #20]
    row_index--;
 8000b9e:	7ffb      	ldrb	r3, [r7, #31]
 8000ba0:	3b01      	subs	r3, #1
 8000ba2:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8000ba4:	7ffb      	ldrb	r3, [r7, #31]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d1ef      	bne.n	8000b8a <FLASH_Program_Fast+0x2e>
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	f383 8810 	msr	PRIMASK, r3

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8000bb4:	bf00      	nop
 8000bb6:	3724      	adds	r7, #36	; 0x24
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	40022000 	.word	0x40022000

08000bc4 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000bce:	4b4c      	ldr	r3, [pc, #304]	; (8000d00 <HAL_FLASHEx_Erase+0x13c>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d101      	bne.n	8000bda <HAL_FLASHEx_Erase+0x16>
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	e08d      	b.n	8000cf6 <HAL_FLASHEx_Erase+0x132>
 8000bda:	4b49      	ldr	r3, [pc, #292]	; (8000d00 <HAL_FLASHEx_Erase+0x13c>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000be0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000be4:	f7ff ff36 	bl	8000a54 <FLASH_WaitForLastOperation>
 8000be8:	4603      	mov	r3, r0
 8000bea:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8000bec:	7bfb      	ldrb	r3, [r7, #15]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d17d      	bne.n	8000cee <HAL_FLASHEx_Erase+0x12a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000bf2:	4b43      	ldr	r3, [pc, #268]	; (8000d00 <HAL_FLASHEx_Erase+0x13c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8000bf8:	4b42      	ldr	r3, [pc, #264]	; (8000d04 <HAL_FLASHEx_Erase+0x140>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d019      	beq.n	8000c38 <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8000c04:	4b3f      	ldr	r3, [pc, #252]	; (8000d04 <HAL_FLASHEx_Erase+0x140>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a3e      	ldr	r2, [pc, #248]	; (8000d04 <HAL_FLASHEx_Erase+0x140>)
 8000c0a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000c0e:	6013      	str	r3, [r2, #0]

      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8000c10:	4b3c      	ldr	r3, [pc, #240]	; (8000d04 <HAL_FLASHEx_Erase+0x140>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d009      	beq.n	8000c30 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8000c1c:	4b39      	ldr	r3, [pc, #228]	; (8000d04 <HAL_FLASHEx_Erase+0x140>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a38      	ldr	r2, [pc, #224]	; (8000d04 <HAL_FLASHEx_Erase+0x140>)
 8000c22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000c26:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8000c28:	4b35      	ldr	r3, [pc, #212]	; (8000d00 <HAL_FLASHEx_Erase+0x13c>)
 8000c2a:	2203      	movs	r2, #3
 8000c2c:	771a      	strb	r2, [r3, #28]
 8000c2e:	e016      	b.n	8000c5e <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8000c30:	4b33      	ldr	r3, [pc, #204]	; (8000d00 <HAL_FLASHEx_Erase+0x13c>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	771a      	strb	r2, [r3, #28]
 8000c36:	e012      	b.n	8000c5e <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8000c38:	4b32      	ldr	r3, [pc, #200]	; (8000d04 <HAL_FLASHEx_Erase+0x140>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d009      	beq.n	8000c58 <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8000c44:	4b2f      	ldr	r3, [pc, #188]	; (8000d04 <HAL_FLASHEx_Erase+0x140>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a2e      	ldr	r2, [pc, #184]	; (8000d04 <HAL_FLASHEx_Erase+0x140>)
 8000c4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000c4e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8000c50:	4b2b      	ldr	r3, [pc, #172]	; (8000d00 <HAL_FLASHEx_Erase+0x13c>)
 8000c52:	2202      	movs	r2, #2
 8000c54:	771a      	strb	r2, [r3, #28]
 8000c56:	e002      	b.n	8000c5e <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8000c58:	4b29      	ldr	r3, [pc, #164]	; (8000d00 <HAL_FLASHEx_Erase+0x13c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d113      	bne.n	8000c8e <HAL_FLASHEx_Erase+0xca>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 f84c 	bl	8000d08 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000c70:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000c74:	f7ff feee 	bl	8000a54 <FLASH_WaitForLastOperation>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	73fb      	strb	r3, [r7, #15]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8000c7c:	4b21      	ldr	r3, [pc, #132]	; (8000d04 <HAL_FLASHEx_Erase+0x140>)
 8000c7e:	695b      	ldr	r3, [r3, #20]
 8000c80:	4a20      	ldr	r2, [pc, #128]	; (8000d04 <HAL_FLASHEx_Erase+0x140>)
 8000c82:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000c86:	f023 0304 	bic.w	r3, r3, #4
 8000c8a:	6153      	str	r3, [r2, #20]
 8000c8c:	e02d      	b.n	8000cea <HAL_FLASHEx_Erase+0x126>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c94:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	e01d      	b.n	8000cda <HAL_FLASHEx_Erase+0x116>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	68b8      	ldr	r0, [r7, #8]
 8000ca6:	f000 f857 	bl	8000d58 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000caa:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000cae:	f7ff fed1 	bl	8000a54 <FLASH_WaitForLastOperation>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8000cb6:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <HAL_FLASHEx_Erase+0x140>)
 8000cb8:	695b      	ldr	r3, [r3, #20]
 8000cba:	4a12      	ldr	r2, [pc, #72]	; (8000d04 <HAL_FLASHEx_Erase+0x140>)
 8000cbc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000cc0:	f023 0302 	bic.w	r3, r3, #2
 8000cc4:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8000cc6:	7bfb      	ldrb	r3, [r7, #15]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d003      	beq.n	8000cd4 <HAL_FLASHEx_Erase+0x110>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	68ba      	ldr	r2, [r7, #8]
 8000cd0:	601a      	str	r2, [r3, #0]
          break;
 8000cd2:	e00a      	b.n	8000cea <HAL_FLASHEx_Erase+0x126>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	689a      	ldr	r2, [r3, #8]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	68db      	ldr	r3, [r3, #12]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	68ba      	ldr	r2, [r7, #8]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d3d9      	bcc.n	8000c9e <HAL_FLASHEx_Erase+0xda>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8000cea:	f000 f86b 	bl	8000dc4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000cee:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <HAL_FLASHEx_Erase+0x13c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	701a      	strb	r2, [r3, #0]

  return status;
 8000cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000008 	.word	0x20000008
 8000d04:	40022000 	.word	0x40022000

08000d08 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d005      	beq.n	8000d26 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <FLASH_MassErase+0x4c>)
 8000d1c:	695b      	ldr	r3, [r3, #20]
 8000d1e:	4a0d      	ldr	r2, [pc, #52]	; (8000d54 <FLASH_MassErase+0x4c>)
 8000d20:	f043 0304 	orr.w	r3, r3, #4
 8000d24:	6153      	str	r3, [r2, #20]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f003 0302 	and.w	r3, r3, #2
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d005      	beq.n	8000d3c <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8000d30:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <FLASH_MassErase+0x4c>)
 8000d32:	695b      	ldr	r3, [r3, #20]
 8000d34:	4a07      	ldr	r2, [pc, #28]	; (8000d54 <FLASH_MassErase+0x4c>)
 8000d36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d3a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000d3c:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <FLASH_MassErase+0x4c>)
 8000d3e:	695b      	ldr	r3, [r3, #20]
 8000d40:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <FLASH_MassErase+0x4c>)
 8000d42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d46:	6153      	str	r3, [r2, #20]
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	40022000 	.word	0x40022000

08000d58 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	f003 0301 	and.w	r3, r3, #1
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d006      	beq.n	8000d7a <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8000d6c:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <FLASH_PageErase+0x68>)
 8000d6e:	695b      	ldr	r3, [r3, #20]
 8000d70:	4a13      	ldr	r2, [pc, #76]	; (8000dc0 <FLASH_PageErase+0x68>)
 8000d72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000d76:	6153      	str	r3, [r2, #20]
 8000d78:	e005      	b.n	8000d86 <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8000d7a:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <FLASH_PageErase+0x68>)
 8000d7c:	695b      	ldr	r3, [r3, #20]
 8000d7e:	4a10      	ldr	r2, [pc, #64]	; (8000dc0 <FLASH_PageErase+0x68>)
 8000d80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d84:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <FLASH_PageErase+0x68>)
 8000d88:	695b      	ldr	r3, [r3, #20]
 8000d8a:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	00db      	lsls	r3, r3, #3
 8000d92:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8000d96:	490a      	ldr	r1, [pc, #40]	; (8000dc0 <FLASH_PageErase+0x68>)
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000d9c:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <FLASH_PageErase+0x68>)
 8000d9e:	695b      	ldr	r3, [r3, #20]
 8000da0:	4a07      	ldr	r2, [pc, #28]	; (8000dc0 <FLASH_PageErase+0x68>)
 8000da2:	f043 0302 	orr.w	r3, r3, #2
 8000da6:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000da8:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <FLASH_PageErase+0x68>)
 8000daa:	695b      	ldr	r3, [r3, #20]
 8000dac:	4a04      	ldr	r2, [pc, #16]	; (8000dc0 <FLASH_PageErase+0x68>)
 8000dae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000db2:	6153      	str	r3, [r2, #20]
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	40022000 	.word	0x40022000

08000dc4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8000dca:	4b1e      	ldr	r3, [pc, #120]	; (8000e44 <FLASH_FlushCaches+0x80>)
 8000dcc:	7f1b      	ldrb	r3, [r3, #28]
 8000dce:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d002      	beq.n	8000ddc <FLASH_FlushCaches+0x18>
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	2b03      	cmp	r3, #3
 8000dda:	d111      	bne.n	8000e00 <FLASH_FlushCaches+0x3c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8000ddc:	4b1a      	ldr	r3, [pc, #104]	; (8000e48 <FLASH_FlushCaches+0x84>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a19      	ldr	r2, [pc, #100]	; (8000e48 <FLASH_FlushCaches+0x84>)
 8000de2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000de6:	6013      	str	r3, [r2, #0]
 8000de8:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <FLASH_FlushCaches+0x84>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a16      	ldr	r2, [pc, #88]	; (8000e48 <FLASH_FlushCaches+0x84>)
 8000dee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000df2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000df4:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <FLASH_FlushCaches+0x84>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a13      	ldr	r2, [pc, #76]	; (8000e48 <FLASH_FlushCaches+0x84>)
 8000dfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dfe:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d002      	beq.n	8000e0c <FLASH_FlushCaches+0x48>
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	2b03      	cmp	r3, #3
 8000e0a:	d111      	bne.n	8000e30 <FLASH_FlushCaches+0x6c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <FLASH_FlushCaches+0x84>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a0d      	ldr	r2, [pc, #52]	; (8000e48 <FLASH_FlushCaches+0x84>)
 8000e12:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e16:	6013      	str	r3, [r2, #0]
 8000e18:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <FLASH_FlushCaches+0x84>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a0a      	ldr	r2, [pc, #40]	; (8000e48 <FLASH_FlushCaches+0x84>)
 8000e1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e22:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e24:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <FLASH_FlushCaches+0x84>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a07      	ldr	r2, [pc, #28]	; (8000e48 <FLASH_FlushCaches+0x84>)
 8000e2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e2e:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8000e30:	4b04      	ldr	r3, [pc, #16]	; (8000e44 <FLASH_FlushCaches+0x80>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	771a      	strb	r2, [r3, #28]
}
 8000e36:	bf00      	nop
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	20000008 	.word	0x20000008
 8000e48:	40022000 	.word	0x40022000

08000e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b087      	sub	sp, #28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e5a:	e166      	b.n	800112a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	2101      	movs	r1, #1
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	fa01 f303 	lsl.w	r3, r1, r3
 8000e68:	4013      	ands	r3, r2
 8000e6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f000 8158 	beq.w	8001124 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d003      	beq.n	8000e84 <HAL_GPIO_Init+0x38>
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	2b12      	cmp	r3, #18
 8000e82:	d123      	bne.n	8000ecc <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	08da      	lsrs	r2, r3, #3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3208      	adds	r2, #8
 8000e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e90:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	f003 0307 	and.w	r3, r3, #7
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	220f      	movs	r2, #15
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	691a      	ldr	r2, [r3, #16]
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	08da      	lsrs	r2, r3, #3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3208      	adds	r2, #8
 8000ec6:	6939      	ldr	r1, [r7, #16]
 8000ec8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	2203      	movs	r2, #3
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 0203 	and.w	r2, r3, #3
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d00b      	beq.n	8000f20 <HAL_GPIO_Init+0xd4>
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d007      	beq.n	8000f20 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f14:	2b11      	cmp	r3, #17
 8000f16:	d003      	beq.n	8000f20 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	2b12      	cmp	r3, #18
 8000f1e:	d130      	bne.n	8000f82 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4013      	ands	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	68da      	ldr	r2, [r3, #12]
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f56:	2201      	movs	r2, #1
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	4013      	ands	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	091b      	lsrs	r3, r3, #4
 8000f6c:	f003 0201 	and.w	r2, r3, #1
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43db      	mvns	r3, r3
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4013      	ands	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	689a      	ldr	r2, [r3, #8]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	f000 80b2 	beq.w	8001124 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc0:	4b61      	ldr	r3, [pc, #388]	; (8001148 <HAL_GPIO_Init+0x2fc>)
 8000fc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fc4:	4a60      	ldr	r2, [pc, #384]	; (8001148 <HAL_GPIO_Init+0x2fc>)
 8000fc6:	f043 0301 	orr.w	r3, r3, #1
 8000fca:	6613      	str	r3, [r2, #96]	; 0x60
 8000fcc:	4b5e      	ldr	r3, [pc, #376]	; (8001148 <HAL_GPIO_Init+0x2fc>)
 8000fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fd0:	f003 0301 	and.w	r3, r3, #1
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fd8:	4a5c      	ldr	r2, [pc, #368]	; (800114c <HAL_GPIO_Init+0x300>)
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	089b      	lsrs	r3, r3, #2
 8000fde:	3302      	adds	r3, #2
 8000fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	f003 0303 	and.w	r3, r3, #3
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	220f      	movs	r2, #15
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001002:	d02b      	beq.n	800105c <HAL_GPIO_Init+0x210>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a52      	ldr	r2, [pc, #328]	; (8001150 <HAL_GPIO_Init+0x304>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d025      	beq.n	8001058 <HAL_GPIO_Init+0x20c>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4a51      	ldr	r2, [pc, #324]	; (8001154 <HAL_GPIO_Init+0x308>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d01f      	beq.n	8001054 <HAL_GPIO_Init+0x208>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a50      	ldr	r2, [pc, #320]	; (8001158 <HAL_GPIO_Init+0x30c>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d019      	beq.n	8001050 <HAL_GPIO_Init+0x204>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a4f      	ldr	r2, [pc, #316]	; (800115c <HAL_GPIO_Init+0x310>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d013      	beq.n	800104c <HAL_GPIO_Init+0x200>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a4e      	ldr	r2, [pc, #312]	; (8001160 <HAL_GPIO_Init+0x314>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d00d      	beq.n	8001048 <HAL_GPIO_Init+0x1fc>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a4d      	ldr	r2, [pc, #308]	; (8001164 <HAL_GPIO_Init+0x318>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d007      	beq.n	8001044 <HAL_GPIO_Init+0x1f8>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a4c      	ldr	r2, [pc, #304]	; (8001168 <HAL_GPIO_Init+0x31c>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d101      	bne.n	8001040 <HAL_GPIO_Init+0x1f4>
 800103c:	2307      	movs	r3, #7
 800103e:	e00e      	b.n	800105e <HAL_GPIO_Init+0x212>
 8001040:	2308      	movs	r3, #8
 8001042:	e00c      	b.n	800105e <HAL_GPIO_Init+0x212>
 8001044:	2306      	movs	r3, #6
 8001046:	e00a      	b.n	800105e <HAL_GPIO_Init+0x212>
 8001048:	2305      	movs	r3, #5
 800104a:	e008      	b.n	800105e <HAL_GPIO_Init+0x212>
 800104c:	2304      	movs	r3, #4
 800104e:	e006      	b.n	800105e <HAL_GPIO_Init+0x212>
 8001050:	2303      	movs	r3, #3
 8001052:	e004      	b.n	800105e <HAL_GPIO_Init+0x212>
 8001054:	2302      	movs	r3, #2
 8001056:	e002      	b.n	800105e <HAL_GPIO_Init+0x212>
 8001058:	2301      	movs	r3, #1
 800105a:	e000      	b.n	800105e <HAL_GPIO_Init+0x212>
 800105c:	2300      	movs	r3, #0
 800105e:	697a      	ldr	r2, [r7, #20]
 8001060:	f002 0203 	and.w	r2, r2, #3
 8001064:	0092      	lsls	r2, r2, #2
 8001066:	4093      	lsls	r3, r2
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	4313      	orrs	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800106e:	4937      	ldr	r1, [pc, #220]	; (800114c <HAL_GPIO_Init+0x300>)
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	089b      	lsrs	r3, r3, #2
 8001074:	3302      	adds	r3, #2
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800107c:	4b3b      	ldr	r3, [pc, #236]	; (800116c <HAL_GPIO_Init+0x320>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	43db      	mvns	r3, r3
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4013      	ands	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d003      	beq.n	80010a0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010a0:	4a32      	ldr	r2, [pc, #200]	; (800116c <HAL_GPIO_Init+0x320>)
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80010a6:	4b31      	ldr	r3, [pc, #196]	; (800116c <HAL_GPIO_Init+0x320>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	43db      	mvns	r3, r3
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	4013      	ands	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010ca:	4a28      	ldr	r2, [pc, #160]	; (800116c <HAL_GPIO_Init+0x320>)
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010d0:	4b26      	ldr	r3, [pc, #152]	; (800116c <HAL_GPIO_Init+0x320>)
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	43db      	mvns	r3, r3
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d003      	beq.n	80010f4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010f4:	4a1d      	ldr	r2, [pc, #116]	; (800116c <HAL_GPIO_Init+0x320>)
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010fa:	4b1c      	ldr	r3, [pc, #112]	; (800116c <HAL_GPIO_Init+0x320>)
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	43db      	mvns	r3, r3
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	4013      	ands	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	4313      	orrs	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800111e:	4a13      	ldr	r2, [pc, #76]	; (800116c <HAL_GPIO_Init+0x320>)
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	3301      	adds	r3, #1
 8001128:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	fa22 f303 	lsr.w	r3, r2, r3
 8001134:	2b00      	cmp	r3, #0
 8001136:	f47f ae91 	bne.w	8000e5c <HAL_GPIO_Init+0x10>
  }
}
 800113a:	bf00      	nop
 800113c:	371c      	adds	r7, #28
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	40021000 	.word	0x40021000
 800114c:	40010000 	.word	0x40010000
 8001150:	48000400 	.word	0x48000400
 8001154:	48000800 	.word	0x48000800
 8001158:	48000c00 	.word	0x48000c00
 800115c:	48001000 	.word	0x48001000
 8001160:	48001400 	.word	0x48001400
 8001164:	48001800 	.word	0x48001800
 8001168:	48001c00 	.word	0x48001c00
 800116c:	40010400 	.word	0x40010400

08001170 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	460b      	mov	r3, r1
 800117a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	691a      	ldr	r2, [r3, #16]
 8001180:	887b      	ldrh	r3, [r7, #2]
 8001182:	4013      	ands	r3, r2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d002      	beq.n	800118e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001188:	2301      	movs	r3, #1
 800118a:	73fb      	strb	r3, [r7, #15]
 800118c:	e001      	b.n	8001192 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800118e:	2300      	movs	r3, #0
 8001190:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001192:	7bfb      	ldrb	r3, [r7, #15]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	807b      	strh	r3, [r7, #2]
 80011ac:	4613      	mov	r3, r2
 80011ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011b0:	787b      	ldrb	r3, [r7, #1]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011b6:	887a      	ldrh	r2, [r7, #2]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011bc:	e002      	b.n	80011c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011be:	887a      	ldrh	r2, [r7, #2]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	695a      	ldr	r2, [r3, #20]
 80011e0:	887b      	ldrh	r3, [r7, #2]
 80011e2:	4013      	ands	r3, r2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d003      	beq.n	80011f0 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011e8:	887a      	ldrh	r2, [r7, #2]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80011ee:	e002      	b.n	80011f6 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011f0:	887a      	ldrh	r2, [r7, #2]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	619a      	str	r2, [r3, #24]
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001208:	4b04      	ldr	r3, [pc, #16]	; (800121c <HAL_PWREx_GetVoltageRange+0x18>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001210:	4618      	mov	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	40007000 	.word	0x40007000

08001220 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800122e:	d130      	bne.n	8001292 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001230:	4b23      	ldr	r3, [pc, #140]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800123c:	d038      	beq.n	80012b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800123e:	4b20      	ldr	r3, [pc, #128]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001246:	4a1e      	ldr	r2, [pc, #120]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001248:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800124c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800124e:	4b1d      	ldr	r3, [pc, #116]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2232      	movs	r2, #50	; 0x32
 8001254:	fb02 f303 	mul.w	r3, r2, r3
 8001258:	4a1b      	ldr	r2, [pc, #108]	; (80012c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800125a:	fba2 2303 	umull	r2, r3, r2, r3
 800125e:	0c9b      	lsrs	r3, r3, #18
 8001260:	3301      	adds	r3, #1
 8001262:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001264:	e002      	b.n	800126c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	3b01      	subs	r3, #1
 800126a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800126c:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800126e:	695b      	ldr	r3, [r3, #20]
 8001270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001274:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001278:	d102      	bne.n	8001280 <HAL_PWREx_ControlVoltageScaling+0x60>
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d1f2      	bne.n	8001266 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001280:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001282:	695b      	ldr	r3, [r3, #20]
 8001284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800128c:	d110      	bne.n	80012b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e00f      	b.n	80012b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001292:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800129a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800129e:	d007      	beq.n	80012b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012a0:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012a8:	4a05      	ldr	r2, [pc, #20]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3714      	adds	r7, #20
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	40007000 	.word	0x40007000
 80012c4:	2000002c 	.word	0x2000002c
 80012c8:	431bde83 	.word	0x431bde83

080012cc <HAL_RCC_DeInit>:
  *            - Peripheral clock sources
  *            - LSI, LSE and RTC clocks (Backup domain)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Reset to default System clock */
  /* Set MSION bit */
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80012d2:	4b4a      	ldr	r3, [pc, #296]	; (80013fc <HAL_RCC_DeInit+0x130>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a49      	ldr	r2, [pc, #292]	; (80013fc <HAL_RCC_DeInit+0x130>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	6013      	str	r3, [r2, #0]

  /* Insure MSIRDY bit is set before writing default MSIRANGE value */
  /* Get start tick */
  tickstart = HAL_GetTick();
 80012de:	f7ff f9ef 	bl	80006c0 <HAL_GetTick>
 80012e2:	6078      	str	r0, [r7, #4]

  /* Wait till MSI is ready */
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012e4:	e008      	b.n	80012f8 <HAL_RCC_DeInit+0x2c>
  {
    if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012e6:	f7ff f9eb 	bl	80006c0 <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d901      	bls.n	80012f8 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e07c      	b.n	80013f2 <HAL_RCC_DeInit+0x126>
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012f8:	4b40      	ldr	r3, [pc, #256]	; (80013fc <HAL_RCC_DeInit+0x130>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	2b00      	cmp	r3, #0
 8001302:	d0f0      	beq.n	80012e6 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set MSIRANGE default value */
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, RCC_MSIRANGE_6);
 8001304:	4b3d      	ldr	r3, [pc, #244]	; (80013fc <HAL_RCC_DeInit+0x130>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800130c:	4a3b      	ldr	r2, [pc, #236]	; (80013fc <HAL_RCC_DeInit+0x130>)
 800130e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001312:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register (MSI is selected as system clock source) */
  CLEAR_REG(RCC->CFGR);
 8001314:	4b39      	ldr	r3, [pc, #228]	; (80013fc <HAL_RCC_DeInit+0x130>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]

  /* Update the SystemCoreClock global variable for MSI as system clock source */
  SystemCoreClock = MSI_VALUE;
 800131a:	4b39      	ldr	r3, [pc, #228]	; (8001400 <HAL_RCC_DeInit+0x134>)
 800131c:	4a39      	ldr	r2, [pc, #228]	; (8001404 <HAL_RCC_DeInit+0x138>)
 800131e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clock settings  */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8001320:	4b39      	ldr	r3, [pc, #228]	; (8001408 <HAL_RCC_DeInit+0x13c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff f97f 	bl	8000628 <HAL_InitTick>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <HAL_RCC_DeInit+0x68>
  {
    return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e05e      	b.n	80013f2 <HAL_RCC_DeInit+0x126>
  }

  /* Insure MSI selected as system clock source */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8001334:	f7ff f9c4 	bl	80006c0 <HAL_GetTick>
 8001338:	6078      	str	r0, [r7, #4]

  /* Wait till system clock source is ready */
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 800133a:	e00a      	b.n	8001352 <HAL_RCC_DeInit+0x86>
  {
    if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800133c:	f7ff f9c0 	bl	80006c0 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	f241 3288 	movw	r2, #5000	; 0x1388
 800134a:	4293      	cmp	r3, r2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_DeInit+0x86>
    {
      return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e04f      	b.n	80013f2 <HAL_RCC_DeInit+0x126>
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 8001352:	4b2a      	ldr	r3, [pc, #168]	; (80013fc <HAL_RCC_DeInit+0x130>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f003 030c 	and.w	r3, r3, #12
 800135a:	2b00      	cmp	r3, #0
 800135c:	d1ee      	bne.n	800133c <HAL_RCC_DeInit+0x70>
  }

  /* Reset HSION, HSIKERON, HSIASFS, HSEON, HSECSSON, PLLON, PLLSAIxON bits */
#if defined(RCC_PLLSAI2_SUPPORT)

  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSION | RCC_CR_HSIKERON| RCC_CR_HSIASFS | RCC_CR_PLLON | RCC_CR_PLLSAI1ON | RCC_CR_PLLSAI2ON);
 800135e:	4b27      	ldr	r3, [pc, #156]	; (80013fc <HAL_RCC_DeInit+0x130>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	4926      	ldr	r1, [pc, #152]	; (80013fc <HAL_RCC_DeInit+0x130>)
 8001364:	4b29      	ldr	r3, [pc, #164]	; (800140c <HAL_RCC_DeInit+0x140>)
 8001366:	4013      	ands	r3, r2
 8001368:	600b      	str	r3, [r1, #0]

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Insure PLLRDY, PLLSAI1RDY and PLLSAI2RDY (if present) are reset */
  /* Get start tick */
  tickstart = HAL_GetTick();
 800136a:	f7ff f9a9 	bl	80006c0 <HAL_GetTick>
 800136e:	6078      	str	r0, [r7, #4]

#if defined(RCC_PLLSAI2_SUPPORT)

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY) != 0U)
 8001370:	e008      	b.n	8001384 <HAL_RCC_DeInit+0xb8>

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)

#endif
  {
    if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001372:	f7ff f9a5 	bl	80006c0 <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d901      	bls.n	8001384 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e036      	b.n	80013f2 <HAL_RCC_DeInit+0x126>
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY) != 0U)
 8001384:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <HAL_RCC_DeInit+0x130>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 5328 	and.w	r3, r3, #704643072	; 0x2a000000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d1f0      	bne.n	8001372 <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Reset PLLCFGR register */
  CLEAR_REG(RCC->PLLCFGR);
 8001390:	4b1a      	ldr	r3, [pc, #104]	; (80013fc <HAL_RCC_DeInit+0x130>)
 8001392:	2200      	movs	r2, #0
 8001394:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN_4 );
 8001396:	4b19      	ldr	r3, [pc, #100]	; (80013fc <HAL_RCC_DeInit+0x130>)
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	4a18      	ldr	r2, [pc, #96]	; (80013fc <HAL_RCC_DeInit+0x130>)
 800139c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013a0:	60d3      	str	r3, [r2, #12]

#if defined(RCC_PLLSAI1_SUPPORT)

  /* Reset PLLSAI1CFGR register */
  CLEAR_REG(RCC->PLLSAI1CFGR);
 80013a2:	4b16      	ldr	r3, [pc, #88]	; (80013fc <HAL_RCC_DeInit+0x130>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->PLLSAI1CFGR,  RCC_PLLSAI1CFGR_PLLSAI1N_4 );
 80013a8:	4b14      	ldr	r3, [pc, #80]	; (80013fc <HAL_RCC_DeInit+0x130>)
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	4a13      	ldr	r2, [pc, #76]	; (80013fc <HAL_RCC_DeInit+0x130>)
 80013ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013b2:	6113      	str	r3, [r2, #16]
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(RCC_PLLSAI2_SUPPORT)

  /* Reset PLLSAI2CFGR register */
  CLEAR_REG(RCC->PLLSAI2CFGR);
 80013b4:	4b11      	ldr	r3, [pc, #68]	; (80013fc <HAL_RCC_DeInit+0x130>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	615a      	str	r2, [r3, #20]
  SET_BIT(RCC->PLLSAI2CFGR,  RCC_PLLSAI2CFGR_PLLSAI2N_4 );
 80013ba:	4b10      	ldr	r3, [pc, #64]	; (80013fc <HAL_RCC_DeInit+0x130>)
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	4a0f      	ldr	r2, [pc, #60]	; (80013fc <HAL_RCC_DeInit+0x130>)
 80013c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013c4:	6153      	str	r3, [r2, #20]

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 80013c6:	4b0d      	ldr	r3, [pc, #52]	; (80013fc <HAL_RCC_DeInit+0x130>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a0c      	ldr	r2, [pc, #48]	; (80013fc <HAL_RCC_DeInit+0x130>)
 80013cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013d0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 80013d2:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <HAL_RCC_DeInit+0x130>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]

  /* Clear all interrupt flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <HAL_RCC_DeInit+0x130>)
 80013da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013de:	621a      	str	r2, [r3, #32]

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <HAL_RCC_DeInit+0x130>)
 80013e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013e6:	4a05      	ldr	r2, [pc, #20]	; (80013fc <HAL_RCC_DeInit+0x130>)
 80013e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80013ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  return HAL_OK;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40021000 	.word	0x40021000
 8001400:	2000002c 	.word	0x2000002c
 8001404:	003d0900 	.word	0x003d0900
 8001408:	20000000 	.word	0x20000000
 800140c:	eafef4ff 	.word	0xeafef4ff

08001410 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b088      	sub	sp, #32
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d101      	bne.n	8001422 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e3db      	b.n	8001bda <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001422:	4ba4      	ldr	r3, [pc, #656]	; (80016b4 <HAL_RCC_OscConfig+0x2a4>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f003 030c 	and.w	r3, r3, #12
 800142a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800142c:	4ba1      	ldr	r3, [pc, #644]	; (80016b4 <HAL_RCC_OscConfig+0x2a4>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	f003 0303 	and.w	r3, r3, #3
 8001434:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0310 	and.w	r3, r3, #16
 800143e:	2b00      	cmp	r3, #0
 8001440:	f000 80e1 	beq.w	8001606 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d007      	beq.n	800145a <HAL_RCC_OscConfig+0x4a>
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	2b0c      	cmp	r3, #12
 800144e:	f040 8088 	bne.w	8001562 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	2b01      	cmp	r3, #1
 8001456:	f040 8084 	bne.w	8001562 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800145a:	4b96      	ldr	r3, [pc, #600]	; (80016b4 <HAL_RCC_OscConfig+0x2a4>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d005      	beq.n	8001472 <HAL_RCC_OscConfig+0x62>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e3b3      	b.n	8001bda <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6a1a      	ldr	r2, [r3, #32]
 8001476:	4b8f      	ldr	r3, [pc, #572]	; (80016b4 <HAL_RCC_OscConfig+0x2a4>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0308 	and.w	r3, r3, #8
 800147e:	2b00      	cmp	r3, #0
 8001480:	d004      	beq.n	800148c <HAL_RCC_OscConfig+0x7c>
 8001482:	4b8c      	ldr	r3, [pc, #560]	; (80016b4 <HAL_RCC_OscConfig+0x2a4>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800148a:	e005      	b.n	8001498 <HAL_RCC_OscConfig+0x88>
 800148c:	4b89      	ldr	r3, [pc, #548]	; (80016b4 <HAL_RCC_OscConfig+0x2a4>)
 800148e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001492:	091b      	lsrs	r3, r3, #4
 8001494:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001498:	4293      	cmp	r3, r2
 800149a:	d223      	bcs.n	80014e4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a1b      	ldr	r3, [r3, #32]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f000 fd47 	bl	8001f34 <RCC_SetFlashLatencyFromMSIRange>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e394      	b.n	8001bda <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014b0:	4b80      	ldr	r3, [pc, #512]	; (80016b4 <HAL_RCC_OscConfig+0x2a4>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a7f      	ldr	r2, [pc, #508]	; (80016b4 <HAL_RCC_OscConfig+0x2a4>)
 80014b6:	f043 0308 	orr.w	r3, r3, #8
 80014ba:	6013      	str	r3, [r2, #0]
 80014bc:	4b7d      	ldr	r3, [pc, #500]	; (80016b4 <HAL_RCC_OscConfig+0x2a4>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a1b      	ldr	r3, [r3, #32]
 80014c8:	497a      	ldr	r1, [pc, #488]	; (80016b4 <HAL_RCC_OscConfig+0x2a4>)
 80014ca:	4313      	orrs	r3, r2
 80014cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014ce:	4b79      	ldr	r3, [pc, #484]	; (80016b4 <HAL_RCC_OscConfig+0x2a4>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	021b      	lsls	r3, r3, #8
 80014dc:	4975      	ldr	r1, [pc, #468]	; (80016b4 <HAL_RCC_OscConfig+0x2a4>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	604b      	str	r3, [r1, #4]
 80014e2:	e022      	b.n	800152a <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014e4:	4b73      	ldr	r3, [pc, #460]	; (80016b4 <HAL_RCC_OscConfig+0x2a4>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a72      	ldr	r2, [pc, #456]	; (80016b4 <HAL_RCC_OscConfig+0x2a4>)
 80014ea:	f043 0308 	orr.w	r3, r3, #8
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	4b70      	ldr	r3, [pc, #448]	; (80016b4 <HAL_RCC_OscConfig+0x2a4>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	496d      	ldr	r1, [pc, #436]	; (80016b4 <HAL_RCC_OscConfig+0x2a4>)
 80014fe:	4313      	orrs	r3, r2
 8001500:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001502:	4b6c      	ldr	r3, [pc, #432]	; (80016b4 <HAL_RCC_OscConfig+0x2a4>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	021b      	lsls	r3, r3, #8
 8001510:	4968      	ldr	r1, [pc, #416]	; (80016b4 <HAL_RCC_OscConfig+0x2a4>)
 8001512:	4313      	orrs	r3, r2
 8001514:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a1b      	ldr	r3, [r3, #32]
 800151a:	4618      	mov	r0, r3
 800151c:	f000 fd0a 	bl	8001f34 <RCC_SetFlashLatencyFromMSIRange>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e357      	b.n	8001bda <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800152a:	f000 fc41 	bl	8001db0 <HAL_RCC_GetSysClockFreq>
 800152e:	4601      	mov	r1, r0
 8001530:	4b60      	ldr	r3, [pc, #384]	; (80016b4 <HAL_RCC_OscConfig+0x2a4>)
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	091b      	lsrs	r3, r3, #4
 8001536:	f003 030f 	and.w	r3, r3, #15
 800153a:	4a5f      	ldr	r2, [pc, #380]	; (80016b8 <HAL_RCC_OscConfig+0x2a8>)
 800153c:	5cd3      	ldrb	r3, [r2, r3]
 800153e:	f003 031f 	and.w	r3, r3, #31
 8001542:	fa21 f303 	lsr.w	r3, r1, r3
 8001546:	4a5d      	ldr	r2, [pc, #372]	; (80016bc <HAL_RCC_OscConfig+0x2ac>)
 8001548:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800154a:	4b5d      	ldr	r3, [pc, #372]	; (80016c0 <HAL_RCC_OscConfig+0x2b0>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff f86a 	bl	8000628 <HAL_InitTick>
 8001554:	4603      	mov	r3, r0
 8001556:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001558:	7bfb      	ldrb	r3, [r7, #15]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d052      	beq.n	8001604 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 800155e:	7bfb      	ldrb	r3, [r7, #15]
 8001560:	e33b      	b.n	8001bda <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d032      	beq.n	80015d0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800156a:	4b52      	ldr	r3, [pc, #328]	; (80016b4 <HAL_RCC_OscConfig+0x2a4>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a51      	ldr	r2, [pc, #324]	; (80016b4 <HAL_RCC_OscConfig+0x2a4>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001576:	f7ff f8a3 	bl	80006c0 <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800157e:	f7ff f89f 	bl	80006c0 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e324      	b.n	8001bda <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001590:	4b48      	ldr	r3, [pc, #288]	; (80016b4 <HAL_RCC_OscConfig+0x2a4>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d0f0      	beq.n	800157e <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800159c:	4b45      	ldr	r3, [pc, #276]	; (80016b4 <HAL_RCC_OscConfig+0x2a4>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a44      	ldr	r2, [pc, #272]	; (80016b4 <HAL_RCC_OscConfig+0x2a4>)
 80015a2:	f043 0308 	orr.w	r3, r3, #8
 80015a6:	6013      	str	r3, [r2, #0]
 80015a8:	4b42      	ldr	r3, [pc, #264]	; (80016b4 <HAL_RCC_OscConfig+0x2a4>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a1b      	ldr	r3, [r3, #32]
 80015b4:	493f      	ldr	r1, [pc, #252]	; (80016b4 <HAL_RCC_OscConfig+0x2a4>)
 80015b6:	4313      	orrs	r3, r2
 80015b8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015ba:	4b3e      	ldr	r3, [pc, #248]	; (80016b4 <HAL_RCC_OscConfig+0x2a4>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	69db      	ldr	r3, [r3, #28]
 80015c6:	021b      	lsls	r3, r3, #8
 80015c8:	493a      	ldr	r1, [pc, #232]	; (80016b4 <HAL_RCC_OscConfig+0x2a4>)
 80015ca:	4313      	orrs	r3, r2
 80015cc:	604b      	str	r3, [r1, #4]
 80015ce:	e01a      	b.n	8001606 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015d0:	4b38      	ldr	r3, [pc, #224]	; (80016b4 <HAL_RCC_OscConfig+0x2a4>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a37      	ldr	r2, [pc, #220]	; (80016b4 <HAL_RCC_OscConfig+0x2a4>)
 80015d6:	f023 0301 	bic.w	r3, r3, #1
 80015da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015dc:	f7ff f870 	bl	80006c0 <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015e4:	f7ff f86c 	bl	80006c0 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e2f1      	b.n	8001bda <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015f6:	4b2f      	ldr	r3, [pc, #188]	; (80016b4 <HAL_RCC_OscConfig+0x2a4>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1f0      	bne.n	80015e4 <HAL_RCC_OscConfig+0x1d4>
 8001602:	e000      	b.n	8001606 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001604:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	2b00      	cmp	r3, #0
 8001610:	d074      	beq.n	80016fc <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	2b08      	cmp	r3, #8
 8001616:	d005      	beq.n	8001624 <HAL_RCC_OscConfig+0x214>
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	2b0c      	cmp	r3, #12
 800161c:	d10e      	bne.n	800163c <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	2b03      	cmp	r3, #3
 8001622:	d10b      	bne.n	800163c <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001624:	4b23      	ldr	r3, [pc, #140]	; (80016b4 <HAL_RCC_OscConfig+0x2a4>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d064      	beq.n	80016fa <HAL_RCC_OscConfig+0x2ea>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d160      	bne.n	80016fa <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e2ce      	b.n	8001bda <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001644:	d106      	bne.n	8001654 <HAL_RCC_OscConfig+0x244>
 8001646:	4b1b      	ldr	r3, [pc, #108]	; (80016b4 <HAL_RCC_OscConfig+0x2a4>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a1a      	ldr	r2, [pc, #104]	; (80016b4 <HAL_RCC_OscConfig+0x2a4>)
 800164c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	e01d      	b.n	8001690 <HAL_RCC_OscConfig+0x280>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800165c:	d10c      	bne.n	8001678 <HAL_RCC_OscConfig+0x268>
 800165e:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <HAL_RCC_OscConfig+0x2a4>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a14      	ldr	r2, [pc, #80]	; (80016b4 <HAL_RCC_OscConfig+0x2a4>)
 8001664:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <HAL_RCC_OscConfig+0x2a4>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a11      	ldr	r2, [pc, #68]	; (80016b4 <HAL_RCC_OscConfig+0x2a4>)
 8001670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001674:	6013      	str	r3, [r2, #0]
 8001676:	e00b      	b.n	8001690 <HAL_RCC_OscConfig+0x280>
 8001678:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <HAL_RCC_OscConfig+0x2a4>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a0d      	ldr	r2, [pc, #52]	; (80016b4 <HAL_RCC_OscConfig+0x2a4>)
 800167e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001682:	6013      	str	r3, [r2, #0]
 8001684:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <HAL_RCC_OscConfig+0x2a4>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a0a      	ldr	r2, [pc, #40]	; (80016b4 <HAL_RCC_OscConfig+0x2a4>)
 800168a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800168e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d01c      	beq.n	80016d2 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001698:	f7ff f812 	bl	80006c0 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800169e:	e011      	b.n	80016c4 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016a0:	f7ff f80e 	bl	80006c0 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b64      	cmp	r3, #100	; 0x64
 80016ac:	d90a      	bls.n	80016c4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e293      	b.n	8001bda <HAL_RCC_OscConfig+0x7ca>
 80016b2:	bf00      	nop
 80016b4:	40021000 	.word	0x40021000
 80016b8:	08005db0 	.word	0x08005db0
 80016bc:	2000002c 	.word	0x2000002c
 80016c0:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016c4:	4bae      	ldr	r3, [pc, #696]	; (8001980 <HAL_RCC_OscConfig+0x570>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d0e7      	beq.n	80016a0 <HAL_RCC_OscConfig+0x290>
 80016d0:	e014      	b.n	80016fc <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d2:	f7fe fff5 	bl	80006c0 <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016da:	f7fe fff1 	bl	80006c0 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b64      	cmp	r3, #100	; 0x64
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e276      	b.n	8001bda <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016ec:	4ba4      	ldr	r3, [pc, #656]	; (8001980 <HAL_RCC_OscConfig+0x570>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1f0      	bne.n	80016da <HAL_RCC_OscConfig+0x2ca>
 80016f8:	e000      	b.n	80016fc <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016fa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d060      	beq.n	80017ca <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	2b04      	cmp	r3, #4
 800170c:	d005      	beq.n	800171a <HAL_RCC_OscConfig+0x30a>
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	2b0c      	cmp	r3, #12
 8001712:	d119      	bne.n	8001748 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	2b02      	cmp	r3, #2
 8001718:	d116      	bne.n	8001748 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800171a:	4b99      	ldr	r3, [pc, #612]	; (8001980 <HAL_RCC_OscConfig+0x570>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001722:	2b00      	cmp	r3, #0
 8001724:	d005      	beq.n	8001732 <HAL_RCC_OscConfig+0x322>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d101      	bne.n	8001732 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e253      	b.n	8001bda <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001732:	4b93      	ldr	r3, [pc, #588]	; (8001980 <HAL_RCC_OscConfig+0x570>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	061b      	lsls	r3, r3, #24
 8001740:	498f      	ldr	r1, [pc, #572]	; (8001980 <HAL_RCC_OscConfig+0x570>)
 8001742:	4313      	orrs	r3, r2
 8001744:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001746:	e040      	b.n	80017ca <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d023      	beq.n	8001798 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001750:	4b8b      	ldr	r3, [pc, #556]	; (8001980 <HAL_RCC_OscConfig+0x570>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a8a      	ldr	r2, [pc, #552]	; (8001980 <HAL_RCC_OscConfig+0x570>)
 8001756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800175a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800175c:	f7fe ffb0 	bl	80006c0 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001764:	f7fe ffac 	bl	80006c0 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e231      	b.n	8001bda <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001776:	4b82      	ldr	r3, [pc, #520]	; (8001980 <HAL_RCC_OscConfig+0x570>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800177e:	2b00      	cmp	r3, #0
 8001780:	d0f0      	beq.n	8001764 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001782:	4b7f      	ldr	r3, [pc, #508]	; (8001980 <HAL_RCC_OscConfig+0x570>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	061b      	lsls	r3, r3, #24
 8001790:	497b      	ldr	r1, [pc, #492]	; (8001980 <HAL_RCC_OscConfig+0x570>)
 8001792:	4313      	orrs	r3, r2
 8001794:	604b      	str	r3, [r1, #4]
 8001796:	e018      	b.n	80017ca <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001798:	4b79      	ldr	r3, [pc, #484]	; (8001980 <HAL_RCC_OscConfig+0x570>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a78      	ldr	r2, [pc, #480]	; (8001980 <HAL_RCC_OscConfig+0x570>)
 800179e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a4:	f7fe ff8c 	bl	80006c0 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ac:	f7fe ff88 	bl	80006c0 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e20d      	b.n	8001bda <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017be:	4b70      	ldr	r3, [pc, #448]	; (8001980 <HAL_RCC_OscConfig+0x570>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1f0      	bne.n	80017ac <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0308 	and.w	r3, r3, #8
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d03c      	beq.n	8001850 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d01c      	beq.n	8001818 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017de:	4b68      	ldr	r3, [pc, #416]	; (8001980 <HAL_RCC_OscConfig+0x570>)
 80017e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017e4:	4a66      	ldr	r2, [pc, #408]	; (8001980 <HAL_RCC_OscConfig+0x570>)
 80017e6:	f043 0301 	orr.w	r3, r3, #1
 80017ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ee:	f7fe ff67 	bl	80006c0 <HAL_GetTick>
 80017f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f6:	f7fe ff63 	bl	80006c0 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e1e8      	b.n	8001bda <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001808:	4b5d      	ldr	r3, [pc, #372]	; (8001980 <HAL_RCC_OscConfig+0x570>)
 800180a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d0ef      	beq.n	80017f6 <HAL_RCC_OscConfig+0x3e6>
 8001816:	e01b      	b.n	8001850 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001818:	4b59      	ldr	r3, [pc, #356]	; (8001980 <HAL_RCC_OscConfig+0x570>)
 800181a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800181e:	4a58      	ldr	r2, [pc, #352]	; (8001980 <HAL_RCC_OscConfig+0x570>)
 8001820:	f023 0301 	bic.w	r3, r3, #1
 8001824:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001828:	f7fe ff4a 	bl	80006c0 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001830:	f7fe ff46 	bl	80006c0 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e1cb      	b.n	8001bda <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001842:	4b4f      	ldr	r3, [pc, #316]	; (8001980 <HAL_RCC_OscConfig+0x570>)
 8001844:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1ef      	bne.n	8001830 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0304 	and.w	r3, r3, #4
 8001858:	2b00      	cmp	r3, #0
 800185a:	f000 80a5 	beq.w	80019a8 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 800185e:	2300      	movs	r3, #0
 8001860:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001862:	4b47      	ldr	r3, [pc, #284]	; (8001980 <HAL_RCC_OscConfig+0x570>)
 8001864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d10d      	bne.n	800188a <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800186e:	4b44      	ldr	r3, [pc, #272]	; (8001980 <HAL_RCC_OscConfig+0x570>)
 8001870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001872:	4a43      	ldr	r2, [pc, #268]	; (8001980 <HAL_RCC_OscConfig+0x570>)
 8001874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001878:	6593      	str	r3, [r2, #88]	; 0x58
 800187a:	4b41      	ldr	r3, [pc, #260]	; (8001980 <HAL_RCC_OscConfig+0x570>)
 800187c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001882:	60bb      	str	r3, [r7, #8]
 8001884:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001886:	2301      	movs	r3, #1
 8001888:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800188a:	4b3e      	ldr	r3, [pc, #248]	; (8001984 <HAL_RCC_OscConfig+0x574>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001892:	2b00      	cmp	r3, #0
 8001894:	d118      	bne.n	80018c8 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001896:	4b3b      	ldr	r3, [pc, #236]	; (8001984 <HAL_RCC_OscConfig+0x574>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a3a      	ldr	r2, [pc, #232]	; (8001984 <HAL_RCC_OscConfig+0x574>)
 800189c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018a2:	f7fe ff0d 	bl	80006c0 <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018aa:	f7fe ff09 	bl	80006c0 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e18e      	b.n	8001bda <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018bc:	4b31      	ldr	r3, [pc, #196]	; (8001984 <HAL_RCC_OscConfig+0x574>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0f0      	beq.n	80018aa <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d108      	bne.n	80018e2 <HAL_RCC_OscConfig+0x4d2>
 80018d0:	4b2b      	ldr	r3, [pc, #172]	; (8001980 <HAL_RCC_OscConfig+0x570>)
 80018d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018d6:	4a2a      	ldr	r2, [pc, #168]	; (8001980 <HAL_RCC_OscConfig+0x570>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018e0:	e024      	b.n	800192c <HAL_RCC_OscConfig+0x51c>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	2b05      	cmp	r3, #5
 80018e8:	d110      	bne.n	800190c <HAL_RCC_OscConfig+0x4fc>
 80018ea:	4b25      	ldr	r3, [pc, #148]	; (8001980 <HAL_RCC_OscConfig+0x570>)
 80018ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018f0:	4a23      	ldr	r2, [pc, #140]	; (8001980 <HAL_RCC_OscConfig+0x570>)
 80018f2:	f043 0304 	orr.w	r3, r3, #4
 80018f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018fa:	4b21      	ldr	r3, [pc, #132]	; (8001980 <HAL_RCC_OscConfig+0x570>)
 80018fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001900:	4a1f      	ldr	r2, [pc, #124]	; (8001980 <HAL_RCC_OscConfig+0x570>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800190a:	e00f      	b.n	800192c <HAL_RCC_OscConfig+0x51c>
 800190c:	4b1c      	ldr	r3, [pc, #112]	; (8001980 <HAL_RCC_OscConfig+0x570>)
 800190e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001912:	4a1b      	ldr	r2, [pc, #108]	; (8001980 <HAL_RCC_OscConfig+0x570>)
 8001914:	f023 0301 	bic.w	r3, r3, #1
 8001918:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800191c:	4b18      	ldr	r3, [pc, #96]	; (8001980 <HAL_RCC_OscConfig+0x570>)
 800191e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001922:	4a17      	ldr	r2, [pc, #92]	; (8001980 <HAL_RCC_OscConfig+0x570>)
 8001924:	f023 0304 	bic.w	r3, r3, #4
 8001928:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d016      	beq.n	8001962 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001934:	f7fe fec4 	bl	80006c0 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800193a:	e00a      	b.n	8001952 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800193c:	f7fe fec0 	bl	80006c0 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	f241 3288 	movw	r2, #5000	; 0x1388
 800194a:	4293      	cmp	r3, r2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e143      	b.n	8001bda <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001952:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <HAL_RCC_OscConfig+0x570>)
 8001954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0ed      	beq.n	800193c <HAL_RCC_OscConfig+0x52c>
 8001960:	e019      	b.n	8001996 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001962:	f7fe fead 	bl	80006c0 <HAL_GetTick>
 8001966:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001968:	e00e      	b.n	8001988 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800196a:	f7fe fea9 	bl	80006c0 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	f241 3288 	movw	r2, #5000	; 0x1388
 8001978:	4293      	cmp	r3, r2
 800197a:	d905      	bls.n	8001988 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e12c      	b.n	8001bda <HAL_RCC_OscConfig+0x7ca>
 8001980:	40021000 	.word	0x40021000
 8001984:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001988:	4b96      	ldr	r3, [pc, #600]	; (8001be4 <HAL_RCC_OscConfig+0x7d4>)
 800198a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1e9      	bne.n	800196a <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001996:	7ffb      	ldrb	r3, [r7, #31]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d105      	bne.n	80019a8 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800199c:	4b91      	ldr	r3, [pc, #580]	; (8001be4 <HAL_RCC_OscConfig+0x7d4>)
 800199e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a0:	4a90      	ldr	r2, [pc, #576]	; (8001be4 <HAL_RCC_OscConfig+0x7d4>)
 80019a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019a6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0320 	and.w	r3, r3, #32
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d03c      	beq.n	8001a2e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d01c      	beq.n	80019f6 <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019bc:	4b89      	ldr	r3, [pc, #548]	; (8001be4 <HAL_RCC_OscConfig+0x7d4>)
 80019be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019c2:	4a88      	ldr	r2, [pc, #544]	; (8001be4 <HAL_RCC_OscConfig+0x7d4>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019cc:	f7fe fe78 	bl	80006c0 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019d4:	f7fe fe74 	bl	80006c0 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e0f9      	b.n	8001bda <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019e6:	4b7f      	ldr	r3, [pc, #508]	; (8001be4 <HAL_RCC_OscConfig+0x7d4>)
 80019e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0ef      	beq.n	80019d4 <HAL_RCC_OscConfig+0x5c4>
 80019f4:	e01b      	b.n	8001a2e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019f6:	4b7b      	ldr	r3, [pc, #492]	; (8001be4 <HAL_RCC_OscConfig+0x7d4>)
 80019f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019fc:	4a79      	ldr	r2, [pc, #484]	; (8001be4 <HAL_RCC_OscConfig+0x7d4>)
 80019fe:	f023 0301 	bic.w	r3, r3, #1
 8001a02:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a06:	f7fe fe5b 	bl	80006c0 <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a0e:	f7fe fe57 	bl	80006c0 <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e0dc      	b.n	8001bda <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a20:	4b70      	ldr	r3, [pc, #448]	; (8001be4 <HAL_RCC_OscConfig+0x7d4>)
 8001a22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1ef      	bne.n	8001a0e <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f000 80d0 	beq.w	8001bd8 <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	2b0c      	cmp	r3, #12
 8001a3c:	f000 808d 	beq.w	8001b5a <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d15a      	bne.n	8001afe <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a48:	4b66      	ldr	r3, [pc, #408]	; (8001be4 <HAL_RCC_OscConfig+0x7d4>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a65      	ldr	r2, [pc, #404]	; (8001be4 <HAL_RCC_OscConfig+0x7d4>)
 8001a4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a54:	f7fe fe34 	bl	80006c0 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a5c:	f7fe fe30 	bl	80006c0 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e0b5      	b.n	8001bda <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a6e:	4b5d      	ldr	r3, [pc, #372]	; (8001be4 <HAL_RCC_OscConfig+0x7d4>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1f0      	bne.n	8001a5c <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a7a:	4b5a      	ldr	r3, [pc, #360]	; (8001be4 <HAL_RCC_OscConfig+0x7d4>)
 8001a7c:	68da      	ldr	r2, [r3, #12]
 8001a7e:	4b5a      	ldr	r3, [pc, #360]	; (8001be8 <HAL_RCC_OscConfig+0x7d8>)
 8001a80:	4013      	ands	r3, r2
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a8a:	3a01      	subs	r2, #1
 8001a8c:	0112      	lsls	r2, r2, #4
 8001a8e:	4311      	orrs	r1, r2
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a94:	0212      	lsls	r2, r2, #8
 8001a96:	4311      	orrs	r1, r2
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a9c:	0852      	lsrs	r2, r2, #1
 8001a9e:	3a01      	subs	r2, #1
 8001aa0:	0552      	lsls	r2, r2, #21
 8001aa2:	4311      	orrs	r1, r2
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001aa8:	0852      	lsrs	r2, r2, #1
 8001aaa:	3a01      	subs	r2, #1
 8001aac:	0652      	lsls	r2, r2, #25
 8001aae:	4311      	orrs	r1, r2
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ab4:	06d2      	lsls	r2, r2, #27
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	494a      	ldr	r1, [pc, #296]	; (8001be4 <HAL_RCC_OscConfig+0x7d4>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001abe:	4b49      	ldr	r3, [pc, #292]	; (8001be4 <HAL_RCC_OscConfig+0x7d4>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a48      	ldr	r2, [pc, #288]	; (8001be4 <HAL_RCC_OscConfig+0x7d4>)
 8001ac4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ac8:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001aca:	4b46      	ldr	r3, [pc, #280]	; (8001be4 <HAL_RCC_OscConfig+0x7d4>)
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	4a45      	ldr	r2, [pc, #276]	; (8001be4 <HAL_RCC_OscConfig+0x7d4>)
 8001ad0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ad4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad6:	f7fe fdf3 	bl	80006c0 <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001adc:	e008      	b.n	8001af0 <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ade:	f7fe fdef 	bl	80006c0 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e074      	b.n	8001bda <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001af0:	4b3c      	ldr	r3, [pc, #240]	; (8001be4 <HAL_RCC_OscConfig+0x7d4>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d0f0      	beq.n	8001ade <HAL_RCC_OscConfig+0x6ce>
 8001afc:	e06c      	b.n	8001bd8 <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001afe:	4b39      	ldr	r3, [pc, #228]	; (8001be4 <HAL_RCC_OscConfig+0x7d4>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a38      	ldr	r2, [pc, #224]	; (8001be4 <HAL_RCC_OscConfig+0x7d4>)
 8001b04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b08:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001b0a:	4b36      	ldr	r3, [pc, #216]	; (8001be4 <HAL_RCC_OscConfig+0x7d4>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d105      	bne.n	8001b22 <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001b16:	4b33      	ldr	r3, [pc, #204]	; (8001be4 <HAL_RCC_OscConfig+0x7d4>)
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	4a32      	ldr	r2, [pc, #200]	; (8001be4 <HAL_RCC_OscConfig+0x7d4>)
 8001b1c:	f023 0303 	bic.w	r3, r3, #3
 8001b20:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b22:	4b30      	ldr	r3, [pc, #192]	; (8001be4 <HAL_RCC_OscConfig+0x7d4>)
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	4a2f      	ldr	r2, [pc, #188]	; (8001be4 <HAL_RCC_OscConfig+0x7d4>)
 8001b28:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001b2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b30:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b32:	f7fe fdc5 	bl	80006c0 <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b3a:	f7fe fdc1 	bl	80006c0 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e046      	b.n	8001bda <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b4c:	4b25      	ldr	r3, [pc, #148]	; (8001be4 <HAL_RCC_OscConfig+0x7d4>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1f0      	bne.n	8001b3a <HAL_RCC_OscConfig+0x72a>
 8001b58:	e03e      	b.n	8001bd8 <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d101      	bne.n	8001b66 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e039      	b.n	8001bda <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8001b66:	4b1f      	ldr	r3, [pc, #124]	; (8001be4 <HAL_RCC_OscConfig+0x7d4>)
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	f003 0203 	and.w	r2, r3, #3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d12c      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b84:	3b01      	subs	r3, #1
 8001b86:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d123      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b96:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d11b      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba6:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d113      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bb6:	085b      	lsrs	r3, r3, #1
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d109      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	085b      	lsrs	r3, r3, #1
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d001      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e000      	b.n	8001bda <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3720      	adds	r7, #32
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40021000 	.word	0x40021000
 8001be8:	019d808c 	.word	0x019d808c

08001bec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e0c8      	b.n	8001d92 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c00:	4b66      	ldr	r3, [pc, #408]	; (8001d9c <HAL_RCC_ClockConfig+0x1b0>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d910      	bls.n	8001c30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0e:	4b63      	ldr	r3, [pc, #396]	; (8001d9c <HAL_RCC_ClockConfig+0x1b0>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f023 0207 	bic.w	r2, r3, #7
 8001c16:	4961      	ldr	r1, [pc, #388]	; (8001d9c <HAL_RCC_ClockConfig+0x1b0>)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1e:	4b5f      	ldr	r3, [pc, #380]	; (8001d9c <HAL_RCC_ClockConfig+0x1b0>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d001      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e0b0      	b.n	8001d92 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d04c      	beq.n	8001cd6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	2b03      	cmp	r3, #3
 8001c42:	d107      	bne.n	8001c54 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c44:	4b56      	ldr	r3, [pc, #344]	; (8001da0 <HAL_RCC_ClockConfig+0x1b4>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d121      	bne.n	8001c94 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e09e      	b.n	8001d92 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d107      	bne.n	8001c6c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c5c:	4b50      	ldr	r3, [pc, #320]	; (8001da0 <HAL_RCC_ClockConfig+0x1b4>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d115      	bne.n	8001c94 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e092      	b.n	8001d92 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d107      	bne.n	8001c84 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c74:	4b4a      	ldr	r3, [pc, #296]	; (8001da0 <HAL_RCC_ClockConfig+0x1b4>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d109      	bne.n	8001c94 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e086      	b.n	8001d92 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c84:	4b46      	ldr	r3, [pc, #280]	; (8001da0 <HAL_RCC_ClockConfig+0x1b4>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d101      	bne.n	8001c94 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e07e      	b.n	8001d92 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c94:	4b42      	ldr	r3, [pc, #264]	; (8001da0 <HAL_RCC_ClockConfig+0x1b4>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f023 0203 	bic.w	r2, r3, #3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	493f      	ldr	r1, [pc, #252]	; (8001da0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ca6:	f7fe fd0b 	bl	80006c0 <HAL_GetTick>
 8001caa:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cac:	e00a      	b.n	8001cc4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cae:	f7fe fd07 	bl	80006c0 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e066      	b.n	8001d92 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc4:	4b36      	ldr	r3, [pc, #216]	; (8001da0 <HAL_RCC_ClockConfig+0x1b4>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f003 020c 	and.w	r2, r3, #12
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d1eb      	bne.n	8001cae <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d008      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ce2:	4b2f      	ldr	r3, [pc, #188]	; (8001da0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	492c      	ldr	r1, [pc, #176]	; (8001da0 <HAL_RCC_ClockConfig+0x1b4>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cf4:	4b29      	ldr	r3, [pc, #164]	; (8001d9c <HAL_RCC_ClockConfig+0x1b0>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0307 	and.w	r3, r3, #7
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d210      	bcs.n	8001d24 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d02:	4b26      	ldr	r3, [pc, #152]	; (8001d9c <HAL_RCC_ClockConfig+0x1b0>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f023 0207 	bic.w	r2, r3, #7
 8001d0a:	4924      	ldr	r1, [pc, #144]	; (8001d9c <HAL_RCC_ClockConfig+0x1b0>)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d12:	4b22      	ldr	r3, [pc, #136]	; (8001d9c <HAL_RCC_ClockConfig+0x1b0>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d001      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e036      	b.n	8001d92 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0304 	and.w	r3, r3, #4
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d008      	beq.n	8001d42 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d30:	4b1b      	ldr	r3, [pc, #108]	; (8001da0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	4918      	ldr	r1, [pc, #96]	; (8001da0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d009      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d4e:	4b14      	ldr	r3, [pc, #80]	; (8001da0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	4910      	ldr	r1, [pc, #64]	; (8001da0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d62:	f000 f825 	bl	8001db0 <HAL_RCC_GetSysClockFreq>
 8001d66:	4601      	mov	r1, r0
 8001d68:	4b0d      	ldr	r3, [pc, #52]	; (8001da0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	091b      	lsrs	r3, r3, #4
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	4a0c      	ldr	r2, [pc, #48]	; (8001da4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d74:	5cd3      	ldrb	r3, [r2, r3]
 8001d76:	f003 031f 	and.w	r3, r3, #31
 8001d7a:	fa21 f303 	lsr.w	r3, r1, r3
 8001d7e:	4a0a      	ldr	r2, [pc, #40]	; (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d82:	4b0a      	ldr	r3, [pc, #40]	; (8001dac <HAL_RCC_ClockConfig+0x1c0>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7fe fc4e 	bl	8000628 <HAL_InitTick>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d90:	7afb      	ldrb	r3, [r7, #11]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40022000 	.word	0x40022000
 8001da0:	40021000 	.word	0x40021000
 8001da4:	08005db0 	.word	0x08005db0
 8001da8:	2000002c 	.word	0x2000002c
 8001dac:	20000000 	.word	0x20000000

08001db0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b089      	sub	sp, #36	; 0x24
 8001db4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001db6:	2300      	movs	r3, #0
 8001db8:	61fb      	str	r3, [r7, #28]
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dbe:	4b3d      	ldr	r3, [pc, #244]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 030c 	and.w	r3, r3, #12
 8001dc6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dc8:	4b3a      	ldr	r3, [pc, #232]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	f003 0303 	and.w	r3, r3, #3
 8001dd0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d005      	beq.n	8001de4 <HAL_RCC_GetSysClockFreq+0x34>
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	2b0c      	cmp	r3, #12
 8001ddc:	d121      	bne.n	8001e22 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d11e      	bne.n	8001e22 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001de4:	4b33      	ldr	r3, [pc, #204]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0308 	and.w	r3, r3, #8
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d107      	bne.n	8001e00 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001df0:	4b30      	ldr	r3, [pc, #192]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001df6:	0a1b      	lsrs	r3, r3, #8
 8001df8:	f003 030f 	and.w	r3, r3, #15
 8001dfc:	61fb      	str	r3, [r7, #28]
 8001dfe:	e005      	b.n	8001e0c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e00:	4b2c      	ldr	r3, [pc, #176]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	091b      	lsrs	r3, r3, #4
 8001e06:	f003 030f 	and.w	r3, r3, #15
 8001e0a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e0c:	4a2a      	ldr	r2, [pc, #168]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e14:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d10d      	bne.n	8001e38 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e20:	e00a      	b.n	8001e38 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	2b04      	cmp	r3, #4
 8001e26:	d102      	bne.n	8001e2e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e28:	4b24      	ldr	r3, [pc, #144]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e2a:	61bb      	str	r3, [r7, #24]
 8001e2c:	e004      	b.n	8001e38 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d101      	bne.n	8001e38 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e34:	4b22      	ldr	r3, [pc, #136]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e36:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	2b0c      	cmp	r3, #12
 8001e3c:	d133      	bne.n	8001ea6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e3e:	4b1d      	ldr	r3, [pc, #116]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	f003 0303 	and.w	r3, r3, #3
 8001e46:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d002      	beq.n	8001e54 <HAL_RCC_GetSysClockFreq+0xa4>
 8001e4e:	2b03      	cmp	r3, #3
 8001e50:	d003      	beq.n	8001e5a <HAL_RCC_GetSysClockFreq+0xaa>
 8001e52:	e005      	b.n	8001e60 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e54:	4b19      	ldr	r3, [pc, #100]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e56:	617b      	str	r3, [r7, #20]
      break;
 8001e58:	e005      	b.n	8001e66 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e5a:	4b19      	ldr	r3, [pc, #100]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e5c:	617b      	str	r3, [r7, #20]
      break;
 8001e5e:	e002      	b.n	8001e66 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	617b      	str	r3, [r7, #20]
      break;
 8001e64:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e66:	4b13      	ldr	r3, [pc, #76]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	091b      	lsrs	r3, r3, #4
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	3301      	adds	r3, #1
 8001e72:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e74:	4b0f      	ldr	r3, [pc, #60]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	0a1b      	lsrs	r3, r3, #8
 8001e7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	fb02 f203 	mul.w	r2, r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e8c:	4b09      	ldr	r3, [pc, #36]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	0e5b      	lsrs	r3, r3, #25
 8001e92:	f003 0303 	and.w	r3, r3, #3
 8001e96:	3301      	adds	r3, #1
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e9c:	697a      	ldr	r2, [r7, #20]
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ea6:	69bb      	ldr	r3, [r7, #24]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3724      	adds	r7, #36	; 0x24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	08005dc8 	.word	0x08005dc8
 8001ebc:	00f42400 	.word	0x00f42400
 8001ec0:	007a1200 	.word	0x007a1200

08001ec4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ec8:	4b03      	ldr	r3, [pc, #12]	; (8001ed8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eca:	681b      	ldr	r3, [r3, #0]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	2000002c 	.word	0x2000002c

08001edc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ee0:	f7ff fff0 	bl	8001ec4 <HAL_RCC_GetHCLKFreq>
 8001ee4:	4601      	mov	r1, r0
 8001ee6:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	0a1b      	lsrs	r3, r3, #8
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	4a04      	ldr	r2, [pc, #16]	; (8001f04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ef2:	5cd3      	ldrb	r3, [r2, r3]
 8001ef4:	f003 031f 	and.w	r3, r3, #31
 8001ef8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40021000 	.word	0x40021000
 8001f04:	08005dc0 	.word	0x08005dc0

08001f08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f0c:	f7ff ffda 	bl	8001ec4 <HAL_RCC_GetHCLKFreq>
 8001f10:	4601      	mov	r1, r0
 8001f12:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	0adb      	lsrs	r3, r3, #11
 8001f18:	f003 0307 	and.w	r3, r3, #7
 8001f1c:	4a04      	ldr	r2, [pc, #16]	; (8001f30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f1e:	5cd3      	ldrb	r3, [r2, r3]
 8001f20:	f003 031f 	and.w	r3, r3, #31
 8001f24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	08005dc0 	.word	0x08005dc0

08001f34 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f40:	4b2a      	ldr	r3, [pc, #168]	; (8001fec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f4c:	f7ff f95a 	bl	8001204 <HAL_PWREx_GetVoltageRange>
 8001f50:	6178      	str	r0, [r7, #20]
 8001f52:	e014      	b.n	8001f7e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f54:	4b25      	ldr	r3, [pc, #148]	; (8001fec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f58:	4a24      	ldr	r2, [pc, #144]	; (8001fec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f5e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f60:	4b22      	ldr	r3, [pc, #136]	; (8001fec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f6c:	f7ff f94a 	bl	8001204 <HAL_PWREx_GetVoltageRange>
 8001f70:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f72:	4b1e      	ldr	r3, [pc, #120]	; (8001fec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f76:	4a1d      	ldr	r2, [pc, #116]	; (8001fec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f7c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f84:	d10b      	bne.n	8001f9e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b80      	cmp	r3, #128	; 0x80
 8001f8a:	d919      	bls.n	8001fc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2ba0      	cmp	r3, #160	; 0xa0
 8001f90:	d902      	bls.n	8001f98 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f92:	2302      	movs	r3, #2
 8001f94:	613b      	str	r3, [r7, #16]
 8001f96:	e013      	b.n	8001fc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f98:	2301      	movs	r3, #1
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	e010      	b.n	8001fc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b80      	cmp	r3, #128	; 0x80
 8001fa2:	d902      	bls.n	8001faa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	613b      	str	r3, [r7, #16]
 8001fa8:	e00a      	b.n	8001fc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2b80      	cmp	r3, #128	; 0x80
 8001fae:	d102      	bne.n	8001fb6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	613b      	str	r3, [r7, #16]
 8001fb4:	e004      	b.n	8001fc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b70      	cmp	r3, #112	; 0x70
 8001fba:	d101      	bne.n	8001fc0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fc0:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f023 0207 	bic.w	r2, r3, #7
 8001fc8:	4909      	ldr	r1, [pc, #36]	; (8001ff0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001fd0:	4b07      	ldr	r3, [pc, #28]	; (8001ff0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d001      	beq.n	8001fe2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40022000 	.word	0x40022000

08001ff4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002000:	2300      	movs	r3, #0
 8002002:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800200c:	2b00      	cmp	r3, #0
 800200e:	d03f      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002014:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002018:	d01c      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800201a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800201e:	d802      	bhi.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00e      	beq.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002024:	e01f      	b.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002026:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800202a:	d003      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800202c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002030:	d01c      	beq.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002032:	e018      	b.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002034:	4b85      	ldr	r3, [pc, #532]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	4a84      	ldr	r2, [pc, #528]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800203a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800203e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002040:	e015      	b.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	3304      	adds	r3, #4
 8002046:	2100      	movs	r1, #0
 8002048:	4618      	mov	r0, r3
 800204a:	f000 facb 	bl	80025e4 <RCCEx_PLLSAI1_Config>
 800204e:	4603      	mov	r3, r0
 8002050:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002052:	e00c      	b.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	3320      	adds	r3, #32
 8002058:	2100      	movs	r1, #0
 800205a:	4618      	mov	r0, r3
 800205c:	f000 fbb2 	bl	80027c4 <RCCEx_PLLSAI2_Config>
 8002060:	4603      	mov	r3, r0
 8002062:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002064:	e003      	b.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	74fb      	strb	r3, [r7, #19]
      break;
 800206a:	e000      	b.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800206c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800206e:	7cfb      	ldrb	r3, [r7, #19]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d10b      	bne.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002074:	4b75      	ldr	r3, [pc, #468]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800207a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002082:	4972      	ldr	r1, [pc, #456]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002084:	4313      	orrs	r3, r2
 8002086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800208a:	e001      	b.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800208c:	7cfb      	ldrb	r3, [r7, #19]
 800208e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d03f      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020a4:	d01c      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80020a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020aa:	d802      	bhi.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d00e      	beq.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0xda>
 80020b0:	e01f      	b.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80020b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020b6:	d003      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80020b8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80020bc:	d01c      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80020be:	e018      	b.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020c0:	4b62      	ldr	r3, [pc, #392]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	4a61      	ldr	r2, [pc, #388]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ca:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020cc:	e015      	b.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	3304      	adds	r3, #4
 80020d2:	2100      	movs	r1, #0
 80020d4:	4618      	mov	r0, r3
 80020d6:	f000 fa85 	bl	80025e4 <RCCEx_PLLSAI1_Config>
 80020da:	4603      	mov	r3, r0
 80020dc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020de:	e00c      	b.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3320      	adds	r3, #32
 80020e4:	2100      	movs	r1, #0
 80020e6:	4618      	mov	r0, r3
 80020e8:	f000 fb6c 	bl	80027c4 <RCCEx_PLLSAI2_Config>
 80020ec:	4603      	mov	r3, r0
 80020ee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020f0:	e003      	b.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	74fb      	strb	r3, [r7, #19]
      break;
 80020f6:	e000      	b.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80020f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020fa:	7cfb      	ldrb	r3, [r7, #19]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d10b      	bne.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002100:	4b52      	ldr	r3, [pc, #328]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002106:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800210e:	494f      	ldr	r1, [pc, #316]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002110:	4313      	orrs	r3, r2
 8002112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002116:	e001      	b.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002118:	7cfb      	ldrb	r3, [r7, #19]
 800211a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 80a0 	beq.w	800226a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800212a:	2300      	movs	r3, #0
 800212c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800212e:	4b47      	ldr	r3, [pc, #284]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800213a:	2301      	movs	r3, #1
 800213c:	e000      	b.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800213e:	2300      	movs	r3, #0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00d      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002144:	4b41      	ldr	r3, [pc, #260]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002148:	4a40      	ldr	r2, [pc, #256]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800214a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800214e:	6593      	str	r3, [r2, #88]	; 0x58
 8002150:	4b3e      	ldr	r3, [pc, #248]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002158:	60bb      	str	r3, [r7, #8]
 800215a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800215c:	2301      	movs	r3, #1
 800215e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002160:	4b3b      	ldr	r3, [pc, #236]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a3a      	ldr	r2, [pc, #232]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800216a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800216c:	f7fe faa8 	bl	80006c0 <HAL_GetTick>
 8002170:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002172:	e009      	b.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002174:	f7fe faa4 	bl	80006c0 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d902      	bls.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	74fb      	strb	r3, [r7, #19]
        break;
 8002186:	e005      	b.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002188:	4b31      	ldr	r3, [pc, #196]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0ef      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002194:	7cfb      	ldrb	r3, [r7, #19]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d15c      	bne.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800219a:	4b2c      	ldr	r3, [pc, #176]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800219c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021a4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d01f      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d019      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021b8:	4b24      	ldr	r3, [pc, #144]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021c4:	4b21      	ldr	r3, [pc, #132]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ca:	4a20      	ldr	r2, [pc, #128]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021d4:	4b1d      	ldr	r3, [pc, #116]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021da:	4a1c      	ldr	r2, [pc, #112]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021e4:	4a19      	ldr	r2, [pc, #100]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d016      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f6:	f7fe fa63 	bl	80006c0 <HAL_GetTick>
 80021fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021fc:	e00b      	b.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021fe:	f7fe fa5f 	bl	80006c0 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	f241 3288 	movw	r2, #5000	; 0x1388
 800220c:	4293      	cmp	r3, r2
 800220e:	d902      	bls.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	74fb      	strb	r3, [r7, #19]
            break;
 8002214:	e006      	b.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002216:	4b0d      	ldr	r3, [pc, #52]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d0ec      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002224:	7cfb      	ldrb	r3, [r7, #19]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10c      	bne.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800222a:	4b08      	ldr	r3, [pc, #32]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800222c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002230:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800223a:	4904      	ldr	r1, [pc, #16]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800223c:	4313      	orrs	r3, r2
 800223e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002242:	e009      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002244:	7cfb      	ldrb	r3, [r7, #19]
 8002246:	74bb      	strb	r3, [r7, #18]
 8002248:	e006      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800224a:	bf00      	nop
 800224c:	40021000 	.word	0x40021000
 8002250:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002254:	7cfb      	ldrb	r3, [r7, #19]
 8002256:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002258:	7c7b      	ldrb	r3, [r7, #17]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d105      	bne.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800225e:	4ba6      	ldr	r3, [pc, #664]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002262:	4aa5      	ldr	r2, [pc, #660]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002264:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002268:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00a      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002276:	4ba0      	ldr	r3, [pc, #640]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227c:	f023 0203 	bic.w	r2, r3, #3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002284:	499c      	ldr	r1, [pc, #624]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002286:	4313      	orrs	r3, r2
 8002288:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00a      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002298:	4b97      	ldr	r3, [pc, #604]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800229a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800229e:	f023 020c 	bic.w	r2, r3, #12
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a6:	4994      	ldr	r1, [pc, #592]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0304 	and.w	r3, r3, #4
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00a      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022ba:	4b8f      	ldr	r3, [pc, #572]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80022bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c8:	498b      	ldr	r1, [pc, #556]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0308 	and.w	r3, r3, #8
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00a      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022dc:	4b86      	ldr	r3, [pc, #536]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80022de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ea:	4983      	ldr	r1, [pc, #524]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0310 	and.w	r3, r3, #16
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00a      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022fe:	4b7e      	ldr	r3, [pc, #504]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002304:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800230c:	497a      	ldr	r1, [pc, #488]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800230e:	4313      	orrs	r3, r2
 8002310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0320 	and.w	r3, r3, #32
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00a      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002320:	4b75      	ldr	r3, [pc, #468]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002326:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232e:	4972      	ldr	r1, [pc, #456]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002330:	4313      	orrs	r3, r2
 8002332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00a      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002342:	4b6d      	ldr	r3, [pc, #436]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002348:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002350:	4969      	ldr	r1, [pc, #420]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002352:	4313      	orrs	r3, r2
 8002354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00a      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002364:	4b64      	ldr	r3, [pc, #400]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002372:	4961      	ldr	r1, [pc, #388]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002374:	4313      	orrs	r3, r2
 8002376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00a      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002386:	4b5c      	ldr	r3, [pc, #368]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002394:	4958      	ldr	r1, [pc, #352]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002396:	4313      	orrs	r3, r2
 8002398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d00a      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023a8:	4b53      	ldr	r3, [pc, #332]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80023aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b6:	4950      	ldr	r1, [pc, #320]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00a      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023ca:	4b4b      	ldr	r3, [pc, #300]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80023cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d8:	4947      	ldr	r1, [pc, #284]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00a      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80023ec:	4b42      	ldr	r3, [pc, #264]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80023ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80023f2:	f023 0203 	bic.w	r2, r3, #3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023fa:	493f      	ldr	r1, [pc, #252]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d028      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800240e:	4b3a      	ldr	r3, [pc, #232]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002414:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241c:	4936      	ldr	r1, [pc, #216]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800241e:	4313      	orrs	r3, r2
 8002420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002428:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800242c:	d106      	bne.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800242e:	4b32      	ldr	r3, [pc, #200]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	4a31      	ldr	r2, [pc, #196]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002434:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002438:	60d3      	str	r3, [r2, #12]
 800243a:	e011      	b.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002440:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002444:	d10c      	bne.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	3304      	adds	r3, #4
 800244a:	2101      	movs	r1, #1
 800244c:	4618      	mov	r0, r3
 800244e:	f000 f8c9 	bl	80025e4 <RCCEx_PLLSAI1_Config>
 8002452:	4603      	mov	r3, r0
 8002454:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002456:	7cfb      	ldrb	r3, [r7, #19]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 800245c:	7cfb      	ldrb	r3, [r7, #19]
 800245e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d028      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x4ca>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800246c:	4b22      	ldr	r3, [pc, #136]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800246e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002472:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800247a:	491f      	ldr	r1, [pc, #124]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800247c:	4313      	orrs	r3, r2
 800247e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002486:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800248a:	d106      	bne.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800248c:	4b1a      	ldr	r3, [pc, #104]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	4a19      	ldr	r2, [pc, #100]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002492:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002496:	60d3      	str	r3, [r2, #12]
 8002498:	e011      	b.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800249e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024a2:	d10c      	bne.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3304      	adds	r3, #4
 80024a8:	2101      	movs	r1, #1
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 f89a 	bl	80025e4 <RCCEx_PLLSAI1_Config>
 80024b0:	4603      	mov	r3, r0
 80024b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024b4:	7cfb      	ldrb	r3, [r7, #19]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      {
        /* set overall return value */
        status = ret;
 80024ba:	7cfb      	ldrb	r3, [r7, #19]
 80024bc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d02a      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024ca:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80024cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024d8:	4907      	ldr	r1, [pc, #28]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024e8:	d108      	bne.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024ea:	4b03      	ldr	r3, [pc, #12]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	4a02      	ldr	r2, [pc, #8]	; (80024f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80024f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024f4:	60d3      	str	r3, [r2, #12]
 80024f6:	e013      	b.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80024f8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002500:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002504:	d10c      	bne.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	3304      	adds	r3, #4
 800250a:	2101      	movs	r1, #1
 800250c:	4618      	mov	r0, r3
 800250e:	f000 f869 	bl	80025e4 <RCCEx_PLLSAI1_Config>
 8002512:	4603      	mov	r3, r0
 8002514:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002516:	7cfb      	ldrb	r3, [r7, #19]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* set overall return value */
        status = ret;
 800251c:	7cfb      	ldrb	r3, [r7, #19]
 800251e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d02f      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800252c:	4b2c      	ldr	r3, [pc, #176]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800252e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002532:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800253a:	4929      	ldr	r1, [pc, #164]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800253c:	4313      	orrs	r3, r2
 800253e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002546:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800254a:	d10d      	bne.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x574>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3304      	adds	r3, #4
 8002550:	2102      	movs	r1, #2
 8002552:	4618      	mov	r0, r3
 8002554:	f000 f846 	bl	80025e4 <RCCEx_PLLSAI1_Config>
 8002558:	4603      	mov	r3, r0
 800255a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800255c:	7cfb      	ldrb	r3, [r7, #19]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d014      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 8002562:	7cfb      	ldrb	r3, [r7, #19]
 8002564:	74bb      	strb	r3, [r7, #18]
 8002566:	e011      	b.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800256c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002570:	d10c      	bne.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	3320      	adds	r3, #32
 8002576:	2102      	movs	r1, #2
 8002578:	4618      	mov	r0, r3
 800257a:	f000 f923 	bl	80027c4 <RCCEx_PLLSAI2_Config>
 800257e:	4603      	mov	r3, r0
 8002580:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002582:	7cfb      	ldrb	r3, [r7, #19]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 8002588:	7cfb      	ldrb	r3, [r7, #19]
 800258a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00b      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002598:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800259a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025a8:	490d      	ldr	r1, [pc, #52]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d00b      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80025bc:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80025be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025cc:	4904      	ldr	r1, [pc, #16]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80025d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40021000 	.word	0x40021000

080025e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025ee:	2300      	movs	r3, #0
 80025f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025f2:	4b73      	ldr	r3, [pc, #460]	; (80027c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d018      	beq.n	8002630 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80025fe:	4b70      	ldr	r3, [pc, #448]	; (80027c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	f003 0203 	and.w	r2, r3, #3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	429a      	cmp	r2, r3
 800260c:	d10d      	bne.n	800262a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
       ||
 8002612:	2b00      	cmp	r3, #0
 8002614:	d009      	beq.n	800262a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002616:	4b6a      	ldr	r3, [pc, #424]	; (80027c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	091b      	lsrs	r3, r3, #4
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	1c5a      	adds	r2, r3, #1
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
       ||
 8002626:	429a      	cmp	r2, r3
 8002628:	d044      	beq.n	80026b4 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	73fb      	strb	r3, [r7, #15]
 800262e:	e041      	b.n	80026b4 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2b02      	cmp	r3, #2
 8002636:	d00c      	beq.n	8002652 <RCCEx_PLLSAI1_Config+0x6e>
 8002638:	2b03      	cmp	r3, #3
 800263a:	d013      	beq.n	8002664 <RCCEx_PLLSAI1_Config+0x80>
 800263c:	2b01      	cmp	r3, #1
 800263e:	d120      	bne.n	8002682 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002640:	4b5f      	ldr	r3, [pc, #380]	; (80027c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d11d      	bne.n	8002688 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002650:	e01a      	b.n	8002688 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002652:	4b5b      	ldr	r3, [pc, #364]	; (80027c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800265a:	2b00      	cmp	r3, #0
 800265c:	d116      	bne.n	800268c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002662:	e013      	b.n	800268c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002664:	4b56      	ldr	r3, [pc, #344]	; (80027c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d10f      	bne.n	8002690 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002670:	4b53      	ldr	r3, [pc, #332]	; (80027c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d109      	bne.n	8002690 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002680:	e006      	b.n	8002690 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	73fb      	strb	r3, [r7, #15]
      break;
 8002686:	e004      	b.n	8002692 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002688:	bf00      	nop
 800268a:	e002      	b.n	8002692 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800268c:	bf00      	nop
 800268e:	e000      	b.n	8002692 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002690:	bf00      	nop
    }

    if(status == HAL_OK)
 8002692:	7bfb      	ldrb	r3, [r7, #15]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10d      	bne.n	80026b4 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002698:	4b49      	ldr	r3, [pc, #292]	; (80027c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6819      	ldr	r1, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	3b01      	subs	r3, #1
 80026aa:	011b      	lsls	r3, r3, #4
 80026ac:	430b      	orrs	r3, r1
 80026ae:	4944      	ldr	r1, [pc, #272]	; (80027c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026b4:	7bfb      	ldrb	r3, [r7, #15]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d17c      	bne.n	80027b4 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80026ba:	4b41      	ldr	r3, [pc, #260]	; (80027c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a40      	ldr	r2, [pc, #256]	; (80027c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80026c0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80026c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026c6:	f7fd fffb 	bl	80006c0 <HAL_GetTick>
 80026ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026cc:	e009      	b.n	80026e2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026ce:	f7fd fff7 	bl	80006c0 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d902      	bls.n	80026e2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	73fb      	strb	r3, [r7, #15]
        break;
 80026e0:	e005      	b.n	80026ee <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026e2:	4b37      	ldr	r3, [pc, #220]	; (80027c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1ef      	bne.n	80026ce <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80026ee:	7bfb      	ldrb	r3, [r7, #15]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d15f      	bne.n	80027b4 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d110      	bne.n	800271c <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026fa:	4b31      	ldr	r3, [pc, #196]	; (80027c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002702:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6892      	ldr	r2, [r2, #8]
 800270a:	0211      	lsls	r1, r2, #8
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	68d2      	ldr	r2, [r2, #12]
 8002710:	06d2      	lsls	r2, r2, #27
 8002712:	430a      	orrs	r2, r1
 8002714:	492a      	ldr	r1, [pc, #168]	; (80027c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002716:	4313      	orrs	r3, r2
 8002718:	610b      	str	r3, [r1, #16]
 800271a:	e027      	b.n	800276c <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d112      	bne.n	8002748 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002722:	4b27      	ldr	r3, [pc, #156]	; (80027c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800272a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	6892      	ldr	r2, [r2, #8]
 8002732:	0211      	lsls	r1, r2, #8
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6912      	ldr	r2, [r2, #16]
 8002738:	0852      	lsrs	r2, r2, #1
 800273a:	3a01      	subs	r2, #1
 800273c:	0552      	lsls	r2, r2, #21
 800273e:	430a      	orrs	r2, r1
 8002740:	491f      	ldr	r1, [pc, #124]	; (80027c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002742:	4313      	orrs	r3, r2
 8002744:	610b      	str	r3, [r1, #16]
 8002746:	e011      	b.n	800276c <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002748:	4b1d      	ldr	r3, [pc, #116]	; (80027c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002750:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6892      	ldr	r2, [r2, #8]
 8002758:	0211      	lsls	r1, r2, #8
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6952      	ldr	r2, [r2, #20]
 800275e:	0852      	lsrs	r2, r2, #1
 8002760:	3a01      	subs	r2, #1
 8002762:	0652      	lsls	r2, r2, #25
 8002764:	430a      	orrs	r2, r1
 8002766:	4916      	ldr	r1, [pc, #88]	; (80027c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002768:	4313      	orrs	r3, r2
 800276a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800276c:	4b14      	ldr	r3, [pc, #80]	; (80027c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a13      	ldr	r2, [pc, #76]	; (80027c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002772:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002776:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002778:	f7fd ffa2 	bl	80006c0 <HAL_GetTick>
 800277c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800277e:	e009      	b.n	8002794 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002780:	f7fd ff9e 	bl	80006c0 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d902      	bls.n	8002794 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	73fb      	strb	r3, [r7, #15]
          break;
 8002792:	e005      	b.n	80027a0 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002794:	4b0a      	ldr	r3, [pc, #40]	; (80027c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d0ef      	beq.n	8002780 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 80027a0:	7bfb      	ldrb	r3, [r7, #15]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d106      	bne.n	80027b4 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80027a6:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80027a8:	691a      	ldr	r2, [r3, #16]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	4904      	ldr	r1, [pc, #16]	; (80027c0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80027b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40021000 	.word	0x40021000

080027c4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027ce:	2300      	movs	r3, #0
 80027d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027d2:	4b68      	ldr	r3, [pc, #416]	; (8002974 <RCCEx_PLLSAI2_Config+0x1b0>)
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	f003 0303 	and.w	r3, r3, #3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d018      	beq.n	8002810 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80027de:	4b65      	ldr	r3, [pc, #404]	; (8002974 <RCCEx_PLLSAI2_Config+0x1b0>)
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	f003 0203 	and.w	r2, r3, #3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d10d      	bne.n	800280a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
       ||
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d009      	beq.n	800280a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80027f6:	4b5f      	ldr	r3, [pc, #380]	; (8002974 <RCCEx_PLLSAI2_Config+0x1b0>)
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	091b      	lsrs	r3, r3, #4
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	1c5a      	adds	r2, r3, #1
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
       ||
 8002806:	429a      	cmp	r2, r3
 8002808:	d044      	beq.n	8002894 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	73fb      	strb	r3, [r7, #15]
 800280e:	e041      	b.n	8002894 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2b02      	cmp	r3, #2
 8002816:	d00c      	beq.n	8002832 <RCCEx_PLLSAI2_Config+0x6e>
 8002818:	2b03      	cmp	r3, #3
 800281a:	d013      	beq.n	8002844 <RCCEx_PLLSAI2_Config+0x80>
 800281c:	2b01      	cmp	r3, #1
 800281e:	d120      	bne.n	8002862 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002820:	4b54      	ldr	r3, [pc, #336]	; (8002974 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d11d      	bne.n	8002868 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002830:	e01a      	b.n	8002868 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002832:	4b50      	ldr	r3, [pc, #320]	; (8002974 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800283a:	2b00      	cmp	r3, #0
 800283c:	d116      	bne.n	800286c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002842:	e013      	b.n	800286c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002844:	4b4b      	ldr	r3, [pc, #300]	; (8002974 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10f      	bne.n	8002870 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002850:	4b48      	ldr	r3, [pc, #288]	; (8002974 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d109      	bne.n	8002870 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002860:	e006      	b.n	8002870 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	73fb      	strb	r3, [r7, #15]
      break;
 8002866:	e004      	b.n	8002872 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002868:	bf00      	nop
 800286a:	e002      	b.n	8002872 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800286c:	bf00      	nop
 800286e:	e000      	b.n	8002872 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002870:	bf00      	nop
    }

    if(status == HAL_OK)
 8002872:	7bfb      	ldrb	r3, [r7, #15]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10d      	bne.n	8002894 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002878:	4b3e      	ldr	r3, [pc, #248]	; (8002974 <RCCEx_PLLSAI2_Config+0x1b0>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6819      	ldr	r1, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	3b01      	subs	r3, #1
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	430b      	orrs	r3, r1
 800288e:	4939      	ldr	r1, [pc, #228]	; (8002974 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002890:	4313      	orrs	r3, r2
 8002892:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002894:	7bfb      	ldrb	r3, [r7, #15]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d166      	bne.n	8002968 <RCCEx_PLLSAI2_Config+0x1a4>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800289a:	4b36      	ldr	r3, [pc, #216]	; (8002974 <RCCEx_PLLSAI2_Config+0x1b0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a35      	ldr	r2, [pc, #212]	; (8002974 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028a6:	f7fd ff0b 	bl	80006c0 <HAL_GetTick>
 80028aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028ac:	e009      	b.n	80028c2 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028ae:	f7fd ff07 	bl	80006c0 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d902      	bls.n	80028c2 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	73fb      	strb	r3, [r7, #15]
        break;
 80028c0:	e005      	b.n	80028ce <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028c2:	4b2c      	ldr	r3, [pc, #176]	; (8002974 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1ef      	bne.n	80028ae <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80028ce:	7bfb      	ldrb	r3, [r7, #15]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d149      	bne.n	8002968 <RCCEx_PLLSAI2_Config+0x1a4>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d110      	bne.n	80028fc <RCCEx_PLLSAI2_Config+0x138>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028da:	4b26      	ldr	r3, [pc, #152]	; (8002974 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80028e2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6892      	ldr	r2, [r2, #8]
 80028ea:	0211      	lsls	r1, r2, #8
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	68d2      	ldr	r2, [r2, #12]
 80028f0:	06d2      	lsls	r2, r2, #27
 80028f2:	430a      	orrs	r2, r1
 80028f4:	491f      	ldr	r1, [pc, #124]	; (8002974 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	614b      	str	r3, [r1, #20]
 80028fa:	e011      	b.n	8002920 <RCCEx_PLLSAI2_Config+0x15c>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028fc:	4b1d      	ldr	r3, [pc, #116]	; (8002974 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002904:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	6892      	ldr	r2, [r2, #8]
 800290c:	0211      	lsls	r1, r2, #8
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	6912      	ldr	r2, [r2, #16]
 8002912:	0852      	lsrs	r2, r2, #1
 8002914:	3a01      	subs	r2, #1
 8002916:	0652      	lsls	r2, r2, #25
 8002918:	430a      	orrs	r2, r1
 800291a:	4916      	ldr	r1, [pc, #88]	; (8002974 <RCCEx_PLLSAI2_Config+0x1b0>)
 800291c:	4313      	orrs	r3, r2
 800291e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002920:	4b14      	ldr	r3, [pc, #80]	; (8002974 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a13      	ldr	r2, [pc, #76]	; (8002974 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800292a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292c:	f7fd fec8 	bl	80006c0 <HAL_GetTick>
 8002930:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002932:	e009      	b.n	8002948 <RCCEx_PLLSAI2_Config+0x184>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002934:	f7fd fec4 	bl	80006c0 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d902      	bls.n	8002948 <RCCEx_PLLSAI2_Config+0x184>
        {
          status = HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	73fb      	strb	r3, [r7, #15]
          break;
 8002946:	e005      	b.n	8002954 <RCCEx_PLLSAI2_Config+0x190>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002948:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <RCCEx_PLLSAI2_Config+0x1b0>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0ef      	beq.n	8002934 <RCCEx_PLLSAI2_Config+0x170>
        }
      }

      if(status == HAL_OK)
 8002954:	7bfb      	ldrb	r3, [r7, #15]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d106      	bne.n	8002968 <RCCEx_PLLSAI2_Config+0x1a4>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800295a:	4b06      	ldr	r3, [pc, #24]	; (8002974 <RCCEx_PLLSAI2_Config+0x1b0>)
 800295c:	695a      	ldr	r2, [r3, #20]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	4904      	ldr	r1, [pc, #16]	; (8002974 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002964:	4313      	orrs	r3, r2
 8002966:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002968:	7bfb      	ldrb	r3, [r7, #15]
}
 800296a:	4618      	mov	r0, r3
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	40021000 	.word	0x40021000

08002978 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e040      	b.n	8002a0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800298e:	2b00      	cmp	r3, #0
 8002990:	d106      	bne.n	80029a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f002 f832 	bl	8004a04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2224      	movs	r2, #36	; 0x24
 80029a4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 0201 	bic.w	r2, r2, #1
 80029b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 f98c 	bl	8002cd4 <UART_SetConfig>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d101      	bne.n	80029c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e022      	b.n	8002a0c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d002      	beq.n	80029d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 fcc8 	bl	8003364 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	689a      	ldr	r2, [r3, #8]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0201 	orr.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 fd4f 	bl	80034a8 <UART_CheckIdleState>
 8002a0a:	4603      	mov	r3, r0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b08a      	sub	sp, #40	; 0x28
 8002a18:	af02      	add	r7, sp, #8
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	603b      	str	r3, [r7, #0]
 8002a20:	4613      	mov	r3, r2
 8002a22:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a28:	2b20      	cmp	r3, #32
 8002a2a:	f040 8081 	bne.w	8002b30 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d002      	beq.n	8002a3a <HAL_UART_Transmit+0x26>
 8002a34:	88fb      	ldrh	r3, [r7, #6]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e079      	b.n	8002b32 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d101      	bne.n	8002a4c <HAL_UART_Transmit+0x38>
 8002a48:	2302      	movs	r3, #2
 8002a4a:	e072      	b.n	8002b32 <HAL_UART_Transmit+0x11e>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2221      	movs	r2, #33	; 0x21
 8002a5e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002a60:	f7fd fe2e 	bl	80006c0 <HAL_GetTick>
 8002a64:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	88fa      	ldrh	r2, [r7, #6]
 8002a6a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	88fa      	ldrh	r2, [r7, #6]
 8002a72:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a7e:	d108      	bne.n	8002a92 <HAL_UART_Transmit+0x7e>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d104      	bne.n	8002a92 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	61bb      	str	r3, [r7, #24]
 8002a90:	e003      	b.n	8002a9a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a96:	2300      	movs	r3, #0
 8002a98:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a9a:	e02d      	b.n	8002af8 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	2180      	movs	r1, #128	; 0x80
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f000 fd43 	bl	8003532 <UART_WaitOnFlagUntilTimeout>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e03d      	b.n	8002b32 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d10b      	bne.n	8002ad4 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	881a      	ldrh	r2, [r3, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ac8:	b292      	uxth	r2, r2
 8002aca:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	3302      	adds	r3, #2
 8002ad0:	61bb      	str	r3, [r7, #24]
 8002ad2:	e008      	b.n	8002ae6 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	781a      	ldrb	r2, [r3, #0]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	b292      	uxth	r2, r2
 8002ade:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	3b01      	subs	r3, #1
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1cb      	bne.n	8002a9c <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	2140      	movs	r1, #64	; 0x40
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f000 fd0f 	bl	8003532 <UART_WaitOnFlagUntilTimeout>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e009      	b.n	8002b32 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2220      	movs	r2, #32
 8002b22:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	e000      	b.n	8002b32 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002b30:	2302      	movs	r3, #2
  }
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3720      	adds	r7, #32
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <HAL_UART_Receive>:
  * @param Size    Amount of data to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b08a      	sub	sp, #40	; 0x28
 8002b3e:	af02      	add	r7, sp, #8
 8002b40:	60f8      	str	r0, [r7, #12]
 8002b42:	60b9      	str	r1, [r7, #8]
 8002b44:	603b      	str	r3, [r7, #0]
 8002b46:	4613      	mov	r3, r2
 8002b48:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b4e:	2b20      	cmp	r3, #32
 8002b50:	f040 80bb 	bne.w	8002cca <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d002      	beq.n	8002b60 <HAL_UART_Receive+0x26>
 8002b5a:	88fb      	ldrh	r3, [r7, #6]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e0b3      	b.n	8002ccc <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d101      	bne.n	8002b72 <HAL_UART_Receive+0x38>
 8002b6e:	2302      	movs	r3, #2
 8002b70:	e0ac      	b.n	8002ccc <HAL_UART_Receive+0x192>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2222      	movs	r2, #34	; 0x22
 8002b84:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002b86:	f7fd fd9b 	bl	80006c0 <HAL_GetTick>
 8002b8a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	88fa      	ldrh	r2, [r7, #6]
 8002b90:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	88fa      	ldrh	r2, [r7, #6]
 8002b98:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ba4:	d10e      	bne.n	8002bc4 <HAL_UART_Receive+0x8a>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d105      	bne.n	8002bba <HAL_UART_Receive+0x80>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002bb4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002bb8:	e02d      	b.n	8002c16 <HAL_UART_Receive+0xdc>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	22ff      	movs	r2, #255	; 0xff
 8002bbe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002bc2:	e028      	b.n	8002c16 <HAL_UART_Receive+0xdc>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10d      	bne.n	8002be8 <HAL_UART_Receive+0xae>
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d104      	bne.n	8002bde <HAL_UART_Receive+0xa4>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	22ff      	movs	r2, #255	; 0xff
 8002bd8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002bdc:	e01b      	b.n	8002c16 <HAL_UART_Receive+0xdc>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	227f      	movs	r2, #127	; 0x7f
 8002be2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002be6:	e016      	b.n	8002c16 <HAL_UART_Receive+0xdc>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bf0:	d10d      	bne.n	8002c0e <HAL_UART_Receive+0xd4>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d104      	bne.n	8002c04 <HAL_UART_Receive+0xca>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	227f      	movs	r2, #127	; 0x7f
 8002bfe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c02:	e008      	b.n	8002c16 <HAL_UART_Receive+0xdc>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	223f      	movs	r2, #63	; 0x3f
 8002c08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c0c:	e003      	b.n	8002c16 <HAL_UART_Receive+0xdc>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002c1c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c26:	d108      	bne.n	8002c3a <HAL_UART_Receive+0x100>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d104      	bne.n	8002c3a <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8002c30:	2300      	movs	r3, #0
 8002c32:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	61bb      	str	r3, [r7, #24]
 8002c38:	e003      	b.n	8002c42 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002c42:	e033      	b.n	8002cac <HAL_UART_Receive+0x172>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	2120      	movs	r1, #32
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f000 fc6f 	bl	8003532 <UART_WaitOnFlagUntilTimeout>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <HAL_UART_Receive+0x124>
      {
        return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e036      	b.n	8002ccc <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d10c      	bne.n	8002c7e <HAL_UART_Receive+0x144>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	8a7b      	ldrh	r3, [r7, #18]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	3302      	adds	r3, #2
 8002c7a:	61bb      	str	r3, [r7, #24]
 8002c7c:	e00d      	b.n	8002c9a <HAL_UART_Receive+0x160>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	b2da      	uxtb	r2, r3
 8002c88:	8a7b      	ldrh	r3, [r7, #18]
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	b2da      	uxtb	r2, r3
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	3301      	adds	r3, #1
 8002c98:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1c5      	bne.n	8002c44 <HAL_UART_Receive+0x10a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	679a      	str	r2, [r3, #120]	; 0x78

    __HAL_UNLOCK(huart);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	e000      	b.n	8002ccc <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 8002cca:	2302      	movs	r3, #2
  }
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3720      	adds	r7, #32
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cd4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002cd8:	b088      	sub	sp, #32
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689a      	ldr	r2, [r3, #8]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	4bac      	ldr	r3, [pc, #688]	; (8002fbc <UART_SetConfig+0x2e8>)
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	6812      	ldr	r2, [r2, #0]
 8002d10:	69f9      	ldr	r1, [r7, #28]
 8002d12:	430b      	orrs	r3, r1
 8002d14:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68da      	ldr	r2, [r3, #12]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4aa2      	ldr	r2, [pc, #648]	; (8002fc0 <UART_SetConfig+0x2ec>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d004      	beq.n	8002d46 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	69fa      	ldr	r2, [r7, #28]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	69fa      	ldr	r2, [r7, #28]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a99      	ldr	r2, [pc, #612]	; (8002fc4 <UART_SetConfig+0x2f0>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d121      	bne.n	8002da8 <UART_SetConfig+0xd4>
 8002d64:	4b98      	ldr	r3, [pc, #608]	; (8002fc8 <UART_SetConfig+0x2f4>)
 8002d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d6a:	f003 0303 	and.w	r3, r3, #3
 8002d6e:	2b03      	cmp	r3, #3
 8002d70:	d816      	bhi.n	8002da0 <UART_SetConfig+0xcc>
 8002d72:	a201      	add	r2, pc, #4	; (adr r2, 8002d78 <UART_SetConfig+0xa4>)
 8002d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d78:	08002d89 	.word	0x08002d89
 8002d7c:	08002d95 	.word	0x08002d95
 8002d80:	08002d8f 	.word	0x08002d8f
 8002d84:	08002d9b 	.word	0x08002d9b
 8002d88:	2301      	movs	r3, #1
 8002d8a:	76fb      	strb	r3, [r7, #27]
 8002d8c:	e0e8      	b.n	8002f60 <UART_SetConfig+0x28c>
 8002d8e:	2302      	movs	r3, #2
 8002d90:	76fb      	strb	r3, [r7, #27]
 8002d92:	e0e5      	b.n	8002f60 <UART_SetConfig+0x28c>
 8002d94:	2304      	movs	r3, #4
 8002d96:	76fb      	strb	r3, [r7, #27]
 8002d98:	e0e2      	b.n	8002f60 <UART_SetConfig+0x28c>
 8002d9a:	2308      	movs	r3, #8
 8002d9c:	76fb      	strb	r3, [r7, #27]
 8002d9e:	e0df      	b.n	8002f60 <UART_SetConfig+0x28c>
 8002da0:	2310      	movs	r3, #16
 8002da2:	76fb      	strb	r3, [r7, #27]
 8002da4:	bf00      	nop
 8002da6:	e0db      	b.n	8002f60 <UART_SetConfig+0x28c>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a87      	ldr	r2, [pc, #540]	; (8002fcc <UART_SetConfig+0x2f8>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d134      	bne.n	8002e1c <UART_SetConfig+0x148>
 8002db2:	4b85      	ldr	r3, [pc, #532]	; (8002fc8 <UART_SetConfig+0x2f4>)
 8002db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db8:	f003 030c 	and.w	r3, r3, #12
 8002dbc:	2b0c      	cmp	r3, #12
 8002dbe:	d829      	bhi.n	8002e14 <UART_SetConfig+0x140>
 8002dc0:	a201      	add	r2, pc, #4	; (adr r2, 8002dc8 <UART_SetConfig+0xf4>)
 8002dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc6:	bf00      	nop
 8002dc8:	08002dfd 	.word	0x08002dfd
 8002dcc:	08002e15 	.word	0x08002e15
 8002dd0:	08002e15 	.word	0x08002e15
 8002dd4:	08002e15 	.word	0x08002e15
 8002dd8:	08002e09 	.word	0x08002e09
 8002ddc:	08002e15 	.word	0x08002e15
 8002de0:	08002e15 	.word	0x08002e15
 8002de4:	08002e15 	.word	0x08002e15
 8002de8:	08002e03 	.word	0x08002e03
 8002dec:	08002e15 	.word	0x08002e15
 8002df0:	08002e15 	.word	0x08002e15
 8002df4:	08002e15 	.word	0x08002e15
 8002df8:	08002e0f 	.word	0x08002e0f
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	76fb      	strb	r3, [r7, #27]
 8002e00:	e0ae      	b.n	8002f60 <UART_SetConfig+0x28c>
 8002e02:	2302      	movs	r3, #2
 8002e04:	76fb      	strb	r3, [r7, #27]
 8002e06:	e0ab      	b.n	8002f60 <UART_SetConfig+0x28c>
 8002e08:	2304      	movs	r3, #4
 8002e0a:	76fb      	strb	r3, [r7, #27]
 8002e0c:	e0a8      	b.n	8002f60 <UART_SetConfig+0x28c>
 8002e0e:	2308      	movs	r3, #8
 8002e10:	76fb      	strb	r3, [r7, #27]
 8002e12:	e0a5      	b.n	8002f60 <UART_SetConfig+0x28c>
 8002e14:	2310      	movs	r3, #16
 8002e16:	76fb      	strb	r3, [r7, #27]
 8002e18:	bf00      	nop
 8002e1a:	e0a1      	b.n	8002f60 <UART_SetConfig+0x28c>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a6b      	ldr	r2, [pc, #428]	; (8002fd0 <UART_SetConfig+0x2fc>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d120      	bne.n	8002e68 <UART_SetConfig+0x194>
 8002e26:	4b68      	ldr	r3, [pc, #416]	; (8002fc8 <UART_SetConfig+0x2f4>)
 8002e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e2c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002e30:	2b10      	cmp	r3, #16
 8002e32:	d00f      	beq.n	8002e54 <UART_SetConfig+0x180>
 8002e34:	2b10      	cmp	r3, #16
 8002e36:	d802      	bhi.n	8002e3e <UART_SetConfig+0x16a>
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d005      	beq.n	8002e48 <UART_SetConfig+0x174>
 8002e3c:	e010      	b.n	8002e60 <UART_SetConfig+0x18c>
 8002e3e:	2b20      	cmp	r3, #32
 8002e40:	d005      	beq.n	8002e4e <UART_SetConfig+0x17a>
 8002e42:	2b30      	cmp	r3, #48	; 0x30
 8002e44:	d009      	beq.n	8002e5a <UART_SetConfig+0x186>
 8002e46:	e00b      	b.n	8002e60 <UART_SetConfig+0x18c>
 8002e48:	2300      	movs	r3, #0
 8002e4a:	76fb      	strb	r3, [r7, #27]
 8002e4c:	e088      	b.n	8002f60 <UART_SetConfig+0x28c>
 8002e4e:	2302      	movs	r3, #2
 8002e50:	76fb      	strb	r3, [r7, #27]
 8002e52:	e085      	b.n	8002f60 <UART_SetConfig+0x28c>
 8002e54:	2304      	movs	r3, #4
 8002e56:	76fb      	strb	r3, [r7, #27]
 8002e58:	e082      	b.n	8002f60 <UART_SetConfig+0x28c>
 8002e5a:	2308      	movs	r3, #8
 8002e5c:	76fb      	strb	r3, [r7, #27]
 8002e5e:	e07f      	b.n	8002f60 <UART_SetConfig+0x28c>
 8002e60:	2310      	movs	r3, #16
 8002e62:	76fb      	strb	r3, [r7, #27]
 8002e64:	bf00      	nop
 8002e66:	e07b      	b.n	8002f60 <UART_SetConfig+0x28c>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a59      	ldr	r2, [pc, #356]	; (8002fd4 <UART_SetConfig+0x300>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d120      	bne.n	8002eb4 <UART_SetConfig+0x1e0>
 8002e72:	4b55      	ldr	r3, [pc, #340]	; (8002fc8 <UART_SetConfig+0x2f4>)
 8002e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e78:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002e7c:	2b40      	cmp	r3, #64	; 0x40
 8002e7e:	d00f      	beq.n	8002ea0 <UART_SetConfig+0x1cc>
 8002e80:	2b40      	cmp	r3, #64	; 0x40
 8002e82:	d802      	bhi.n	8002e8a <UART_SetConfig+0x1b6>
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d005      	beq.n	8002e94 <UART_SetConfig+0x1c0>
 8002e88:	e010      	b.n	8002eac <UART_SetConfig+0x1d8>
 8002e8a:	2b80      	cmp	r3, #128	; 0x80
 8002e8c:	d005      	beq.n	8002e9a <UART_SetConfig+0x1c6>
 8002e8e:	2bc0      	cmp	r3, #192	; 0xc0
 8002e90:	d009      	beq.n	8002ea6 <UART_SetConfig+0x1d2>
 8002e92:	e00b      	b.n	8002eac <UART_SetConfig+0x1d8>
 8002e94:	2300      	movs	r3, #0
 8002e96:	76fb      	strb	r3, [r7, #27]
 8002e98:	e062      	b.n	8002f60 <UART_SetConfig+0x28c>
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	76fb      	strb	r3, [r7, #27]
 8002e9e:	e05f      	b.n	8002f60 <UART_SetConfig+0x28c>
 8002ea0:	2304      	movs	r3, #4
 8002ea2:	76fb      	strb	r3, [r7, #27]
 8002ea4:	e05c      	b.n	8002f60 <UART_SetConfig+0x28c>
 8002ea6:	2308      	movs	r3, #8
 8002ea8:	76fb      	strb	r3, [r7, #27]
 8002eaa:	e059      	b.n	8002f60 <UART_SetConfig+0x28c>
 8002eac:	2310      	movs	r3, #16
 8002eae:	76fb      	strb	r3, [r7, #27]
 8002eb0:	bf00      	nop
 8002eb2:	e055      	b.n	8002f60 <UART_SetConfig+0x28c>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a47      	ldr	r2, [pc, #284]	; (8002fd8 <UART_SetConfig+0x304>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d124      	bne.n	8002f08 <UART_SetConfig+0x234>
 8002ebe:	4b42      	ldr	r3, [pc, #264]	; (8002fc8 <UART_SetConfig+0x2f4>)
 8002ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ec8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ecc:	d012      	beq.n	8002ef4 <UART_SetConfig+0x220>
 8002ece:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ed2:	d802      	bhi.n	8002eda <UART_SetConfig+0x206>
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d007      	beq.n	8002ee8 <UART_SetConfig+0x214>
 8002ed8:	e012      	b.n	8002f00 <UART_SetConfig+0x22c>
 8002eda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ede:	d006      	beq.n	8002eee <UART_SetConfig+0x21a>
 8002ee0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ee4:	d009      	beq.n	8002efa <UART_SetConfig+0x226>
 8002ee6:	e00b      	b.n	8002f00 <UART_SetConfig+0x22c>
 8002ee8:	2300      	movs	r3, #0
 8002eea:	76fb      	strb	r3, [r7, #27]
 8002eec:	e038      	b.n	8002f60 <UART_SetConfig+0x28c>
 8002eee:	2302      	movs	r3, #2
 8002ef0:	76fb      	strb	r3, [r7, #27]
 8002ef2:	e035      	b.n	8002f60 <UART_SetConfig+0x28c>
 8002ef4:	2304      	movs	r3, #4
 8002ef6:	76fb      	strb	r3, [r7, #27]
 8002ef8:	e032      	b.n	8002f60 <UART_SetConfig+0x28c>
 8002efa:	2308      	movs	r3, #8
 8002efc:	76fb      	strb	r3, [r7, #27]
 8002efe:	e02f      	b.n	8002f60 <UART_SetConfig+0x28c>
 8002f00:	2310      	movs	r3, #16
 8002f02:	76fb      	strb	r3, [r7, #27]
 8002f04:	bf00      	nop
 8002f06:	e02b      	b.n	8002f60 <UART_SetConfig+0x28c>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a2c      	ldr	r2, [pc, #176]	; (8002fc0 <UART_SetConfig+0x2ec>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d124      	bne.n	8002f5c <UART_SetConfig+0x288>
 8002f12:	4b2d      	ldr	r3, [pc, #180]	; (8002fc8 <UART_SetConfig+0x2f4>)
 8002f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f20:	d012      	beq.n	8002f48 <UART_SetConfig+0x274>
 8002f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f26:	d802      	bhi.n	8002f2e <UART_SetConfig+0x25a>
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d007      	beq.n	8002f3c <UART_SetConfig+0x268>
 8002f2c:	e012      	b.n	8002f54 <UART_SetConfig+0x280>
 8002f2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f32:	d006      	beq.n	8002f42 <UART_SetConfig+0x26e>
 8002f34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f38:	d009      	beq.n	8002f4e <UART_SetConfig+0x27a>
 8002f3a:	e00b      	b.n	8002f54 <UART_SetConfig+0x280>
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	76fb      	strb	r3, [r7, #27]
 8002f40:	e00e      	b.n	8002f60 <UART_SetConfig+0x28c>
 8002f42:	2302      	movs	r3, #2
 8002f44:	76fb      	strb	r3, [r7, #27]
 8002f46:	e00b      	b.n	8002f60 <UART_SetConfig+0x28c>
 8002f48:	2304      	movs	r3, #4
 8002f4a:	76fb      	strb	r3, [r7, #27]
 8002f4c:	e008      	b.n	8002f60 <UART_SetConfig+0x28c>
 8002f4e:	2308      	movs	r3, #8
 8002f50:	76fb      	strb	r3, [r7, #27]
 8002f52:	e005      	b.n	8002f60 <UART_SetConfig+0x28c>
 8002f54:	2310      	movs	r3, #16
 8002f56:	76fb      	strb	r3, [r7, #27]
 8002f58:	bf00      	nop
 8002f5a:	e001      	b.n	8002f60 <UART_SetConfig+0x28c>
 8002f5c:	2310      	movs	r3, #16
 8002f5e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a16      	ldr	r2, [pc, #88]	; (8002fc0 <UART_SetConfig+0x2ec>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	f040 80fa 	bne.w	8003160 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002f6c:	7efb      	ldrb	r3, [r7, #27]
 8002f6e:	2b08      	cmp	r3, #8
 8002f70:	d836      	bhi.n	8002fe0 <UART_SetConfig+0x30c>
 8002f72:	a201      	add	r2, pc, #4	; (adr r2, 8002f78 <UART_SetConfig+0x2a4>)
 8002f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f78:	08002f9d 	.word	0x08002f9d
 8002f7c:	08002fe1 	.word	0x08002fe1
 8002f80:	08002fa5 	.word	0x08002fa5
 8002f84:	08002fe1 	.word	0x08002fe1
 8002f88:	08002fab 	.word	0x08002fab
 8002f8c:	08002fe1 	.word	0x08002fe1
 8002f90:	08002fe1 	.word	0x08002fe1
 8002f94:	08002fe1 	.word	0x08002fe1
 8002f98:	08002fb3 	.word	0x08002fb3
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002f9c:	f7fe ff9e 	bl	8001edc <HAL_RCC_GetPCLK1Freq>
 8002fa0:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002fa2:	e020      	b.n	8002fe6 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002fa4:	4b0d      	ldr	r3, [pc, #52]	; (8002fdc <UART_SetConfig+0x308>)
 8002fa6:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002fa8:	e01d      	b.n	8002fe6 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002faa:	f7fe ff01 	bl	8001db0 <HAL_RCC_GetSysClockFreq>
 8002fae:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002fb0:	e019      	b.n	8002fe6 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002fb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fb6:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002fb8:	e015      	b.n	8002fe6 <UART_SetConfig+0x312>
 8002fba:	bf00      	nop
 8002fbc:	efff69f3 	.word	0xefff69f3
 8002fc0:	40008000 	.word	0x40008000
 8002fc4:	40013800 	.word	0x40013800
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	40004400 	.word	0x40004400
 8002fd0:	40004800 	.word	0x40004800
 8002fd4:	40004c00 	.word	0x40004c00
 8002fd8:	40005000 	.word	0x40005000
 8002fdc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	74fb      	strb	r3, [r7, #19]
        break;
 8002fe4:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f000 81ac 	beq.w	8003346 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685a      	ldr	r2, [r3, #4]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	4413      	add	r3, r2
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d305      	bcc.n	800300a <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	429a      	cmp	r2, r3
 8003008:	d902      	bls.n	8003010 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	74fb      	strb	r3, [r7, #19]
 800300e:	e19a      	b.n	8003346 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8003010:	7efb      	ldrb	r3, [r7, #27]
 8003012:	2b08      	cmp	r3, #8
 8003014:	f200 8091 	bhi.w	800313a <UART_SetConfig+0x466>
 8003018:	a201      	add	r2, pc, #4	; (adr r2, 8003020 <UART_SetConfig+0x34c>)
 800301a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800301e:	bf00      	nop
 8003020:	08003045 	.word	0x08003045
 8003024:	0800313b 	.word	0x0800313b
 8003028:	08003091 	.word	0x08003091
 800302c:	0800313b 	.word	0x0800313b
 8003030:	080030c5 	.word	0x080030c5
 8003034:	0800313b 	.word	0x0800313b
 8003038:	0800313b 	.word	0x0800313b
 800303c:	0800313b 	.word	0x0800313b
 8003040:	08003111 	.word	0x08003111
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003044:	f7fe ff4a 	bl	8001edc <HAL_RCC_GetPCLK1Freq>
 8003048:	4603      	mov	r3, r0
 800304a:	4619      	mov	r1, r3
 800304c:	f04f 0200 	mov.w	r2, #0
 8003050:	f04f 0300 	mov.w	r3, #0
 8003054:	f04f 0400 	mov.w	r4, #0
 8003058:	0214      	lsls	r4, r2, #8
 800305a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800305e:	020b      	lsls	r3, r1, #8
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6852      	ldr	r2, [r2, #4]
 8003064:	0852      	lsrs	r2, r2, #1
 8003066:	4611      	mov	r1, r2
 8003068:	f04f 0200 	mov.w	r2, #0
 800306c:	eb13 0b01 	adds.w	fp, r3, r1
 8003070:	eb44 0c02 	adc.w	ip, r4, r2
 8003074:	4658      	mov	r0, fp
 8003076:	4661      	mov	r1, ip
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f04f 0400 	mov.w	r4, #0
 8003080:	461a      	mov	r2, r3
 8003082:	4623      	mov	r3, r4
 8003084:	f7fd f904 	bl	8000290 <__aeabi_uldivmod>
 8003088:	4603      	mov	r3, r0
 800308a:	460c      	mov	r4, r1
 800308c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800308e:	e057      	b.n	8003140 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	085b      	lsrs	r3, r3, #1
 8003096:	f04f 0400 	mov.w	r4, #0
 800309a:	49b1      	ldr	r1, [pc, #708]	; (8003360 <UART_SetConfig+0x68c>)
 800309c:	f04f 0200 	mov.w	r2, #0
 80030a0:	eb13 0b01 	adds.w	fp, r3, r1
 80030a4:	eb44 0c02 	adc.w	ip, r4, r2
 80030a8:	4658      	mov	r0, fp
 80030aa:	4661      	mov	r1, ip
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f04f 0400 	mov.w	r4, #0
 80030b4:	461a      	mov	r2, r3
 80030b6:	4623      	mov	r3, r4
 80030b8:	f7fd f8ea 	bl	8000290 <__aeabi_uldivmod>
 80030bc:	4603      	mov	r3, r0
 80030be:	460c      	mov	r4, r1
 80030c0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80030c2:	e03d      	b.n	8003140 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80030c4:	f7fe fe74 	bl	8001db0 <HAL_RCC_GetSysClockFreq>
 80030c8:	4603      	mov	r3, r0
 80030ca:	4619      	mov	r1, r3
 80030cc:	f04f 0200 	mov.w	r2, #0
 80030d0:	f04f 0300 	mov.w	r3, #0
 80030d4:	f04f 0400 	mov.w	r4, #0
 80030d8:	0214      	lsls	r4, r2, #8
 80030da:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80030de:	020b      	lsls	r3, r1, #8
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	6852      	ldr	r2, [r2, #4]
 80030e4:	0852      	lsrs	r2, r2, #1
 80030e6:	4611      	mov	r1, r2
 80030e8:	f04f 0200 	mov.w	r2, #0
 80030ec:	eb13 0b01 	adds.w	fp, r3, r1
 80030f0:	eb44 0c02 	adc.w	ip, r4, r2
 80030f4:	4658      	mov	r0, fp
 80030f6:	4661      	mov	r1, ip
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f04f 0400 	mov.w	r4, #0
 8003100:	461a      	mov	r2, r3
 8003102:	4623      	mov	r3, r4
 8003104:	f7fd f8c4 	bl	8000290 <__aeabi_uldivmod>
 8003108:	4603      	mov	r3, r0
 800310a:	460c      	mov	r4, r1
 800310c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800310e:	e017      	b.n	8003140 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	085b      	lsrs	r3, r3, #1
 8003116:	f04f 0400 	mov.w	r4, #0
 800311a:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800311e:	f144 0100 	adc.w	r1, r4, #0
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f04f 0400 	mov.w	r4, #0
 800312a:	461a      	mov	r2, r3
 800312c:	4623      	mov	r3, r4
 800312e:	f7fd f8af 	bl	8000290 <__aeabi_uldivmod>
 8003132:	4603      	mov	r3, r0
 8003134:	460c      	mov	r4, r1
 8003136:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003138:	e002      	b.n	8003140 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	74fb      	strb	r3, [r7, #19]
            break;
 800313e:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003146:	d308      	bcc.n	800315a <UART_SetConfig+0x486>
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800314e:	d204      	bcs.n	800315a <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	60da      	str	r2, [r3, #12]
 8003158:	e0f5      	b.n	8003346 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	74fb      	strb	r3, [r7, #19]
 800315e:	e0f2      	b.n	8003346 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	69db      	ldr	r3, [r3, #28]
 8003164:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003168:	d17f      	bne.n	800326a <UART_SetConfig+0x596>
  {
    switch (clocksource)
 800316a:	7efb      	ldrb	r3, [r7, #27]
 800316c:	2b08      	cmp	r3, #8
 800316e:	d85c      	bhi.n	800322a <UART_SetConfig+0x556>
 8003170:	a201      	add	r2, pc, #4	; (adr r2, 8003178 <UART_SetConfig+0x4a4>)
 8003172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003176:	bf00      	nop
 8003178:	0800319d 	.word	0x0800319d
 800317c:	080031bb 	.word	0x080031bb
 8003180:	080031d9 	.word	0x080031d9
 8003184:	0800322b 	.word	0x0800322b
 8003188:	080031f5 	.word	0x080031f5
 800318c:	0800322b 	.word	0x0800322b
 8003190:	0800322b 	.word	0x0800322b
 8003194:	0800322b 	.word	0x0800322b
 8003198:	08003213 	.word	0x08003213
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800319c:	f7fe fe9e 	bl	8001edc <HAL_RCC_GetPCLK1Freq>
 80031a0:	4603      	mov	r3, r0
 80031a2:	005a      	lsls	r2, r3, #1
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	085b      	lsrs	r3, r3, #1
 80031aa:	441a      	add	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80031b8:	e03a      	b.n	8003230 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80031ba:	f7fe fea5 	bl	8001f08 <HAL_RCC_GetPCLK2Freq>
 80031be:	4603      	mov	r3, r0
 80031c0:	005a      	lsls	r2, r3, #1
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	085b      	lsrs	r3, r3, #1
 80031c8:	441a      	add	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80031d6:	e02b      	b.n	8003230 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	085b      	lsrs	r3, r3, #1
 80031de:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80031e2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	6852      	ldr	r2, [r2, #4]
 80031ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80031f2:	e01d      	b.n	8003230 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80031f4:	f7fe fddc 	bl	8001db0 <HAL_RCC_GetSysClockFreq>
 80031f8:	4603      	mov	r3, r0
 80031fa:	005a      	lsls	r2, r3, #1
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	085b      	lsrs	r3, r3, #1
 8003202:	441a      	add	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	fbb2 f3f3 	udiv	r3, r2, r3
 800320c:	b29b      	uxth	r3, r3
 800320e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003210:	e00e      	b.n	8003230 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	085b      	lsrs	r3, r3, #1
 8003218:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	fbb2 f3f3 	udiv	r3, r2, r3
 8003224:	b29b      	uxth	r3, r3
 8003226:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003228:	e002      	b.n	8003230 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	74fb      	strb	r3, [r7, #19]
        break;
 800322e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	2b0f      	cmp	r3, #15
 8003234:	d916      	bls.n	8003264 <UART_SetConfig+0x590>
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800323c:	d212      	bcs.n	8003264 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	b29b      	uxth	r3, r3
 8003242:	f023 030f 	bic.w	r3, r3, #15
 8003246:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	085b      	lsrs	r3, r3, #1
 800324c:	b29b      	uxth	r3, r3
 800324e:	f003 0307 	and.w	r3, r3, #7
 8003252:	b29a      	uxth	r2, r3
 8003254:	897b      	ldrh	r3, [r7, #10]
 8003256:	4313      	orrs	r3, r2
 8003258:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	897a      	ldrh	r2, [r7, #10]
 8003260:	60da      	str	r2, [r3, #12]
 8003262:	e070      	b.n	8003346 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	74fb      	strb	r3, [r7, #19]
 8003268:	e06d      	b.n	8003346 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 800326a:	7efb      	ldrb	r3, [r7, #27]
 800326c:	2b08      	cmp	r3, #8
 800326e:	d859      	bhi.n	8003324 <UART_SetConfig+0x650>
 8003270:	a201      	add	r2, pc, #4	; (adr r2, 8003278 <UART_SetConfig+0x5a4>)
 8003272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003276:	bf00      	nop
 8003278:	0800329d 	.word	0x0800329d
 800327c:	080032b9 	.word	0x080032b9
 8003280:	080032d5 	.word	0x080032d5
 8003284:	08003325 	.word	0x08003325
 8003288:	080032f1 	.word	0x080032f1
 800328c:	08003325 	.word	0x08003325
 8003290:	08003325 	.word	0x08003325
 8003294:	08003325 	.word	0x08003325
 8003298:	0800330d 	.word	0x0800330d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800329c:	f7fe fe1e 	bl	8001edc <HAL_RCC_GetPCLK1Freq>
 80032a0:	4602      	mov	r2, r0
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	085b      	lsrs	r3, r3, #1
 80032a8:	441a      	add	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80032b6:	e038      	b.n	800332a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80032b8:	f7fe fe26 	bl	8001f08 <HAL_RCC_GetPCLK2Freq>
 80032bc:	4602      	mov	r2, r0
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	085b      	lsrs	r3, r3, #1
 80032c4:	441a      	add	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80032d2:	e02a      	b.n	800332a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	085b      	lsrs	r3, r3, #1
 80032da:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80032de:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6852      	ldr	r2, [r2, #4]
 80032e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80032ee:	e01c      	b.n	800332a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80032f0:	f7fe fd5e 	bl	8001db0 <HAL_RCC_GetSysClockFreq>
 80032f4:	4602      	mov	r2, r0
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	085b      	lsrs	r3, r3, #1
 80032fc:	441a      	add	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	fbb2 f3f3 	udiv	r3, r2, r3
 8003306:	b29b      	uxth	r3, r3
 8003308:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800330a:	e00e      	b.n	800332a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	085b      	lsrs	r3, r3, #1
 8003312:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	fbb2 f3f3 	udiv	r3, r2, r3
 800331e:	b29b      	uxth	r3, r3
 8003320:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003322:	e002      	b.n	800332a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	74fb      	strb	r3, [r7, #19]
        break;
 8003328:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	2b0f      	cmp	r3, #15
 800332e:	d908      	bls.n	8003342 <UART_SetConfig+0x66e>
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003336:	d204      	bcs.n	8003342 <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	60da      	str	r2, [r3, #12]
 8003340:	e001      	b.n	8003346 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003352:	7cfb      	ldrb	r3, [r7, #19]
}
 8003354:	4618      	mov	r0, r3
 8003356:	3720      	adds	r7, #32
 8003358:	46bd      	mov	sp, r7
 800335a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800335e:	bf00      	nop
 8003360:	f4240000 	.word	0xf4240000

08003364 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00a      	beq.n	800338e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	430a      	orrs	r2, r1
 800338c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00a      	beq.n	80033b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00a      	beq.n	80033d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	f003 0308 	and.w	r3, r3, #8
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00a      	beq.n	80033f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	f003 0310 	and.w	r3, r3, #16
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00a      	beq.n	8003416 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341a:	f003 0320 	and.w	r3, r3, #32
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00a      	beq.n	8003438 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	430a      	orrs	r2, r1
 8003436:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003440:	2b00      	cmp	r3, #0
 8003442:	d01a      	beq.n	800347a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003462:	d10a      	bne.n	800347a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00a      	beq.n	800349c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	605a      	str	r2, [r3, #4]
  }
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af02      	add	r7, sp, #8
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80034b6:	f7fd f903 	bl	80006c0 <HAL_GetTick>
 80034ba:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0308 	and.w	r3, r3, #8
 80034c6:	2b08      	cmp	r3, #8
 80034c8:	d10e      	bne.n	80034e8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034ca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 f82a 	bl	8003532 <UART_WaitOnFlagUntilTimeout>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e020      	b.n	800352a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0304 	and.w	r3, r3, #4
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	d10e      	bne.n	8003514 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034f6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 f814 	bl	8003532 <UART_WaitOnFlagUntilTimeout>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e00a      	b.n	800352a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2220      	movs	r2, #32
 8003518:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2220      	movs	r2, #32
 800351e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b084      	sub	sp, #16
 8003536:	af00      	add	r7, sp, #0
 8003538:	60f8      	str	r0, [r7, #12]
 800353a:	60b9      	str	r1, [r7, #8]
 800353c:	603b      	str	r3, [r7, #0]
 800353e:	4613      	mov	r3, r2
 8003540:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003542:	e02a      	b.n	800359a <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800354a:	d026      	beq.n	800359a <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800354c:	f7fd f8b8 	bl	80006c0 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	429a      	cmp	r2, r3
 800355a:	d302      	bcc.n	8003562 <UART_WaitOnFlagUntilTimeout+0x30>
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d11b      	bne.n	800359a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003570:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 0201 	bic.w	r2, r2, #1
 8003580:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2220      	movs	r2, #32
 8003586:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2220      	movs	r2, #32
 800358c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e00f      	b.n	80035ba <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	69da      	ldr	r2, [r3, #28]
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	4013      	ands	r3, r2
 80035a4:	68ba      	ldr	r2, [r7, #8]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	bf0c      	ite	eq
 80035aa:	2301      	moveq	r3, #1
 80035ac:	2300      	movne	r3, #0
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	461a      	mov	r2, r3
 80035b2:	79fb      	ldrb	r3, [r7, #7]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d0c5      	beq.n	8003544 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
	...

080035c4 <flash_jump_to_factory_firmware>:
typedef void (*pFunction)(void);

static uint32_t flash_ptr = FLAG_ADDRESS;

void flash_jump_to_factory_firmware(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
  /* Function pointer to the address of the user application. */
	//uart_transmit_str((uint8_t*)"inside fuct.... \n\r");
  fnc_ptr jump_to_app;
  jump_to_app = (fnc_ptr)(*(volatile uint32_t*) (FLASH_FFW_START_ADDRESS+4u));
 80035ca:	4b0f      	ldr	r3, [pc, #60]	; (8003608 <flash_jump_to_factory_firmware+0x44>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	607b      	str	r3, [r7, #4]
  HAL_RCC_DeInit();
 80035d0:	f7fd fe7c 	bl	80012cc <HAL_RCC_DeInit>
  HAL_DeInit();
 80035d4:	f7fc fff4 	bl	80005c0 <HAL_DeInit>
  SysTick->CTRL = 0;
 80035d8:	4b0c      	ldr	r3, [pc, #48]	; (800360c <flash_jump_to_factory_firmware+0x48>)
 80035da:	2200      	movs	r2, #0
 80035dc:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = 0;
 80035de:	4b0b      	ldr	r3, [pc, #44]	; (800360c <flash_jump_to_factory_firmware+0x48>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;
 80035e4:	4b09      	ldr	r3, [pc, #36]	; (800360c <flash_jump_to_factory_firmware+0x48>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	609a      	str	r2, [r3, #8]
  SCB->VTOR = FLASH_FFW_START_ADDRESS;
 80035ea:	4b09      	ldr	r3, [pc, #36]	; (8003610 <flash_jump_to_factory_firmware+0x4c>)
 80035ec:	4a09      	ldr	r2, [pc, #36]	; (8003614 <flash_jump_to_factory_firmware+0x50>)
 80035ee:	609a      	str	r2, [r3, #8]

 // SCB->VTOR = FLASH_FFW_START_ADDRESS | 0x00; /* Vector Table Relocation in Internal FLASH */


  /* Change the main stack pointer. */
  __set_MSP(*(volatile uint32_t*)FLASH_FFW_START_ADDRESS);
 80035f0:	4b08      	ldr	r3, [pc, #32]	; (8003614 <flash_jump_to_factory_firmware+0x50>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	f383 8808 	msr	MSP, r3
  jump_to_app();
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4798      	blx	r3
}
 8003600:	bf00      	nop
 8003602:	3708      	adds	r7, #8
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	08036004 	.word	0x08036004
 800360c:	e000e010 	.word	0xe000e010
 8003610:	e000ed00 	.word	0xe000ed00
 8003614:	08036000 	.word	0x08036000

08003618 <flash_jump_to_main_firmware>:
void flash_jump_to_main_firmware(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
  /* Function pointer to the address of the user application. */
  fnc_ptr jump_to_app;
  jump_to_app = (fnc_ptr)(*(volatile uint32_t*) (FLASH_MFW_START_ADDRESS+4u));
 800361e:	4b0f      	ldr	r3, [pc, #60]	; (800365c <flash_jump_to_main_firmware+0x44>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	607b      	str	r3, [r7, #4]
  HAL_RCC_DeInit();
 8003624:	f7fd fe52 	bl	80012cc <HAL_RCC_DeInit>
  HAL_DeInit();
 8003628:	f7fc ffca 	bl	80005c0 <HAL_DeInit>
  SysTick->CTRL = 0;
 800362c:	4b0c      	ldr	r3, [pc, #48]	; (8003660 <flash_jump_to_main_firmware+0x48>)
 800362e:	2200      	movs	r2, #0
 8003630:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = 0;
 8003632:	4b0b      	ldr	r3, [pc, #44]	; (8003660 <flash_jump_to_main_firmware+0x48>)
 8003634:	2200      	movs	r2, #0
 8003636:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;
 8003638:	4b09      	ldr	r3, [pc, #36]	; (8003660 <flash_jump_to_main_firmware+0x48>)
 800363a:	2200      	movs	r2, #0
 800363c:	609a      	str	r2, [r3, #8]
  SCB->VTOR = FLASH_MFW_START_ADDRESS;
 800363e:	4b09      	ldr	r3, [pc, #36]	; (8003664 <flash_jump_to_main_firmware+0x4c>)
 8003640:	4a09      	ldr	r2, [pc, #36]	; (8003668 <flash_jump_to_main_firmware+0x50>)
 8003642:	609a      	str	r2, [r3, #8]

  //SCB->VTOR = FLASH_MFW_START_ADDRESS | 0x00; /* Vector Table Relocation in Internal FLASH */


  /* Change the main stack pointer. */
  __set_MSP(*(volatile uint32_t*)FLASH_MFW_START_ADDRESS);
 8003644:	4b08      	ldr	r3, [pc, #32]	; (8003668 <flash_jump_to_main_firmware+0x50>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	603b      	str	r3, [r7, #0]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	f383 8808 	msr	MSP, r3
  jump_to_app();
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4798      	blx	r3
}
 8003654:	bf00      	nop
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	08060004 	.word	0x08060004
 8003660:	e000e010 	.word	0xe000e010
 8003664:	e000ed00 	.word	0xe000ed00
 8003668:	08060000 	.word	0x08060000

0800366c <flash_jump_boot_loader_L2>:
void flash_jump_boot_loader_L2(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
  /* Function pointer to the address of the user application. */
	//uart_transmit_str((uint8_t*)"inside fuct.... \n\r");
  fnc_ptr jump_to_app;
  jump_to_app = (fnc_ptr)(*(volatile uint32_t*) (FLASH_BL2_START_ADDRESS+4u));
 8003672:	4b0f      	ldr	r3, [pc, #60]	; (80036b0 <flash_jump_boot_loader_L2+0x44>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	607b      	str	r3, [r7, #4]
  HAL_RCC_DeInit();
 8003678:	f7fd fe28 	bl	80012cc <HAL_RCC_DeInit>
  HAL_DeInit();
 800367c:	f7fc ffa0 	bl	80005c0 <HAL_DeInit>
  SysTick->CTRL = 0;
 8003680:	4b0c      	ldr	r3, [pc, #48]	; (80036b4 <flash_jump_boot_loader_L2+0x48>)
 8003682:	2200      	movs	r2, #0
 8003684:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = 0;
 8003686:	4b0b      	ldr	r3, [pc, #44]	; (80036b4 <flash_jump_boot_loader_L2+0x48>)
 8003688:	2200      	movs	r2, #0
 800368a:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;
 800368c:	4b09      	ldr	r3, [pc, #36]	; (80036b4 <flash_jump_boot_loader_L2+0x48>)
 800368e:	2200      	movs	r2, #0
 8003690:	609a      	str	r2, [r3, #8]
  SCB->VTOR = FLASH_BL2_START_ADDRESS;
 8003692:	4b09      	ldr	r3, [pc, #36]	; (80036b8 <flash_jump_boot_loader_L2+0x4c>)
 8003694:	4a09      	ldr	r2, [pc, #36]	; (80036bc <flash_jump_boot_loader_L2+0x50>)
 8003696:	609a      	str	r2, [r3, #8]

 // SCB->VTOR = FLASH_FFW_START_ADDRESS | 0x00; /* Vector Table Relocation in Internal FLASH */


  /* Change the main stack pointer. */
  __set_MSP(*(volatile uint32_t*)FLASH_BL2_START_ADDRESS);
 8003698:	4b08      	ldr	r3, [pc, #32]	; (80036bc <flash_jump_boot_loader_L2+0x50>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	603b      	str	r3, [r7, #0]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	f383 8808 	msr	MSP, r3
  jump_to_app();
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4798      	blx	r3
}
 80036a8:	bf00      	nop
 80036aa:	3708      	adds	r7, #8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	08010004 	.word	0x08010004
 80036b4:	e000e010 	.word	0xe000e010
 80036b8:	e000ed00 	.word	0xe000ed00
 80036bc:	08010000 	.word	0x08010000

080036c0 <Bootloader_Init>:
void Bootloader_Init(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036c6:	4b15      	ldr	r3, [pc, #84]	; (800371c <Bootloader_Init+0x5c>)
 80036c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ca:	4a14      	ldr	r2, [pc, #80]	; (800371c <Bootloader_Init+0x5c>)
 80036cc:	f043 0301 	orr.w	r3, r3, #1
 80036d0:	6613      	str	r3, [r2, #96]	; 0x60
 80036d2:	4b12      	ldr	r3, [pc, #72]	; (800371c <Bootloader_Init+0x5c>)
 80036d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	607b      	str	r3, [r7, #4]
 80036dc:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_FLASH_CLK_ENABLE();
 80036de:	4b0f      	ldr	r3, [pc, #60]	; (800371c <Bootloader_Init+0x5c>)
 80036e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036e2:	4a0e      	ldr	r2, [pc, #56]	; (800371c <Bootloader_Init+0x5c>)
 80036e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036e8:	6493      	str	r3, [r2, #72]	; 0x48
 80036ea:	4b0c      	ldr	r3, [pc, #48]	; (800371c <Bootloader_Init+0x5c>)
 80036ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f2:	603b      	str	r3, [r7, #0]
 80036f4:	683b      	ldr	r3, [r7, #0]

    /* Clear flash flags */
    HAL_FLASH_Unlock();
 80036f6:	f7fd f97b 	bl	80009f0 <HAL_FLASH_Unlock>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80036fa:	4b09      	ldr	r3, [pc, #36]	; (8003720 <Bootloader_Init+0x60>)
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	4a08      	ldr	r2, [pc, #32]	; (8003720 <Bootloader_Init+0x60>)
 8003700:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003704:	6193      	str	r3, [r2, #24]
 8003706:	4b06      	ldr	r3, [pc, #24]	; (8003720 <Bootloader_Init+0x60>)
 8003708:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 800370c:	611a      	str	r2, [r3, #16]
    HAL_FLASH_Lock();
 800370e:	f7fd f991 	bl	8000a34 <HAL_FLASH_Lock>
}
 8003712:	bf00      	nop
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	40021000 	.word	0x40021000
 8003720:	40022000 	.word	0x40022000

08003724 <Flag_Erase_All>:

uint8_t Flag_Erase_All(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b088      	sub	sp, #32
 8003728:	af00      	add	r7, sp, #0
    uint32_t NbrOfPages = 0;
 800372a:	2300      	movs	r3, #0
 800372c:	61bb      	str	r3, [r7, #24]
    uint32_t PageError  = 0;
 800372e:	2300      	movs	r3, #0
 8003730:	617b      	str	r3, [r7, #20]
    FLASH_EraseInitTypeDef  pEraseInit;
    HAL_StatusTypeDef       status = HAL_OK;
 8003732:	2300      	movs	r3, #0
 8003734:	77fb      	strb	r3, [r7, #31]

    HAL_FLASH_Unlock();
 8003736:	f7fd f95b 	bl	80009f0 <HAL_FLASH_Unlock>

    /* Get the number of pages to erase */
    NbrOfPages = (FLASH_BASE + FLASH_SIZE - FLAG_ADDRESS) / FLASH_PAGE_SIZE;//stm32l496rg number of pages = 512
 800373a:	4b2a      	ldr	r3, [pc, #168]	; (80037e4 <Flag_Erase_All+0xc0>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	b29b      	uxth	r3, r3
 8003740:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003744:	4293      	cmp	r3, r2
 8003746:	d00a      	beq.n	800375e <Flag_Erase_All+0x3a>
 8003748:	4b26      	ldr	r3, [pc, #152]	; (80037e4 <Flag_Erase_All+0xc0>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	029a      	lsls	r2, r3, #10
 800374e:	4b26      	ldr	r3, [pc, #152]	; (80037e8 <Flag_Erase_All+0xc4>)
 8003750:	4013      	ands	r3, r2
 8003752:	f5a3 237f 	sub.w	r3, r3, #1044480	; 0xff000
 8003756:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800375a:	0adb      	lsrs	r3, r3, #11
 800375c:	e000      	b.n	8003760 <Flag_Erase_All+0x3c>
 800375e:	2301      	movs	r3, #1
 8003760:	61bb      	str	r3, [r7, #24]
   // NbrOfPages= 511;

    if(NbrOfPages > FLASH_PAGE_NBPERBANK)
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003768:	d916      	bls.n	8003798 <Flag_Erase_All+0x74>
    {
        pEraseInit.Banks = FLASH_BANK_1;
 800376a:	2301      	movs	r3, #1
 800376c:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbPages = NbrOfPages % FLASH_PAGE_NBPERBANK;
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	b2db      	uxtb	r3, r3
 8003772:	613b      	str	r3, [r7, #16]
        pEraseInit.Page = FLASH_PAGE_NBPERBANK - pEraseInit.NbPages;
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800377a:	60fb      	str	r3, [r7, #12]
        pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 800377c:	2300      	movs	r3, #0
 800377e:	607b      	str	r3, [r7, #4]
        status = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 8003780:	f107 0214 	add.w	r2, r7, #20
 8003784:	1d3b      	adds	r3, r7, #4
 8003786:	4611      	mov	r1, r2
 8003788:	4618      	mov	r0, r3
 800378a:	f7fd fa1b 	bl	8000bc4 <HAL_FLASHEx_Erase>
 800378e:	4603      	mov	r3, r0
 8003790:	77fb      	strb	r3, [r7, #31]
        NbrOfPages = FLASH_PAGE_NBPERBANK;
 8003792:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003796:	61bb      	str	r3, [r7, #24]
    }

    if(status == HAL_OK)
 8003798:	7ffb      	ldrb	r3, [r7, #31]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d115      	bne.n	80037ca <Flag_Erase_All+0xa6>
    {
        pEraseInit.Banks = FLASH_BANK_2;
 800379e:	2302      	movs	r3, #2
 80037a0:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbPages = 4;
 80037a2:	2304      	movs	r3, #4
 80037a4:	613b      	str	r3, [r7, #16]
        pEraseInit.Page = FLASH_PAGE_NBPERBANK - pEraseInit.NbPages;
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80037ac:	60fb      	str	r3, [r7, #12]
        pEraseInit.Page = 508;
 80037ae:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
 80037b2:	60fb      	str	r3, [r7, #12]
        pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 80037b4:	2300      	movs	r3, #0
 80037b6:	607b      	str	r3, [r7, #4]
        status = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 80037b8:	f107 0214 	add.w	r2, r7, #20
 80037bc:	1d3b      	adds	r3, r7, #4
 80037be:	4611      	mov	r1, r2
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7fd f9ff 	bl	8000bc4 <HAL_FLASHEx_Erase>
 80037c6:	4603      	mov	r3, r0
 80037c8:	77fb      	strb	r3, [r7, #31]
        //status = HAL_FLASHEx_Erase(&pEraseInit, PageError);
    }

    HAL_FLASH_Lock();
 80037ca:	f7fd f933 	bl	8000a34 <HAL_FLASH_Lock>

    return (status == HAL_OK) ? BL_OK : BL_ERASE_ERROR;
 80037ce:	7ffb      	ldrb	r3, [r7, #31]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <Flag_Erase_All+0xb4>
 80037d4:	2300      	movs	r3, #0
 80037d6:	e000      	b.n	80037da <Flag_Erase_All+0xb6>
 80037d8:	2304      	movs	r3, #4
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3720      	adds	r7, #32
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	1fff75e0 	.word	0x1fff75e0
 80037e8:	03fffc00 	.word	0x03fffc00

080037ec <Bootloader_FlashBegin>:

void Bootloader_FlashBegin(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
    /* Reset flash destination address */
	flash_ptr = FLAG_ADDRESS;
 80037f0:	4b03      	ldr	r3, [pc, #12]	; (8003800 <Bootloader_FlashBegin+0x14>)
 80037f2:	4a04      	ldr	r2, [pc, #16]	; (8003804 <Bootloader_FlashBegin+0x18>)
 80037f4:	601a      	str	r2, [r3, #0]

    /* Unlock flash */
    HAL_FLASH_Unlock();
 80037f6:	f7fd f8fb 	bl	80009f0 <HAL_FLASH_Unlock>
}
 80037fa:	bf00      	nop
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	20000028 	.word	0x20000028
 8003804:	080ff800 	.word	0x080ff800

08003808 <Write_Flag>:
    }

    return BL_OK;
}
uint8_t Write_Flag(uint8_t FlagAddr, uint32_t data)
{
 8003808:	b590      	push	{r4, r7, lr}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	4603      	mov	r3, r0
 8003810:	6039      	str	r1, [r7, #0]
 8003812:	71fb      	strb	r3, [r7, #7]
	uint32_t FlagAddr_temp = (FlagAddr*8)+FLAG_ADDRESS;
 8003814:	79fb      	ldrb	r3, [r7, #7]
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	461a      	mov	r2, r3
 800381a:	4b1e      	ldr	r3, [pc, #120]	; (8003894 <Write_Flag+0x8c>)
 800381c:	4413      	add	r3, r2
 800381e:	60fb      	str	r3, [r7, #12]

	if( !(FlagAddr_temp <= (FLASH_BASE + FLASH_SIZE - 8)) || (FlagAddr_temp < FLAG_ADDRESS) )
 8003820:	4b1d      	ldr	r3, [pc, #116]	; (8003898 <Write_Flag+0x90>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	b29b      	uxth	r3, r3
 8003826:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800382a:	4293      	cmp	r3, r2
 800382c:	d008      	beq.n	8003840 <Write_Flag+0x38>
 800382e:	4b1a      	ldr	r3, [pc, #104]	; (8003898 <Write_Flag+0x90>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	029a      	lsls	r2, r3, #10
 8003834:	4b19      	ldr	r3, [pc, #100]	; (800389c <Write_Flag+0x94>)
 8003836:	4013      	ands	r3, r2
 8003838:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800383c:	3b08      	subs	r3, #8
 800383e:	e000      	b.n	8003842 <Write_Flag+0x3a>
 8003840:	4b17      	ldr	r3, [pc, #92]	; (80038a0 <Write_Flag+0x98>)
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	4293      	cmp	r3, r2
 8003846:	d303      	bcc.n	8003850 <Write_Flag+0x48>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	4a16      	ldr	r2, [pc, #88]	; (80038a4 <Write_Flag+0x9c>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d803      	bhi.n	8003858 <Write_Flag+0x50>
    {
        HAL_FLASH_Lock();
 8003850:	f7fd f8f0 	bl	8000a34 <HAL_FLASH_Lock>
        return BL_WRITE_ERROR;
 8003854:	2305      	movs	r3, #5
 8003856:	e019      	b.n	800388c <Write_Flag+0x84>
    }

    if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, FlagAddr_temp, data) == HAL_OK)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	f04f 0400 	mov.w	r4, #0
 800385e:	461a      	mov	r2, r3
 8003860:	4623      	mov	r3, r4
 8003862:	68f9      	ldr	r1, [r7, #12]
 8003864:	2000      	movs	r0, #0
 8003866:	f7fd f857 	bl	8000918 <HAL_FLASH_Program>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d108      	bne.n	8003882 <Write_Flag+0x7a>
    {
        /* Check the written value */
        if(*(uint32_t*)FlagAddr_temp != data)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	429a      	cmp	r2, r3
 8003878:	d007      	beq.n	800388a <Write_Flag+0x82>
        {
            /* Flash content doesn't match source content */
            HAL_FLASH_Lock();
 800387a:	f7fd f8db 	bl	8000a34 <HAL_FLASH_Lock>
            return BL_WRITE_ERROR;
 800387e:	2305      	movs	r3, #5
 8003880:	e004      	b.n	800388c <Write_Flag+0x84>
        //flash_ptr += 8;
    }
    else
    {
        /* Error occurred while writing data into Flash */
        HAL_FLASH_Lock();
 8003882:	f7fd f8d7 	bl	8000a34 <HAL_FLASH_Lock>
        return BL_WRITE_ERROR;
 8003886:	2305      	movs	r3, #5
 8003888:	e000      	b.n	800388c <Write_Flag+0x84>
    }

    return BL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3714      	adds	r7, #20
 8003890:	46bd      	mov	sp, r7
 8003892:	bd90      	pop	{r4, r7, pc}
 8003894:	080ff800 	.word	0x080ff800
 8003898:	1fff75e0 	.word	0x1fff75e0
 800389c:	03fffc00 	.word	0x03fffc00
 80038a0:	080ffff8 	.word	0x080ffff8
 80038a4:	080ff7ff 	.word	0x080ff7ff

080038a8 <Bootloader_FlashEnd>:
void Bootloader_FlashEnd(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
    /* Lock flash */
    HAL_FLASH_Lock();
 80038ac:	f7fd f8c2 	bl	8000a34 <HAL_FLASH_Lock>
}
 80038b0:	bf00      	nop
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <Read_Flag>:
uint32_t Read_Flag(uint8_t FlagAddr)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	4603      	mov	r3, r0
 80038bc:	71fb      	strb	r3, [r7, #7]
	uint32_t FlashValue = 0;
 80038be:	2300      	movs	r3, #0
 80038c0:	60fb      	str	r3, [r7, #12]

	uint32_t FlagAddr_temp = (FlagAddr*8)+FLAG_ADDRESS;
 80038c2:	79fb      	ldrb	r3, [r7, #7]
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	461a      	mov	r2, r3
 80038c8:	4b06      	ldr	r3, [pc, #24]	; (80038e4 <Read_Flag+0x30>)
 80038ca:	4413      	add	r3, r2
 80038cc:	60bb      	str	r3, [r7, #8]
	FlashValue = *(uint32_t*)(FlagAddr_temp);
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	60fb      	str	r3, [r7, #12]
	return FlashValue;
 80038d4:	68fb      	ldr	r3, [r7, #12]

}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3714      	adds	r7, #20
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	080ff800 	.word	0x080ff800

080038e8 <uart_transmit_str>:
 * @brief   Transmits a string to UART.
 * @param   *data: Array of the data.
 * @return  status: Report about the success of the transmission.
 */
uart_status uart_transmit_str(uint8_t *data)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uart_status status = UART_ERROR;
 80038f0:	23ff      	movs	r3, #255	; 0xff
 80038f2:	73fb      	strb	r3, [r7, #15]
  uint16_t length = 0u;
 80038f4:	2300      	movs	r3, #0
 80038f6:	81bb      	strh	r3, [r7, #12]

  /* Calculate the length. */
  while ('\0' != data[length])
 80038f8:	e002      	b.n	8003900 <uart_transmit_str+0x18>
  {
    length++;
 80038fa:	89bb      	ldrh	r3, [r7, #12]
 80038fc:	3301      	adds	r3, #1
 80038fe:	81bb      	strh	r3, [r7, #12]
  while ('\0' != data[length])
 8003900:	89bb      	ldrh	r3, [r7, #12]
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	4413      	add	r3, r2
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1f6      	bne.n	80038fa <uart_transmit_str+0x12>
  }

  if (HAL_OK == HAL_UART_Transmit(&DEBUG_UART, data, length, UART_TIMEOUT))
 800390c:	89ba      	ldrh	r2, [r7, #12]
 800390e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003912:	6879      	ldr	r1, [r7, #4]
 8003914:	4806      	ldr	r0, [pc, #24]	; (8003930 <uart_transmit_str+0x48>)
 8003916:	f7ff f87d 	bl	8002a14 <HAL_UART_Transmit>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <uart_transmit_str+0x3c>
  {
    status = UART_OK;
 8003920:	2300      	movs	r3, #0
 8003922:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003924:	7bfb      	ldrb	r3, [r7, #15]
}
 8003926:	4618      	mov	r0, r3
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	200001c8 	.word	0x200001c8

08003934 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

int boot_value = 4 ;
 800393a:	2304      	movs	r3, #4
 800393c:	60bb      	str	r3, [r7, #8]
uint8_t  FlashValue = 0;
 800393e:	2300      	movs	r3, #0
 8003940:	71fb      	strb	r3, [r7, #7]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003942:	f7fc fe25 	bl	8000590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003946:	f000 ff06 	bl	8004756 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800394a:	f000 ffcb 	bl	80048e4 <MX_GPIO_Init>
  MX_UART5_Init();
 800394e:	f000 ff69 	bl	8004824 <MX_UART5_Init>
  MX_USART3_UART_Init();
 8003952:	f000 ff97 	bl	8004884 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  //--------------------------------------led toggle----------------------------------------//

  led_blink(); /* Blink On board RGB LED */
 8003956:	f000 fe6d 	bl	8004634 <led_blink>

  //----------------------------------------------------------------------------------------//
  //---------------------------------------Debug UART---------------------------------------//
  uart_transmit_str((uint8_t*)"\n\r=================================\n\r");
 800395a:	48a1      	ldr	r0, [pc, #644]	; (8003be0 <main+0x2ac>)
 800395c:	f7ff ffc4 	bl	80038e8 <uart_transmit_str>
  uart_transmit_str((uint8_t*)"     IU Bootloader-1         \n\r");
 8003960:	48a0      	ldr	r0, [pc, #640]	; (8003be4 <main+0x2b0>)
 8003962:	f7ff ffc1 	bl	80038e8 <uart_transmit_str>
  uart_transmit_str((uint8_t*)"Bootloader Version :");
 8003966:	48a0      	ldr	r0, [pc, #640]	; (8003be8 <main+0x2b4>)
 8003968:	f7ff ffbe 	bl	80038e8 <uart_transmit_str>
  uart_transmit_str((uint8_t*)BOOTLOADER1_VERSION);
 800396c:	489f      	ldr	r0, [pc, #636]	; (8003bec <main+0x2b8>)
 800396e:	f7ff ffbb 	bl	80038e8 <uart_transmit_str>
  uart_transmit_str((uint8_t*)"\r\n=================================\n\r\n\r");
 8003972:	489f      	ldr	r0, [pc, #636]	; (8003bf0 <main+0x2bc>)
 8003974:	f7ff ffb8 	bl	80038e8 <uart_transmit_str>
//   uint8_t FlashValue_2 = *(uint8_t*)(FLAG_ADDRESS+16);
//  uint32_t FlashValue_1 = Read_Flag(MAIN_FW);
//  uint32_t FlashValue_2 = Read_Flag(FACTORY_FW);
//  uint32_t FlashValue_3 = Read_Flag(MFW_VER);
  //---------------------------------------GPIO INPUT---------------------------------------//
  boot_value =  boot_pins_read(); /* read PA0 and PA1 GPIO input*/
 8003978:	f000 fa95 	bl	8003ea6 <boot_pins_read>
 800397c:	60b8      	str	r0, [r7, #8]
//---------------------------------End of Test code-----------------------------------------------//

  //uart_transmit_str((uint8_t*)"\n\r boot_value =  ");
  //uart_transmit_str((uint8_t*)boot_value);

  switch(boot_value)
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d007      	beq.n	8003994 <main+0x60>
 8003984:	2b02      	cmp	r3, #2
 8003986:	d009      	beq.n	800399c <main+0x68>
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10b      	bne.n	80039a4 <main+0x70>
  {
  case 0: Boot_FFW_Flag = 1 ;//set Factory Image;
 800398c:	4b99      	ldr	r3, [pc, #612]	; (8003bf4 <main+0x2c0>)
 800398e:	2201      	movs	r2, #1
 8003990:	701a      	strb	r2, [r3, #0]
	  break;
 8003992:	e00a      	b.n	80039aa <main+0x76>
  case 1: Debug_UART_Flag = 1; //uart_debug(); //pass control to UART
 8003994:	4b98      	ldr	r3, [pc, #608]	; (8003bf8 <main+0x2c4>)
 8003996:	2201      	movs	r2, #1
 8003998:	701a      	strb	r2, [r3, #0]
	  break;
 800399a:	e006      	b.n	80039aa <main+0x76>
  case 2: Boot_RB_MFW_Flag = 1; //roll back main firmware
 800399c:	4b97      	ldr	r3, [pc, #604]	; (8003bfc <main+0x2c8>)
 800399e:	2201      	movs	r2, #1
 80039a0:	701a      	strb	r2, [r3, #0]
	  break;
 80039a2:	e002      	b.n	80039aa <main+0x76>
  default :  Boot_MFW_Flag =0 ;//normal boot / boot main firmware (default)
 80039a4:	4b96      	ldr	r3, [pc, #600]	; (8003c00 <main+0x2cc>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	701a      	strb	r2, [r3, #0]
  }


  if(Debug_UART_Flag == 1)
 80039aa:	4b93      	ldr	r3, [pc, #588]	; (8003bf8 <main+0x2c4>)
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d10e      	bne.n	80039d0 <main+0x9c>
	  boot_uart_read(&rx_buffer_temp);
	  HAL_Delay(1000);*/
	  /*------------------------------------ Test Code End -----------------------------------------*/


	  uart_transmit_str((uint8_t*)"\n\r----------UART DEBUG MODE----------- \n\r");
 80039b2:	4894      	ldr	r0, [pc, #592]	; (8003c04 <main+0x2d0>)
 80039b4:	f7ff ff98 	bl	80038e8 <uart_transmit_str>
	 // update_flag(uint8_t flag_addr, uint32_t flag_data)

	  int uart_debug_exit = 0;
 80039b8:	2300      	movs	r3, #0
 80039ba:	60fb      	str	r3, [r7, #12]

	  while(!uart_debug_exit)
 80039bc:	e002      	b.n	80039c4 <main+0x90>
	  {
		  uart_debug_exit =  uart_debug();
 80039be:	f000 fb4b 	bl	8004058 <uart_debug>
 80039c2:	60f8      	str	r0, [r7, #12]
	  while(!uart_debug_exit)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d0f9      	beq.n	80039be <main+0x8a>

	  }
	  uart_transmit_str((uint8_t*)"\n\rExiting from UART debug mode \n\r");
 80039ca:	488f      	ldr	r0, [pc, #572]	; (8003c08 <main+0x2d4>)
 80039cc:	f7ff ff8c 	bl	80038e8 <uart_transmit_str>

  }

  if(Boot_RB_MFW_Flag == 1)
 80039d0:	4b8a      	ldr	r3, [pc, #552]	; (8003bfc <main+0x2c8>)
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d10d      	bne.n	80039f4 <main+0xc0>
  {

	  update_flag(MFW_FLASH_FLAG, 4);
 80039d8:	2104      	movs	r1, #4
 80039da:	2000      	movs	r0, #0
 80039dc:	f000 f9be 	bl	8003d5c <update_flag>
	  uart_transmit_str((uint8_t*)"Initiating HW GPIO Pin based Internal ROLLBACK.... \n\r");
 80039e0:	488a      	ldr	r0, [pc, #552]	; (8003c0c <main+0x2d8>)
 80039e2:	f7ff ff81 	bl	80038e8 <uart_transmit_str>

	  HAL_Delay(1000);
 80039e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039ea:	f7fc fe75 	bl	80006d8 <HAL_Delay>
	  flash_jump_boot_loader_L2();
 80039ee:	f7ff fe3d 	bl	800366c <flash_jump_boot_loader_L2>
 80039f2:	e01a      	b.n	8003a2a <main+0xf6>

  }else if(Boot_FFW_Flag == 1)
 80039f4:	4b7f      	ldr	r3, [pc, #508]	; (8003bf4 <main+0x2c0>)
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d109      	bne.n	8003a10 <main+0xdc>
  {
	  uart_transmit_str((uint8_t*)"Initiating HW GPIO Pin based Factory FW Boot-Up...\n\r");
 80039fc:	4884      	ldr	r0, [pc, #528]	; (8003c10 <main+0x2dc>)
 80039fe:	f7ff ff73 	bl	80038e8 <uart_transmit_str>
	  HAL_Delay(1000);
 8003a02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a06:	f7fc fe67 	bl	80006d8 <HAL_Delay>
	  flash_jump_to_factory_firmware();
 8003a0a:	f7ff fddb 	bl	80035c4 <flash_jump_to_factory_firmware>
 8003a0e:	e00c      	b.n	8003a2a <main+0xf6>

  }else if(Boot_MFW_Flag == 1)
 8003a10:	4b7b      	ldr	r3, [pc, #492]	; (8003c00 <main+0x2cc>)
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d108      	bne.n	8003a2a <main+0xf6>
  {
	  uart_transmit_str((uint8_t*)"Initiating HW GPIO Pin based Main FW Boot-Up...\n\r");
 8003a18:	487e      	ldr	r0, [pc, #504]	; (8003c14 <main+0x2e0>)
 8003a1a:	f7ff ff65 	bl	80038e8 <uart_transmit_str>
	  HAL_Delay(1000);
 8003a1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a22:	f7fc fe59 	bl	80006d8 <HAL_Delay>
	  flash_jump_to_main_firmware();
 8003a26:	f7ff fdf7 	bl	8003618 <flash_jump_to_main_firmware>
  }
/*--------------------------------------------------------------------------------------------*/
  read_all_flags();
 8003a2a:	f000 f9df 	bl	8003dec <read_all_flags>
  if(all_flags[MFW_FLASH_FLAG]== OTA_FW_SUCCESS)
 8003a2e:	4b7a      	ldr	r3, [pc, #488]	; (8003c18 <main+0x2e4>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d118      	bne.n	8003a68 <main+0x134>
  {
	  if((all_flags[RETRY_FLAG]!=0) || all_flags[RETRY_VALIDATION]!=0)
 8003a36:	4b78      	ldr	r3, [pc, #480]	; (8003c18 <main+0x2e4>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d103      	bne.n	8003a46 <main+0x112>
 8003a3e:	4b76      	ldr	r3, [pc, #472]	; (8003c18 <main+0x2e4>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d007      	beq.n	8003a56 <main+0x122>
	  {
	  all_flags[RETRY_FLAG] = 0;
 8003a46:	4b74      	ldr	r3, [pc, #464]	; (8003c18 <main+0x2e4>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	605a      	str	r2, [r3, #4]
	  all_flags[RETRY_VALIDATION] = 0;
 8003a4c:	4b72      	ldr	r3, [pc, #456]	; (8003c18 <main+0x2e4>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	609a      	str	r2, [r3, #8]
	  update_all_flag();
 8003a52:	f000 f9c1 	bl	8003dd8 <update_all_flag>
	  }
	  uart_transmit_str((uint8_t*)"Validation Success booting-up Main FW...\n\r");
 8003a56:	4871      	ldr	r0, [pc, #452]	; (8003c1c <main+0x2e8>)
 8003a58:	f7ff ff46 	bl	80038e8 <uart_transmit_str>
	  HAL_Delay(100);
 8003a5c:	2064      	movs	r0, #100	; 0x64
 8003a5e:	f7fc fe3b 	bl	80006d8 <HAL_Delay>
	  flash_jump_to_main_firmware();
 8003a62:	f7ff fdd9 	bl	8003618 <flash_jump_to_main_firmware>
 8003a66:	e15d      	b.n	8003d24 <main+0x3f0>

  }else if(all_flags[MFW_FLASH_FLAG]== OTA_FW_DOWNLOAD_SUCCESS)
 8003a68:	4b6b      	ldr	r3, [pc, #428]	; (8003c18 <main+0x2e4>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d108      	bne.n	8003a82 <main+0x14e>
  {
	  uart_transmit_str((uint8_t*)"Jumping to IU Bootloader-2 for new FW upgrade..\n\r");
 8003a70:	486b      	ldr	r0, [pc, #428]	; (8003c20 <main+0x2ec>)
 8003a72:	f7ff ff39 	bl	80038e8 <uart_transmit_str>
	  HAL_Delay(100);
 8003a76:	2064      	movs	r0, #100	; 0x64
 8003a78:	f7fc fe2e 	bl	80006d8 <HAL_Delay>
	  flash_jump_boot_loader_L2();
 8003a7c:	f7ff fdf6 	bl	800366c <flash_jump_boot_loader_L2>
 8003a80:	e150      	b.n	8003d24 <main+0x3f0>
  }else if((all_flags[MFW_FLASH_FLAG]== OTA_FW_UPGRADE_FAILED) && (all_flags[RETRY_FLAG]<MAX_RETRY_FLAG))
 8003a82:	4b65      	ldr	r3, [pc, #404]	; (8003c18 <main+0x2e4>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d11b      	bne.n	8003ac2 <main+0x18e>
 8003a8a:	4b63      	ldr	r3, [pc, #396]	; (8003c18 <main+0x2e4>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d817      	bhi.n	8003ac2 <main+0x18e>
  {
	  uart_transmit_str((uint8_t*)"Jumping to IU Bootloader-2 for new FW upgrade- RETRY \n\r");
 8003a92:	4864      	ldr	r0, [pc, #400]	; (8003c24 <main+0x2f0>)
 8003a94:	f7ff ff28 	bl	80038e8 <uart_transmit_str>
	  HAL_Delay(100);
 8003a98:	2064      	movs	r0, #100	; 0x64
 8003a9a:	f7fc fe1d 	bl	80006d8 <HAL_Delay>
	  read_all_flags();
 8003a9e:	f000 f9a5 	bl	8003dec <read_all_flags>
	  all_flags[MFW_FLASH_FLAG] = OTA_FW_DOWNLOAD_SUCCESS;		// Continue Firmware Upgrade
 8003aa2:	4b5d      	ldr	r3, [pc, #372]	; (8003c18 <main+0x2e4>)
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]
	  all_flags[RETRY_FLAG] =  all_flags[RETRY_FLAG]+1;
 8003aa8:	4b5b      	ldr	r3, [pc, #364]	; (8003c18 <main+0x2e4>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	3301      	adds	r3, #1
 8003aae:	4a5a      	ldr	r2, [pc, #360]	; (8003c18 <main+0x2e4>)
 8003ab0:	6053      	str	r3, [r2, #4]
	  all_flags[RETRY_VALIDATION] = 0;
 8003ab2:	4b59      	ldr	r3, [pc, #356]	; (8003c18 <main+0x2e4>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	609a      	str	r2, [r3, #8]
	  update_all_flag();
 8003ab8:	f000 f98e 	bl	8003dd8 <update_all_flag>
	  flash_jump_boot_loader_L2();
 8003abc:	f7ff fdd6 	bl	800366c <flash_jump_boot_loader_L2>
 8003ac0:	e130      	b.n	8003d24 <main+0x3f0>
  }else if((all_flags[MFW_FLASH_FLAG]== OTA_FW_UPGRADE_FAILED) && (all_flags[RETRY_FLAG]>= MAX_RETRY_FLAG))
 8003ac2:	4b55      	ldr	r3, [pc, #340]	; (8003c18 <main+0x2e4>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d119      	bne.n	8003afe <main+0x1ca>
 8003aca:	4b53      	ldr	r3, [pc, #332]	; (8003c18 <main+0x2e4>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d915      	bls.n	8003afe <main+0x1ca>
  {

	  read_all_flags();
 8003ad2:	f000 f98b 	bl	8003dec <read_all_flags>
	  all_flags[MFW_FLASH_FLAG] = OTA_FW_INTERNAL_ROLLBACK; // Perform Internal Rollback
 8003ad6:	4b50      	ldr	r3, [pc, #320]	; (8003c18 <main+0x2e4>)
 8003ad8:	2204      	movs	r2, #4
 8003ada:	601a      	str	r2, [r3, #0]
	  all_flags[RETRY_FLAG] = 0;
 8003adc:	4b4e      	ldr	r3, [pc, #312]	; (8003c18 <main+0x2e4>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	605a      	str	r2, [r3, #4]
	  all_flags[RETRY_VALIDATION] = 0;
 8003ae2:	4b4d      	ldr	r3, [pc, #308]	; (8003c18 <main+0x2e4>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	609a      	str	r2, [r3, #8]
	  update_all_flag();
 8003ae8:	f000 f976 	bl	8003dd8 <update_all_flag>
	  uart_transmit_str((uint8_t*)"\n\rError : Flashing exceeded number of retries !!!\n\r");
 8003aec:	484e      	ldr	r0, [pc, #312]	; (8003c28 <main+0x2f4>)
 8003aee:	f7ff fefb 	bl	80038e8 <uart_transmit_str>
	  uart_transmit_str((uint8_t*)"\n\rRolling back to older Firmware ....\n\r");
 8003af2:	484e      	ldr	r0, [pc, #312]	; (8003c2c <main+0x2f8>)
 8003af4:	f7ff fef8 	bl	80038e8 <uart_transmit_str>
	  flash_jump_boot_loader_L2();
 8003af8:	f7ff fdb8 	bl	800366c <flash_jump_boot_loader_L2>
 8003afc:	e112      	b.n	8003d24 <main+0x3f0>

  }else if((all_flags[MFW_FLASH_FLAG]== OTA_FW_UPGRADE_SUCCESS) && all_flags[RETRY_VALIDATION]< MAX_RETRY_VAL)
 8003afe:	4b46      	ldr	r3, [pc, #280]	; (8003c18 <main+0x2e4>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2b03      	cmp	r3, #3
 8003b04:	d111      	bne.n	8003b2a <main+0x1f6>
 8003b06:	4b44      	ldr	r3, [pc, #272]	; (8003c18 <main+0x2e4>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	2b04      	cmp	r3, #4
 8003b0c:	d80d      	bhi.n	8003b2a <main+0x1f6>
  {
	  //all_flags[RETRY_VALIDATION] = all_flags[RETRY_VALIDATION]+1;
	  all_flags[RETRY_FLAG] = 0;
 8003b0e:	4b42      	ldr	r3, [pc, #264]	; (8003c18 <main+0x2e4>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	605a      	str	r2, [r3, #4]
	  update_all_flag();
 8003b14:	f000 f960 	bl	8003dd8 <update_all_flag>
	 // update_flag(RETRY_FLAG, 0);
	  uart_transmit_str((uint8_t*)"Upgrade Success, jumping to Main FW for validation \n\r");
 8003b18:	4845      	ldr	r0, [pc, #276]	; (8003c30 <main+0x2fc>)
 8003b1a:	f7ff fee5 	bl	80038e8 <uart_transmit_str>
	  HAL_Delay(100);
 8003b1e:	2064      	movs	r0, #100	; 0x64
 8003b20:	f7fc fdda 	bl	80006d8 <HAL_Delay>
	  flash_jump_to_main_firmware();
 8003b24:	f7ff fd78 	bl	8003618 <flash_jump_to_main_firmware>
 8003b28:	e0fc      	b.n	8003d24 <main+0x3f0>

  }else if((all_flags[MFW_FLASH_FLAG]== OTA_FW_UPGRADE_SUCCESS) && all_flags[RETRY_VALIDATION]>= MAX_RETRY_VAL)
 8003b2a:	4b3b      	ldr	r3, [pc, #236]	; (8003c18 <main+0x2e4>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2b03      	cmp	r3, #3
 8003b30:	d117      	bne.n	8003b62 <main+0x22e>
 8003b32:	4b39      	ldr	r3, [pc, #228]	; (8003c18 <main+0x2e4>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	2b04      	cmp	r3, #4
 8003b38:	d913      	bls.n	8003b62 <main+0x22e>
  {
	  all_flags[RETRY_VALIDATION] = 0;
 8003b3a:	4b37      	ldr	r3, [pc, #220]	; (8003c18 <main+0x2e4>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	609a      	str	r2, [r3, #8]
	  all_flags[RETRY_FLAG] = 0;
 8003b40:	4b35      	ldr	r3, [pc, #212]	; (8003c18 <main+0x2e4>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	605a      	str	r2, [r3, #4]
	  all_flags[MFW_FLASH_FLAG] = OTA_FW_INTERNAL_ROLLBACK;	// Do Internal Rollback
 8003b46:	4b34      	ldr	r3, [pc, #208]	; (8003c18 <main+0x2e4>)
 8003b48:	2204      	movs	r2, #4
 8003b4a:	601a      	str	r2, [r3, #0]
	  update_all_flag();
 8003b4c:	f000 f944 	bl	8003dd8 <update_all_flag>
	  uart_transmit_str((uint8_t*)"\n\rExceeded number of retries without validation !!!\n\r");
 8003b50:	4838      	ldr	r0, [pc, #224]	; (8003c34 <main+0x300>)
 8003b52:	f7ff fec9 	bl	80038e8 <uart_transmit_str>
	  uart_transmit_str((uint8_t*)"\n\rRolling back to older Firmware ....\n\r");
 8003b56:	4835      	ldr	r0, [pc, #212]	; (8003c2c <main+0x2f8>)
 8003b58:	f7ff fec6 	bl	80038e8 <uart_transmit_str>
	  flash_jump_boot_loader_L2(); // rollbacking from L2
 8003b5c:	f7ff fd86 	bl	800366c <flash_jump_boot_loader_L2>
 8003b60:	e0e0      	b.n	8003d24 <main+0x3f0>
	 // update_flag(RETRY_FLAG, 0);
	  //flash_jump_to_main_firmware();

  }else if(all_flags[MFW_FLASH_FLAG]== OTA_FW_INTERNAL_ROLLBACK && (all_flags[RETRY_FLAG] < MAX_RETRY_FLAG) )
 8003b62:	4b2d      	ldr	r3, [pc, #180]	; (8003c18 <main+0x2e4>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	d11b      	bne.n	8003ba2 <main+0x26e>
 8003b6a:	4b2b      	ldr	r3, [pc, #172]	; (8003c18 <main+0x2e4>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d817      	bhi.n	8003ba2 <main+0x26e>
  {
	  uart_transmit_str((uint8_t*)"Jumping to IU Bootloader-2 for Internal Rollback\n\r");
 8003b72:	4831      	ldr	r0, [pc, #196]	; (8003c38 <main+0x304>)
 8003b74:	f7ff feb8 	bl	80038e8 <uart_transmit_str>
	  HAL_Delay(100);
 8003b78:	2064      	movs	r0, #100	; 0x64
 8003b7a:	f7fc fdad 	bl	80006d8 <HAL_Delay>
	  read_all_flags();
 8003b7e:	f000 f935 	bl	8003dec <read_all_flags>
	  all_flags[MFW_FLASH_FLAG] = OTA_FW_INTERNAL_ROLLBACK ;	// Continue with Internal Rollback
 8003b82:	4b25      	ldr	r3, [pc, #148]	; (8003c18 <main+0x2e4>)
 8003b84:	2204      	movs	r2, #4
 8003b86:	601a      	str	r2, [r3, #0]
	  all_flags[RETRY_FLAG] =  all_flags[RETRY_FLAG]+1;
 8003b88:	4b23      	ldr	r3, [pc, #140]	; (8003c18 <main+0x2e4>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	4a22      	ldr	r2, [pc, #136]	; (8003c18 <main+0x2e4>)
 8003b90:	6053      	str	r3, [r2, #4]
	  all_flags[RETRY_VALIDATION] = 0;
 8003b92:	4b21      	ldr	r3, [pc, #132]	; (8003c18 <main+0x2e4>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	609a      	str	r2, [r3, #8]
	  update_all_flag();
 8003b98:	f000 f91e 	bl	8003dd8 <update_all_flag>
	  flash_jump_boot_loader_L2(); 
 8003b9c:	f7ff fd66 	bl	800366c <flash_jump_boot_loader_L2>
 8003ba0:	e0c0      	b.n	8003d24 <main+0x3f0>
  }else if((all_flags[MFW_FLASH_FLAG]== OTA_FW_INTERNAL_ROLLBACK) && (all_flags[RETRY_FLAG]>= MAX_RETRY_FLAG))
 8003ba2:	4b1d      	ldr	r3, [pc, #116]	; (8003c18 <main+0x2e4>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2b04      	cmp	r3, #4
 8003ba8:	d14c      	bne.n	8003c44 <main+0x310>
 8003baa:	4b1b      	ldr	r3, [pc, #108]	; (8003c18 <main+0x2e4>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d948      	bls.n	8003c44 <main+0x310>
  {

	  read_all_flags();
 8003bb2:	f000 f91b 	bl	8003dec <read_all_flags>
	  all_flags[MFW_FLASH_FLAG] = OTA_FW_FACTORY_IMAGE;		// Switch to Factory Firmware
 8003bb6:	4b18      	ldr	r3, [pc, #96]	; (8003c18 <main+0x2e4>)
 8003bb8:	2208      	movs	r2, #8
 8003bba:	601a      	str	r2, [r3, #0]
	  all_flags[RETRY_FLAG] = 0;
 8003bbc:	4b16      	ldr	r3, [pc, #88]	; (8003c18 <main+0x2e4>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	605a      	str	r2, [r3, #4]
	  all_flags[RETRY_VALIDATION] = 0;
 8003bc2:	4b15      	ldr	r3, [pc, #84]	; (8003c18 <main+0x2e4>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	609a      	str	r2, [r3, #8]
	  update_all_flag();
 8003bc8:	f000 f906 	bl	8003dd8 <update_all_flag>
	  uart_transmit_str((uint8_t*)"\n\rError : Exceeded Internal Rollback retries !!!\n\r");
 8003bcc:	481b      	ldr	r0, [pc, #108]	; (8003c3c <main+0x308>)
 8003bce:	f7ff fe8b 	bl	80038e8 <uart_transmit_str>
	  uart_transmit_str((uint8_t*)"\n\rRolling back to factory Firmware ....\n\r");
 8003bd2:	481b      	ldr	r0, [pc, #108]	; (8003c40 <main+0x30c>)
 8003bd4:	f7ff fe88 	bl	80038e8 <uart_transmit_str>
	  flash_jump_to_factory_firmware();
 8003bd8:	f7ff fcf4 	bl	80035c4 <flash_jump_to_factory_firmware>
 8003bdc:	e0a2      	b.n	8003d24 <main+0x3f0>
 8003bde:	bf00      	nop
 8003be0:	08005524 	.word	0x08005524
 8003be4:	0800554c 	.word	0x0800554c
 8003be8:	0800556c 	.word	0x0800556c
 8003bec:	08005da8 	.word	0x08005da8
 8003bf0:	08005584 	.word	0x08005584
 8003bf4:	200001c5 	.word	0x200001c5
 8003bf8:	200000c1 	.word	0x200000c1
 8003bfc:	200001c4 	.word	0x200001c4
 8003c00:	200000c0 	.word	0x200000c0
 8003c04:	080055ac 	.word	0x080055ac
 8003c08:	080055d8 	.word	0x080055d8
 8003c0c:	080055fc 	.word	0x080055fc
 8003c10:	08005634 	.word	0x08005634
 8003c14:	0800566c 	.word	0x0800566c
 8003c18:	20000144 	.word	0x20000144
 8003c1c:	080056a0 	.word	0x080056a0
 8003c20:	080056cc 	.word	0x080056cc
 8003c24:	08005700 	.word	0x08005700
 8003c28:	08005738 	.word	0x08005738
 8003c2c:	0800576c 	.word	0x0800576c
 8003c30:	08005794 	.word	0x08005794
 8003c34:	080057cc 	.word	0x080057cc
 8003c38:	08005804 	.word	0x08005804
 8003c3c:	08005838 	.word	0x08005838
 8003c40:	0800586c 	.word	0x0800586c
  }
  else if(all_flags[MFW_FLASH_FLAG]== OTA_FW_FORCED_ROLLBACK  && (all_flags[RETRY_FLAG] < MAX_RETRY_FLAG) )
 8003c44:	4b3a      	ldr	r3, [pc, #232]	; (8003d30 <main+0x3fc>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2b05      	cmp	r3, #5
 8003c4a:	d11b      	bne.n	8003c84 <main+0x350>
 8003c4c:	4b38      	ldr	r3, [pc, #224]	; (8003d30 <main+0x3fc>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d817      	bhi.n	8003c84 <main+0x350>
  {
	  uart_transmit_str((uint8_t*)"Jumping to IU Bootloader-2 for Forced Rollback\n\r");
 8003c54:	4837      	ldr	r0, [pc, #220]	; (8003d34 <main+0x400>)
 8003c56:	f7ff fe47 	bl	80038e8 <uart_transmit_str>
  	  HAL_Delay(100);
 8003c5a:	2064      	movs	r0, #100	; 0x64
 8003c5c:	f7fc fd3c 	bl	80006d8 <HAL_Delay>
  	  read_all_flags();
 8003c60:	f000 f8c4 	bl	8003dec <read_all_flags>
  	  all_flags[MFW_FLASH_FLAG] = OTA_FW_FORCED_ROLLBACK;		// Perform the Forced Rollback
 8003c64:	4b32      	ldr	r3, [pc, #200]	; (8003d30 <main+0x3fc>)
 8003c66:	2205      	movs	r2, #5
 8003c68:	601a      	str	r2, [r3, #0]
  	  all_flags[RETRY_FLAG] =  all_flags[RETRY_FLAG]+1;
 8003c6a:	4b31      	ldr	r3, [pc, #196]	; (8003d30 <main+0x3fc>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	3301      	adds	r3, #1
 8003c70:	4a2f      	ldr	r2, [pc, #188]	; (8003d30 <main+0x3fc>)
 8003c72:	6053      	str	r3, [r2, #4]
  	  all_flags[RETRY_VALIDATION] = 0;
 8003c74:	4b2e      	ldr	r3, [pc, #184]	; (8003d30 <main+0x3fc>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	609a      	str	r2, [r3, #8]
  	  update_all_flag();
 8003c7a:	f000 f8ad 	bl	8003dd8 <update_all_flag>
  	  flash_jump_boot_loader_L2(); 
 8003c7e:	f7ff fcf5 	bl	800366c <flash_jump_boot_loader_L2>
 8003c82:	e04f      	b.n	8003d24 <main+0x3f0>
  }else if((all_flags[MFW_FLASH_FLAG]== OTA_FW_FORCED_ROLLBACK) && (all_flags[RETRY_FLAG]>= MAX_RETRY_FLAG))
 8003c84:	4b2a      	ldr	r3, [pc, #168]	; (8003d30 <main+0x3fc>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b05      	cmp	r3, #5
 8003c8a:	d119      	bne.n	8003cc0 <main+0x38c>
 8003c8c:	4b28      	ldr	r3, [pc, #160]	; (8003d30 <main+0x3fc>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d915      	bls.n	8003cc0 <main+0x38c>
  {
  	  read_all_flags();
 8003c94:	f000 f8aa 	bl	8003dec <read_all_flags>
  	  all_flags[MFW_FLASH_FLAG] = OTA_FW_FACTORY_IMAGE;			// Switch to Factory Firmware
 8003c98:	4b25      	ldr	r3, [pc, #148]	; (8003d30 <main+0x3fc>)
 8003c9a:	2208      	movs	r2, #8
 8003c9c:	601a      	str	r2, [r3, #0]
  	  all_flags[RETRY_FLAG] = 0;
 8003c9e:	4b24      	ldr	r3, [pc, #144]	; (8003d30 <main+0x3fc>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	605a      	str	r2, [r3, #4]
  	  all_flags[RETRY_VALIDATION] = 0;
 8003ca4:	4b22      	ldr	r3, [pc, #136]	; (8003d30 <main+0x3fc>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	609a      	str	r2, [r3, #8]
  	  update_all_flag();
 8003caa:	f000 f895 	bl	8003dd8 <update_all_flag>
  	  uart_transmit_str((uint8_t*)"\n\rError : Exceeded Forced Rollback retries !!!\n\r");
 8003cae:	4822      	ldr	r0, [pc, #136]	; (8003d38 <main+0x404>)
 8003cb0:	f7ff fe1a 	bl	80038e8 <uart_transmit_str>
  	  uart_transmit_str((uint8_t*)"\n\rRolling back to factory Firmware ....\n\r");
 8003cb4:	4821      	ldr	r0, [pc, #132]	; (8003d3c <main+0x408>)
 8003cb6:	f7ff fe17 	bl	80038e8 <uart_transmit_str>
  	  flash_jump_to_factory_firmware();
 8003cba:	f7ff fc83 	bl	80035c4 <flash_jump_to_factory_firmware>
 8003cbe:	e031      	b.n	8003d24 <main+0x3f0>
  }
  else if(all_flags[MFW_FLASH_FLAG]== OTA_FW_FILE_CHKSUM_ERROR)
 8003cc0:	4b1b      	ldr	r3, [pc, #108]	; (8003d30 <main+0x3fc>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2b06      	cmp	r3, #6
 8003cc6:	d108      	bne.n	8003cda <main+0x3a6>
  {
	  uart_transmit_str((uint8_t*)"\n\rError : File Checksum mismatch! Download file(s) again !!!");
 8003cc8:	481d      	ldr	r0, [pc, #116]	; (8003d40 <main+0x40c>)
 8003cca:	f7ff fe0d 	bl	80038e8 <uart_transmit_str>
	  uart_transmit_str((uint8_t*)"\n\rBooting Main Firmware.....\n\r");
 8003cce:	481d      	ldr	r0, [pc, #116]	; (8003d44 <main+0x410>)
 8003cd0:	f7ff fe0a 	bl	80038e8 <uart_transmit_str>
	  flash_jump_to_main_firmware(); //File read error
 8003cd4:	f7ff fca0 	bl	8003618 <flash_jump_to_main_firmware>
 8003cd8:	e024      	b.n	8003d24 <main+0x3f0>
  }else if(all_flags[MFW_FLASH_FLAG]== OTA_FW_FILE_SYS_ERROR)
 8003cda:	4b15      	ldr	r3, [pc, #84]	; (8003d30 <main+0x3fc>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2b07      	cmp	r3, #7
 8003ce0:	d10b      	bne.n	8003cfa <main+0x3c6>
  {
	  uart_transmit_str((uint8_t*)"\n\rFile(S) missing !!");
 8003ce2:	4819      	ldr	r0, [pc, #100]	; (8003d48 <main+0x414>)
 8003ce4:	f7ff fe00 	bl	80038e8 <uart_transmit_str>
	  uart_transmit_str((uint8_t*)"\n\rDownload files !!");
 8003ce8:	4818      	ldr	r0, [pc, #96]	; (8003d4c <main+0x418>)
 8003cea:	f7ff fdfd 	bl	80038e8 <uart_transmit_str>
	  uart_transmit_str((uint8_t*)"\n\rBooting Main Firmware.....\n\r");
 8003cee:	4815      	ldr	r0, [pc, #84]	; (8003d44 <main+0x410>)
 8003cf0:	f7ff fdfa 	bl	80038e8 <uart_transmit_str>
	  flash_jump_to_main_firmware(); //File read error
 8003cf4:	f7ff fc90 	bl	8003618 <flash_jump_to_main_firmware>
 8003cf8:	e014      	b.n	8003d24 <main+0x3f0>
  }else if(all_flags[MFW_FLASH_FLAG]== OTA_FW_FACTORY_IMAGE)
 8003cfa:	4b0d      	ldr	r3, [pc, #52]	; (8003d30 <main+0x3fc>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2b08      	cmp	r3, #8
 8003d00:	d108      	bne.n	8003d14 <main+0x3e0>
  {
	  uart_transmit_str((uint8_t*)"\n\rUpgrade Failed, retry overflow !!");
 8003d02:	4813      	ldr	r0, [pc, #76]	; (8003d50 <main+0x41c>)
 8003d04:	f7ff fdf0 	bl	80038e8 <uart_transmit_str>
	  uart_transmit_str((uint8_t*)"\n\rBooting Factory Firmware.....\n\r");
 8003d08:	4812      	ldr	r0, [pc, #72]	; (8003d54 <main+0x420>)
 8003d0a:	f7ff fded 	bl	80038e8 <uart_transmit_str>
	  flash_jump_to_factory_firmware(); //File read error
 8003d0e:	f7ff fc59 	bl	80035c4 <flash_jump_to_factory_firmware>
 8003d12:	e007      	b.n	8003d24 <main+0x3f0>
  }else
  {
	  uart_transmit_str((uint8_t*)"\n\rUnknown Status Code");
 8003d14:	4810      	ldr	r0, [pc, #64]	; (8003d58 <main+0x424>)
 8003d16:	f7ff fde7 	bl	80038e8 <uart_transmit_str>
	  uart_transmit_str((uint8_t*)"\n\rBooting Main Firmware.....\n\r");
 8003d1a:	480a      	ldr	r0, [pc, #40]	; (8003d44 <main+0x410>)
 8003d1c:	f7ff fde4 	bl	80038e8 <uart_transmit_str>
	  flash_jump_to_main_firmware(); // unknown command
 8003d20:	f7ff fc7a 	bl	8003618 <flash_jump_to_main_firmware>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(1000);
 8003d24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d28:	f7fc fcd6 	bl	80006d8 <HAL_Delay>
 8003d2c:	e7fa      	b.n	8003d24 <main+0x3f0>
 8003d2e:	bf00      	nop
 8003d30:	20000144 	.word	0x20000144
 8003d34:	08005898 	.word	0x08005898
 8003d38:	080058cc 	.word	0x080058cc
 8003d3c:	0800586c 	.word	0x0800586c
 8003d40:	08005900 	.word	0x08005900
 8003d44:	08005940 	.word	0x08005940
 8003d48:	08005960 	.word	0x08005960
 8003d4c:	08005978 	.word	0x08005978
 8003d50:	0800598c 	.word	0x0800598c
 8003d54:	080059b0 	.word	0x080059b0
 8003d58:	080059d4 	.word	0x080059d4

08003d5c <update_flag>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void update_flag(uint8_t flag_addr, uint32_t flag_data)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	4603      	mov	r3, r0
 8003d64:	6039      	str	r1, [r7, #0]
 8003d66:	71fb      	strb	r3, [r7, #7]
	  read_all_flags();
 8003d68:	f000 f840 	bl	8003dec <read_all_flags>
	  all_flags[flag_addr] = flag_data;
 8003d6c:	79fb      	ldrb	r3, [r7, #7]
 8003d6e:	4907      	ldr	r1, [pc, #28]	; (8003d8c <update_flag+0x30>)
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  write_flag_init();
 8003d76:	f000 f887 	bl	8003e88 <write_flag_init>
	  write_all_flags();
 8003d7a:	f000 f853 	bl	8003e24 <write_all_flags>
	  Bootloader_FlashEnd();
 8003d7e:	f7ff fd93 	bl	80038a8 <Bootloader_FlashEnd>

}
 8003d82:	bf00      	nop
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	20000144 	.word	0x20000144

08003d90 <iu_reset>:


void iu_reset()
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0

	HAL_NVIC_SystemReset();
 8003d94:	f7fc fdaf 	bl	80008f6 <HAL_NVIC_SystemReset>
}
 8003d98:	bf00      	nop
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <Clear_all_flags>:


void Clear_all_flags()
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
	for(int i = 0 ; i<32 ; i++)
 8003da2:	2300      	movs	r3, #0
 8003da4:	607b      	str	r3, [r7, #4]
 8003da6:	e007      	b.n	8003db8 <Clear_all_flags+0x1c>
	{
	all_flags[i] = 0 ;
 8003da8:	4a0a      	ldr	r2, [pc, #40]	; (8003dd4 <Clear_all_flags+0x38>)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2100      	movs	r1, #0
 8003dae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0 ; i<32 ; i++)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	3301      	adds	r3, #1
 8003db6:	607b      	str	r3, [r7, #4]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b1f      	cmp	r3, #31
 8003dbc:	ddf4      	ble.n	8003da8 <Clear_all_flags+0xc>
	}
	write_flag_init();
 8003dbe:	f000 f863 	bl	8003e88 <write_flag_init>
	write_all_flags();
 8003dc2:	f000 f82f 	bl	8003e24 <write_all_flags>
	Bootloader_FlashEnd();
 8003dc6:	f7ff fd6f 	bl	80038a8 <Bootloader_FlashEnd>
}
 8003dca:	bf00      	nop
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	20000144 	.word	0x20000144

08003dd8 <update_all_flag>:
void update_all_flag()
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
	//all_flags_temp[32];

		write_flag_init();
 8003ddc:	f000 f854 	bl	8003e88 <write_flag_init>
		write_all_flags();
 8003de0:	f000 f820 	bl	8003e24 <write_all_flags>
		Bootloader_FlashEnd();
 8003de4:	f7ff fd60 	bl	80038a8 <Bootloader_FlashEnd>
}
 8003de8:	bf00      	nop
 8003dea:	bd80      	pop	{r7, pc}

08003dec <read_all_flags>:
void read_all_flags()
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
//	   ESP_FW_VER_TEMP 		= Read_Flag(ESP_FW_VER);
//	   ESP_FW_UPGRAD_TEMP 	= Read_Flag(ESP_FW_UPGRAD);
//	   ESP_RUNNING_VER_TEMP = Read_Flag(ESP_RUNNING_VER);
//	   ESP_ROLLBACK_TEMP 	= Read_Flag(ESP_ROLLBACK);

	for(int i =0 ; i<32 ; i++)
 8003df2:	2300      	movs	r3, #0
 8003df4:	607b      	str	r3, [r7, #4]
 8003df6:	e00c      	b.n	8003e12 <read_all_flags+0x26>
	{

		all_flags[i] = Read_Flag(i);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff fd59 	bl	80038b4 <Read_Flag>
 8003e02:	4601      	mov	r1, r0
 8003e04:	4a06      	ldr	r2, [pc, #24]	; (8003e20 <read_all_flags+0x34>)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i =0 ; i<32 ; i++)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	607b      	str	r3, [r7, #4]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2b1f      	cmp	r3, #31
 8003e16:	ddef      	ble.n	8003df8 <read_all_flags+0xc>
	}


}
 8003e18:	bf00      	nop
 8003e1a:	3708      	adds	r7, #8
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	20000144 	.word	0x20000144

08003e24 <write_all_flags>:
void write_all_flags()
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b0a2      	sub	sp, #136	; 0x88
 8003e28:	af00      	add	r7, sp, #0
//		Write_Flag(ESP_ROLLBACK,ESP_ROLLBACK_TEMP);


	uint32_t all_flag_temp[32];

	Buffercpy(all_flags ,all_flag_temp, 32 );
 8003e2a:	1d3b      	adds	r3, r7, #4
 8003e2c:	2220      	movs	r2, #32
 8003e2e:	4619      	mov	r1, r3
 8003e30:	4814      	ldr	r0, [pc, #80]	; (8003e84 <write_all_flags+0x60>)
 8003e32:	f000 fc6f 	bl	8004714 <Buffercpy>

	for(int i =0 ; i<32 ; i++)
 8003e36:	2300      	movs	r3, #0
 8003e38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e3c:	e012      	b.n	8003e64 <write_all_flags+0x40>
	{
		Write_Flag(i,all_flags[i]);
 8003e3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e42:	b2d8      	uxtb	r0, r3
 8003e44:	4a0f      	ldr	r2, [pc, #60]	; (8003e84 <write_all_flags+0x60>)
 8003e46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e4e:	4619      	mov	r1, r3
 8003e50:	f7ff fcda 	bl	8003808 <Write_Flag>
		HAL_Delay(1);
 8003e54:	2001      	movs	r0, #1
 8003e56:	f7fc fc3f 	bl	80006d8 <HAL_Delay>
	for(int i =0 ; i<32 ; i++)
 8003e5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e5e:	3301      	adds	r3, #1
 8003e60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e68:	2b1f      	cmp	r3, #31
 8003e6a:	dde8      	ble.n	8003e3e <write_all_flags+0x1a>
	}
	read_all_flags();
 8003e6c:	f7ff ffbe 	bl	8003dec <read_all_flags>

	if(Buffercmp32(all_flag_temp , all_flags, 32))
 8003e70:	1d3b      	adds	r3, r7, #4
 8003e72:	2220      	movs	r2, #32
 8003e74:	4903      	ldr	r1, [pc, #12]	; (8003e84 <write_all_flags+0x60>)
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 fc2a 	bl	80046d0 <Buffercmp32>
	{
		//uart_transmit_str((uint8_t*)"Failed.... \n\r");

	}

}
 8003e7c:	bf00      	nop
 8003e7e:	3788      	adds	r7, #136	; 0x88
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	20000144 	.word	0x20000144

08003e88 <write_flag_init>:
void write_flag_init()
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
	Bootloader_Init(); /* to clear system flags  */
 8003e8e:	f7ff fc17 	bl	80036c0 <Bootloader_Init>
	int return_val = Flag_Erase_All();
 8003e92:	f7ff fc47 	bl	8003724 <Flag_Erase_All>
 8003e96:	4603      	mov	r3, r0
 8003e98:	607b      	str	r3, [r7, #4]
	}
	else
	{
		//uart_transmit_str((uint8_t*)"Flash Erase Successful.... \n\r");
	}
	Bootloader_FlashBegin();
 8003e9a:	f7ff fca7 	bl	80037ec <Bootloader_FlashBegin>
}
 8003e9e:	bf00      	nop
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <boot_pins_read>:
int boot_pins_read()
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b086      	sub	sp, #24
 8003eaa:	af00      	add	r7, sp, #0
int boot_0 = 1;
 8003eac:	2301      	movs	r3, #1
 8003eae:	617b      	str	r3, [r7, #20]
int boot_1 = 1;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	613b      	str	r3, [r7, #16]
int boot_value = 3;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	60fb      	str	r3, [r7, #12]

_Bool boot0_1 = HAL_GPIO_ReadPin(Boot_button_port, Boot_button_0);
 8003eb8:	2101      	movs	r1, #1
 8003eba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ebe:	f7fd f957 	bl	8001170 <HAL_GPIO_ReadPin>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	bf14      	ite	ne
 8003ec8:	2301      	movne	r3, #1
 8003eca:	2300      	moveq	r3, #0
 8003ecc:	72fb      	strb	r3, [r7, #11]
_Bool boot1_1 = HAL_GPIO_ReadPin(Boot_button_port, Boot_button_1);
 8003ece:	2102      	movs	r1, #2
 8003ed0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ed4:	f7fd f94c 	bl	8001170 <HAL_GPIO_ReadPin>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	bf14      	ite	ne
 8003ede:	2301      	movne	r3, #1
 8003ee0:	2300      	moveq	r3, #0
 8003ee2:	72bb      	strb	r3, [r7, #10]
	HAL_Delay(1);
 8003ee4:	2001      	movs	r0, #1
 8003ee6:	f7fc fbf7 	bl	80006d8 <HAL_Delay>
_Bool boot0_2 = HAL_GPIO_ReadPin(Boot_button_port, Boot_button_0);
 8003eea:	2101      	movs	r1, #1
 8003eec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ef0:	f7fd f93e 	bl	8001170 <HAL_GPIO_ReadPin>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	bf14      	ite	ne
 8003efa:	2301      	movne	r3, #1
 8003efc:	2300      	moveq	r3, #0
 8003efe:	727b      	strb	r3, [r7, #9]
_Bool boot1_2 = HAL_GPIO_ReadPin(Boot_button_port, Boot_button_1);
 8003f00:	2102      	movs	r1, #2
 8003f02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f06:	f7fd f933 	bl	8001170 <HAL_GPIO_ReadPin>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	bf14      	ite	ne
 8003f10:	2301      	movne	r3, #1
 8003f12:	2300      	moveq	r3, #0
 8003f14:	723b      	strb	r3, [r7, #8]
	HAL_Delay(1);
 8003f16:	2001      	movs	r0, #1
 8003f18:	f7fc fbde 	bl	80006d8 <HAL_Delay>
_Bool boot0_3 = HAL_GPIO_ReadPin(Boot_button_port, Boot_button_0);
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f22:	f7fd f925 	bl	8001170 <HAL_GPIO_ReadPin>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	bf14      	ite	ne
 8003f2c:	2301      	movne	r3, #1
 8003f2e:	2300      	moveq	r3, #0
 8003f30:	71fb      	strb	r3, [r7, #7]
_Bool boot1_3 = HAL_GPIO_ReadPin(Boot_button_port, Boot_button_1);
 8003f32:	2102      	movs	r1, #2
 8003f34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f38:	f7fd f91a 	bl	8001170 <HAL_GPIO_ReadPin>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	bf14      	ite	ne
 8003f42:	2301      	movne	r3, #1
 8003f44:	2300      	moveq	r3, #0
 8003f46:	71bb      	strb	r3, [r7, #6]
	HAL_Delay(1);
 8003f48:	2001      	movs	r0, #1
 8003f4a:	f7fc fbc5 	bl	80006d8 <HAL_Delay>
_Bool boot0_4 = HAL_GPIO_ReadPin(Boot_button_port, Boot_button_0);
 8003f4e:	2101      	movs	r1, #1
 8003f50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f54:	f7fd f90c 	bl	8001170 <HAL_GPIO_ReadPin>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	bf14      	ite	ne
 8003f5e:	2301      	movne	r3, #1
 8003f60:	2300      	moveq	r3, #0
 8003f62:	717b      	strb	r3, [r7, #5]
_Bool boot1_4 = HAL_GPIO_ReadPin(Boot_button_port, Boot_button_1);
 8003f64:	2102      	movs	r1, #2
 8003f66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f6a:	f7fd f901 	bl	8001170 <HAL_GPIO_ReadPin>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	bf14      	ite	ne
 8003f74:	2301      	movne	r3, #1
 8003f76:	2300      	moveq	r3, #0
 8003f78:	713b      	strb	r3, [r7, #4]
	HAL_Delay(1);
 8003f7a:	2001      	movs	r0, #1
 8003f7c:	f7fc fbac 	bl	80006d8 <HAL_Delay>


if(boot0_1 && boot0_2 && boot0_3 && boot0_4)
 8003f80:	7afb      	ldrb	r3, [r7, #11]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00b      	beq.n	8003f9e <boot_pins_read+0xf8>
 8003f86:	7a7b      	ldrb	r3, [r7, #9]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d008      	beq.n	8003f9e <boot_pins_read+0xf8>
 8003f8c:	79fb      	ldrb	r3, [r7, #7]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d005      	beq.n	8003f9e <boot_pins_read+0xf8>
 8003f92:	797b      	ldrb	r3, [r7, #5]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d002      	beq.n	8003f9e <boot_pins_read+0xf8>
	{
	boot_0 = 1;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	617b      	str	r3, [r7, #20]
 8003f9c:	e01c      	b.n	8003fd8 <boot_pins_read+0x132>
	}else if (!boot0_1 && !boot0_2 && !boot0_3 && !boot0_4)
 8003f9e:	7afb      	ldrb	r3, [r7, #11]
 8003fa0:	f083 0301 	eor.w	r3, r3, #1
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d014      	beq.n	8003fd4 <boot_pins_read+0x12e>
 8003faa:	7a7b      	ldrb	r3, [r7, #9]
 8003fac:	f083 0301 	eor.w	r3, r3, #1
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00e      	beq.n	8003fd4 <boot_pins_read+0x12e>
 8003fb6:	79fb      	ldrb	r3, [r7, #7]
 8003fb8:	f083 0301 	eor.w	r3, r3, #1
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d008      	beq.n	8003fd4 <boot_pins_read+0x12e>
 8003fc2:	797b      	ldrb	r3, [r7, #5]
 8003fc4:	f083 0301 	eor.w	r3, r3, #1
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d002      	beq.n	8003fd4 <boot_pins_read+0x12e>
	{
		boot_0 = 0;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	617b      	str	r3, [r7, #20]
 8003fd2:	e001      	b.n	8003fd8 <boot_pins_read+0x132>
	}else{
		boot_0 = 2;
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	617b      	str	r3, [r7, #20]
	}
if(boot1_1 && boot1_2 && boot1_3 && boot1_4)
 8003fd8:	7abb      	ldrb	r3, [r7, #10]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00b      	beq.n	8003ff6 <boot_pins_read+0x150>
 8003fde:	7a3b      	ldrb	r3, [r7, #8]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d008      	beq.n	8003ff6 <boot_pins_read+0x150>
 8003fe4:	79bb      	ldrb	r3, [r7, #6]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d005      	beq.n	8003ff6 <boot_pins_read+0x150>
 8003fea:	793b      	ldrb	r3, [r7, #4]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d002      	beq.n	8003ff6 <boot_pins_read+0x150>
	{
	boot_1 = 1;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	613b      	str	r3, [r7, #16]
 8003ff4:	e01c      	b.n	8004030 <boot_pins_read+0x18a>
	}else if (!boot1_1 && !boot1_2 && !boot1_3 && !boot1_4)
 8003ff6:	7abb      	ldrb	r3, [r7, #10]
 8003ff8:	f083 0301 	eor.w	r3, r3, #1
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d014      	beq.n	800402c <boot_pins_read+0x186>
 8004002:	7a3b      	ldrb	r3, [r7, #8]
 8004004:	f083 0301 	eor.w	r3, r3, #1
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00e      	beq.n	800402c <boot_pins_read+0x186>
 800400e:	79bb      	ldrb	r3, [r7, #6]
 8004010:	f083 0301 	eor.w	r3, r3, #1
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d008      	beq.n	800402c <boot_pins_read+0x186>
 800401a:	793b      	ldrb	r3, [r7, #4]
 800401c:	f083 0301 	eor.w	r3, r3, #1
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d002      	beq.n	800402c <boot_pins_read+0x186>
	{
		boot_1 = 0;
 8004026:	2300      	movs	r3, #0
 8004028:	613b      	str	r3, [r7, #16]
 800402a:	e001      	b.n	8004030 <boot_pins_read+0x18a>
	}else
	{
		boot_1 = 2;
 800402c:	2302      	movs	r3, #2
 800402e:	613b      	str	r3, [r7, #16]
	}
if((boot_0 < 2) && (boot_1 < 2) )
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	2b01      	cmp	r3, #1
 8004034:	dc08      	bgt.n	8004048 <boot_pins_read+0x1a2>
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	2b01      	cmp	r3, #1
 800403a:	dc05      	bgt.n	8004048 <boot_pins_read+0x1a2>
	{
	 boot_value = boot_0 *2 + boot_1;
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	005b      	lsls	r3, r3, #1
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	4413      	add	r3, r2
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	e001      	b.n	800404c <boot_pins_read+0x1a6>
	}else
	{
		boot_value = 3;
 8004048:	2303      	movs	r3, #3
 800404a:	60fb      	str	r3, [r7, #12]
	}
return boot_value;
 800404c:	68fb      	ldr	r3, [r7, #12]
}
 800404e:	4618      	mov	r0, r3
 8004050:	3718      	adds	r7, #24
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
	...

08004058 <uart_debug>:
int uart_debug()
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b0be      	sub	sp, #248	; 0xf8
 800405c:	af00      	add	r7, sp, #0
	unsigned char rx_buffer[50];
	unsigned char rx_flag_address_buffer[50];
	unsigned char rx_data_buffer[50];
	unsigned char cmd_0[3]={'B','M','F'};
 800405e:	4ace      	ldr	r2, [pc, #824]	; (8004398 <uart_debug+0x340>)
 8004060:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004064:	6812      	ldr	r2, [r2, #0]
 8004066:	4611      	mov	r1, r2
 8004068:	8019      	strh	r1, [r3, #0]
 800406a:	3302      	adds	r3, #2
 800406c:	0c12      	lsrs	r2, r2, #16
 800406e:	701a      	strb	r2, [r3, #0]
	unsigned char cmd_1[3]={'B','F','F'};
 8004070:	4aca      	ldr	r2, [pc, #808]	; (800439c <uart_debug+0x344>)
 8004072:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004076:	6812      	ldr	r2, [r2, #0]
 8004078:	4611      	mov	r1, r2
 800407a:	8019      	strh	r1, [r3, #0]
 800407c:	3302      	adds	r3, #2
 800407e:	0c12      	lsrs	r2, r2, #16
 8004080:	701a      	strb	r2, [r3, #0]
	unsigned char cmd_2[3]={'R','B','M'};
 8004082:	4ac7      	ldr	r2, [pc, #796]	; (80043a0 <uart_debug+0x348>)
 8004084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004088:	6812      	ldr	r2, [r2, #0]
 800408a:	4611      	mov	r1, r2
 800408c:	8019      	strh	r1, [r3, #0]
 800408e:	3302      	adds	r3, #2
 8004090:	0c12      	lsrs	r2, r2, #16
 8004092:	701a      	strb	r2, [r3, #0]
	unsigned char cmd_3[3]={'R','F','L'};
 8004094:	4ac3      	ldr	r2, [pc, #780]	; (80043a4 <uart_debug+0x34c>)
 8004096:	f107 0320 	add.w	r3, r7, #32
 800409a:	6812      	ldr	r2, [r2, #0]
 800409c:	4611      	mov	r1, r2
 800409e:	8019      	strh	r1, [r3, #0]
 80040a0:	3302      	adds	r3, #2
 80040a2:	0c12      	lsrs	r2, r2, #16
 80040a4:	701a      	strb	r2, [r3, #0]
	unsigned char cmd_4[3]={'W','F','L'};
 80040a6:	4ac0      	ldr	r2, [pc, #768]	; (80043a8 <uart_debug+0x350>)
 80040a8:	f107 031c 	add.w	r3, r7, #28
 80040ac:	6812      	ldr	r2, [r2, #0]
 80040ae:	4611      	mov	r1, r2
 80040b0:	8019      	strh	r1, [r3, #0]
 80040b2:	3302      	adds	r3, #2
 80040b4:	0c12      	lsrs	r2, r2, #16
 80040b6:	701a      	strb	r2, [r3, #0]
	unsigned char cmd_5[4]={'H','E','L','P'};
 80040b8:	4bbc      	ldr	r3, [pc, #752]	; (80043ac <uart_debug+0x354>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	61bb      	str	r3, [r7, #24]
	unsigned char cmd_6[3]={'C','L','F'};
 80040be:	4abc      	ldr	r2, [pc, #752]	; (80043b0 <uart_debug+0x358>)
 80040c0:	f107 0314 	add.w	r3, r7, #20
 80040c4:	6812      	ldr	r2, [r2, #0]
 80040c6:	4611      	mov	r1, r2
 80040c8:	8019      	strh	r1, [r3, #0]
 80040ca:	3302      	adds	r3, #2
 80040cc:	0c12      	lsrs	r2, r2, #16
 80040ce:	701a      	strb	r2, [r3, #0]
	unsigned char cmd_7[3]={'R','B','T'};
 80040d0:	4ab8      	ldr	r2, [pc, #736]	; (80043b4 <uart_debug+0x35c>)
 80040d2:	f107 0310 	add.w	r3, r7, #16
 80040d6:	6812      	ldr	r2, [r2, #0]
 80040d8:	4611      	mov	r1, r2
 80040da:	8019      	strh	r1, [r3, #0]
 80040dc:	3302      	adds	r3, #2
 80040de:	0c12      	lsrs	r2, r2, #16
 80040e0:	701a      	strb	r2, [r3, #0]
	unsigned char cmd_8[4]={'B','O','O','T'};
 80040e2:	4bb5      	ldr	r3, [pc, #724]	; (80043b8 <uart_debug+0x360>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	60fb      	str	r3, [r7, #12]

	int uart_debug_flag = 0;
 80040e8:	2300      	movs	r3, #0
 80040ea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

	uart_transmit_str((uint8_t*)"Waiting for command");
 80040ee:	48b3      	ldr	r0, [pc, #716]	; (80043bc <uart_debug+0x364>)
 80040f0:	f7ff fbfa 	bl	80038e8 <uart_transmit_str>
	uart_debug_flag = boot_uart_read((uint8_t*)rx_buffer);
 80040f4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80040f8:	4618      	mov	r0, r3
 80040fa:	f000 fa57 	bl	80045ac <boot_uart_read>
 80040fe:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
	if(uart_debug_flag == 1)
 8004102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004106:	2b01      	cmp	r3, #1
 8004108:	d106      	bne.n	8004118 <uart_debug+0xc0>
	{
		//uart_debug_flag =1
		uart_debug_flag =1;
 800410a:	2301      	movs	r3, #1
 800410c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		Boot_MFW_Flag = 0;
 8004110:	4bab      	ldr	r3, [pc, #684]	; (80043c0 <uart_debug+0x368>)
 8004112:	2200      	movs	r2, #0
 8004114:	701a      	strb	r2, [r3, #0]
 8004116:	e221      	b.n	800455c <uart_debug+0x504>
	}else if(Buffercmp((uint8_t*)cmd_0,(uint8_t*)rx_buffer,3))
 8004118:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800411c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004120:	2203      	movs	r2, #3
 8004122:	4618      	mov	r0, r3
 8004124:	f000 fab2 	bl	800468c <Buffercmp>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d009      	beq.n	8004142 <uart_debug+0xea>
	  {
		  uart_transmit_str((uint8_t*)"\n\r Received BMF.......\n\r");
 800412e:	48a5      	ldr	r0, [pc, #660]	; (80043c4 <uart_debug+0x36c>)
 8004130:	f7ff fbda 	bl	80038e8 <uart_transmit_str>
		  Boot_MFW_Flag = 1; // Boot main firmware.
 8004134:	4ba2      	ldr	r3, [pc, #648]	; (80043c0 <uart_debug+0x368>)
 8004136:	2201      	movs	r2, #1
 8004138:	701a      	strb	r2, [r3, #0]
		  uart_debug_flag =  1 ;
 800413a:	2301      	movs	r3, #1
 800413c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004140:	e20c      	b.n	800455c <uart_debug+0x504>
	  }else if(Buffercmp((uint8_t*)cmd_1,(uint8_t*)rx_buffer,3))
 8004142:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8004146:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800414a:	2203      	movs	r2, #3
 800414c:	4618      	mov	r0, r3
 800414e:	f000 fa9d 	bl	800468c <Buffercmp>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d009      	beq.n	800416c <uart_debug+0x114>
	  {
		  uart_transmit_str((uint8_t*)"\n\r Received BFF.......\n\r");
 8004158:	489b      	ldr	r0, [pc, #620]	; (80043c8 <uart_debug+0x370>)
 800415a:	f7ff fbc5 	bl	80038e8 <uart_transmit_str>
		  Boot_FFW_Flag = 1; // Boot Factory firmware.
 800415e:	4b9b      	ldr	r3, [pc, #620]	; (80043cc <uart_debug+0x374>)
 8004160:	2201      	movs	r2, #1
 8004162:	701a      	strb	r2, [r3, #0]
		  uart_debug_flag =  1;
 8004164:	2301      	movs	r3, #1
 8004166:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800416a:	e1f7      	b.n	800455c <uart_debug+0x504>

	  }else if(Buffercmp((uint8_t*)cmd_2,(uint8_t*)rx_buffer,3))
 800416c:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8004170:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004174:	2203      	movs	r2, #3
 8004176:	4618      	mov	r0, r3
 8004178:	f000 fa88 	bl	800468c <Buffercmp>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d009      	beq.n	8004196 <uart_debug+0x13e>
	  {
		  uart_transmit_str((uint8_t*)"\n\r Received RBM.......\n\r");
 8004182:	4893      	ldr	r0, [pc, #588]	; (80043d0 <uart_debug+0x378>)
 8004184:	f7ff fbb0 	bl	80038e8 <uart_transmit_str>
		  Boot_RB_MFW_Flag = 1; // Rollback main firmware.
 8004188:	4b92      	ldr	r3, [pc, #584]	; (80043d4 <uart_debug+0x37c>)
 800418a:	2201      	movs	r2, #1
 800418c:	701a      	strb	r2, [r3, #0]

		  uart_debug_flag = 1;
 800418e:	2301      	movs	r3, #1
 8004190:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004194:	e1e2      	b.n	800455c <uart_debug+0x504>

	  }else if(Buffercmp((uint8_t*)cmd_3,(uint8_t*)rx_buffer,3))
 8004196:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800419a:	f107 0320 	add.w	r3, r7, #32
 800419e:	2203      	movs	r2, #3
 80041a0:	4618      	mov	r0, r3
 80041a2:	f000 fa73 	bl	800468c <Buffercmp>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d075      	beq.n	8004298 <uart_debug+0x240>
	  {
			for(int j =0; j<= 50 ; j++)
 80041ac:	2300      	movs	r3, #0
 80041ae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80041b2:	e00b      	b.n	80041cc <uart_debug+0x174>
			{
				rx_flag_address_buffer[j] = '\0';
 80041b4:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80041b8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80041bc:	4413      	add	r3, r2
 80041be:	2200      	movs	r2, #0
 80041c0:	701a      	strb	r2, [r3, #0]
			for(int j =0; j<= 50 ; j++)
 80041c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80041c6:	3301      	adds	r3, #1
 80041c8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80041cc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80041d0:	2b32      	cmp	r3, #50	; 0x32
 80041d2:	ddef      	ble.n	80041b4 <uart_debug+0x15c>

			}
		  uart_transmit_str((uint8_t*)"\n\r Received RFL.......\n\r");
 80041d4:	4880      	ldr	r0, [pc, #512]	; (80043d8 <uart_debug+0x380>)
 80041d6:	f7ff fb87 	bl	80038e8 <uart_transmit_str>
		  uart_transmit_str((uint8_t*)"\n\rEnter the 2 digit flag address(00 - 13)");
 80041da:	4880      	ldr	r0, [pc, #512]	; (80043dc <uart_debug+0x384>)
 80041dc:	f7ff fb84 	bl	80038e8 <uart_transmit_str>
		  boot_uart_read((uint8_t*)rx_flag_address_buffer);
 80041e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80041e4:	4618      	mov	r0, r3
 80041e6:	f000 f9e1 	bl	80045ac <boot_uart_read>




		  /* Calculate the length. */
		  uint8_t result_address = 0;
 80041ea:	2300      	movs	r3, #0
 80041ec:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
		  uint32_t result = 0;
 80041f0:	2300      	movs	r3, #0
 80041f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		  for (int i=0; i<2;i++)
 80041f6:	2300      	movs	r3, #0
 80041f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80041fc:	e016      	b.n	800422c <uart_debug+0x1d4>
		  {
			  result_address=(result_address*10)+(rx_flag_address_buffer[i]-'0');
 80041fe:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8004202:	461a      	mov	r2, r3
 8004204:	0092      	lsls	r2, r2, #2
 8004206:	4413      	add	r3, r2
 8004208:	005b      	lsls	r3, r3, #1
 800420a:	b2da      	uxtb	r2, r3
 800420c:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8004210:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004214:	440b      	add	r3, r1
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	4413      	add	r3, r2
 800421a:	b2db      	uxtb	r3, r3
 800421c:	3b30      	subs	r3, #48	; 0x30
 800421e:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
		  for (int i=0; i<2;i++)
 8004222:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004226:	3301      	adds	r3, #1
 8004228:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800422c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004230:	2b01      	cmp	r3, #1
 8004232:	dde4      	ble.n	80041fe <uart_debug+0x1a6>
		 // read_all_flags();
		 // uart_transmit_str(all_flags[(uint8_t)rx_flag_address_buffer]);
		 // uint32_t result = rx_flag_address_buffer - '0';
		//  uint8_t result =  5 ;//(uint8_t*)rx_flag_address_buffer - 48 ;
		  //uint8_t address = (ui)
		  if((result_address >= 0) && (result_address < 14))
 8004234:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8004238:	2b0d      	cmp	r3, #13
 800423a:	d826      	bhi.n	800428a <uart_debug+0x232>
		  {
			  char buffer[10];
			 // uart_transmit_str((uint8_t*)" valid address ");
			  uart_transmit_str((uint8_t*)"\n\r Flag value at  ");
 800423c:	4868      	ldr	r0, [pc, #416]	; (80043e0 <uart_debug+0x388>)
 800423e:	f7ff fb53 	bl	80038e8 <uart_transmit_str>
			  sprintf(buffer, "0%d", result_address);
 8004242:	f897 20ef 	ldrb.w	r2, [r7, #239]	; 0xef
 8004246:	463b      	mov	r3, r7
 8004248:	4966      	ldr	r1, [pc, #408]	; (80043e4 <uart_debug+0x38c>)
 800424a:	4618      	mov	r0, r3
 800424c:	f000 fd58 	bl	8004d00 <siprintf>
			  uart_transmit_str((uint8_t*)buffer);
 8004250:	463b      	mov	r3, r7
 8004252:	4618      	mov	r0, r3
 8004254:	f7ff fb48 	bl	80038e8 <uart_transmit_str>
			 // uart_transmit_str(rx_flag_address_buffer -1);
			  uart_transmit_str((uint8_t*)" is  : ");
 8004258:	4863      	ldr	r0, [pc, #396]	; (80043e8 <uart_debug+0x390>)
 800425a:	f7ff fb45 	bl	80038e8 <uart_transmit_str>
			  result = Read_Flag(result_address);
 800425e:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8004262:	4618      	mov	r0, r3
 8004264:	f7ff fb26 	bl	80038b4 <Read_Flag>
 8004268:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

			  sprintf(buffer, "0%d", result);
 800426c:	463b      	mov	r3, r7
 800426e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8004272:	495c      	ldr	r1, [pc, #368]	; (80043e4 <uart_debug+0x38c>)
 8004274:	4618      	mov	r0, r3
 8004276:	f000 fd43 	bl	8004d00 <siprintf>
			  uart_transmit_str((uint8_t*)buffer);
 800427a:	463b      	mov	r3, r7
 800427c:	4618      	mov	r0, r3
 800427e:	f7ff fb33 	bl	80038e8 <uart_transmit_str>
			  uart_transmit_str((uint8_t*)"\n\r");
 8004282:	485a      	ldr	r0, [pc, #360]	; (80043ec <uart_debug+0x394>)
 8004284:	f7ff fb30 	bl	80038e8 <uart_transmit_str>
 8004288:	e002      	b.n	8004290 <uart_debug+0x238>
		  }else{
			  uart_transmit_str((uint8_t*)"\n\r Invalid address !!\n\r");
 800428a:	4859      	ldr	r0, [pc, #356]	; (80043f0 <uart_debug+0x398>)
 800428c:	f7ff fb2c 	bl	80038e8 <uart_transmit_str>
//-------------------------------------------------------------------------------



		  //goto label1;
		  uart_debug_flag = 0;
 8004290:	2300      	movs	r3, #0
 8004292:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004296:	e161      	b.n	800455c <uart_debug+0x504>

	  }else if(Buffercmp((uint8_t*)cmd_4,(uint8_t*)rx_buffer,3))
 8004298:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800429c:	f107 031c 	add.w	r3, r7, #28
 80042a0:	2203      	movs	r2, #3
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 f9f2 	bl	800468c <Buffercmp>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f000 80e0 	beq.w	8004470 <uart_debug+0x418>
	  {
			for(int j =0; j<= 50 ; j++)
 80042b0:	2300      	movs	r3, #0
 80042b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80042b6:	e00b      	b.n	80042d0 <uart_debug+0x278>
			{
				rx_flag_address_buffer[j] = '\0';
 80042b8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80042bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042c0:	4413      	add	r3, r2
 80042c2:	2200      	movs	r2, #0
 80042c4:	701a      	strb	r2, [r3, #0]
			for(int j =0; j<= 50 ; j++)
 80042c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ca:	3301      	adds	r3, #1
 80042cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80042d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042d4:	2b32      	cmp	r3, #50	; 0x32
 80042d6:	ddef      	ble.n	80042b8 <uart_debug+0x260>

			}
			for(int j =0; j<= 50 ; j++)
 80042d8:	2300      	movs	r3, #0
 80042da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80042de:	e00b      	b.n	80042f8 <uart_debug+0x2a0>
			{
				rx_data_buffer[j] = '\0';
 80042e0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80042e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042e8:	4413      	add	r3, r2
 80042ea:	2200      	movs	r2, #0
 80042ec:	701a      	strb	r2, [r3, #0]
			for(int j =0; j<= 50 ; j++)
 80042ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042f2:	3301      	adds	r3, #1
 80042f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80042f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042fc:	2b32      	cmp	r3, #50	; 0x32
 80042fe:	ddef      	ble.n	80042e0 <uart_debug+0x288>

			}
		  uart_transmit_str((uint8_t*)"\n\r Received WFL.......\n\r");
 8004300:	483c      	ldr	r0, [pc, #240]	; (80043f4 <uart_debug+0x39c>)
 8004302:	f7ff faf1 	bl	80038e8 <uart_transmit_str>
		  uart_transmit_str((uint8_t*)"Enter the 2 digit flag address(00-13)");
 8004306:	483c      	ldr	r0, [pc, #240]	; (80043f8 <uart_debug+0x3a0>)
 8004308:	f7ff faee 	bl	80038e8 <uart_transmit_str>
		  boot_uart_read((uint8_t*)rx_flag_address_buffer);
 800430c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004310:	4618      	mov	r0, r3
 8004312:	f000 f94b 	bl	80045ac <boot_uart_read>
		  uart_transmit_str((uint8_t*)"\n\r Received address :");
 8004316:	4839      	ldr	r0, [pc, #228]	; (80043fc <uart_debug+0x3a4>)
 8004318:	f7ff fae6 	bl	80038e8 <uart_transmit_str>
		  uart_transmit_str(rx_flag_address_buffer);
 800431c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004320:	4618      	mov	r0, r3
 8004322:	f7ff fae1 	bl	80038e8 <uart_transmit_str>
		  uart_transmit_str((uint8_t*)"\n\rEnter the 2 digit flag value(00-09)");
 8004326:	4836      	ldr	r0, [pc, #216]	; (8004400 <uart_debug+0x3a8>)
 8004328:	f7ff fade 	bl	80038e8 <uart_transmit_str>
		  boot_uart_read((uint8_t*)rx_data_buffer);
 800432c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004330:	4618      	mov	r0, r3
 8004332:	f000 f93b 	bl	80045ac <boot_uart_read>
		  uart_transmit_str((uint8_t*)"\n\r Received data :");
 8004336:	4833      	ldr	r0, [pc, #204]	; (8004404 <uart_debug+0x3ac>)
 8004338:	f7ff fad6 	bl	80038e8 <uart_transmit_str>
		  uart_transmit_str(rx_data_buffer);
 800433c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004340:	4618      	mov	r0, r3
 8004342:	f7ff fad1 	bl	80038e8 <uart_transmit_str>


		  uint8_t flag_address = 0;
 8004346:	2300      	movs	r3, #0
 8004348:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
		  uint32_t flag_data = 0;
 800434c:	2300      	movs	r3, #0
 800434e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		  for (int i=0; i<2;i++)
 8004352:	2300      	movs	r3, #0
 8004354:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004358:	e016      	b.n	8004388 <uart_debug+0x330>
		  {
			  flag_address=(flag_address*10)+(rx_flag_address_buffer[i]-'0');
 800435a:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 800435e:	461a      	mov	r2, r3
 8004360:	0092      	lsls	r2, r2, #2
 8004362:	4413      	add	r3, r2
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	b2da      	uxtb	r2, r3
 8004368:	f107 0164 	add.w	r1, r7, #100	; 0x64
 800436c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004370:	440b      	add	r3, r1
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	4413      	add	r3, r2
 8004376:	b2db      	uxtb	r3, r3
 8004378:	3b30      	subs	r3, #48	; 0x30
 800437a:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
		  for (int i=0; i<2;i++)
 800437e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004382:	3301      	adds	r3, #1
 8004384:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004388:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800438c:	2b01      	cmp	r3, #1
 800438e:	dde4      	ble.n	800435a <uart_debug+0x302>
		  }
		  for (int i=0; i<2;i++)
 8004390:	2300      	movs	r3, #0
 8004392:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004396:	e04d      	b.n	8004434 <uart_debug+0x3dc>
 8004398:	08005d6c 	.word	0x08005d6c
 800439c:	08005d70 	.word	0x08005d70
 80043a0:	08005d74 	.word	0x08005d74
 80043a4:	08005d78 	.word	0x08005d78
 80043a8:	08005d7c 	.word	0x08005d7c
 80043ac:	08005d80 	.word	0x08005d80
 80043b0:	08005d84 	.word	0x08005d84
 80043b4:	08005d88 	.word	0x08005d88
 80043b8:	08005d8c 	.word	0x08005d8c
 80043bc:	080059ec 	.word	0x080059ec
 80043c0:	200000c0 	.word	0x200000c0
 80043c4:	08005a00 	.word	0x08005a00
 80043c8:	08005a1c 	.word	0x08005a1c
 80043cc:	200001c5 	.word	0x200001c5
 80043d0:	08005a38 	.word	0x08005a38
 80043d4:	200001c4 	.word	0x200001c4
 80043d8:	08005a54 	.word	0x08005a54
 80043dc:	08005a70 	.word	0x08005a70
 80043e0:	08005a9c 	.word	0x08005a9c
 80043e4:	08005ab0 	.word	0x08005ab0
 80043e8:	08005ab4 	.word	0x08005ab4
 80043ec:	08005abc 	.word	0x08005abc
 80043f0:	08005ac0 	.word	0x08005ac0
 80043f4:	08005ad8 	.word	0x08005ad8
 80043f8:	08005af4 	.word	0x08005af4
 80043fc:	08005b1c 	.word	0x08005b1c
 8004400:	08005b34 	.word	0x08005b34
 8004404:	08005b5c 	.word	0x08005b5c
			  {
			  flag_data=(flag_data*10)+(rx_data_buffer[i]-'0');
 8004408:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800440c:	4613      	mov	r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	4413      	add	r3, r2
 8004412:	005b      	lsls	r3, r3, #1
 8004414:	4619      	mov	r1, r3
 8004416:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800441a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800441e:	4413      	add	r3, r2
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	440b      	add	r3, r1
 8004424:	3b30      	subs	r3, #48	; 0x30
 8004426:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		  for (int i=0; i<2;i++)
 800442a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800442e:	3301      	adds	r3, #1
 8004430:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004434:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004438:	2b01      	cmp	r3, #1
 800443a:	dde5      	ble.n	8004408 <uart_debug+0x3b0>
			  }
		  if((flag_address >= 0) && (flag_address <= 13) && (flag_data >= 0) && (flag_data <= 9))
 800443c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8004440:	2b0d      	cmp	r3, #13
 8004442:	d80e      	bhi.n	8004462 <uart_debug+0x40a>
 8004444:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004448:	2b09      	cmp	r3, #9
 800444a:	d80a      	bhi.n	8004462 <uart_debug+0x40a>
		  {
		  update_flag(flag_address, flag_data);
 800444c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8004450:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8004454:	4618      	mov	r0, r3
 8004456:	f7ff fc81 	bl	8003d5c <update_flag>
		  uart_transmit_str((uint8_t*)"\n\r Flag updated !!\n\r");
 800445a:	4843      	ldr	r0, [pc, #268]	; (8004568 <uart_debug+0x510>)
 800445c:	f7ff fa44 	bl	80038e8 <uart_transmit_str>
 8004460:	e002      	b.n	8004468 <uart_debug+0x410>
		  }else
		  {
			  uart_transmit_str((uint8_t*)"\n\r Invalid address or data !!\n\r");
 8004462:	4842      	ldr	r0, [pc, #264]	; (800456c <uart_debug+0x514>)
 8004464:	f7ff fa40 	bl	80038e8 <uart_transmit_str>

		  }
		  //goto label1;
		  uart_debug_flag = 0;
 8004468:	2300      	movs	r3, #0
 800446a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800446e:	e075      	b.n	800455c <uart_debug+0x504>

	  }else if(Buffercmp((uint8_t*)cmd_5,(uint8_t*)rx_buffer,4))
 8004470:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8004474:	f107 0318 	add.w	r3, r7, #24
 8004478:	2204      	movs	r2, #4
 800447a:	4618      	mov	r0, r3
 800447c:	f000 f906 	bl	800468c <Buffercmp>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d01c      	beq.n	80044c0 <uart_debug+0x468>
	  {
		  uart_transmit_str((uint8_t*)"\n\r-----------IU Bootloader Commands------------\n\r");
 8004486:	483a      	ldr	r0, [pc, #232]	; (8004570 <uart_debug+0x518>)
 8004488:	f7ff fa2e 	bl	80038e8 <uart_transmit_str>
		  uart_transmit_str((uint8_t*)"BMF	: Boot Main Firmware\n\r");
 800448c:	4839      	ldr	r0, [pc, #228]	; (8004574 <uart_debug+0x51c>)
 800448e:	f7ff fa2b 	bl	80038e8 <uart_transmit_str>
		  uart_transmit_str((uint8_t*)"BFF	: Boot Factory Firmware\n\r");
 8004492:	4839      	ldr	r0, [pc, #228]	; (8004578 <uart_debug+0x520>)
 8004494:	f7ff fa28 	bl	80038e8 <uart_transmit_str>
		  uart_transmit_str((uint8_t*)"RBM	: RollBack Main Firmware\n\r");
 8004498:	4838      	ldr	r0, [pc, #224]	; (800457c <uart_debug+0x524>)
 800449a:	f7ff fa25 	bl	80038e8 <uart_transmit_str>
		  uart_transmit_str((uint8_t*)"WFL	: Write flag\n\r");
 800449e:	4838      	ldr	r0, [pc, #224]	; (8004580 <uart_debug+0x528>)
 80044a0:	f7ff fa22 	bl	80038e8 <uart_transmit_str>
		  uart_transmit_str((uint8_t*)"RFL	: Read flag\n\r");
 80044a4:	4837      	ldr	r0, [pc, #220]	; (8004584 <uart_debug+0x52c>)
 80044a6:	f7ff fa1f 	bl	80038e8 <uart_transmit_str>
		  uart_transmit_str((uint8_t*)"RBT	: Reboot\n\r");
 80044aa:	4837      	ldr	r0, [pc, #220]	; (8004588 <uart_debug+0x530>)
 80044ac:	f7ff fa1c 	bl	80038e8 <uart_transmit_str>
		  uart_transmit_str((uint8_t*)"BOOT	: Boot/Continue\n\r");
 80044b0:	4836      	ldr	r0, [pc, #216]	; (800458c <uart_debug+0x534>)
 80044b2:	f7ff fa19 	bl	80038e8 <uart_transmit_str>
		 // uart_transmit_str((uint8_t*)"CLF 	: Clear all flags\n\r");
		  uart_transmit_str((uint8_t*)"----------------------------------------------\n\r");
 80044b6:	4836      	ldr	r0, [pc, #216]	; (8004590 <uart_debug+0x538>)
 80044b8:	f7ff fa16 	bl	80038e8 <uart_transmit_str>

		  return 0;
 80044bc:	2300      	movs	r3, #0
 80044be:	e04f      	b.n	8004560 <uart_debug+0x508>
		  //goto label1;
	  }else if(Buffercmp((uint8_t*)cmd_6,(uint8_t*)rx_buffer,3))
 80044c0:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80044c4:	f107 0314 	add.w	r3, r7, #20
 80044c8:	2203      	movs	r2, #3
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 f8de 	bl	800468c <Buffercmp>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d008      	beq.n	80044e8 <uart_debug+0x490>
	  {
		  Clear_all_flags();
 80044d6:	f7ff fc61 	bl	8003d9c <Clear_all_flags>
		  uart_transmit_str((uint8_t*)"\n\rAll Flags cleared !!\n\r");
 80044da:	482e      	ldr	r0, [pc, #184]	; (8004594 <uart_debug+0x53c>)
 80044dc:	f7ff fa04 	bl	80038e8 <uart_transmit_str>
		  uart_debug_flag = 0;
 80044e0:	2300      	movs	r3, #0
 80044e2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80044e6:	e039      	b.n	800455c <uart_debug+0x504>

	  }else if(Buffercmp((uint8_t*)cmd_7,(uint8_t*)rx_buffer,3))
 80044e8:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80044ec:	f107 0310 	add.w	r3, r7, #16
 80044f0:	2203      	movs	r2, #3
 80044f2:	4618      	mov	r0, r3
 80044f4:	f000 f8ca 	bl	800468c <Buffercmp>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00c      	beq.n	8004518 <uart_debug+0x4c0>
	  {
		  uart_transmit_str((uint8_t*)"\n\rResetting IDE......\n\r");
 80044fe:	4826      	ldr	r0, [pc, #152]	; (8004598 <uart_debug+0x540>)
 8004500:	f7ff f9f2 	bl	80038e8 <uart_transmit_str>
		  HAL_Delay(1000);
 8004504:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004508:	f7fc f8e6 	bl	80006d8 <HAL_Delay>
		  iu_reset();
 800450c:	f7ff fc40 	bl	8003d90 <iu_reset>
		  uart_debug_flag = 0;
 8004510:	2300      	movs	r3, #0
 8004512:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004516:	e021      	b.n	800455c <uart_debug+0x504>

	  }else if(Buffercmp((uint8_t*)cmd_8,(uint8_t*)rx_buffer,4))
 8004518:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800451c:	f107 030c 	add.w	r3, r7, #12
 8004520:	2204      	movs	r2, #4
 8004522:	4618      	mov	r0, r3
 8004524:	f000 f8b2 	bl	800468c <Buffercmp>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d009      	beq.n	8004542 <uart_debug+0x4ea>
	  {
		  uart_transmit_str((uint8_t*)"\n\r Received BOOT.......\n\r");
 800452e:	481b      	ldr	r0, [pc, #108]	; (800459c <uart_debug+0x544>)
 8004530:	f7ff f9da 	bl	80038e8 <uart_transmit_str>
		  uart_transmit_str((uint8_t*)"Booting.......\n\r");
 8004534:	481a      	ldr	r0, [pc, #104]	; (80045a0 <uart_debug+0x548>)
 8004536:	f7ff f9d7 	bl	80038e8 <uart_transmit_str>

		  //Boot_MFW_Flag = 1; // Boot main firmware.
		  uart_debug_flag =  1 ;
 800453a:	2301      	movs	r3, #1
 800453c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004540:	e00c      	b.n	800455c <uart_debug+0x504>

	  }else
	  {
		  if(rx_buffer[0]!='\0')
 8004542:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8004546:	2b00      	cmp	r3, #0
 8004548:	d005      	beq.n	8004556 <uart_debug+0x4fe>
		  {
		  uart_transmit_str((uint8_t*)"\n\r Invalid command !!!\n\r");
 800454a:	4816      	ldr	r0, [pc, #88]	; (80045a4 <uart_debug+0x54c>)
 800454c:	f7ff f9cc 	bl	80038e8 <uart_transmit_str>
		  uart_transmit_str((uint8_t*)"Enter HELP for list of supported commands !\n\r");
 8004550:	4815      	ldr	r0, [pc, #84]	; (80045a8 <uart_debug+0x550>)
 8004552:	f7ff f9c9 	bl	80038e8 <uart_transmit_str>
		  }
		  //goto label1;
		  uart_debug_flag = 0;
 8004556:	2300      	movs	r3, #0
 8004558:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	  }
return uart_debug_flag;
 800455c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4

}
 8004560:	4618      	mov	r0, r3
 8004562:	37f8      	adds	r7, #248	; 0xf8
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	08005b70 	.word	0x08005b70
 800456c:	08005b88 	.word	0x08005b88
 8004570:	08005ba8 	.word	0x08005ba8
 8004574:	08005bdc 	.word	0x08005bdc
 8004578:	08005bf8 	.word	0x08005bf8
 800457c:	08005c18 	.word	0x08005c18
 8004580:	08005c38 	.word	0x08005c38
 8004584:	08005c4c 	.word	0x08005c4c
 8004588:	08005c60 	.word	0x08005c60
 800458c:	08005c70 	.word	0x08005c70
 8004590:	08005c88 	.word	0x08005c88
 8004594:	08005cbc 	.word	0x08005cbc
 8004598:	08005cd8 	.word	0x08005cd8
 800459c:	08005cf0 	.word	0x08005cf0
 80045a0:	08005d0c 	.word	0x08005d0c
 80045a4:	08005d20 	.word	0x08005d20
 80045a8:	08005d3c 	.word	0x08005d3c

080045ac <boot_uart_read>:
int boot_uart_read(uint8_t* rx_buffer)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]

int uart_receive_timout_1 =0;
 80045b4:	2300      	movs	r3, #0
 80045b6:	617b      	str	r3, [r7, #20]
int time_out_flag = 0;
 80045b8:	2300      	movs	r3, #0
 80045ba:	613b      	str	r3, [r7, #16]

//uart_transmit_str((uint8_t*)"waiting for command.......");
	for(int i =0 ;i<=50; i++)
 80045bc:	2300      	movs	r3, #0
 80045be:	60fb      	str	r3, [r7, #12]
 80045c0:	e007      	b.n	80045d2 <boot_uart_read+0x26>
		{
		rx_buffer[i] = '\0';
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	4413      	add	r3, r2
 80045c8:	2200      	movs	r2, #0
 80045ca:	701a      	strb	r2, [r3, #0]
	for(int i =0 ;i<=50; i++)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	3301      	adds	r3, #1
 80045d0:	60fb      	str	r3, [r7, #12]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2b32      	cmp	r3, #50	; 0x32
 80045d6:	ddf4      	ble.n	80045c2 <boot_uart_read+0x16>
		 }
	while(rx_buffer[0] == '\0')
 80045d8:	e01c      	b.n	8004614 <boot_uart_read+0x68>
		{
		uart_transmit_str((uint8_t*)".");
 80045da:	4813      	ldr	r0, [pc, #76]	; (8004628 <boot_uart_read+0x7c>)
 80045dc:	f7ff f984 	bl	80038e8 <uart_transmit_str>
		HAL_UART_Receive(&DEBUG_UART, &rx_buffer[0], 50, 1000);
 80045e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045e4:	2232      	movs	r2, #50	; 0x32
 80045e6:	6879      	ldr	r1, [r7, #4]
 80045e8:	4810      	ldr	r0, [pc, #64]	; (800462c <boot_uart_read+0x80>)
 80045ea:	f7fe faa6 	bl	8002b3a <HAL_UART_Receive>
		uart_receive_timout_1++;
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	3301      	adds	r3, #1
 80045f2:	617b      	str	r3, [r7, #20]
		if(uart_receive_timout_1 >=60)
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	2b3b      	cmp	r3, #59	; 0x3b
 80045f8:	dd05      	ble.n	8004606 <boot_uart_read+0x5a>
		 	 {
		 	 	uart_transmit_str((uint8_t*)"UART timeout !!!\n\r");
 80045fa:	480d      	ldr	r0, [pc, #52]	; (8004630 <boot_uart_read+0x84>)
 80045fc:	f7ff f974 	bl	80038e8 <uart_transmit_str>
		 	 	time_out_flag = 1;
 8004600:	2301      	movs	r3, #1
 8004602:	613b      	str	r3, [r7, #16]
		 	 	break;
 8004604:	e00a      	b.n	800461c <boot_uart_read+0x70>
		 	 }
		 if(rx_buffer[0]!='\0')
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d002      	beq.n	8004614 <boot_uart_read+0x68>
		 	 {
			 	 uart_receive_timout_1 = 0;
 800460e:	2300      	movs	r3, #0
 8004610:	617b      	str	r3, [r7, #20]
		 		//uart_transmit_str((uint8_t*)"\n\r command received !\n\r");
		 		break;
 8004612:	e003      	b.n	800461c <boot_uart_read+0x70>
	while(rx_buffer[0] == '\0')
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d0de      	beq.n	80045da <boot_uart_read+0x2e>

		 	 }
		  }// end of loop
	return time_out_flag;
 800461c:	693b      	ldr	r3, [r7, #16]

}
 800461e:	4618      	mov	r0, r3
 8004620:	3718      	adds	r7, #24
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	08005d90 	.word	0x08005d90
 800462c:	200001c8 	.word	0x200001c8
 8004630:	08005d94 	.word	0x08005d94

08004634 <led_blink>:
void led_blink(void)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	af00      	add	r7, sp, #0
	  HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 8004638:	2104      	movs	r1, #4
 800463a:	4813      	ldr	r0, [pc, #76]	; (8004688 <led_blink+0x54>)
 800463c:	f7fc fdc8 	bl	80011d0 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8004640:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004644:	f7fc f848 	bl	80006d8 <HAL_Delay>
	  HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 8004648:	2104      	movs	r1, #4
 800464a:	480f      	ldr	r0, [pc, #60]	; (8004688 <led_blink+0x54>)
 800464c:	f7fc fdc0 	bl	80011d0 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8004650:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004654:	f7fc f840 	bl	80006d8 <HAL_Delay>
	  HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 8004658:	2104      	movs	r1, #4
 800465a:	480b      	ldr	r0, [pc, #44]	; (8004688 <led_blink+0x54>)
 800465c:	f7fc fdb8 	bl	80011d0 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8004660:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004664:	f7fc f838 	bl	80006d8 <HAL_Delay>
	  HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 8004668:	2104      	movs	r1, #4
 800466a:	4807      	ldr	r0, [pc, #28]	; (8004688 <led_blink+0x54>)
 800466c:	f7fc fdb0 	bl	80011d0 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8004670:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004674:	f7fc f830 	bl	80006d8 <HAL_Delay>
	  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 0);
 8004678:	2200      	movs	r2, #0
 800467a:	2104      	movs	r1, #4
 800467c:	4802      	ldr	r0, [pc, #8]	; (8004688 <led_blink+0x54>)
 800467e:	f7fc fd8f 	bl	80011a0 <HAL_GPIO_WritePin>

}
 8004682:	bf00      	nop
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	48000400 	.word	0x48000400

0800468c <Buffercmp>:
static uint16_t Buffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	4613      	mov	r3, r2
 8004698:	80fb      	strh	r3, [r7, #6]
  while (BufferLength--)
 800469a:	e00d      	b.n	80046b8 <Buffercmp+0x2c>
  {
    if ((*pBuffer1) != *pBuffer2)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	781a      	ldrb	r2, [r3, #0]
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d001      	beq.n	80046ac <Buffercmp+0x20>
    {
      return 0;
 80046a8:	2300      	movs	r3, #0
 80046aa:	e00b      	b.n	80046c4 <Buffercmp+0x38>
    }
    pBuffer1++;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	3301      	adds	r3, #1
 80046b0:	60fb      	str	r3, [r7, #12]
    pBuffer2++;
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	3301      	adds	r3, #1
 80046b6:	60bb      	str	r3, [r7, #8]
  while (BufferLength--)
 80046b8:	88fb      	ldrh	r3, [r7, #6]
 80046ba:	1e5a      	subs	r2, r3, #1
 80046bc:	80fa      	strh	r2, [r7, #6]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1ec      	bne.n	800469c <Buffercmp+0x10>
  }

  return 1;
 80046c2:	2301      	movs	r3, #1
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3714      	adds	r7, #20
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <Buffercmp32>:
static uint16_t Buffercmp32(uint32_t* pBuffer1, uint32_t* pBuffer2, uint16_t BufferLength)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	4613      	mov	r3, r2
 80046dc:	80fb      	strh	r3, [r7, #6]
  while (BufferLength--)
 80046de:	e00d      	b.n	80046fc <Buffercmp32+0x2c>
  {
    if ((*pBuffer1) != *pBuffer2)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d001      	beq.n	80046f0 <Buffercmp32+0x20>
    {
      return 0;
 80046ec:	2300      	movs	r3, #0
 80046ee:	e00b      	b.n	8004708 <Buffercmp32+0x38>
    }
    pBuffer1++;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	3304      	adds	r3, #4
 80046f4:	60fb      	str	r3, [r7, #12]
    pBuffer2++;
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	3304      	adds	r3, #4
 80046fa:	60bb      	str	r3, [r7, #8]
  while (BufferLength--)
 80046fc:	88fb      	ldrh	r3, [r7, #6]
 80046fe:	1e5a      	subs	r2, r3, #1
 8004700:	80fa      	strh	r2, [r7, #6]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1ec      	bne.n	80046e0 <Buffercmp32+0x10>
  }

  return 1;
 8004706:	2301      	movs	r3, #1
}
 8004708:	4618      	mov	r0, r3
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <Buffercpy>:
void Buffercpy(uint32_t* sBuffer, uint32_t* dBuffer, uint16_t BufferLength)
{
 8004714:	b480      	push	{r7}
 8004716:	b087      	sub	sp, #28
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	4613      	mov	r3, r2
 8004720:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i=0 ; i< BufferLength ; i++)
 8004722:	2300      	movs	r3, #0
 8004724:	82fb      	strh	r3, [r7, #22]
 8004726:	e00c      	b.n	8004742 <Buffercpy+0x2e>
	{

		dBuffer[i] = sBuffer[i];
 8004728:	8afb      	ldrh	r3, [r7, #22]
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	441a      	add	r2, r3
 8004730:	8afb      	ldrh	r3, [r7, #22]
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	68b9      	ldr	r1, [r7, #8]
 8004736:	440b      	add	r3, r1
 8004738:	6812      	ldr	r2, [r2, #0]
 800473a:	601a      	str	r2, [r3, #0]
	for(uint16_t i=0 ; i< BufferLength ; i++)
 800473c:	8afb      	ldrh	r3, [r7, #22]
 800473e:	3301      	adds	r3, #1
 8004740:	82fb      	strh	r3, [r7, #22]
 8004742:	8afa      	ldrh	r2, [r7, #22]
 8004744:	88fb      	ldrh	r3, [r7, #6]
 8004746:	429a      	cmp	r2, r3
 8004748:	d3ee      	bcc.n	8004728 <Buffercpy+0x14>
	}

}
 800474a:	bf00      	nop
 800474c:	371c      	adds	r7, #28
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr

08004756 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b0ba      	sub	sp, #232	; 0xe8
 800475a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800475c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004760:	2244      	movs	r2, #68	; 0x44
 8004762:	2100      	movs	r1, #0
 8004764:	4618      	mov	r0, r3
 8004766:	f000 fac3 	bl	8004cf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800476a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800476e:	2200      	movs	r2, #0
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	605a      	str	r2, [r3, #4]
 8004774:	609a      	str	r2, [r3, #8]
 8004776:	60da      	str	r2, [r3, #12]
 8004778:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800477a:	1d3b      	adds	r3, r7, #4
 800477c:	228c      	movs	r2, #140	; 0x8c
 800477e:	2100      	movs	r1, #0
 8004780:	4618      	mov	r0, r3
 8004782:	f000 fab5 	bl	8004cf0 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8004786:	2310      	movs	r3, #16
 8004788:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800478c:	2301      	movs	r3, #1
 800478e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8004792:	2300      	movs	r3, #0
 8004794:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004798:	2360      	movs	r3, #96	; 0x60
 800479a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800479e:	2300      	movs	r3, #0
 80047a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80047a4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7fc fe31 	bl	8001410 <HAL_RCC_OscConfig>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d001      	beq.n	80047b8 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80047b4:	f000 f8fa 	bl	80049ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80047b8:	230f      	movs	r3, #15
 80047ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80047be:	2300      	movs	r3, #0
 80047c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80047c4:	2300      	movs	r3, #0
 80047c6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80047ca:	2300      	movs	r3, #0
 80047cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80047d0:	2300      	movs	r3, #0
 80047d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80047d6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80047da:	2100      	movs	r1, #0
 80047dc:	4618      	mov	r0, r3
 80047de:	f7fd fa05 	bl	8001bec <HAL_RCC_ClockConfig>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d001      	beq.n	80047ec <SystemClock_Config+0x96>
  {
    Error_Handler();
 80047e8:	f000 f8e0 	bl	80049ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART5;
 80047ec:	2314      	movs	r3, #20
 80047ee:	607b      	str	r3, [r7, #4]
  //PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80047f0:	2300      	movs	r3, #0
 80047f2:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80047f4:	2300      	movs	r3, #0
 80047f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80047f8:	1d3b      	adds	r3, r7, #4
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fd fbfa 	bl	8001ff4 <HAL_RCCEx_PeriphCLKConfig>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d001      	beq.n	800480a <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8004806:	f000 f8d1 	bl	80049ac <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800480a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800480e:	f7fc fd07 	bl	8001220 <HAL_PWREx_ControlVoltageScaling>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d001      	beq.n	800481c <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8004818:	f000 f8c8 	bl	80049ac <Error_Handler>
  }
}
 800481c:	bf00      	nop
 800481e:	37e8      	adds	r7, #232	; 0xe8
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8004828:	4b14      	ldr	r3, [pc, #80]	; (800487c <MX_UART5_Init+0x58>)
 800482a:	4a15      	ldr	r2, [pc, #84]	; (8004880 <MX_UART5_Init+0x5c>)
 800482c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800482e:	4b13      	ldr	r3, [pc, #76]	; (800487c <MX_UART5_Init+0x58>)
 8004830:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004834:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8004836:	4b11      	ldr	r3, [pc, #68]	; (800487c <MX_UART5_Init+0x58>)
 8004838:	2200      	movs	r2, #0
 800483a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800483c:	4b0f      	ldr	r3, [pc, #60]	; (800487c <MX_UART5_Init+0x58>)
 800483e:	2200      	movs	r2, #0
 8004840:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8004842:	4b0e      	ldr	r3, [pc, #56]	; (800487c <MX_UART5_Init+0x58>)
 8004844:	2200      	movs	r2, #0
 8004846:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8004848:	4b0c      	ldr	r3, [pc, #48]	; (800487c <MX_UART5_Init+0x58>)
 800484a:	220c      	movs	r2, #12
 800484c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800484e:	4b0b      	ldr	r3, [pc, #44]	; (800487c <MX_UART5_Init+0x58>)
 8004850:	2200      	movs	r2, #0
 8004852:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8004854:	4b09      	ldr	r3, [pc, #36]	; (800487c <MX_UART5_Init+0x58>)
 8004856:	2200      	movs	r2, #0
 8004858:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800485a:	4b08      	ldr	r3, [pc, #32]	; (800487c <MX_UART5_Init+0x58>)
 800485c:	2200      	movs	r2, #0
 800485e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004860:	4b06      	ldr	r3, [pc, #24]	; (800487c <MX_UART5_Init+0x58>)
 8004862:	2200      	movs	r2, #0
 8004864:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8004866:	4805      	ldr	r0, [pc, #20]	; (800487c <MX_UART5_Init+0x58>)
 8004868:	f7fe f886 	bl	8002978 <HAL_UART_Init>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8004872:	f000 f89b 	bl	80049ac <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8004876:	bf00      	nop
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	200001c8 	.word	0x200001c8
 8004880:	40005000 	.word	0x40005000

08004884 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004888:	4b14      	ldr	r3, [pc, #80]	; (80048dc <MX_USART3_UART_Init+0x58>)
 800488a:	4a15      	ldr	r2, [pc, #84]	; (80048e0 <MX_USART3_UART_Init+0x5c>)
 800488c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800488e:	4b13      	ldr	r3, [pc, #76]	; (80048dc <MX_USART3_UART_Init+0x58>)
 8004890:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004894:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004896:	4b11      	ldr	r3, [pc, #68]	; (80048dc <MX_USART3_UART_Init+0x58>)
 8004898:	2200      	movs	r2, #0
 800489a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800489c:	4b0f      	ldr	r3, [pc, #60]	; (80048dc <MX_USART3_UART_Init+0x58>)
 800489e:	2200      	movs	r2, #0
 80048a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80048a2:	4b0e      	ldr	r3, [pc, #56]	; (80048dc <MX_USART3_UART_Init+0x58>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80048a8:	4b0c      	ldr	r3, [pc, #48]	; (80048dc <MX_USART3_UART_Init+0x58>)
 80048aa:	220c      	movs	r2, #12
 80048ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048ae:	4b0b      	ldr	r3, [pc, #44]	; (80048dc <MX_USART3_UART_Init+0x58>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80048b4:	4b09      	ldr	r3, [pc, #36]	; (80048dc <MX_USART3_UART_Init+0x58>)
 80048b6:	2200      	movs	r2, #0
 80048b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80048ba:	4b08      	ldr	r3, [pc, #32]	; (80048dc <MX_USART3_UART_Init+0x58>)
 80048bc:	2200      	movs	r2, #0
 80048be:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80048c0:	4b06      	ldr	r3, [pc, #24]	; (80048dc <MX_USART3_UART_Init+0x58>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80048c6:	4805      	ldr	r0, [pc, #20]	; (80048dc <MX_USART3_UART_Init+0x58>)
 80048c8:	f7fe f856 	bl	8002978 <HAL_UART_Init>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d001      	beq.n	80048d6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80048d2:	f000 f86b 	bl	80049ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80048d6:	bf00      	nop
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	200000c4 	.word	0x200000c4
 80048e0:	40004800 	.word	0x40004800

080048e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b08a      	sub	sp, #40	; 0x28
 80048e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048ea:	f107 0314 	add.w	r3, r7, #20
 80048ee:	2200      	movs	r2, #0
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	605a      	str	r2, [r3, #4]
 80048f4:	609a      	str	r2, [r3, #8]
 80048f6:	60da      	str	r2, [r3, #12]
 80048f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80048fa:	4b2a      	ldr	r3, [pc, #168]	; (80049a4 <MX_GPIO_Init+0xc0>)
 80048fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048fe:	4a29      	ldr	r2, [pc, #164]	; (80049a4 <MX_GPIO_Init+0xc0>)
 8004900:	f043 0301 	orr.w	r3, r3, #1
 8004904:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004906:	4b27      	ldr	r3, [pc, #156]	; (80049a4 <MX_GPIO_Init+0xc0>)
 8004908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	613b      	str	r3, [r7, #16]
 8004910:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004912:	4b24      	ldr	r3, [pc, #144]	; (80049a4 <MX_GPIO_Init+0xc0>)
 8004914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004916:	4a23      	ldr	r2, [pc, #140]	; (80049a4 <MX_GPIO_Init+0xc0>)
 8004918:	f043 0304 	orr.w	r3, r3, #4
 800491c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800491e:	4b21      	ldr	r3, [pc, #132]	; (80049a4 <MX_GPIO_Init+0xc0>)
 8004920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004922:	f003 0304 	and.w	r3, r3, #4
 8004926:	60fb      	str	r3, [r7, #12]
 8004928:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800492a:	4b1e      	ldr	r3, [pc, #120]	; (80049a4 <MX_GPIO_Init+0xc0>)
 800492c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800492e:	4a1d      	ldr	r2, [pc, #116]	; (80049a4 <MX_GPIO_Init+0xc0>)
 8004930:	f043 0302 	orr.w	r3, r3, #2
 8004934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004936:	4b1b      	ldr	r3, [pc, #108]	; (80049a4 <MX_GPIO_Init+0xc0>)
 8004938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800493a:	f003 0302 	and.w	r3, r3, #2
 800493e:	60bb      	str	r3, [r7, #8]
 8004940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004942:	4b18      	ldr	r3, [pc, #96]	; (80049a4 <MX_GPIO_Init+0xc0>)
 8004944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004946:	4a17      	ldr	r2, [pc, #92]	; (80049a4 <MX_GPIO_Init+0xc0>)
 8004948:	f043 0308 	orr.w	r3, r3, #8
 800494c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800494e:	4b15      	ldr	r3, [pc, #84]	; (80049a4 <MX_GPIO_Init+0xc0>)
 8004950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004952:	f003 0308 	and.w	r3, r3, #8
 8004956:	607b      	str	r3, [r7, #4]
 8004958:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 800495a:	2201      	movs	r2, #1
 800495c:	2104      	movs	r1, #4
 800495e:	4812      	ldr	r0, [pc, #72]	; (80049a8 <MX_GPIO_Init+0xc4>)
 8004960:	f7fc fc1e 	bl	80011a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004964:	2303      	movs	r3, #3
 8004966:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004968:	2300      	movs	r3, #0
 800496a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800496c:	2301      	movs	r3, #1
 800496e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004970:	f107 0314 	add.w	r3, r7, #20
 8004974:	4619      	mov	r1, r3
 8004976:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800497a:	f7fc fa67 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : RED_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 800497e:	2304      	movs	r3, #4
 8004980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004982:	2301      	movs	r3, #1
 8004984:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004986:	2300      	movs	r3, #0
 8004988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800498a:	2300      	movs	r3, #0
 800498c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 800498e:	f107 0314 	add.w	r3, r7, #20
 8004992:	4619      	mov	r1, r3
 8004994:	4804      	ldr	r0, [pc, #16]	; (80049a8 <MX_GPIO_Init+0xc4>)
 8004996:	f7fc fa59 	bl	8000e4c <HAL_GPIO_Init>

}
 800499a:	bf00      	nop
 800499c:	3728      	adds	r7, #40	; 0x28
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	40021000 	.word	0x40021000
 80049a8:	48000400 	.word	0x48000400

080049ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80049b0:	bf00      	nop
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
	...

080049bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049c2:	4b0f      	ldr	r3, [pc, #60]	; (8004a00 <HAL_MspInit+0x44>)
 80049c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049c6:	4a0e      	ldr	r2, [pc, #56]	; (8004a00 <HAL_MspInit+0x44>)
 80049c8:	f043 0301 	orr.w	r3, r3, #1
 80049cc:	6613      	str	r3, [r2, #96]	; 0x60
 80049ce:	4b0c      	ldr	r3, [pc, #48]	; (8004a00 <HAL_MspInit+0x44>)
 80049d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	607b      	str	r3, [r7, #4]
 80049d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80049da:	4b09      	ldr	r3, [pc, #36]	; (8004a00 <HAL_MspInit+0x44>)
 80049dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049de:	4a08      	ldr	r2, [pc, #32]	; (8004a00 <HAL_MspInit+0x44>)
 80049e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049e4:	6593      	str	r3, [r2, #88]	; 0x58
 80049e6:	4b06      	ldr	r3, [pc, #24]	; (8004a00 <HAL_MspInit+0x44>)
 80049e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ee:	603b      	str	r3, [r7, #0]
 80049f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80049f2:	bf00      	nop
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	40021000 	.word	0x40021000

08004a04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b08c      	sub	sp, #48	; 0x30
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a0c:	f107 031c 	add.w	r3, r7, #28
 8004a10:	2200      	movs	r2, #0
 8004a12:	601a      	str	r2, [r3, #0]
 8004a14:	605a      	str	r2, [r3, #4]
 8004a16:	609a      	str	r2, [r3, #8]
 8004a18:	60da      	str	r2, [r3, #12]
 8004a1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a3c      	ldr	r2, [pc, #240]	; (8004b14 <HAL_UART_MspInit+0x110>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d145      	bne.n	8004ab2 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8004a26:	4b3c      	ldr	r3, [pc, #240]	; (8004b18 <HAL_UART_MspInit+0x114>)
 8004a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a2a:	4a3b      	ldr	r2, [pc, #236]	; (8004b18 <HAL_UART_MspInit+0x114>)
 8004a2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a30:	6593      	str	r3, [r2, #88]	; 0x58
 8004a32:	4b39      	ldr	r3, [pc, #228]	; (8004b18 <HAL_UART_MspInit+0x114>)
 8004a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a3a:	61bb      	str	r3, [r7, #24]
 8004a3c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a3e:	4b36      	ldr	r3, [pc, #216]	; (8004b18 <HAL_UART_MspInit+0x114>)
 8004a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a42:	4a35      	ldr	r2, [pc, #212]	; (8004b18 <HAL_UART_MspInit+0x114>)
 8004a44:	f043 0304 	orr.w	r3, r3, #4
 8004a48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a4a:	4b33      	ldr	r3, [pc, #204]	; (8004b18 <HAL_UART_MspInit+0x114>)
 8004a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a4e:	f003 0304 	and.w	r3, r3, #4
 8004a52:	617b      	str	r3, [r7, #20]
 8004a54:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004a56:	4b30      	ldr	r3, [pc, #192]	; (8004b18 <HAL_UART_MspInit+0x114>)
 8004a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a5a:	4a2f      	ldr	r2, [pc, #188]	; (8004b18 <HAL_UART_MspInit+0x114>)
 8004a5c:	f043 0308 	orr.w	r3, r3, #8
 8004a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a62:	4b2d      	ldr	r3, [pc, #180]	; (8004b18 <HAL_UART_MspInit+0x114>)
 8004a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a66:	f003 0308 	and.w	r3, r3, #8
 8004a6a:	613b      	str	r3, [r7, #16]
 8004a6c:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004a6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a74:	2302      	movs	r3, #2
 8004a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004a80:	2308      	movs	r3, #8
 8004a82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a84:	f107 031c 	add.w	r3, r7, #28
 8004a88:	4619      	mov	r1, r3
 8004a8a:	4824      	ldr	r0, [pc, #144]	; (8004b1c <HAL_UART_MspInit+0x118>)
 8004a8c:	f7fc f9de 	bl	8000e4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004a90:	2304      	movs	r3, #4
 8004a92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a94:	2302      	movs	r3, #2
 8004a96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004aa0:	2308      	movs	r3, #8
 8004aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004aa4:	f107 031c 	add.w	r3, r7, #28
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	481d      	ldr	r0, [pc, #116]	; (8004b20 <HAL_UART_MspInit+0x11c>)
 8004aac:	f7fc f9ce 	bl	8000e4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004ab0:	e02c      	b.n	8004b0c <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART3)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a1b      	ldr	r2, [pc, #108]	; (8004b24 <HAL_UART_MspInit+0x120>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d127      	bne.n	8004b0c <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004abc:	4b16      	ldr	r3, [pc, #88]	; (8004b18 <HAL_UART_MspInit+0x114>)
 8004abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac0:	4a15      	ldr	r2, [pc, #84]	; (8004b18 <HAL_UART_MspInit+0x114>)
 8004ac2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ac6:	6593      	str	r3, [r2, #88]	; 0x58
 8004ac8:	4b13      	ldr	r3, [pc, #76]	; (8004b18 <HAL_UART_MspInit+0x114>)
 8004aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004acc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ad0:	60fb      	str	r3, [r7, #12]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ad4:	4b10      	ldr	r3, [pc, #64]	; (8004b18 <HAL_UART_MspInit+0x114>)
 8004ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ad8:	4a0f      	ldr	r2, [pc, #60]	; (8004b18 <HAL_UART_MspInit+0x114>)
 8004ada:	f043 0304 	orr.w	r3, r3, #4
 8004ade:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ae0:	4b0d      	ldr	r3, [pc, #52]	; (8004b18 <HAL_UART_MspInit+0x114>)
 8004ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ae4:	f003 0304 	and.w	r3, r3, #4
 8004ae8:	60bb      	str	r3, [r7, #8]
 8004aea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004aec:	2330      	movs	r3, #48	; 0x30
 8004aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004af0:	2302      	movs	r3, #2
 8004af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004af4:	2300      	movs	r3, #0
 8004af6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004af8:	2303      	movs	r3, #3
 8004afa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004afc:	2307      	movs	r3, #7
 8004afe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b00:	f107 031c 	add.w	r3, r7, #28
 8004b04:	4619      	mov	r1, r3
 8004b06:	4805      	ldr	r0, [pc, #20]	; (8004b1c <HAL_UART_MspInit+0x118>)
 8004b08:	f7fc f9a0 	bl	8000e4c <HAL_GPIO_Init>
}
 8004b0c:	bf00      	nop
 8004b0e:	3730      	adds	r7, #48	; 0x30
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	40005000 	.word	0x40005000
 8004b18:	40021000 	.word	0x40021000
 8004b1c:	48000800 	.word	0x48000800
 8004b20:	48000c00 	.word	0x48000c00
 8004b24:	40004800 	.word	0x40004800

08004b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004b2c:	bf00      	nop
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b36:	b480      	push	{r7}
 8004b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b3a:	e7fe      	b.n	8004b3a <HardFault_Handler+0x4>

08004b3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b40:	e7fe      	b.n	8004b40 <MemManage_Handler+0x4>

08004b42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b42:	b480      	push	{r7}
 8004b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b46:	e7fe      	b.n	8004b46 <BusFault_Handler+0x4>

08004b48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004b4c:	e7fe      	b.n	8004b4c <UsageFault_Handler+0x4>

08004b4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004b52:	bf00      	nop
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004b60:	bf00      	nop
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004b6e:	bf00      	nop
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004b7c:	f7fb fd8e 	bl	800069c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004b80:	bf00      	nop
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004b8c:	4b11      	ldr	r3, [pc, #68]	; (8004bd4 <_sbrk+0x50>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d102      	bne.n	8004b9a <_sbrk+0x16>
		heap_end = &end;
 8004b94:	4b0f      	ldr	r3, [pc, #60]	; (8004bd4 <_sbrk+0x50>)
 8004b96:	4a10      	ldr	r2, [pc, #64]	; (8004bd8 <_sbrk+0x54>)
 8004b98:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004b9a:	4b0e      	ldr	r3, [pc, #56]	; (8004bd4 <_sbrk+0x50>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004ba0:	4b0c      	ldr	r3, [pc, #48]	; (8004bd4 <_sbrk+0x50>)
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	466a      	mov	r2, sp
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d907      	bls.n	8004bbe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004bae:	f000 f875 	bl	8004c9c <__errno>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	230c      	movs	r3, #12
 8004bb6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004bb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bbc:	e006      	b.n	8004bcc <_sbrk+0x48>
	}

	heap_end += incr;
 8004bbe:	4b05      	ldr	r3, [pc, #20]	; (8004bd4 <_sbrk+0x50>)
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	4a03      	ldr	r2, [pc, #12]	; (8004bd4 <_sbrk+0x50>)
 8004bc8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004bca:	68fb      	ldr	r3, [r7, #12]
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3710      	adds	r7, #16
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	200000b0 	.word	0x200000b0
 8004bd8:	20000250 	.word	0x20000250

08004bdc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004be0:	4b17      	ldr	r3, [pc, #92]	; (8004c40 <SystemInit+0x64>)
 8004be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be6:	4a16      	ldr	r2, [pc, #88]	; (8004c40 <SystemInit+0x64>)
 8004be8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004bec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004bf0:	4b14      	ldr	r3, [pc, #80]	; (8004c44 <SystemInit+0x68>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a13      	ldr	r2, [pc, #76]	; (8004c44 <SystemInit+0x68>)
 8004bf6:	f043 0301 	orr.w	r3, r3, #1
 8004bfa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8004bfc:	4b11      	ldr	r3, [pc, #68]	; (8004c44 <SystemInit+0x68>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8004c02:	4b10      	ldr	r3, [pc, #64]	; (8004c44 <SystemInit+0x68>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a0f      	ldr	r2, [pc, #60]	; (8004c44 <SystemInit+0x68>)
 8004c08:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8004c0c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8004c10:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8004c12:	4b0c      	ldr	r3, [pc, #48]	; (8004c44 <SystemInit+0x68>)
 8004c14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004c18:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004c1a:	4b0a      	ldr	r3, [pc, #40]	; (8004c44 <SystemInit+0x68>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a09      	ldr	r2, [pc, #36]	; (8004c44 <SystemInit+0x68>)
 8004c20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c24:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004c26:	4b07      	ldr	r3, [pc, #28]	; (8004c44 <SystemInit+0x68>)
 8004c28:	2200      	movs	r2, #0
 8004c2a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004c2c:	4b04      	ldr	r3, [pc, #16]	; (8004c40 <SystemInit+0x64>)
 8004c2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004c32:	609a      	str	r2, [r3, #8]
#endif
}
 8004c34:	bf00      	nop
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	e000ed00 	.word	0xe000ed00
 8004c44:	40021000 	.word	0x40021000

08004c48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004c48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c80 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004c4c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004c4e:	e003      	b.n	8004c58 <LoopCopyDataInit>

08004c50 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004c50:	4b0c      	ldr	r3, [pc, #48]	; (8004c84 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004c52:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004c54:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004c56:	3104      	adds	r1, #4

08004c58 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004c58:	480b      	ldr	r0, [pc, #44]	; (8004c88 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004c5a:	4b0c      	ldr	r3, [pc, #48]	; (8004c8c <LoopForever+0xe>)
	adds	r2, r0, r1
 8004c5c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004c5e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004c60:	d3f6      	bcc.n	8004c50 <CopyDataInit>
	ldr	r2, =_sbss
 8004c62:	4a0b      	ldr	r2, [pc, #44]	; (8004c90 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004c64:	e002      	b.n	8004c6c <LoopFillZerobss>

08004c66 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004c66:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004c68:	f842 3b04 	str.w	r3, [r2], #4

08004c6c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004c6c:	4b09      	ldr	r3, [pc, #36]	; (8004c94 <LoopForever+0x16>)
	cmp	r2, r3
 8004c6e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004c70:	d3f9      	bcc.n	8004c66 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004c72:	f7ff ffb3 	bl	8004bdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004c76:	f000 f817 	bl	8004ca8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004c7a:	f7fe fe5b 	bl	8003934 <main>

08004c7e <LoopForever>:

LoopForever:
    b LoopForever
 8004c7e:	e7fe      	b.n	8004c7e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004c80:	2004ffff 	.word	0x2004ffff
	ldr	r3, =_sidata
 8004c84:	08005e3c 	.word	0x08005e3c
	ldr	r0, =_sdata
 8004c88:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004c8c:	20000094 	.word	0x20000094
	ldr	r2, =_sbss
 8004c90:	20000094 	.word	0x20000094
	ldr	r3, = _ebss
 8004c94:	2000024c 	.word	0x2000024c

08004c98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004c98:	e7fe      	b.n	8004c98 <ADC1_2_IRQHandler>
	...

08004c9c <__errno>:
 8004c9c:	4b01      	ldr	r3, [pc, #4]	; (8004ca4 <__errno+0x8>)
 8004c9e:	6818      	ldr	r0, [r3, #0]
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	20000030 	.word	0x20000030

08004ca8 <__libc_init_array>:
 8004ca8:	b570      	push	{r4, r5, r6, lr}
 8004caa:	4e0d      	ldr	r6, [pc, #52]	; (8004ce0 <__libc_init_array+0x38>)
 8004cac:	4c0d      	ldr	r4, [pc, #52]	; (8004ce4 <__libc_init_array+0x3c>)
 8004cae:	1ba4      	subs	r4, r4, r6
 8004cb0:	10a4      	asrs	r4, r4, #2
 8004cb2:	2500      	movs	r5, #0
 8004cb4:	42a5      	cmp	r5, r4
 8004cb6:	d109      	bne.n	8004ccc <__libc_init_array+0x24>
 8004cb8:	4e0b      	ldr	r6, [pc, #44]	; (8004ce8 <__libc_init_array+0x40>)
 8004cba:	4c0c      	ldr	r4, [pc, #48]	; (8004cec <__libc_init_array+0x44>)
 8004cbc:	f000 fc26 	bl	800550c <_init>
 8004cc0:	1ba4      	subs	r4, r4, r6
 8004cc2:	10a4      	asrs	r4, r4, #2
 8004cc4:	2500      	movs	r5, #0
 8004cc6:	42a5      	cmp	r5, r4
 8004cc8:	d105      	bne.n	8004cd6 <__libc_init_array+0x2e>
 8004cca:	bd70      	pop	{r4, r5, r6, pc}
 8004ccc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004cd0:	4798      	blx	r3
 8004cd2:	3501      	adds	r5, #1
 8004cd4:	e7ee      	b.n	8004cb4 <__libc_init_array+0xc>
 8004cd6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004cda:	4798      	blx	r3
 8004cdc:	3501      	adds	r5, #1
 8004cde:	e7f2      	b.n	8004cc6 <__libc_init_array+0x1e>
 8004ce0:	08005e34 	.word	0x08005e34
 8004ce4:	08005e34 	.word	0x08005e34
 8004ce8:	08005e34 	.word	0x08005e34
 8004cec:	08005e38 	.word	0x08005e38

08004cf0 <memset>:
 8004cf0:	4402      	add	r2, r0
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d100      	bne.n	8004cfa <memset+0xa>
 8004cf8:	4770      	bx	lr
 8004cfa:	f803 1b01 	strb.w	r1, [r3], #1
 8004cfe:	e7f9      	b.n	8004cf4 <memset+0x4>

08004d00 <siprintf>:
 8004d00:	b40e      	push	{r1, r2, r3}
 8004d02:	b500      	push	{lr}
 8004d04:	b09c      	sub	sp, #112	; 0x70
 8004d06:	ab1d      	add	r3, sp, #116	; 0x74
 8004d08:	9002      	str	r0, [sp, #8]
 8004d0a:	9006      	str	r0, [sp, #24]
 8004d0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d10:	4809      	ldr	r0, [pc, #36]	; (8004d38 <siprintf+0x38>)
 8004d12:	9107      	str	r1, [sp, #28]
 8004d14:	9104      	str	r1, [sp, #16]
 8004d16:	4909      	ldr	r1, [pc, #36]	; (8004d3c <siprintf+0x3c>)
 8004d18:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d1c:	9105      	str	r1, [sp, #20]
 8004d1e:	6800      	ldr	r0, [r0, #0]
 8004d20:	9301      	str	r3, [sp, #4]
 8004d22:	a902      	add	r1, sp, #8
 8004d24:	f000 f866 	bl	8004df4 <_svfiprintf_r>
 8004d28:	9b02      	ldr	r3, [sp, #8]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	701a      	strb	r2, [r3, #0]
 8004d2e:	b01c      	add	sp, #112	; 0x70
 8004d30:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d34:	b003      	add	sp, #12
 8004d36:	4770      	bx	lr
 8004d38:	20000030 	.word	0x20000030
 8004d3c:	ffff0208 	.word	0xffff0208

08004d40 <__ssputs_r>:
 8004d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d44:	688e      	ldr	r6, [r1, #8]
 8004d46:	429e      	cmp	r6, r3
 8004d48:	4682      	mov	sl, r0
 8004d4a:	460c      	mov	r4, r1
 8004d4c:	4690      	mov	r8, r2
 8004d4e:	4699      	mov	r9, r3
 8004d50:	d837      	bhi.n	8004dc2 <__ssputs_r+0x82>
 8004d52:	898a      	ldrh	r2, [r1, #12]
 8004d54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d58:	d031      	beq.n	8004dbe <__ssputs_r+0x7e>
 8004d5a:	6825      	ldr	r5, [r4, #0]
 8004d5c:	6909      	ldr	r1, [r1, #16]
 8004d5e:	1a6f      	subs	r7, r5, r1
 8004d60:	6965      	ldr	r5, [r4, #20]
 8004d62:	2302      	movs	r3, #2
 8004d64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d68:	fb95 f5f3 	sdiv	r5, r5, r3
 8004d6c:	f109 0301 	add.w	r3, r9, #1
 8004d70:	443b      	add	r3, r7
 8004d72:	429d      	cmp	r5, r3
 8004d74:	bf38      	it	cc
 8004d76:	461d      	movcc	r5, r3
 8004d78:	0553      	lsls	r3, r2, #21
 8004d7a:	d530      	bpl.n	8004dde <__ssputs_r+0x9e>
 8004d7c:	4629      	mov	r1, r5
 8004d7e:	f000 fb2b 	bl	80053d8 <_malloc_r>
 8004d82:	4606      	mov	r6, r0
 8004d84:	b950      	cbnz	r0, 8004d9c <__ssputs_r+0x5c>
 8004d86:	230c      	movs	r3, #12
 8004d88:	f8ca 3000 	str.w	r3, [sl]
 8004d8c:	89a3      	ldrh	r3, [r4, #12]
 8004d8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d92:	81a3      	strh	r3, [r4, #12]
 8004d94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d9c:	463a      	mov	r2, r7
 8004d9e:	6921      	ldr	r1, [r4, #16]
 8004da0:	f000 faa8 	bl	80052f4 <memcpy>
 8004da4:	89a3      	ldrh	r3, [r4, #12]
 8004da6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dae:	81a3      	strh	r3, [r4, #12]
 8004db0:	6126      	str	r6, [r4, #16]
 8004db2:	6165      	str	r5, [r4, #20]
 8004db4:	443e      	add	r6, r7
 8004db6:	1bed      	subs	r5, r5, r7
 8004db8:	6026      	str	r6, [r4, #0]
 8004dba:	60a5      	str	r5, [r4, #8]
 8004dbc:	464e      	mov	r6, r9
 8004dbe:	454e      	cmp	r6, r9
 8004dc0:	d900      	bls.n	8004dc4 <__ssputs_r+0x84>
 8004dc2:	464e      	mov	r6, r9
 8004dc4:	4632      	mov	r2, r6
 8004dc6:	4641      	mov	r1, r8
 8004dc8:	6820      	ldr	r0, [r4, #0]
 8004dca:	f000 fa9e 	bl	800530a <memmove>
 8004dce:	68a3      	ldr	r3, [r4, #8]
 8004dd0:	1b9b      	subs	r3, r3, r6
 8004dd2:	60a3      	str	r3, [r4, #8]
 8004dd4:	6823      	ldr	r3, [r4, #0]
 8004dd6:	441e      	add	r6, r3
 8004dd8:	6026      	str	r6, [r4, #0]
 8004dda:	2000      	movs	r0, #0
 8004ddc:	e7dc      	b.n	8004d98 <__ssputs_r+0x58>
 8004dde:	462a      	mov	r2, r5
 8004de0:	f000 fb54 	bl	800548c <_realloc_r>
 8004de4:	4606      	mov	r6, r0
 8004de6:	2800      	cmp	r0, #0
 8004de8:	d1e2      	bne.n	8004db0 <__ssputs_r+0x70>
 8004dea:	6921      	ldr	r1, [r4, #16]
 8004dec:	4650      	mov	r0, sl
 8004dee:	f000 faa5 	bl	800533c <_free_r>
 8004df2:	e7c8      	b.n	8004d86 <__ssputs_r+0x46>

08004df4 <_svfiprintf_r>:
 8004df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004df8:	461d      	mov	r5, r3
 8004dfa:	898b      	ldrh	r3, [r1, #12]
 8004dfc:	061f      	lsls	r7, r3, #24
 8004dfe:	b09d      	sub	sp, #116	; 0x74
 8004e00:	4680      	mov	r8, r0
 8004e02:	460c      	mov	r4, r1
 8004e04:	4616      	mov	r6, r2
 8004e06:	d50f      	bpl.n	8004e28 <_svfiprintf_r+0x34>
 8004e08:	690b      	ldr	r3, [r1, #16]
 8004e0a:	b96b      	cbnz	r3, 8004e28 <_svfiprintf_r+0x34>
 8004e0c:	2140      	movs	r1, #64	; 0x40
 8004e0e:	f000 fae3 	bl	80053d8 <_malloc_r>
 8004e12:	6020      	str	r0, [r4, #0]
 8004e14:	6120      	str	r0, [r4, #16]
 8004e16:	b928      	cbnz	r0, 8004e24 <_svfiprintf_r+0x30>
 8004e18:	230c      	movs	r3, #12
 8004e1a:	f8c8 3000 	str.w	r3, [r8]
 8004e1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e22:	e0c8      	b.n	8004fb6 <_svfiprintf_r+0x1c2>
 8004e24:	2340      	movs	r3, #64	; 0x40
 8004e26:	6163      	str	r3, [r4, #20]
 8004e28:	2300      	movs	r3, #0
 8004e2a:	9309      	str	r3, [sp, #36]	; 0x24
 8004e2c:	2320      	movs	r3, #32
 8004e2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e32:	2330      	movs	r3, #48	; 0x30
 8004e34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e38:	9503      	str	r5, [sp, #12]
 8004e3a:	f04f 0b01 	mov.w	fp, #1
 8004e3e:	4637      	mov	r7, r6
 8004e40:	463d      	mov	r5, r7
 8004e42:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004e46:	b10b      	cbz	r3, 8004e4c <_svfiprintf_r+0x58>
 8004e48:	2b25      	cmp	r3, #37	; 0x25
 8004e4a:	d13e      	bne.n	8004eca <_svfiprintf_r+0xd6>
 8004e4c:	ebb7 0a06 	subs.w	sl, r7, r6
 8004e50:	d00b      	beq.n	8004e6a <_svfiprintf_r+0x76>
 8004e52:	4653      	mov	r3, sl
 8004e54:	4632      	mov	r2, r6
 8004e56:	4621      	mov	r1, r4
 8004e58:	4640      	mov	r0, r8
 8004e5a:	f7ff ff71 	bl	8004d40 <__ssputs_r>
 8004e5e:	3001      	adds	r0, #1
 8004e60:	f000 80a4 	beq.w	8004fac <_svfiprintf_r+0x1b8>
 8004e64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e66:	4453      	add	r3, sl
 8004e68:	9309      	str	r3, [sp, #36]	; 0x24
 8004e6a:	783b      	ldrb	r3, [r7, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f000 809d 	beq.w	8004fac <_svfiprintf_r+0x1b8>
 8004e72:	2300      	movs	r3, #0
 8004e74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e7c:	9304      	str	r3, [sp, #16]
 8004e7e:	9307      	str	r3, [sp, #28]
 8004e80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e84:	931a      	str	r3, [sp, #104]	; 0x68
 8004e86:	462f      	mov	r7, r5
 8004e88:	2205      	movs	r2, #5
 8004e8a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004e8e:	4850      	ldr	r0, [pc, #320]	; (8004fd0 <_svfiprintf_r+0x1dc>)
 8004e90:	f7fb f9ae 	bl	80001f0 <memchr>
 8004e94:	9b04      	ldr	r3, [sp, #16]
 8004e96:	b9d0      	cbnz	r0, 8004ece <_svfiprintf_r+0xda>
 8004e98:	06d9      	lsls	r1, r3, #27
 8004e9a:	bf44      	itt	mi
 8004e9c:	2220      	movmi	r2, #32
 8004e9e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004ea2:	071a      	lsls	r2, r3, #28
 8004ea4:	bf44      	itt	mi
 8004ea6:	222b      	movmi	r2, #43	; 0x2b
 8004ea8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004eac:	782a      	ldrb	r2, [r5, #0]
 8004eae:	2a2a      	cmp	r2, #42	; 0x2a
 8004eb0:	d015      	beq.n	8004ede <_svfiprintf_r+0xea>
 8004eb2:	9a07      	ldr	r2, [sp, #28]
 8004eb4:	462f      	mov	r7, r5
 8004eb6:	2000      	movs	r0, #0
 8004eb8:	250a      	movs	r5, #10
 8004eba:	4639      	mov	r1, r7
 8004ebc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ec0:	3b30      	subs	r3, #48	; 0x30
 8004ec2:	2b09      	cmp	r3, #9
 8004ec4:	d94d      	bls.n	8004f62 <_svfiprintf_r+0x16e>
 8004ec6:	b1b8      	cbz	r0, 8004ef8 <_svfiprintf_r+0x104>
 8004ec8:	e00f      	b.n	8004eea <_svfiprintf_r+0xf6>
 8004eca:	462f      	mov	r7, r5
 8004ecc:	e7b8      	b.n	8004e40 <_svfiprintf_r+0x4c>
 8004ece:	4a40      	ldr	r2, [pc, #256]	; (8004fd0 <_svfiprintf_r+0x1dc>)
 8004ed0:	1a80      	subs	r0, r0, r2
 8004ed2:	fa0b f000 	lsl.w	r0, fp, r0
 8004ed6:	4318      	orrs	r0, r3
 8004ed8:	9004      	str	r0, [sp, #16]
 8004eda:	463d      	mov	r5, r7
 8004edc:	e7d3      	b.n	8004e86 <_svfiprintf_r+0x92>
 8004ede:	9a03      	ldr	r2, [sp, #12]
 8004ee0:	1d11      	adds	r1, r2, #4
 8004ee2:	6812      	ldr	r2, [r2, #0]
 8004ee4:	9103      	str	r1, [sp, #12]
 8004ee6:	2a00      	cmp	r2, #0
 8004ee8:	db01      	blt.n	8004eee <_svfiprintf_r+0xfa>
 8004eea:	9207      	str	r2, [sp, #28]
 8004eec:	e004      	b.n	8004ef8 <_svfiprintf_r+0x104>
 8004eee:	4252      	negs	r2, r2
 8004ef0:	f043 0302 	orr.w	r3, r3, #2
 8004ef4:	9207      	str	r2, [sp, #28]
 8004ef6:	9304      	str	r3, [sp, #16]
 8004ef8:	783b      	ldrb	r3, [r7, #0]
 8004efa:	2b2e      	cmp	r3, #46	; 0x2e
 8004efc:	d10c      	bne.n	8004f18 <_svfiprintf_r+0x124>
 8004efe:	787b      	ldrb	r3, [r7, #1]
 8004f00:	2b2a      	cmp	r3, #42	; 0x2a
 8004f02:	d133      	bne.n	8004f6c <_svfiprintf_r+0x178>
 8004f04:	9b03      	ldr	r3, [sp, #12]
 8004f06:	1d1a      	adds	r2, r3, #4
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	9203      	str	r2, [sp, #12]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	bfb8      	it	lt
 8004f10:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004f14:	3702      	adds	r7, #2
 8004f16:	9305      	str	r3, [sp, #20]
 8004f18:	4d2e      	ldr	r5, [pc, #184]	; (8004fd4 <_svfiprintf_r+0x1e0>)
 8004f1a:	7839      	ldrb	r1, [r7, #0]
 8004f1c:	2203      	movs	r2, #3
 8004f1e:	4628      	mov	r0, r5
 8004f20:	f7fb f966 	bl	80001f0 <memchr>
 8004f24:	b138      	cbz	r0, 8004f36 <_svfiprintf_r+0x142>
 8004f26:	2340      	movs	r3, #64	; 0x40
 8004f28:	1b40      	subs	r0, r0, r5
 8004f2a:	fa03 f000 	lsl.w	r0, r3, r0
 8004f2e:	9b04      	ldr	r3, [sp, #16]
 8004f30:	4303      	orrs	r3, r0
 8004f32:	3701      	adds	r7, #1
 8004f34:	9304      	str	r3, [sp, #16]
 8004f36:	7839      	ldrb	r1, [r7, #0]
 8004f38:	4827      	ldr	r0, [pc, #156]	; (8004fd8 <_svfiprintf_r+0x1e4>)
 8004f3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f3e:	2206      	movs	r2, #6
 8004f40:	1c7e      	adds	r6, r7, #1
 8004f42:	f7fb f955 	bl	80001f0 <memchr>
 8004f46:	2800      	cmp	r0, #0
 8004f48:	d038      	beq.n	8004fbc <_svfiprintf_r+0x1c8>
 8004f4a:	4b24      	ldr	r3, [pc, #144]	; (8004fdc <_svfiprintf_r+0x1e8>)
 8004f4c:	bb13      	cbnz	r3, 8004f94 <_svfiprintf_r+0x1a0>
 8004f4e:	9b03      	ldr	r3, [sp, #12]
 8004f50:	3307      	adds	r3, #7
 8004f52:	f023 0307 	bic.w	r3, r3, #7
 8004f56:	3308      	adds	r3, #8
 8004f58:	9303      	str	r3, [sp, #12]
 8004f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f5c:	444b      	add	r3, r9
 8004f5e:	9309      	str	r3, [sp, #36]	; 0x24
 8004f60:	e76d      	b.n	8004e3e <_svfiprintf_r+0x4a>
 8004f62:	fb05 3202 	mla	r2, r5, r2, r3
 8004f66:	2001      	movs	r0, #1
 8004f68:	460f      	mov	r7, r1
 8004f6a:	e7a6      	b.n	8004eba <_svfiprintf_r+0xc6>
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	3701      	adds	r7, #1
 8004f70:	9305      	str	r3, [sp, #20]
 8004f72:	4619      	mov	r1, r3
 8004f74:	250a      	movs	r5, #10
 8004f76:	4638      	mov	r0, r7
 8004f78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f7c:	3a30      	subs	r2, #48	; 0x30
 8004f7e:	2a09      	cmp	r2, #9
 8004f80:	d903      	bls.n	8004f8a <_svfiprintf_r+0x196>
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d0c8      	beq.n	8004f18 <_svfiprintf_r+0x124>
 8004f86:	9105      	str	r1, [sp, #20]
 8004f88:	e7c6      	b.n	8004f18 <_svfiprintf_r+0x124>
 8004f8a:	fb05 2101 	mla	r1, r5, r1, r2
 8004f8e:	2301      	movs	r3, #1
 8004f90:	4607      	mov	r7, r0
 8004f92:	e7f0      	b.n	8004f76 <_svfiprintf_r+0x182>
 8004f94:	ab03      	add	r3, sp, #12
 8004f96:	9300      	str	r3, [sp, #0]
 8004f98:	4622      	mov	r2, r4
 8004f9a:	4b11      	ldr	r3, [pc, #68]	; (8004fe0 <_svfiprintf_r+0x1ec>)
 8004f9c:	a904      	add	r1, sp, #16
 8004f9e:	4640      	mov	r0, r8
 8004fa0:	f3af 8000 	nop.w
 8004fa4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004fa8:	4681      	mov	r9, r0
 8004faa:	d1d6      	bne.n	8004f5a <_svfiprintf_r+0x166>
 8004fac:	89a3      	ldrh	r3, [r4, #12]
 8004fae:	065b      	lsls	r3, r3, #25
 8004fb0:	f53f af35 	bmi.w	8004e1e <_svfiprintf_r+0x2a>
 8004fb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fb6:	b01d      	add	sp, #116	; 0x74
 8004fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fbc:	ab03      	add	r3, sp, #12
 8004fbe:	9300      	str	r3, [sp, #0]
 8004fc0:	4622      	mov	r2, r4
 8004fc2:	4b07      	ldr	r3, [pc, #28]	; (8004fe0 <_svfiprintf_r+0x1ec>)
 8004fc4:	a904      	add	r1, sp, #16
 8004fc6:	4640      	mov	r0, r8
 8004fc8:	f000 f882 	bl	80050d0 <_printf_i>
 8004fcc:	e7ea      	b.n	8004fa4 <_svfiprintf_r+0x1b0>
 8004fce:	bf00      	nop
 8004fd0:	08005df8 	.word	0x08005df8
 8004fd4:	08005dfe 	.word	0x08005dfe
 8004fd8:	08005e02 	.word	0x08005e02
 8004fdc:	00000000 	.word	0x00000000
 8004fe0:	08004d41 	.word	0x08004d41

08004fe4 <_printf_common>:
 8004fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fe8:	4691      	mov	r9, r2
 8004fea:	461f      	mov	r7, r3
 8004fec:	688a      	ldr	r2, [r1, #8]
 8004fee:	690b      	ldr	r3, [r1, #16]
 8004ff0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	bfb8      	it	lt
 8004ff8:	4613      	movlt	r3, r2
 8004ffa:	f8c9 3000 	str.w	r3, [r9]
 8004ffe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005002:	4606      	mov	r6, r0
 8005004:	460c      	mov	r4, r1
 8005006:	b112      	cbz	r2, 800500e <_printf_common+0x2a>
 8005008:	3301      	adds	r3, #1
 800500a:	f8c9 3000 	str.w	r3, [r9]
 800500e:	6823      	ldr	r3, [r4, #0]
 8005010:	0699      	lsls	r1, r3, #26
 8005012:	bf42      	ittt	mi
 8005014:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005018:	3302      	addmi	r3, #2
 800501a:	f8c9 3000 	strmi.w	r3, [r9]
 800501e:	6825      	ldr	r5, [r4, #0]
 8005020:	f015 0506 	ands.w	r5, r5, #6
 8005024:	d107      	bne.n	8005036 <_printf_common+0x52>
 8005026:	f104 0a19 	add.w	sl, r4, #25
 800502a:	68e3      	ldr	r3, [r4, #12]
 800502c:	f8d9 2000 	ldr.w	r2, [r9]
 8005030:	1a9b      	subs	r3, r3, r2
 8005032:	42ab      	cmp	r3, r5
 8005034:	dc28      	bgt.n	8005088 <_printf_common+0xa4>
 8005036:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800503a:	6822      	ldr	r2, [r4, #0]
 800503c:	3300      	adds	r3, #0
 800503e:	bf18      	it	ne
 8005040:	2301      	movne	r3, #1
 8005042:	0692      	lsls	r2, r2, #26
 8005044:	d42d      	bmi.n	80050a2 <_printf_common+0xbe>
 8005046:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800504a:	4639      	mov	r1, r7
 800504c:	4630      	mov	r0, r6
 800504e:	47c0      	blx	r8
 8005050:	3001      	adds	r0, #1
 8005052:	d020      	beq.n	8005096 <_printf_common+0xb2>
 8005054:	6823      	ldr	r3, [r4, #0]
 8005056:	68e5      	ldr	r5, [r4, #12]
 8005058:	f8d9 2000 	ldr.w	r2, [r9]
 800505c:	f003 0306 	and.w	r3, r3, #6
 8005060:	2b04      	cmp	r3, #4
 8005062:	bf08      	it	eq
 8005064:	1aad      	subeq	r5, r5, r2
 8005066:	68a3      	ldr	r3, [r4, #8]
 8005068:	6922      	ldr	r2, [r4, #16]
 800506a:	bf0c      	ite	eq
 800506c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005070:	2500      	movne	r5, #0
 8005072:	4293      	cmp	r3, r2
 8005074:	bfc4      	itt	gt
 8005076:	1a9b      	subgt	r3, r3, r2
 8005078:	18ed      	addgt	r5, r5, r3
 800507a:	f04f 0900 	mov.w	r9, #0
 800507e:	341a      	adds	r4, #26
 8005080:	454d      	cmp	r5, r9
 8005082:	d11a      	bne.n	80050ba <_printf_common+0xd6>
 8005084:	2000      	movs	r0, #0
 8005086:	e008      	b.n	800509a <_printf_common+0xb6>
 8005088:	2301      	movs	r3, #1
 800508a:	4652      	mov	r2, sl
 800508c:	4639      	mov	r1, r7
 800508e:	4630      	mov	r0, r6
 8005090:	47c0      	blx	r8
 8005092:	3001      	adds	r0, #1
 8005094:	d103      	bne.n	800509e <_printf_common+0xba>
 8005096:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800509a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800509e:	3501      	adds	r5, #1
 80050a0:	e7c3      	b.n	800502a <_printf_common+0x46>
 80050a2:	18e1      	adds	r1, r4, r3
 80050a4:	1c5a      	adds	r2, r3, #1
 80050a6:	2030      	movs	r0, #48	; 0x30
 80050a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050ac:	4422      	add	r2, r4
 80050ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050b6:	3302      	adds	r3, #2
 80050b8:	e7c5      	b.n	8005046 <_printf_common+0x62>
 80050ba:	2301      	movs	r3, #1
 80050bc:	4622      	mov	r2, r4
 80050be:	4639      	mov	r1, r7
 80050c0:	4630      	mov	r0, r6
 80050c2:	47c0      	blx	r8
 80050c4:	3001      	adds	r0, #1
 80050c6:	d0e6      	beq.n	8005096 <_printf_common+0xb2>
 80050c8:	f109 0901 	add.w	r9, r9, #1
 80050cc:	e7d8      	b.n	8005080 <_printf_common+0x9c>
	...

080050d0 <_printf_i>:
 80050d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80050d4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80050d8:	460c      	mov	r4, r1
 80050da:	7e09      	ldrb	r1, [r1, #24]
 80050dc:	b085      	sub	sp, #20
 80050de:	296e      	cmp	r1, #110	; 0x6e
 80050e0:	4617      	mov	r7, r2
 80050e2:	4606      	mov	r6, r0
 80050e4:	4698      	mov	r8, r3
 80050e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80050e8:	f000 80b3 	beq.w	8005252 <_printf_i+0x182>
 80050ec:	d822      	bhi.n	8005134 <_printf_i+0x64>
 80050ee:	2963      	cmp	r1, #99	; 0x63
 80050f0:	d036      	beq.n	8005160 <_printf_i+0x90>
 80050f2:	d80a      	bhi.n	800510a <_printf_i+0x3a>
 80050f4:	2900      	cmp	r1, #0
 80050f6:	f000 80b9 	beq.w	800526c <_printf_i+0x19c>
 80050fa:	2958      	cmp	r1, #88	; 0x58
 80050fc:	f000 8083 	beq.w	8005206 <_printf_i+0x136>
 8005100:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005104:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005108:	e032      	b.n	8005170 <_printf_i+0xa0>
 800510a:	2964      	cmp	r1, #100	; 0x64
 800510c:	d001      	beq.n	8005112 <_printf_i+0x42>
 800510e:	2969      	cmp	r1, #105	; 0x69
 8005110:	d1f6      	bne.n	8005100 <_printf_i+0x30>
 8005112:	6820      	ldr	r0, [r4, #0]
 8005114:	6813      	ldr	r3, [r2, #0]
 8005116:	0605      	lsls	r5, r0, #24
 8005118:	f103 0104 	add.w	r1, r3, #4
 800511c:	d52a      	bpl.n	8005174 <_printf_i+0xa4>
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	6011      	str	r1, [r2, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	da03      	bge.n	800512e <_printf_i+0x5e>
 8005126:	222d      	movs	r2, #45	; 0x2d
 8005128:	425b      	negs	r3, r3
 800512a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800512e:	486f      	ldr	r0, [pc, #444]	; (80052ec <_printf_i+0x21c>)
 8005130:	220a      	movs	r2, #10
 8005132:	e039      	b.n	80051a8 <_printf_i+0xd8>
 8005134:	2973      	cmp	r1, #115	; 0x73
 8005136:	f000 809d 	beq.w	8005274 <_printf_i+0x1a4>
 800513a:	d808      	bhi.n	800514e <_printf_i+0x7e>
 800513c:	296f      	cmp	r1, #111	; 0x6f
 800513e:	d020      	beq.n	8005182 <_printf_i+0xb2>
 8005140:	2970      	cmp	r1, #112	; 0x70
 8005142:	d1dd      	bne.n	8005100 <_printf_i+0x30>
 8005144:	6823      	ldr	r3, [r4, #0]
 8005146:	f043 0320 	orr.w	r3, r3, #32
 800514a:	6023      	str	r3, [r4, #0]
 800514c:	e003      	b.n	8005156 <_printf_i+0x86>
 800514e:	2975      	cmp	r1, #117	; 0x75
 8005150:	d017      	beq.n	8005182 <_printf_i+0xb2>
 8005152:	2978      	cmp	r1, #120	; 0x78
 8005154:	d1d4      	bne.n	8005100 <_printf_i+0x30>
 8005156:	2378      	movs	r3, #120	; 0x78
 8005158:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800515c:	4864      	ldr	r0, [pc, #400]	; (80052f0 <_printf_i+0x220>)
 800515e:	e055      	b.n	800520c <_printf_i+0x13c>
 8005160:	6813      	ldr	r3, [r2, #0]
 8005162:	1d19      	adds	r1, r3, #4
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	6011      	str	r1, [r2, #0]
 8005168:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800516c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005170:	2301      	movs	r3, #1
 8005172:	e08c      	b.n	800528e <_printf_i+0x1be>
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	6011      	str	r1, [r2, #0]
 8005178:	f010 0f40 	tst.w	r0, #64	; 0x40
 800517c:	bf18      	it	ne
 800517e:	b21b      	sxthne	r3, r3
 8005180:	e7cf      	b.n	8005122 <_printf_i+0x52>
 8005182:	6813      	ldr	r3, [r2, #0]
 8005184:	6825      	ldr	r5, [r4, #0]
 8005186:	1d18      	adds	r0, r3, #4
 8005188:	6010      	str	r0, [r2, #0]
 800518a:	0628      	lsls	r0, r5, #24
 800518c:	d501      	bpl.n	8005192 <_printf_i+0xc2>
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	e002      	b.n	8005198 <_printf_i+0xc8>
 8005192:	0668      	lsls	r0, r5, #25
 8005194:	d5fb      	bpl.n	800518e <_printf_i+0xbe>
 8005196:	881b      	ldrh	r3, [r3, #0]
 8005198:	4854      	ldr	r0, [pc, #336]	; (80052ec <_printf_i+0x21c>)
 800519a:	296f      	cmp	r1, #111	; 0x6f
 800519c:	bf14      	ite	ne
 800519e:	220a      	movne	r2, #10
 80051a0:	2208      	moveq	r2, #8
 80051a2:	2100      	movs	r1, #0
 80051a4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051a8:	6865      	ldr	r5, [r4, #4]
 80051aa:	60a5      	str	r5, [r4, #8]
 80051ac:	2d00      	cmp	r5, #0
 80051ae:	f2c0 8095 	blt.w	80052dc <_printf_i+0x20c>
 80051b2:	6821      	ldr	r1, [r4, #0]
 80051b4:	f021 0104 	bic.w	r1, r1, #4
 80051b8:	6021      	str	r1, [r4, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d13d      	bne.n	800523a <_printf_i+0x16a>
 80051be:	2d00      	cmp	r5, #0
 80051c0:	f040 808e 	bne.w	80052e0 <_printf_i+0x210>
 80051c4:	4665      	mov	r5, ip
 80051c6:	2a08      	cmp	r2, #8
 80051c8:	d10b      	bne.n	80051e2 <_printf_i+0x112>
 80051ca:	6823      	ldr	r3, [r4, #0]
 80051cc:	07db      	lsls	r3, r3, #31
 80051ce:	d508      	bpl.n	80051e2 <_printf_i+0x112>
 80051d0:	6923      	ldr	r3, [r4, #16]
 80051d2:	6862      	ldr	r2, [r4, #4]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	bfde      	ittt	le
 80051d8:	2330      	movle	r3, #48	; 0x30
 80051da:	f805 3c01 	strble.w	r3, [r5, #-1]
 80051de:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80051e2:	ebac 0305 	sub.w	r3, ip, r5
 80051e6:	6123      	str	r3, [r4, #16]
 80051e8:	f8cd 8000 	str.w	r8, [sp]
 80051ec:	463b      	mov	r3, r7
 80051ee:	aa03      	add	r2, sp, #12
 80051f0:	4621      	mov	r1, r4
 80051f2:	4630      	mov	r0, r6
 80051f4:	f7ff fef6 	bl	8004fe4 <_printf_common>
 80051f8:	3001      	adds	r0, #1
 80051fa:	d14d      	bne.n	8005298 <_printf_i+0x1c8>
 80051fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005200:	b005      	add	sp, #20
 8005202:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005206:	4839      	ldr	r0, [pc, #228]	; (80052ec <_printf_i+0x21c>)
 8005208:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800520c:	6813      	ldr	r3, [r2, #0]
 800520e:	6821      	ldr	r1, [r4, #0]
 8005210:	1d1d      	adds	r5, r3, #4
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6015      	str	r5, [r2, #0]
 8005216:	060a      	lsls	r2, r1, #24
 8005218:	d50b      	bpl.n	8005232 <_printf_i+0x162>
 800521a:	07ca      	lsls	r2, r1, #31
 800521c:	bf44      	itt	mi
 800521e:	f041 0120 	orrmi.w	r1, r1, #32
 8005222:	6021      	strmi	r1, [r4, #0]
 8005224:	b91b      	cbnz	r3, 800522e <_printf_i+0x15e>
 8005226:	6822      	ldr	r2, [r4, #0]
 8005228:	f022 0220 	bic.w	r2, r2, #32
 800522c:	6022      	str	r2, [r4, #0]
 800522e:	2210      	movs	r2, #16
 8005230:	e7b7      	b.n	80051a2 <_printf_i+0xd2>
 8005232:	064d      	lsls	r5, r1, #25
 8005234:	bf48      	it	mi
 8005236:	b29b      	uxthmi	r3, r3
 8005238:	e7ef      	b.n	800521a <_printf_i+0x14a>
 800523a:	4665      	mov	r5, ip
 800523c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005240:	fb02 3311 	mls	r3, r2, r1, r3
 8005244:	5cc3      	ldrb	r3, [r0, r3]
 8005246:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800524a:	460b      	mov	r3, r1
 800524c:	2900      	cmp	r1, #0
 800524e:	d1f5      	bne.n	800523c <_printf_i+0x16c>
 8005250:	e7b9      	b.n	80051c6 <_printf_i+0xf6>
 8005252:	6813      	ldr	r3, [r2, #0]
 8005254:	6825      	ldr	r5, [r4, #0]
 8005256:	6961      	ldr	r1, [r4, #20]
 8005258:	1d18      	adds	r0, r3, #4
 800525a:	6010      	str	r0, [r2, #0]
 800525c:	0628      	lsls	r0, r5, #24
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	d501      	bpl.n	8005266 <_printf_i+0x196>
 8005262:	6019      	str	r1, [r3, #0]
 8005264:	e002      	b.n	800526c <_printf_i+0x19c>
 8005266:	066a      	lsls	r2, r5, #25
 8005268:	d5fb      	bpl.n	8005262 <_printf_i+0x192>
 800526a:	8019      	strh	r1, [r3, #0]
 800526c:	2300      	movs	r3, #0
 800526e:	6123      	str	r3, [r4, #16]
 8005270:	4665      	mov	r5, ip
 8005272:	e7b9      	b.n	80051e8 <_printf_i+0x118>
 8005274:	6813      	ldr	r3, [r2, #0]
 8005276:	1d19      	adds	r1, r3, #4
 8005278:	6011      	str	r1, [r2, #0]
 800527a:	681d      	ldr	r5, [r3, #0]
 800527c:	6862      	ldr	r2, [r4, #4]
 800527e:	2100      	movs	r1, #0
 8005280:	4628      	mov	r0, r5
 8005282:	f7fa ffb5 	bl	80001f0 <memchr>
 8005286:	b108      	cbz	r0, 800528c <_printf_i+0x1bc>
 8005288:	1b40      	subs	r0, r0, r5
 800528a:	6060      	str	r0, [r4, #4]
 800528c:	6863      	ldr	r3, [r4, #4]
 800528e:	6123      	str	r3, [r4, #16]
 8005290:	2300      	movs	r3, #0
 8005292:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005296:	e7a7      	b.n	80051e8 <_printf_i+0x118>
 8005298:	6923      	ldr	r3, [r4, #16]
 800529a:	462a      	mov	r2, r5
 800529c:	4639      	mov	r1, r7
 800529e:	4630      	mov	r0, r6
 80052a0:	47c0      	blx	r8
 80052a2:	3001      	adds	r0, #1
 80052a4:	d0aa      	beq.n	80051fc <_printf_i+0x12c>
 80052a6:	6823      	ldr	r3, [r4, #0]
 80052a8:	079b      	lsls	r3, r3, #30
 80052aa:	d413      	bmi.n	80052d4 <_printf_i+0x204>
 80052ac:	68e0      	ldr	r0, [r4, #12]
 80052ae:	9b03      	ldr	r3, [sp, #12]
 80052b0:	4298      	cmp	r0, r3
 80052b2:	bfb8      	it	lt
 80052b4:	4618      	movlt	r0, r3
 80052b6:	e7a3      	b.n	8005200 <_printf_i+0x130>
 80052b8:	2301      	movs	r3, #1
 80052ba:	464a      	mov	r2, r9
 80052bc:	4639      	mov	r1, r7
 80052be:	4630      	mov	r0, r6
 80052c0:	47c0      	blx	r8
 80052c2:	3001      	adds	r0, #1
 80052c4:	d09a      	beq.n	80051fc <_printf_i+0x12c>
 80052c6:	3501      	adds	r5, #1
 80052c8:	68e3      	ldr	r3, [r4, #12]
 80052ca:	9a03      	ldr	r2, [sp, #12]
 80052cc:	1a9b      	subs	r3, r3, r2
 80052ce:	42ab      	cmp	r3, r5
 80052d0:	dcf2      	bgt.n	80052b8 <_printf_i+0x1e8>
 80052d2:	e7eb      	b.n	80052ac <_printf_i+0x1dc>
 80052d4:	2500      	movs	r5, #0
 80052d6:	f104 0919 	add.w	r9, r4, #25
 80052da:	e7f5      	b.n	80052c8 <_printf_i+0x1f8>
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d1ac      	bne.n	800523a <_printf_i+0x16a>
 80052e0:	7803      	ldrb	r3, [r0, #0]
 80052e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052e6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052ea:	e76c      	b.n	80051c6 <_printf_i+0xf6>
 80052ec:	08005e09 	.word	0x08005e09
 80052f0:	08005e1a 	.word	0x08005e1a

080052f4 <memcpy>:
 80052f4:	b510      	push	{r4, lr}
 80052f6:	1e43      	subs	r3, r0, #1
 80052f8:	440a      	add	r2, r1
 80052fa:	4291      	cmp	r1, r2
 80052fc:	d100      	bne.n	8005300 <memcpy+0xc>
 80052fe:	bd10      	pop	{r4, pc}
 8005300:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005304:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005308:	e7f7      	b.n	80052fa <memcpy+0x6>

0800530a <memmove>:
 800530a:	4288      	cmp	r0, r1
 800530c:	b510      	push	{r4, lr}
 800530e:	eb01 0302 	add.w	r3, r1, r2
 8005312:	d807      	bhi.n	8005324 <memmove+0x1a>
 8005314:	1e42      	subs	r2, r0, #1
 8005316:	4299      	cmp	r1, r3
 8005318:	d00a      	beq.n	8005330 <memmove+0x26>
 800531a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800531e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005322:	e7f8      	b.n	8005316 <memmove+0xc>
 8005324:	4283      	cmp	r3, r0
 8005326:	d9f5      	bls.n	8005314 <memmove+0xa>
 8005328:	1881      	adds	r1, r0, r2
 800532a:	1ad2      	subs	r2, r2, r3
 800532c:	42d3      	cmn	r3, r2
 800532e:	d100      	bne.n	8005332 <memmove+0x28>
 8005330:	bd10      	pop	{r4, pc}
 8005332:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005336:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800533a:	e7f7      	b.n	800532c <memmove+0x22>

0800533c <_free_r>:
 800533c:	b538      	push	{r3, r4, r5, lr}
 800533e:	4605      	mov	r5, r0
 8005340:	2900      	cmp	r1, #0
 8005342:	d045      	beq.n	80053d0 <_free_r+0x94>
 8005344:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005348:	1f0c      	subs	r4, r1, #4
 800534a:	2b00      	cmp	r3, #0
 800534c:	bfb8      	it	lt
 800534e:	18e4      	addlt	r4, r4, r3
 8005350:	f000 f8d2 	bl	80054f8 <__malloc_lock>
 8005354:	4a1f      	ldr	r2, [pc, #124]	; (80053d4 <_free_r+0x98>)
 8005356:	6813      	ldr	r3, [r2, #0]
 8005358:	4610      	mov	r0, r2
 800535a:	b933      	cbnz	r3, 800536a <_free_r+0x2e>
 800535c:	6063      	str	r3, [r4, #4]
 800535e:	6014      	str	r4, [r2, #0]
 8005360:	4628      	mov	r0, r5
 8005362:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005366:	f000 b8c8 	b.w	80054fa <__malloc_unlock>
 800536a:	42a3      	cmp	r3, r4
 800536c:	d90c      	bls.n	8005388 <_free_r+0x4c>
 800536e:	6821      	ldr	r1, [r4, #0]
 8005370:	1862      	adds	r2, r4, r1
 8005372:	4293      	cmp	r3, r2
 8005374:	bf04      	itt	eq
 8005376:	681a      	ldreq	r2, [r3, #0]
 8005378:	685b      	ldreq	r3, [r3, #4]
 800537a:	6063      	str	r3, [r4, #4]
 800537c:	bf04      	itt	eq
 800537e:	1852      	addeq	r2, r2, r1
 8005380:	6022      	streq	r2, [r4, #0]
 8005382:	6004      	str	r4, [r0, #0]
 8005384:	e7ec      	b.n	8005360 <_free_r+0x24>
 8005386:	4613      	mov	r3, r2
 8005388:	685a      	ldr	r2, [r3, #4]
 800538a:	b10a      	cbz	r2, 8005390 <_free_r+0x54>
 800538c:	42a2      	cmp	r2, r4
 800538e:	d9fa      	bls.n	8005386 <_free_r+0x4a>
 8005390:	6819      	ldr	r1, [r3, #0]
 8005392:	1858      	adds	r0, r3, r1
 8005394:	42a0      	cmp	r0, r4
 8005396:	d10b      	bne.n	80053b0 <_free_r+0x74>
 8005398:	6820      	ldr	r0, [r4, #0]
 800539a:	4401      	add	r1, r0
 800539c:	1858      	adds	r0, r3, r1
 800539e:	4282      	cmp	r2, r0
 80053a0:	6019      	str	r1, [r3, #0]
 80053a2:	d1dd      	bne.n	8005360 <_free_r+0x24>
 80053a4:	6810      	ldr	r0, [r2, #0]
 80053a6:	6852      	ldr	r2, [r2, #4]
 80053a8:	605a      	str	r2, [r3, #4]
 80053aa:	4401      	add	r1, r0
 80053ac:	6019      	str	r1, [r3, #0]
 80053ae:	e7d7      	b.n	8005360 <_free_r+0x24>
 80053b0:	d902      	bls.n	80053b8 <_free_r+0x7c>
 80053b2:	230c      	movs	r3, #12
 80053b4:	602b      	str	r3, [r5, #0]
 80053b6:	e7d3      	b.n	8005360 <_free_r+0x24>
 80053b8:	6820      	ldr	r0, [r4, #0]
 80053ba:	1821      	adds	r1, r4, r0
 80053bc:	428a      	cmp	r2, r1
 80053be:	bf04      	itt	eq
 80053c0:	6811      	ldreq	r1, [r2, #0]
 80053c2:	6852      	ldreq	r2, [r2, #4]
 80053c4:	6062      	str	r2, [r4, #4]
 80053c6:	bf04      	itt	eq
 80053c8:	1809      	addeq	r1, r1, r0
 80053ca:	6021      	streq	r1, [r4, #0]
 80053cc:	605c      	str	r4, [r3, #4]
 80053ce:	e7c7      	b.n	8005360 <_free_r+0x24>
 80053d0:	bd38      	pop	{r3, r4, r5, pc}
 80053d2:	bf00      	nop
 80053d4:	200000b4 	.word	0x200000b4

080053d8 <_malloc_r>:
 80053d8:	b570      	push	{r4, r5, r6, lr}
 80053da:	1ccd      	adds	r5, r1, #3
 80053dc:	f025 0503 	bic.w	r5, r5, #3
 80053e0:	3508      	adds	r5, #8
 80053e2:	2d0c      	cmp	r5, #12
 80053e4:	bf38      	it	cc
 80053e6:	250c      	movcc	r5, #12
 80053e8:	2d00      	cmp	r5, #0
 80053ea:	4606      	mov	r6, r0
 80053ec:	db01      	blt.n	80053f2 <_malloc_r+0x1a>
 80053ee:	42a9      	cmp	r1, r5
 80053f0:	d903      	bls.n	80053fa <_malloc_r+0x22>
 80053f2:	230c      	movs	r3, #12
 80053f4:	6033      	str	r3, [r6, #0]
 80053f6:	2000      	movs	r0, #0
 80053f8:	bd70      	pop	{r4, r5, r6, pc}
 80053fa:	f000 f87d 	bl	80054f8 <__malloc_lock>
 80053fe:	4a21      	ldr	r2, [pc, #132]	; (8005484 <_malloc_r+0xac>)
 8005400:	6814      	ldr	r4, [r2, #0]
 8005402:	4621      	mov	r1, r4
 8005404:	b991      	cbnz	r1, 800542c <_malloc_r+0x54>
 8005406:	4c20      	ldr	r4, [pc, #128]	; (8005488 <_malloc_r+0xb0>)
 8005408:	6823      	ldr	r3, [r4, #0]
 800540a:	b91b      	cbnz	r3, 8005414 <_malloc_r+0x3c>
 800540c:	4630      	mov	r0, r6
 800540e:	f000 f863 	bl	80054d8 <_sbrk_r>
 8005412:	6020      	str	r0, [r4, #0]
 8005414:	4629      	mov	r1, r5
 8005416:	4630      	mov	r0, r6
 8005418:	f000 f85e 	bl	80054d8 <_sbrk_r>
 800541c:	1c43      	adds	r3, r0, #1
 800541e:	d124      	bne.n	800546a <_malloc_r+0x92>
 8005420:	230c      	movs	r3, #12
 8005422:	6033      	str	r3, [r6, #0]
 8005424:	4630      	mov	r0, r6
 8005426:	f000 f868 	bl	80054fa <__malloc_unlock>
 800542a:	e7e4      	b.n	80053f6 <_malloc_r+0x1e>
 800542c:	680b      	ldr	r3, [r1, #0]
 800542e:	1b5b      	subs	r3, r3, r5
 8005430:	d418      	bmi.n	8005464 <_malloc_r+0x8c>
 8005432:	2b0b      	cmp	r3, #11
 8005434:	d90f      	bls.n	8005456 <_malloc_r+0x7e>
 8005436:	600b      	str	r3, [r1, #0]
 8005438:	50cd      	str	r5, [r1, r3]
 800543a:	18cc      	adds	r4, r1, r3
 800543c:	4630      	mov	r0, r6
 800543e:	f000 f85c 	bl	80054fa <__malloc_unlock>
 8005442:	f104 000b 	add.w	r0, r4, #11
 8005446:	1d23      	adds	r3, r4, #4
 8005448:	f020 0007 	bic.w	r0, r0, #7
 800544c:	1ac3      	subs	r3, r0, r3
 800544e:	d0d3      	beq.n	80053f8 <_malloc_r+0x20>
 8005450:	425a      	negs	r2, r3
 8005452:	50e2      	str	r2, [r4, r3]
 8005454:	e7d0      	b.n	80053f8 <_malloc_r+0x20>
 8005456:	428c      	cmp	r4, r1
 8005458:	684b      	ldr	r3, [r1, #4]
 800545a:	bf16      	itet	ne
 800545c:	6063      	strne	r3, [r4, #4]
 800545e:	6013      	streq	r3, [r2, #0]
 8005460:	460c      	movne	r4, r1
 8005462:	e7eb      	b.n	800543c <_malloc_r+0x64>
 8005464:	460c      	mov	r4, r1
 8005466:	6849      	ldr	r1, [r1, #4]
 8005468:	e7cc      	b.n	8005404 <_malloc_r+0x2c>
 800546a:	1cc4      	adds	r4, r0, #3
 800546c:	f024 0403 	bic.w	r4, r4, #3
 8005470:	42a0      	cmp	r0, r4
 8005472:	d005      	beq.n	8005480 <_malloc_r+0xa8>
 8005474:	1a21      	subs	r1, r4, r0
 8005476:	4630      	mov	r0, r6
 8005478:	f000 f82e 	bl	80054d8 <_sbrk_r>
 800547c:	3001      	adds	r0, #1
 800547e:	d0cf      	beq.n	8005420 <_malloc_r+0x48>
 8005480:	6025      	str	r5, [r4, #0]
 8005482:	e7db      	b.n	800543c <_malloc_r+0x64>
 8005484:	200000b4 	.word	0x200000b4
 8005488:	200000b8 	.word	0x200000b8

0800548c <_realloc_r>:
 800548c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548e:	4607      	mov	r7, r0
 8005490:	4614      	mov	r4, r2
 8005492:	460e      	mov	r6, r1
 8005494:	b921      	cbnz	r1, 80054a0 <_realloc_r+0x14>
 8005496:	4611      	mov	r1, r2
 8005498:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800549c:	f7ff bf9c 	b.w	80053d8 <_malloc_r>
 80054a0:	b922      	cbnz	r2, 80054ac <_realloc_r+0x20>
 80054a2:	f7ff ff4b 	bl	800533c <_free_r>
 80054a6:	4625      	mov	r5, r4
 80054a8:	4628      	mov	r0, r5
 80054aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054ac:	f000 f826 	bl	80054fc <_malloc_usable_size_r>
 80054b0:	42a0      	cmp	r0, r4
 80054b2:	d20f      	bcs.n	80054d4 <_realloc_r+0x48>
 80054b4:	4621      	mov	r1, r4
 80054b6:	4638      	mov	r0, r7
 80054b8:	f7ff ff8e 	bl	80053d8 <_malloc_r>
 80054bc:	4605      	mov	r5, r0
 80054be:	2800      	cmp	r0, #0
 80054c0:	d0f2      	beq.n	80054a8 <_realloc_r+0x1c>
 80054c2:	4631      	mov	r1, r6
 80054c4:	4622      	mov	r2, r4
 80054c6:	f7ff ff15 	bl	80052f4 <memcpy>
 80054ca:	4631      	mov	r1, r6
 80054cc:	4638      	mov	r0, r7
 80054ce:	f7ff ff35 	bl	800533c <_free_r>
 80054d2:	e7e9      	b.n	80054a8 <_realloc_r+0x1c>
 80054d4:	4635      	mov	r5, r6
 80054d6:	e7e7      	b.n	80054a8 <_realloc_r+0x1c>

080054d8 <_sbrk_r>:
 80054d8:	b538      	push	{r3, r4, r5, lr}
 80054da:	4c06      	ldr	r4, [pc, #24]	; (80054f4 <_sbrk_r+0x1c>)
 80054dc:	2300      	movs	r3, #0
 80054de:	4605      	mov	r5, r0
 80054e0:	4608      	mov	r0, r1
 80054e2:	6023      	str	r3, [r4, #0]
 80054e4:	f7ff fb4e 	bl	8004b84 <_sbrk>
 80054e8:	1c43      	adds	r3, r0, #1
 80054ea:	d102      	bne.n	80054f2 <_sbrk_r+0x1a>
 80054ec:	6823      	ldr	r3, [r4, #0]
 80054ee:	b103      	cbz	r3, 80054f2 <_sbrk_r+0x1a>
 80054f0:	602b      	str	r3, [r5, #0]
 80054f2:	bd38      	pop	{r3, r4, r5, pc}
 80054f4:	20000248 	.word	0x20000248

080054f8 <__malloc_lock>:
 80054f8:	4770      	bx	lr

080054fa <__malloc_unlock>:
 80054fa:	4770      	bx	lr

080054fc <_malloc_usable_size_r>:
 80054fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005500:	1f18      	subs	r0, r3, #4
 8005502:	2b00      	cmp	r3, #0
 8005504:	bfbc      	itt	lt
 8005506:	580b      	ldrlt	r3, [r1, r0]
 8005508:	18c0      	addlt	r0, r0, r3
 800550a:	4770      	bx	lr

0800550c <_init>:
 800550c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800550e:	bf00      	nop
 8005510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005512:	bc08      	pop	{r3}
 8005514:	469e      	mov	lr, r3
 8005516:	4770      	bx	lr

08005518 <_fini>:
 8005518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800551a:	bf00      	nop
 800551c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800551e:	bc08      	pop	{r3}
 8005520:	469e      	mov	lr, r3
 8005522:	4770      	bx	lr
