
ota_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f8c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0800513c  0800513c  0001513c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055d4  080055d4  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  080055d4  080055d4  000155d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055dc  080055dc  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055dc  080055dc  000155dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055e0  080055e0  000155e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  080055e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000094  08005678  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  08005678  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bee3  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f7a  00000000  00000000  0002bfa7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ac8  00000000  00000000  0002df28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009c0  00000000  00000000  0002e9f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027ffa  00000000  00000000  0002f3b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000954f  00000000  00000000  000573aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f7894  00000000  00000000  000608f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015818d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d98  00000000  00000000  00158208  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005124 	.word	0x08005124

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	08005124 	.word	0x08005124

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000596:	2300      	movs	r3, #0
 8000598:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800059a:	2003      	movs	r0, #3
 800059c:	f000 f970 	bl	8000880 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005a0:	2000      	movs	r0, #0
 80005a2:	f000 f841 	bl	8000628 <HAL_InitTick>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d002      	beq.n	80005b2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005ac:	2301      	movs	r3, #1
 80005ae:	71fb      	strb	r3, [r7, #7]
 80005b0:	e001      	b.n	80005b6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005b2:	f004 f80f 	bl	80045d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005b6:	79fb      	ldrb	r3, [r7, #7]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <HAL_DeInit>:
  * @brief De-initialize common part of the HAL and stop the source of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 80005c4:	4b13      	ldr	r3, [pc, #76]	; (8000614 <HAL_DeInit+0x54>)
 80005c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80005ca:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_RCC_APB1_RELEASE_RESET();
 80005cc:	4b11      	ldr	r3, [pc, #68]	; (8000614 <HAL_DeInit+0x54>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	639a      	str	r2, [r3, #56]	; 0x38

  __HAL_RCC_APB2_FORCE_RESET();
 80005d2:	4b10      	ldr	r3, [pc, #64]	; (8000614 <HAL_DeInit+0x54>)
 80005d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80005d8:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_RCC_APB2_RELEASE_RESET();
 80005da:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <HAL_DeInit+0x54>)
 80005dc:	2200      	movs	r2, #0
 80005de:	641a      	str	r2, [r3, #64]	; 0x40

  __HAL_RCC_AHB1_FORCE_RESET();
 80005e0:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <HAL_DeInit+0x54>)
 80005e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80005e6:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_AHB1_RELEASE_RESET();
 80005e8:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <HAL_DeInit+0x54>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	629a      	str	r2, [r3, #40]	; 0x28

  __HAL_RCC_AHB2_FORCE_RESET();
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <HAL_DeInit+0x54>)
 80005f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80005f4:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_AHB2_RELEASE_RESET();
 80005f6:	4b07      	ldr	r3, [pc, #28]	; (8000614 <HAL_DeInit+0x54>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	62da      	str	r2, [r3, #44]	; 0x2c

  __HAL_RCC_AHB3_FORCE_RESET();
 80005fc:	4b05      	ldr	r3, [pc, #20]	; (8000614 <HAL_DeInit+0x54>)
 80005fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000602:	631a      	str	r2, [r3, #48]	; 0x30
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000604:	4b03      	ldr	r3, [pc, #12]	; (8000614 <HAL_DeInit+0x54>)
 8000606:	2200      	movs	r2, #0
 8000608:	631a      	str	r2, [r3, #48]	; 0x30

  // De-Init the low level hardware
  HAL_MspDeInit();
 800060a:	f000 f805 	bl	8000618 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 800060e:	2300      	movs	r3, #0
}
 8000610:	4618      	mov	r0, r3
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40021000 	.word	0x40021000

08000618 <HAL_MspDeInit>:
/**
  * @brief  DeInitialize the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
	...

08000628 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000630:	2300      	movs	r3, #0
 8000632:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000634:	4b16      	ldr	r3, [pc, #88]	; (8000690 <HAL_InitTick+0x68>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d022      	beq.n	8000682 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800063c:	4b15      	ldr	r3, [pc, #84]	; (8000694 <HAL_InitTick+0x6c>)
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	4b13      	ldr	r3, [pc, #76]	; (8000690 <HAL_InitTick+0x68>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000648:	fbb1 f3f3 	udiv	r3, r1, r3
 800064c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000650:	4618      	mov	r0, r3
 8000652:	f000 f93c 	bl	80008ce <HAL_SYSTICK_Config>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d10f      	bne.n	800067c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2b0f      	cmp	r3, #15
 8000660:	d809      	bhi.n	8000676 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000662:	2200      	movs	r2, #0
 8000664:	6879      	ldr	r1, [r7, #4]
 8000666:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800066a:	f000 f914 	bl	8000896 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800066e:	4a0a      	ldr	r2, [pc, #40]	; (8000698 <HAL_InitTick+0x70>)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	6013      	str	r3, [r2, #0]
 8000674:	e007      	b.n	8000686 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000676:	2301      	movs	r3, #1
 8000678:	73fb      	strb	r3, [r7, #15]
 800067a:	e004      	b.n	8000686 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800067c:	2301      	movs	r3, #1
 800067e:	73fb      	strb	r3, [r7, #15]
 8000680:	e001      	b.n	8000686 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000682:	2301      	movs	r3, #1
 8000684:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000686:	7bfb      	ldrb	r3, [r7, #15]
}
 8000688:	4618      	mov	r0, r3
 800068a:	3710      	adds	r7, #16
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000004 	.word	0x20000004
 8000694:	2000002c 	.word	0x2000002c
 8000698:	20000000 	.word	0x20000000

0800069c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006a0:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <HAL_IncTick+0x1c>)
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	4b05      	ldr	r3, [pc, #20]	; (80006bc <HAL_IncTick+0x20>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4413      	add	r3, r2
 80006aa:	4a03      	ldr	r2, [pc, #12]	; (80006b8 <HAL_IncTick+0x1c>)
 80006ac:	6013      	str	r3, [r2, #0]
}
 80006ae:	bf00      	nop
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	200000bc 	.word	0x200000bc
 80006bc:	20000004 	.word	0x20000004

080006c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  return uwTick;
 80006c4:	4b03      	ldr	r3, [pc, #12]	; (80006d4 <HAL_GetTick+0x14>)
 80006c6:	681b      	ldr	r3, [r3, #0]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	200000bc 	.word	0x200000bc

080006d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006e0:	f7ff ffee 	bl	80006c0 <HAL_GetTick>
 80006e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80006f0:	d004      	beq.n	80006fc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <HAL_Delay+0x40>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	68fa      	ldr	r2, [r7, #12]
 80006f8:	4413      	add	r3, r2
 80006fa:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80006fc:	bf00      	nop
 80006fe:	f7ff ffdf 	bl	80006c0 <HAL_GetTick>
 8000702:	4602      	mov	r2, r0
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	1ad3      	subs	r3, r2, r3
 8000708:	68fa      	ldr	r2, [r7, #12]
 800070a:	429a      	cmp	r2, r3
 800070c:	d8f7      	bhi.n	80006fe <HAL_Delay+0x26>
  {
  }
}
 800070e:	bf00      	nop
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000004 	.word	0x20000004

0800071c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800071c:	b480      	push	{r7}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	f003 0307 	and.w	r3, r3, #7
 800072a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <__NVIC_SetPriorityGrouping+0x44>)
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000732:	68ba      	ldr	r2, [r7, #8]
 8000734:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000738:	4013      	ands	r3, r2
 800073a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000744:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800074c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800074e:	4a04      	ldr	r2, [pc, #16]	; (8000760 <__NVIC_SetPriorityGrouping+0x44>)
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	60d3      	str	r3, [r2, #12]
}
 8000754:	bf00      	nop
 8000756:	3714      	adds	r7, #20
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	e000ed00 	.word	0xe000ed00

08000764 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000768:	4b04      	ldr	r3, [pc, #16]	; (800077c <__NVIC_GetPriorityGrouping+0x18>)
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	0a1b      	lsrs	r3, r3, #8
 800076e:	f003 0307 	and.w	r3, r3, #7
}
 8000772:	4618      	mov	r0, r3
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	6039      	str	r1, [r7, #0]
 800078a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800078c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000790:	2b00      	cmp	r3, #0
 8000792:	db0a      	blt.n	80007aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	b2da      	uxtb	r2, r3
 8000798:	490c      	ldr	r1, [pc, #48]	; (80007cc <__NVIC_SetPriority+0x4c>)
 800079a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079e:	0112      	lsls	r2, r2, #4
 80007a0:	b2d2      	uxtb	r2, r2
 80007a2:	440b      	add	r3, r1
 80007a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007a8:	e00a      	b.n	80007c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	4908      	ldr	r1, [pc, #32]	; (80007d0 <__NVIC_SetPriority+0x50>)
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	f003 030f 	and.w	r3, r3, #15
 80007b6:	3b04      	subs	r3, #4
 80007b8:	0112      	lsls	r2, r2, #4
 80007ba:	b2d2      	uxtb	r2, r2
 80007bc:	440b      	add	r3, r1
 80007be:	761a      	strb	r2, [r3, #24]
}
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	e000e100 	.word	0xe000e100
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b089      	sub	sp, #36	; 0x24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	60f8      	str	r0, [r7, #12]
 80007dc:	60b9      	str	r1, [r7, #8]
 80007de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	f003 0307 	and.w	r3, r3, #7
 80007e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007e8:	69fb      	ldr	r3, [r7, #28]
 80007ea:	f1c3 0307 	rsb	r3, r3, #7
 80007ee:	2b04      	cmp	r3, #4
 80007f0:	bf28      	it	cs
 80007f2:	2304      	movcs	r3, #4
 80007f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	3304      	adds	r3, #4
 80007fa:	2b06      	cmp	r3, #6
 80007fc:	d902      	bls.n	8000804 <NVIC_EncodePriority+0x30>
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	3b03      	subs	r3, #3
 8000802:	e000      	b.n	8000806 <NVIC_EncodePriority+0x32>
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000808:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800080c:	69bb      	ldr	r3, [r7, #24]
 800080e:	fa02 f303 	lsl.w	r3, r2, r3
 8000812:	43da      	mvns	r2, r3
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	401a      	ands	r2, r3
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800081c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	fa01 f303 	lsl.w	r3, r1, r3
 8000826:	43d9      	mvns	r1, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800082c:	4313      	orrs	r3, r2
         );
}
 800082e:	4618      	mov	r0, r3
 8000830:	3724      	adds	r7, #36	; 0x24
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
	...

0800083c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	3b01      	subs	r3, #1
 8000848:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800084c:	d301      	bcc.n	8000852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800084e:	2301      	movs	r3, #1
 8000850:	e00f      	b.n	8000872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000852:	4a0a      	ldr	r2, [pc, #40]	; (800087c <SysTick_Config+0x40>)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	3b01      	subs	r3, #1
 8000858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800085a:	210f      	movs	r1, #15
 800085c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000860:	f7ff ff8e 	bl	8000780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <SysTick_Config+0x40>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800086a:	4b04      	ldr	r3, [pc, #16]	; (800087c <SysTick_Config+0x40>)
 800086c:	2207      	movs	r2, #7
 800086e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000870:	2300      	movs	r3, #0
}
 8000872:	4618      	mov	r0, r3
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	e000e010 	.word	0xe000e010

08000880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f7ff ff47 	bl	800071c <__NVIC_SetPriorityGrouping>
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	b086      	sub	sp, #24
 800089a:	af00      	add	r7, sp, #0
 800089c:	4603      	mov	r3, r0
 800089e:	60b9      	str	r1, [r7, #8]
 80008a0:	607a      	str	r2, [r7, #4]
 80008a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008a8:	f7ff ff5c 	bl	8000764 <__NVIC_GetPriorityGrouping>
 80008ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	68b9      	ldr	r1, [r7, #8]
 80008b2:	6978      	ldr	r0, [r7, #20]
 80008b4:	f7ff ff8e 	bl	80007d4 <NVIC_EncodePriority>
 80008b8:	4602      	mov	r2, r0
 80008ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008be:	4611      	mov	r1, r2
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff ff5d 	bl	8000780 <__NVIC_SetPriority>
}
 80008c6:	bf00      	nop
 80008c8:	3718      	adds	r7, #24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b082      	sub	sp, #8
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f7ff ffb0 	bl	800083c <SysTick_Config>
 80008dc:	4603      	mov	r3, r0
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80008fa:	4b2f      	ldr	r3, [pc, #188]	; (80009b8 <HAL_FLASH_Program+0xd0>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d101      	bne.n	8000906 <HAL_FLASH_Program+0x1e>
 8000902:	2302      	movs	r3, #2
 8000904:	e053      	b.n	80009ae <HAL_FLASH_Program+0xc6>
 8000906:	4b2c      	ldr	r3, [pc, #176]	; (80009b8 <HAL_FLASH_Program+0xd0>)
 8000908:	2201      	movs	r2, #1
 800090a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800090c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000910:	f000 f888 	bl	8000a24 <FLASH_WaitForLastOperation>
 8000914:	4603      	mov	r3, r0
 8000916:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8000918:	7dfb      	ldrb	r3, [r7, #23]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d143      	bne.n	80009a6 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800091e:	4b26      	ldr	r3, [pc, #152]	; (80009b8 <HAL_FLASH_Program+0xd0>)
 8000920:	2200      	movs	r2, #0
 8000922:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8000924:	4b25      	ldr	r3, [pc, #148]	; (80009bc <HAL_FLASH_Program+0xd4>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800092c:	2b00      	cmp	r3, #0
 800092e:	d009      	beq.n	8000944 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8000930:	4b22      	ldr	r3, [pc, #136]	; (80009bc <HAL_FLASH_Program+0xd4>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a21      	ldr	r2, [pc, #132]	; (80009bc <HAL_FLASH_Program+0xd4>)
 8000936:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800093a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800093c:	4b1e      	ldr	r3, [pc, #120]	; (80009b8 <HAL_FLASH_Program+0xd0>)
 800093e:	2202      	movs	r2, #2
 8000940:	771a      	strb	r2, [r3, #28]
 8000942:	e002      	b.n	800094a <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8000944:	4b1c      	ldr	r3, [pc, #112]	; (80009b8 <HAL_FLASH_Program+0xd0>)
 8000946:	2200      	movs	r2, #0
 8000948:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d107      	bne.n	8000960 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8000950:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000954:	68b8      	ldr	r0, [r7, #8]
 8000956:	f000 f8c5 	bl	8000ae4 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 800095a:	2301      	movs	r3, #1
 800095c:	613b      	str	r3, [r7, #16]
 800095e:	e010      	b.n	8000982 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	2b01      	cmp	r3, #1
 8000964:	d002      	beq.n	800096c <HAL_FLASH_Program+0x84>
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	2b02      	cmp	r3, #2
 800096a:	d10a      	bne.n	8000982 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	4619      	mov	r1, r3
 8000970:	68b8      	ldr	r0, [r7, #8]
 8000972:	f000 f8db 	bl	8000b2c <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	2b02      	cmp	r3, #2
 800097a:	d102      	bne.n	8000982 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 800097c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000980:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000982:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000986:	f000 f84d 	bl	8000a24 <FLASH_WaitForLastOperation>
 800098a:	4603      	mov	r3, r0
 800098c:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800098e:	693b      	ldr	r3, [r7, #16]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d006      	beq.n	80009a2 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8000994:	4b09      	ldr	r3, [pc, #36]	; (80009bc <HAL_FLASH_Program+0xd4>)
 8000996:	695a      	ldr	r2, [r3, #20]
 8000998:	693b      	ldr	r3, [r7, #16]
 800099a:	43db      	mvns	r3, r3
 800099c:	4907      	ldr	r1, [pc, #28]	; (80009bc <HAL_FLASH_Program+0xd4>)
 800099e:	4013      	ands	r3, r2
 80009a0:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80009a2:	f000 f9f7 	bl	8000d94 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80009a6:	4b04      	ldr	r3, [pc, #16]	; (80009b8 <HAL_FLASH_Program+0xd0>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	701a      	strb	r2, [r3, #0]

  return status;
 80009ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3718      	adds	r7, #24
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000008 	.word	0x20000008
 80009bc:	40022000 	.word	0x40022000

080009c0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80009c6:	2300      	movs	r3, #0
 80009c8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <HAL_FLASH_Unlock+0x38>)
 80009cc:	695b      	ldr	r3, [r3, #20]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	da0b      	bge.n	80009ea <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80009d2:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <HAL_FLASH_Unlock+0x38>)
 80009d4:	4a09      	ldr	r2, [pc, #36]	; (80009fc <HAL_FLASH_Unlock+0x3c>)
 80009d6:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80009d8:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <HAL_FLASH_Unlock+0x38>)
 80009da:	4a09      	ldr	r2, [pc, #36]	; (8000a00 <HAL_FLASH_Unlock+0x40>)
 80009dc:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <HAL_FLASH_Unlock+0x38>)
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	da01      	bge.n	80009ea <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80009e6:	2301      	movs	r3, #1
 80009e8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80009ea:	79fb      	ldrb	r3, [r7, #7]
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	40022000 	.word	0x40022000
 80009fc:	45670123 	.word	0x45670123
 8000a00:	cdef89ab 	.word	0xcdef89ab

08000a04 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000a08:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <HAL_FLASH_Lock+0x1c>)
 8000a0a:	695b      	ldr	r3, [r3, #20]
 8000a0c:	4a04      	ldr	r2, [pc, #16]	; (8000a20 <HAL_FLASH_Lock+0x1c>)
 8000a0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a12:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	40022000 	.word	0x40022000

08000a24 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout: maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8000a2c:	f7ff fe48 	bl	80006c0 <HAL_GetTick>
 8000a30:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8000a32:	e00d      	b.n	8000a50 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a3a:	d009      	beq.n	8000a50 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8000a3c:	f7ff fe40 	bl	80006c0 <HAL_GetTick>
 8000a40:	4602      	mov	r2, r0
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d801      	bhi.n	8000a50 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	e03e      	b.n	8000ace <FLASH_WaitForLastOperation+0xaa>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8000a50:	4b21      	ldr	r3, [pc, #132]	; (8000ad8 <FLASH_WaitForLastOperation+0xb4>)
 8000a52:	691b      	ldr	r3, [r3, #16]
 8000a54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a5c:	d0ea      	beq.n	8000a34 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8000a5e:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <FLASH_WaitForLastOperation+0xb4>)
 8000a60:	691a      	ldr	r2, [r3, #16]
 8000a62:	4b1e      	ldr	r3, [pc, #120]	; (8000adc <FLASH_WaitForLastOperation+0xb8>)
 8000a64:	4013      	ands	r3, r2
 8000a66:	60bb      	str	r3, [r7, #8]
  error |= (FLASH->ECCR & FLASH_FLAG_ECCD);
 8000a68:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <FLASH_WaitForLastOperation+0xb4>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000a70:	68ba      	ldr	r2, [r7, #8]
 8000a72:	4313      	orrs	r3, r2
 8000a74:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d01e      	beq.n	8000aba <FLASH_WaitForLastOperation+0x96>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8000a7c:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <FLASH_WaitForLastOperation+0xbc>)
 8000a7e:	685a      	ldr	r2, [r3, #4]
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	4313      	orrs	r3, r2
 8000a84:	4a16      	ldr	r2, [pc, #88]	; (8000ae0 <FLASH_WaitForLastOperation+0xbc>)
 8000a86:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d007      	beq.n	8000aa2 <FLASH_WaitForLastOperation+0x7e>
 8000a92:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <FLASH_WaitForLastOperation+0xb4>)
 8000a94:	699a      	ldr	r2, [r3, #24]
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8000a9c:	490e      	ldr	r1, [pc, #56]	; (8000ad8 <FLASH_WaitForLastOperation+0xb4>)
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	618b      	str	r3, [r1, #24]
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d004      	beq.n	8000ab6 <FLASH_WaitForLastOperation+0x92>
 8000aac:	4a0a      	ldr	r2, [pc, #40]	; (8000ad8 <FLASH_WaitForLastOperation+0xb4>)
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000ab4:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e009      	b.n	8000ace <FLASH_WaitForLastOperation+0xaa>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000aba:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <FLASH_WaitForLastOperation+0xb4>)
 8000abc:	691b      	ldr	r3, [r3, #16]
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d102      	bne.n	8000acc <FLASH_WaitForLastOperation+0xa8>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000ac6:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <FLASH_WaitForLastOperation+0xb4>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8000acc:	2300      	movs	r3, #0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40022000 	.word	0x40022000
 8000adc:	0002c3fa 	.word	0x0002c3fa
 8000ae0:	20000008 	.word	0x20000008

08000ae4 <FLASH_Program_DoubleWord>:
  * @param  Address: specifies the address to be programmed.
  * @param  Data: specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8000ae4:	b490      	push	{r4, r7}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000af0:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <FLASH_Program_DoubleWord+0x44>)
 8000af2:	695b      	ldr	r3, [r3, #20]
 8000af4:	4a0c      	ldr	r2, [pc, #48]	; (8000b28 <FLASH_Program_DoubleWord+0x44>)
 8000af6:	f043 0301 	orr.w	r3, r3, #1
 8000afa:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	683a      	ldr	r2, [r7, #0]
 8000b00:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000b02:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8000b06:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000b0a:	f04f 0300 	mov.w	r3, #0
 8000b0e:	f04f 0400 	mov.w	r4, #0
 8000b12:	0013      	movs	r3, r2
 8000b14:	2400      	movs	r4, #0
 8000b16:	68fa      	ldr	r2, [r7, #12]
 8000b18:	3204      	adds	r2, #4
 8000b1a:	6013      	str	r3, [r2, #0]
}
 8000b1c:	bf00      	nop
 8000b1e:	3710      	adds	r7, #16
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc90      	pop	{r4, r7}
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	40022000 	.word	0x40022000

08000b2c <FLASH_Program_Fast>:
  * @param  Address: specifies the address to be programmed.
  * @param  DataAddress: specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b089      	sub	sp, #36	; 0x24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8000b36:	2340      	movs	r3, #64	; 0x40
 8000b38:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8000b42:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <FLASH_Program_Fast+0x64>)
 8000b44:	695b      	ldr	r3, [r3, #20]
 8000b46:	4a12      	ldr	r2, [pc, #72]	; (8000b90 <FLASH_Program_Fast+0x64>)
 8000b48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b4c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000b4e:	f3ef 8310 	mrs	r3, PRIMASK
 8000b52:	60fb      	str	r3, [r7, #12]
  return(result);
 8000b54:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8000b56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8000b58:	b672      	cpsid	i
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	69bb      	ldr	r3, [r7, #24]
 8000b60:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	3304      	adds	r3, #4
 8000b66:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	3304      	adds	r3, #4
 8000b6c:	617b      	str	r3, [r7, #20]
    row_index--;
 8000b6e:	7ffb      	ldrb	r3, [r7, #31]
 8000b70:	3b01      	subs	r3, #1
 8000b72:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8000b74:	7ffb      	ldrb	r3, [r7, #31]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d1ef      	bne.n	8000b5a <FLASH_Program_Fast+0x2e>
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	f383 8810 	msr	PRIMASK, r3

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8000b84:	bf00      	nop
 8000b86:	3724      	adds	r7, #36	; 0x24
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	40022000 	.word	0x40022000

08000b94 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000b9e:	4b4c      	ldr	r3, [pc, #304]	; (8000cd0 <HAL_FLASHEx_Erase+0x13c>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d101      	bne.n	8000baa <HAL_FLASHEx_Erase+0x16>
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	e08d      	b.n	8000cc6 <HAL_FLASHEx_Erase+0x132>
 8000baa:	4b49      	ldr	r3, [pc, #292]	; (8000cd0 <HAL_FLASHEx_Erase+0x13c>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000bb0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000bb4:	f7ff ff36 	bl	8000a24 <FLASH_WaitForLastOperation>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8000bbc:	7bfb      	ldrb	r3, [r7, #15]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d17d      	bne.n	8000cbe <HAL_FLASHEx_Erase+0x12a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000bc2:	4b43      	ldr	r3, [pc, #268]	; (8000cd0 <HAL_FLASHEx_Erase+0x13c>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8000bc8:	4b42      	ldr	r3, [pc, #264]	; (8000cd4 <HAL_FLASHEx_Erase+0x140>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d019      	beq.n	8000c08 <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8000bd4:	4b3f      	ldr	r3, [pc, #252]	; (8000cd4 <HAL_FLASHEx_Erase+0x140>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a3e      	ldr	r2, [pc, #248]	; (8000cd4 <HAL_FLASHEx_Erase+0x140>)
 8000bda:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000bde:	6013      	str	r3, [r2, #0]

      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8000be0:	4b3c      	ldr	r3, [pc, #240]	; (8000cd4 <HAL_FLASHEx_Erase+0x140>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d009      	beq.n	8000c00 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8000bec:	4b39      	ldr	r3, [pc, #228]	; (8000cd4 <HAL_FLASHEx_Erase+0x140>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a38      	ldr	r2, [pc, #224]	; (8000cd4 <HAL_FLASHEx_Erase+0x140>)
 8000bf2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000bf6:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8000bf8:	4b35      	ldr	r3, [pc, #212]	; (8000cd0 <HAL_FLASHEx_Erase+0x13c>)
 8000bfa:	2203      	movs	r2, #3
 8000bfc:	771a      	strb	r2, [r3, #28]
 8000bfe:	e016      	b.n	8000c2e <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8000c00:	4b33      	ldr	r3, [pc, #204]	; (8000cd0 <HAL_FLASHEx_Erase+0x13c>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	771a      	strb	r2, [r3, #28]
 8000c06:	e012      	b.n	8000c2e <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8000c08:	4b32      	ldr	r3, [pc, #200]	; (8000cd4 <HAL_FLASHEx_Erase+0x140>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d009      	beq.n	8000c28 <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8000c14:	4b2f      	ldr	r3, [pc, #188]	; (8000cd4 <HAL_FLASHEx_Erase+0x140>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a2e      	ldr	r2, [pc, #184]	; (8000cd4 <HAL_FLASHEx_Erase+0x140>)
 8000c1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000c1e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8000c20:	4b2b      	ldr	r3, [pc, #172]	; (8000cd0 <HAL_FLASHEx_Erase+0x13c>)
 8000c22:	2202      	movs	r2, #2
 8000c24:	771a      	strb	r2, [r3, #28]
 8000c26:	e002      	b.n	8000c2e <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8000c28:	4b29      	ldr	r3, [pc, #164]	; (8000cd0 <HAL_FLASHEx_Erase+0x13c>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d113      	bne.n	8000c5e <HAL_FLASHEx_Erase+0xca>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 f84c 	bl	8000cd8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000c40:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000c44:	f7ff feee 	bl	8000a24 <FLASH_WaitForLastOperation>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	73fb      	strb	r3, [r7, #15]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8000c4c:	4b21      	ldr	r3, [pc, #132]	; (8000cd4 <HAL_FLASHEx_Erase+0x140>)
 8000c4e:	695b      	ldr	r3, [r3, #20]
 8000c50:	4a20      	ldr	r2, [pc, #128]	; (8000cd4 <HAL_FLASHEx_Erase+0x140>)
 8000c52:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000c56:	f023 0304 	bic.w	r3, r3, #4
 8000c5a:	6153      	str	r3, [r2, #20]
 8000c5c:	e02d      	b.n	8000cba <HAL_FLASHEx_Erase+0x126>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c64:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	60bb      	str	r3, [r7, #8]
 8000c6c:	e01d      	b.n	8000caa <HAL_FLASHEx_Erase+0x116>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	4619      	mov	r1, r3
 8000c74:	68b8      	ldr	r0, [r7, #8]
 8000c76:	f000 f857 	bl	8000d28 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000c7a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000c7e:	f7ff fed1 	bl	8000a24 <FLASH_WaitForLastOperation>
 8000c82:	4603      	mov	r3, r0
 8000c84:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8000c86:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <HAL_FLASHEx_Erase+0x140>)
 8000c88:	695b      	ldr	r3, [r3, #20]
 8000c8a:	4a12      	ldr	r2, [pc, #72]	; (8000cd4 <HAL_FLASHEx_Erase+0x140>)
 8000c8c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000c90:	f023 0302 	bic.w	r3, r3, #2
 8000c94:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8000c96:	7bfb      	ldrb	r3, [r7, #15]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d003      	beq.n	8000ca4 <HAL_FLASHEx_Erase+0x110>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	68ba      	ldr	r2, [r7, #8]
 8000ca0:	601a      	str	r2, [r3, #0]
          break;
 8000ca2:	e00a      	b.n	8000cba <HAL_FLASHEx_Erase+0x126>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	689a      	ldr	r2, [r3, #8]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	68ba      	ldr	r2, [r7, #8]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d3d9      	bcc.n	8000c6e <HAL_FLASHEx_Erase+0xda>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8000cba:	f000 f86b 	bl	8000d94 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000cbe:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <HAL_FLASHEx_Erase+0x13c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	701a      	strb	r2, [r3, #0]

  return status;
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000008 	.word	0x20000008
 8000cd4:	40022000 	.word	0x40022000

08000cd8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d005      	beq.n	8000cf6 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <FLASH_MassErase+0x4c>)
 8000cec:	695b      	ldr	r3, [r3, #20]
 8000cee:	4a0d      	ldr	r2, [pc, #52]	; (8000d24 <FLASH_MassErase+0x4c>)
 8000cf0:	f043 0304 	orr.w	r3, r3, #4
 8000cf4:	6153      	str	r3, [r2, #20]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	f003 0302 	and.w	r3, r3, #2
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d005      	beq.n	8000d0c <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8000d00:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <FLASH_MassErase+0x4c>)
 8000d02:	695b      	ldr	r3, [r3, #20]
 8000d04:	4a07      	ldr	r2, [pc, #28]	; (8000d24 <FLASH_MassErase+0x4c>)
 8000d06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d0a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000d0c:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <FLASH_MassErase+0x4c>)
 8000d0e:	695b      	ldr	r3, [r3, #20]
 8000d10:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <FLASH_MassErase+0x4c>)
 8000d12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d16:	6153      	str	r3, [r2, #20]
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	40022000 	.word	0x40022000

08000d28 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	f003 0301 	and.w	r3, r3, #1
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d006      	beq.n	8000d4a <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8000d3c:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <FLASH_PageErase+0x68>)
 8000d3e:	695b      	ldr	r3, [r3, #20]
 8000d40:	4a13      	ldr	r2, [pc, #76]	; (8000d90 <FLASH_PageErase+0x68>)
 8000d42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000d46:	6153      	str	r3, [r2, #20]
 8000d48:	e005      	b.n	8000d56 <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8000d4a:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <FLASH_PageErase+0x68>)
 8000d4c:	695b      	ldr	r3, [r3, #20]
 8000d4e:	4a10      	ldr	r2, [pc, #64]	; (8000d90 <FLASH_PageErase+0x68>)
 8000d50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d54:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8000d56:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <FLASH_PageErase+0x68>)
 8000d58:	695b      	ldr	r3, [r3, #20]
 8000d5a:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	00db      	lsls	r3, r3, #3
 8000d62:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8000d66:	490a      	ldr	r1, [pc, #40]	; (8000d90 <FLASH_PageErase+0x68>)
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000d6c:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <FLASH_PageErase+0x68>)
 8000d6e:	695b      	ldr	r3, [r3, #20]
 8000d70:	4a07      	ldr	r2, [pc, #28]	; (8000d90 <FLASH_PageErase+0x68>)
 8000d72:	f043 0302 	orr.w	r3, r3, #2
 8000d76:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000d78:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <FLASH_PageErase+0x68>)
 8000d7a:	695b      	ldr	r3, [r3, #20]
 8000d7c:	4a04      	ldr	r2, [pc, #16]	; (8000d90 <FLASH_PageErase+0x68>)
 8000d7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d82:	6153      	str	r3, [r2, #20]
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	40022000 	.word	0x40022000

08000d94 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8000d9a:	4b1e      	ldr	r3, [pc, #120]	; (8000e14 <FLASH_FlushCaches+0x80>)
 8000d9c:	7f1b      	ldrb	r3, [r3, #28]
 8000d9e:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d002      	beq.n	8000dac <FLASH_FlushCaches+0x18>
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	2b03      	cmp	r3, #3
 8000daa:	d111      	bne.n	8000dd0 <FLASH_FlushCaches+0x3c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8000dac:	4b1a      	ldr	r3, [pc, #104]	; (8000e18 <FLASH_FlushCaches+0x84>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a19      	ldr	r2, [pc, #100]	; (8000e18 <FLASH_FlushCaches+0x84>)
 8000db2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000db6:	6013      	str	r3, [r2, #0]
 8000db8:	4b17      	ldr	r3, [pc, #92]	; (8000e18 <FLASH_FlushCaches+0x84>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a16      	ldr	r2, [pc, #88]	; (8000e18 <FLASH_FlushCaches+0x84>)
 8000dbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000dc2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dc4:	4b14      	ldr	r3, [pc, #80]	; (8000e18 <FLASH_FlushCaches+0x84>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a13      	ldr	r2, [pc, #76]	; (8000e18 <FLASH_FlushCaches+0x84>)
 8000dca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dce:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	2b02      	cmp	r3, #2
 8000dd4:	d002      	beq.n	8000ddc <FLASH_FlushCaches+0x48>
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	2b03      	cmp	r3, #3
 8000dda:	d111      	bne.n	8000e00 <FLASH_FlushCaches+0x6c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8000ddc:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <FLASH_FlushCaches+0x84>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a0d      	ldr	r2, [pc, #52]	; (8000e18 <FLASH_FlushCaches+0x84>)
 8000de2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000de6:	6013      	str	r3, [r2, #0]
 8000de8:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <FLASH_FlushCaches+0x84>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <FLASH_FlushCaches+0x84>)
 8000dee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000df2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8000df4:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <FLASH_FlushCaches+0x84>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a07      	ldr	r2, [pc, #28]	; (8000e18 <FLASH_FlushCaches+0x84>)
 8000dfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dfe:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8000e00:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <FLASH_FlushCaches+0x80>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	771a      	strb	r2, [r3, #28]
}
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	20000008 	.word	0x20000008
 8000e18:	40022000 	.word	0x40022000

08000e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b087      	sub	sp, #28
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e2a:	e166      	b.n	80010fa <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	2101      	movs	r1, #1
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	fa01 f303 	lsl.w	r3, r1, r3
 8000e38:	4013      	ands	r3, r2
 8000e3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f000 8158 	beq.w	80010f4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d003      	beq.n	8000e54 <HAL_GPIO_Init+0x38>
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	2b12      	cmp	r3, #18
 8000e52:	d123      	bne.n	8000e9c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	08da      	lsrs	r2, r3, #3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3208      	adds	r2, #8
 8000e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e60:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	f003 0307 	and.w	r3, r3, #7
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	220f      	movs	r2, #15
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4013      	ands	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	691a      	ldr	r2, [r3, #16]
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	08da      	lsrs	r2, r3, #3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	3208      	adds	r2, #8
 8000e96:	6939      	ldr	r1, [r7, #16]
 8000e98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	2203      	movs	r2, #3
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f003 0203 	and.w	r2, r3, #3
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d00b      	beq.n	8000ef0 <HAL_GPIO_Init+0xd4>
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d007      	beq.n	8000ef0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ee4:	2b11      	cmp	r3, #17
 8000ee6:	d003      	beq.n	8000ef0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	2b12      	cmp	r3, #18
 8000eee:	d130      	bne.n	8000f52 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	2203      	movs	r2, #3
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	4013      	ands	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	68da      	ldr	r2, [r3, #12]
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f26:	2201      	movs	r2, #1
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	4013      	ands	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	091b      	lsrs	r3, r3, #4
 8000f3c:	f003 0201 	and.w	r2, r3, #1
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43db      	mvns	r3, r3
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	4013      	ands	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	689a      	ldr	r2, [r3, #8]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	f000 80b2 	beq.w	80010f4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f90:	4b61      	ldr	r3, [pc, #388]	; (8001118 <HAL_GPIO_Init+0x2fc>)
 8000f92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f94:	4a60      	ldr	r2, [pc, #384]	; (8001118 <HAL_GPIO_Init+0x2fc>)
 8000f96:	f043 0301 	orr.w	r3, r3, #1
 8000f9a:	6613      	str	r3, [r2, #96]	; 0x60
 8000f9c:	4b5e      	ldr	r3, [pc, #376]	; (8001118 <HAL_GPIO_Init+0x2fc>)
 8000f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fa0:	f003 0301 	and.w	r3, r3, #1
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fa8:	4a5c      	ldr	r2, [pc, #368]	; (800111c <HAL_GPIO_Init+0x300>)
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	089b      	lsrs	r3, r3, #2
 8000fae:	3302      	adds	r3, #2
 8000fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	f003 0303 	and.w	r3, r3, #3
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	220f      	movs	r2, #15
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fd2:	d02b      	beq.n	800102c <HAL_GPIO_Init+0x210>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a52      	ldr	r2, [pc, #328]	; (8001120 <HAL_GPIO_Init+0x304>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d025      	beq.n	8001028 <HAL_GPIO_Init+0x20c>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a51      	ldr	r2, [pc, #324]	; (8001124 <HAL_GPIO_Init+0x308>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d01f      	beq.n	8001024 <HAL_GPIO_Init+0x208>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a50      	ldr	r2, [pc, #320]	; (8001128 <HAL_GPIO_Init+0x30c>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d019      	beq.n	8001020 <HAL_GPIO_Init+0x204>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a4f      	ldr	r2, [pc, #316]	; (800112c <HAL_GPIO_Init+0x310>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d013      	beq.n	800101c <HAL_GPIO_Init+0x200>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a4e      	ldr	r2, [pc, #312]	; (8001130 <HAL_GPIO_Init+0x314>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d00d      	beq.n	8001018 <HAL_GPIO_Init+0x1fc>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a4d      	ldr	r2, [pc, #308]	; (8001134 <HAL_GPIO_Init+0x318>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d007      	beq.n	8001014 <HAL_GPIO_Init+0x1f8>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a4c      	ldr	r2, [pc, #304]	; (8001138 <HAL_GPIO_Init+0x31c>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d101      	bne.n	8001010 <HAL_GPIO_Init+0x1f4>
 800100c:	2307      	movs	r3, #7
 800100e:	e00e      	b.n	800102e <HAL_GPIO_Init+0x212>
 8001010:	2308      	movs	r3, #8
 8001012:	e00c      	b.n	800102e <HAL_GPIO_Init+0x212>
 8001014:	2306      	movs	r3, #6
 8001016:	e00a      	b.n	800102e <HAL_GPIO_Init+0x212>
 8001018:	2305      	movs	r3, #5
 800101a:	e008      	b.n	800102e <HAL_GPIO_Init+0x212>
 800101c:	2304      	movs	r3, #4
 800101e:	e006      	b.n	800102e <HAL_GPIO_Init+0x212>
 8001020:	2303      	movs	r3, #3
 8001022:	e004      	b.n	800102e <HAL_GPIO_Init+0x212>
 8001024:	2302      	movs	r3, #2
 8001026:	e002      	b.n	800102e <HAL_GPIO_Init+0x212>
 8001028:	2301      	movs	r3, #1
 800102a:	e000      	b.n	800102e <HAL_GPIO_Init+0x212>
 800102c:	2300      	movs	r3, #0
 800102e:	697a      	ldr	r2, [r7, #20]
 8001030:	f002 0203 	and.w	r2, r2, #3
 8001034:	0092      	lsls	r2, r2, #2
 8001036:	4093      	lsls	r3, r2
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4313      	orrs	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800103e:	4937      	ldr	r1, [pc, #220]	; (800111c <HAL_GPIO_Init+0x300>)
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	089b      	lsrs	r3, r3, #2
 8001044:	3302      	adds	r3, #2
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800104c:	4b3b      	ldr	r3, [pc, #236]	; (800113c <HAL_GPIO_Init+0x320>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	43db      	mvns	r3, r3
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4013      	ands	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d003      	beq.n	8001070 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	4313      	orrs	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001070:	4a32      	ldr	r2, [pc, #200]	; (800113c <HAL_GPIO_Init+0x320>)
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001076:	4b31      	ldr	r3, [pc, #196]	; (800113c <HAL_GPIO_Init+0x320>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	43db      	mvns	r3, r3
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	4013      	ands	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	4313      	orrs	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800109a:	4a28      	ldr	r2, [pc, #160]	; (800113c <HAL_GPIO_Init+0x320>)
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010a0:	4b26      	ldr	r3, [pc, #152]	; (800113c <HAL_GPIO_Init+0x320>)
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	43db      	mvns	r3, r3
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	4013      	ands	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d003      	beq.n	80010c4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010c4:	4a1d      	ldr	r2, [pc, #116]	; (800113c <HAL_GPIO_Init+0x320>)
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010ca:	4b1c      	ldr	r3, [pc, #112]	; (800113c <HAL_GPIO_Init+0x320>)
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	43db      	mvns	r3, r3
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	4013      	ands	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010ee:	4a13      	ldr	r2, [pc, #76]	; (800113c <HAL_GPIO_Init+0x320>)
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	3301      	adds	r3, #1
 80010f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	fa22 f303 	lsr.w	r3, r2, r3
 8001104:	2b00      	cmp	r3, #0
 8001106:	f47f ae91 	bne.w	8000e2c <HAL_GPIO_Init+0x10>
  }
}
 800110a:	bf00      	nop
 800110c:	371c      	adds	r7, #28
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	40021000 	.word	0x40021000
 800111c:	40010000 	.word	0x40010000
 8001120:	48000400 	.word	0x48000400
 8001124:	48000800 	.word	0x48000800
 8001128:	48000c00 	.word	0x48000c00
 800112c:	48001000 	.word	0x48001000
 8001130:	48001400 	.word	0x48001400
 8001134:	48001800 	.word	0x48001800
 8001138:	48001c00 	.word	0x48001c00
 800113c:	40010400 	.word	0x40010400

08001140 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	460b      	mov	r3, r1
 800114a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	691a      	ldr	r2, [r3, #16]
 8001150:	887b      	ldrh	r3, [r7, #2]
 8001152:	4013      	ands	r3, r2
 8001154:	2b00      	cmp	r3, #0
 8001156:	d002      	beq.n	800115e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001158:	2301      	movs	r3, #1
 800115a:	73fb      	strb	r3, [r7, #15]
 800115c:	e001      	b.n	8001162 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800115e:	2300      	movs	r3, #0
 8001160:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001162:	7bfb      	ldrb	r3, [r7, #15]
}
 8001164:	4618      	mov	r0, r3
 8001166:	3714      	adds	r7, #20
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	460b      	mov	r3, r1
 800117a:	807b      	strh	r3, [r7, #2]
 800117c:	4613      	mov	r3, r2
 800117e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001180:	787b      	ldrb	r3, [r7, #1]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d003      	beq.n	800118e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001186:	887a      	ldrh	r2, [r7, #2]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800118c:	e002      	b.n	8001194 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800118e:	887a      	ldrh	r2, [r7, #2]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	695a      	ldr	r2, [r3, #20]
 80011b0:	887b      	ldrh	r3, [r7, #2]
 80011b2:	4013      	ands	r3, r2
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d003      	beq.n	80011c0 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011b8:	887a      	ldrh	r2, [r7, #2]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80011be:	e002      	b.n	80011c6 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011c0:	887a      	ldrh	r2, [r7, #2]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	619a      	str	r2, [r3, #24]
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
	...

080011d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011d8:	4b04      	ldr	r3, [pc, #16]	; (80011ec <HAL_PWREx_GetVoltageRange+0x18>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40007000 	.word	0x40007000

080011f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011fe:	d130      	bne.n	8001262 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001200:	4b23      	ldr	r3, [pc, #140]	; (8001290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001208:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800120c:	d038      	beq.n	8001280 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800120e:	4b20      	ldr	r3, [pc, #128]	; (8001290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001216:	4a1e      	ldr	r2, [pc, #120]	; (8001290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001218:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800121c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800121e:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2232      	movs	r2, #50	; 0x32
 8001224:	fb02 f303 	mul.w	r3, r2, r3
 8001228:	4a1b      	ldr	r2, [pc, #108]	; (8001298 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800122a:	fba2 2303 	umull	r2, r3, r2, r3
 800122e:	0c9b      	lsrs	r3, r3, #18
 8001230:	3301      	adds	r3, #1
 8001232:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001234:	e002      	b.n	800123c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	3b01      	subs	r3, #1
 800123a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800123c:	4b14      	ldr	r3, [pc, #80]	; (8001290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800123e:	695b      	ldr	r3, [r3, #20]
 8001240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001244:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001248:	d102      	bne.n	8001250 <HAL_PWREx_ControlVoltageScaling+0x60>
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1f2      	bne.n	8001236 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001250:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001252:	695b      	ldr	r3, [r3, #20]
 8001254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001258:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800125c:	d110      	bne.n	8001280 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e00f      	b.n	8001282 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001262:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800126a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800126e:	d007      	beq.n	8001280 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001270:	4b07      	ldr	r3, [pc, #28]	; (8001290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001278:	4a05      	ldr	r2, [pc, #20]	; (8001290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800127a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800127e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3714      	adds	r7, #20
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	40007000 	.word	0x40007000
 8001294:	2000002c 	.word	0x2000002c
 8001298:	431bde83 	.word	0x431bde83

0800129c <HAL_RCC_DeInit>:
  *            - Peripheral clock sources
  *            - LSI, LSE and RTC clocks (Backup domain)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Reset to default System clock */
  /* Set MSION bit */
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80012a2:	4b4a      	ldr	r3, [pc, #296]	; (80013cc <HAL_RCC_DeInit+0x130>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a49      	ldr	r2, [pc, #292]	; (80013cc <HAL_RCC_DeInit+0x130>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6013      	str	r3, [r2, #0]

  /* Insure MSIRDY bit is set before writing default MSIRANGE value */
  /* Get start tick */
  tickstart = HAL_GetTick();
 80012ae:	f7ff fa07 	bl	80006c0 <HAL_GetTick>
 80012b2:	6078      	str	r0, [r7, #4]

  /* Wait till MSI is ready */
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012b4:	e008      	b.n	80012c8 <HAL_RCC_DeInit+0x2c>
  {
    if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012b6:	f7ff fa03 	bl	80006c0 <HAL_GetTick>
 80012ba:	4602      	mov	r2, r0
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d901      	bls.n	80012c8 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e07c      	b.n	80013c2 <HAL_RCC_DeInit+0x126>
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012c8:	4b40      	ldr	r3, [pc, #256]	; (80013cc <HAL_RCC_DeInit+0x130>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d0f0      	beq.n	80012b6 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set MSIRANGE default value */
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, RCC_MSIRANGE_6);
 80012d4:	4b3d      	ldr	r3, [pc, #244]	; (80013cc <HAL_RCC_DeInit+0x130>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80012dc:	4a3b      	ldr	r2, [pc, #236]	; (80013cc <HAL_RCC_DeInit+0x130>)
 80012de:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80012e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register (MSI is selected as system clock source) */
  CLEAR_REG(RCC->CFGR);
 80012e4:	4b39      	ldr	r3, [pc, #228]	; (80013cc <HAL_RCC_DeInit+0x130>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]

  /* Update the SystemCoreClock global variable for MSI as system clock source */
  SystemCoreClock = MSI_VALUE;
 80012ea:	4b39      	ldr	r3, [pc, #228]	; (80013d0 <HAL_RCC_DeInit+0x134>)
 80012ec:	4a39      	ldr	r2, [pc, #228]	; (80013d4 <HAL_RCC_DeInit+0x138>)
 80012ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clock settings  */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 80012f0:	4b39      	ldr	r3, [pc, #228]	; (80013d8 <HAL_RCC_DeInit+0x13c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff f997 	bl	8000628 <HAL_InitTick>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <HAL_RCC_DeInit+0x68>
  {
    return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e05e      	b.n	80013c2 <HAL_RCC_DeInit+0x126>
  }

  /* Insure MSI selected as system clock source */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8001304:	f7ff f9dc 	bl	80006c0 <HAL_GetTick>
 8001308:	6078      	str	r0, [r7, #4]

  /* Wait till system clock source is ready */
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 800130a:	e00a      	b.n	8001322 <HAL_RCC_DeInit+0x86>
  {
    if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800130c:	f7ff f9d8 	bl	80006c0 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	f241 3288 	movw	r2, #5000	; 0x1388
 800131a:	4293      	cmp	r3, r2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_DeInit+0x86>
    {
      return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e04f      	b.n	80013c2 <HAL_RCC_DeInit+0x126>
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 8001322:	4b2a      	ldr	r3, [pc, #168]	; (80013cc <HAL_RCC_DeInit+0x130>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 030c 	and.w	r3, r3, #12
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1ee      	bne.n	800130c <HAL_RCC_DeInit+0x70>
  }

  /* Reset HSION, HSIKERON, HSIASFS, HSEON, HSECSSON, PLLON, PLLSAIxON bits */
#if defined(RCC_PLLSAI2_SUPPORT)

  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSION | RCC_CR_HSIKERON| RCC_CR_HSIASFS | RCC_CR_PLLON | RCC_CR_PLLSAI1ON | RCC_CR_PLLSAI2ON);
 800132e:	4b27      	ldr	r3, [pc, #156]	; (80013cc <HAL_RCC_DeInit+0x130>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	4926      	ldr	r1, [pc, #152]	; (80013cc <HAL_RCC_DeInit+0x130>)
 8001334:	4b29      	ldr	r3, [pc, #164]	; (80013dc <HAL_RCC_DeInit+0x140>)
 8001336:	4013      	ands	r3, r2
 8001338:	600b      	str	r3, [r1, #0]

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Insure PLLRDY, PLLSAI1RDY and PLLSAI2RDY (if present) are reset */
  /* Get start tick */
  tickstart = HAL_GetTick();
 800133a:	f7ff f9c1 	bl	80006c0 <HAL_GetTick>
 800133e:	6078      	str	r0, [r7, #4]

#if defined(RCC_PLLSAI2_SUPPORT)

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY) != 0U)
 8001340:	e008      	b.n	8001354 <HAL_RCC_DeInit+0xb8>

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)

#endif
  {
    if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001342:	f7ff f9bd 	bl	80006c0 <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d901      	bls.n	8001354 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e036      	b.n	80013c2 <HAL_RCC_DeInit+0x126>
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY) != 0U)
 8001354:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <HAL_RCC_DeInit+0x130>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 5328 	and.w	r3, r3, #704643072	; 0x2a000000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d1f0      	bne.n	8001342 <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Reset PLLCFGR register */
  CLEAR_REG(RCC->PLLCFGR);
 8001360:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <HAL_RCC_DeInit+0x130>)
 8001362:	2200      	movs	r2, #0
 8001364:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN_4 );
 8001366:	4b19      	ldr	r3, [pc, #100]	; (80013cc <HAL_RCC_DeInit+0x130>)
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	4a18      	ldr	r2, [pc, #96]	; (80013cc <HAL_RCC_DeInit+0x130>)
 800136c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001370:	60d3      	str	r3, [r2, #12]

#if defined(RCC_PLLSAI1_SUPPORT)

  /* Reset PLLSAI1CFGR register */
  CLEAR_REG(RCC->PLLSAI1CFGR);
 8001372:	4b16      	ldr	r3, [pc, #88]	; (80013cc <HAL_RCC_DeInit+0x130>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->PLLSAI1CFGR,  RCC_PLLSAI1CFGR_PLLSAI1N_4 );
 8001378:	4b14      	ldr	r3, [pc, #80]	; (80013cc <HAL_RCC_DeInit+0x130>)
 800137a:	691b      	ldr	r3, [r3, #16]
 800137c:	4a13      	ldr	r2, [pc, #76]	; (80013cc <HAL_RCC_DeInit+0x130>)
 800137e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001382:	6113      	str	r3, [r2, #16]
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(RCC_PLLSAI2_SUPPORT)

  /* Reset PLLSAI2CFGR register */
  CLEAR_REG(RCC->PLLSAI2CFGR);
 8001384:	4b11      	ldr	r3, [pc, #68]	; (80013cc <HAL_RCC_DeInit+0x130>)
 8001386:	2200      	movs	r2, #0
 8001388:	615a      	str	r2, [r3, #20]
  SET_BIT(RCC->PLLSAI2CFGR,  RCC_PLLSAI2CFGR_PLLSAI2N_4 );
 800138a:	4b10      	ldr	r3, [pc, #64]	; (80013cc <HAL_RCC_DeInit+0x130>)
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	4a0f      	ldr	r2, [pc, #60]	; (80013cc <HAL_RCC_DeInit+0x130>)
 8001390:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001394:	6153      	str	r3, [r2, #20]

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001396:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <HAL_RCC_DeInit+0x130>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a0c      	ldr	r2, [pc, #48]	; (80013cc <HAL_RCC_DeInit+0x130>)
 800139c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013a0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 80013a2:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <HAL_RCC_DeInit+0x130>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	619a      	str	r2, [r3, #24]

  /* Clear all interrupt flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 80013a8:	4b08      	ldr	r3, [pc, #32]	; (80013cc <HAL_RCC_DeInit+0x130>)
 80013aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013ae:	621a      	str	r2, [r3, #32]

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <HAL_RCC_DeInit+0x130>)
 80013b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013b6:	4a05      	ldr	r2, [pc, #20]	; (80013cc <HAL_RCC_DeInit+0x130>)
 80013b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80013bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  return HAL_OK;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40021000 	.word	0x40021000
 80013d0:	2000002c 	.word	0x2000002c
 80013d4:	003d0900 	.word	0x003d0900
 80013d8:	20000000 	.word	0x20000000
 80013dc:	eafef4ff 	.word	0xeafef4ff

080013e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b088      	sub	sp, #32
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e3db      	b.n	8001baa <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013f2:	4ba4      	ldr	r3, [pc, #656]	; (8001684 <HAL_RCC_OscConfig+0x2a4>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f003 030c 	and.w	r3, r3, #12
 80013fa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013fc:	4ba1      	ldr	r3, [pc, #644]	; (8001684 <HAL_RCC_OscConfig+0x2a4>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	f003 0303 	and.w	r3, r3, #3
 8001404:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0310 	and.w	r3, r3, #16
 800140e:	2b00      	cmp	r3, #0
 8001410:	f000 80e1 	beq.w	80015d6 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d007      	beq.n	800142a <HAL_RCC_OscConfig+0x4a>
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	2b0c      	cmp	r3, #12
 800141e:	f040 8088 	bne.w	8001532 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	2b01      	cmp	r3, #1
 8001426:	f040 8084 	bne.w	8001532 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800142a:	4b96      	ldr	r3, [pc, #600]	; (8001684 <HAL_RCC_OscConfig+0x2a4>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d005      	beq.n	8001442 <HAL_RCC_OscConfig+0x62>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d101      	bne.n	8001442 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e3b3      	b.n	8001baa <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a1a      	ldr	r2, [r3, #32]
 8001446:	4b8f      	ldr	r3, [pc, #572]	; (8001684 <HAL_RCC_OscConfig+0x2a4>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0308 	and.w	r3, r3, #8
 800144e:	2b00      	cmp	r3, #0
 8001450:	d004      	beq.n	800145c <HAL_RCC_OscConfig+0x7c>
 8001452:	4b8c      	ldr	r3, [pc, #560]	; (8001684 <HAL_RCC_OscConfig+0x2a4>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800145a:	e005      	b.n	8001468 <HAL_RCC_OscConfig+0x88>
 800145c:	4b89      	ldr	r3, [pc, #548]	; (8001684 <HAL_RCC_OscConfig+0x2a4>)
 800145e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001462:	091b      	lsrs	r3, r3, #4
 8001464:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001468:	4293      	cmp	r3, r2
 800146a:	d223      	bcs.n	80014b4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a1b      	ldr	r3, [r3, #32]
 8001470:	4618      	mov	r0, r3
 8001472:	f000 fd47 	bl	8001f04 <RCC_SetFlashLatencyFromMSIRange>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e394      	b.n	8001baa <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001480:	4b80      	ldr	r3, [pc, #512]	; (8001684 <HAL_RCC_OscConfig+0x2a4>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a7f      	ldr	r2, [pc, #508]	; (8001684 <HAL_RCC_OscConfig+0x2a4>)
 8001486:	f043 0308 	orr.w	r3, r3, #8
 800148a:	6013      	str	r3, [r2, #0]
 800148c:	4b7d      	ldr	r3, [pc, #500]	; (8001684 <HAL_RCC_OscConfig+0x2a4>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a1b      	ldr	r3, [r3, #32]
 8001498:	497a      	ldr	r1, [pc, #488]	; (8001684 <HAL_RCC_OscConfig+0x2a4>)
 800149a:	4313      	orrs	r3, r2
 800149c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800149e:	4b79      	ldr	r3, [pc, #484]	; (8001684 <HAL_RCC_OscConfig+0x2a4>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	021b      	lsls	r3, r3, #8
 80014ac:	4975      	ldr	r1, [pc, #468]	; (8001684 <HAL_RCC_OscConfig+0x2a4>)
 80014ae:	4313      	orrs	r3, r2
 80014b0:	604b      	str	r3, [r1, #4]
 80014b2:	e022      	b.n	80014fa <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014b4:	4b73      	ldr	r3, [pc, #460]	; (8001684 <HAL_RCC_OscConfig+0x2a4>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a72      	ldr	r2, [pc, #456]	; (8001684 <HAL_RCC_OscConfig+0x2a4>)
 80014ba:	f043 0308 	orr.w	r3, r3, #8
 80014be:	6013      	str	r3, [r2, #0]
 80014c0:	4b70      	ldr	r3, [pc, #448]	; (8001684 <HAL_RCC_OscConfig+0x2a4>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a1b      	ldr	r3, [r3, #32]
 80014cc:	496d      	ldr	r1, [pc, #436]	; (8001684 <HAL_RCC_OscConfig+0x2a4>)
 80014ce:	4313      	orrs	r3, r2
 80014d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014d2:	4b6c      	ldr	r3, [pc, #432]	; (8001684 <HAL_RCC_OscConfig+0x2a4>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	021b      	lsls	r3, r3, #8
 80014e0:	4968      	ldr	r1, [pc, #416]	; (8001684 <HAL_RCC_OscConfig+0x2a4>)
 80014e2:	4313      	orrs	r3, r2
 80014e4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a1b      	ldr	r3, [r3, #32]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 fd0a 	bl	8001f04 <RCC_SetFlashLatencyFromMSIRange>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e357      	b.n	8001baa <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014fa:	f000 fc41 	bl	8001d80 <HAL_RCC_GetSysClockFreq>
 80014fe:	4601      	mov	r1, r0
 8001500:	4b60      	ldr	r3, [pc, #384]	; (8001684 <HAL_RCC_OscConfig+0x2a4>)
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	091b      	lsrs	r3, r3, #4
 8001506:	f003 030f 	and.w	r3, r3, #15
 800150a:	4a5f      	ldr	r2, [pc, #380]	; (8001688 <HAL_RCC_OscConfig+0x2a8>)
 800150c:	5cd3      	ldrb	r3, [r2, r3]
 800150e:	f003 031f 	and.w	r3, r3, #31
 8001512:	fa21 f303 	lsr.w	r3, r1, r3
 8001516:	4a5d      	ldr	r2, [pc, #372]	; (800168c <HAL_RCC_OscConfig+0x2ac>)
 8001518:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800151a:	4b5d      	ldr	r3, [pc, #372]	; (8001690 <HAL_RCC_OscConfig+0x2b0>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff f882 	bl	8000628 <HAL_InitTick>
 8001524:	4603      	mov	r3, r0
 8001526:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d052      	beq.n	80015d4 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 800152e:	7bfb      	ldrb	r3, [r7, #15]
 8001530:	e33b      	b.n	8001baa <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d032      	beq.n	80015a0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800153a:	4b52      	ldr	r3, [pc, #328]	; (8001684 <HAL_RCC_OscConfig+0x2a4>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a51      	ldr	r2, [pc, #324]	; (8001684 <HAL_RCC_OscConfig+0x2a4>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001546:	f7ff f8bb 	bl	80006c0 <HAL_GetTick>
 800154a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800154c:	e008      	b.n	8001560 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800154e:	f7ff f8b7 	bl	80006c0 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e324      	b.n	8001baa <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001560:	4b48      	ldr	r3, [pc, #288]	; (8001684 <HAL_RCC_OscConfig+0x2a4>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0f0      	beq.n	800154e <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800156c:	4b45      	ldr	r3, [pc, #276]	; (8001684 <HAL_RCC_OscConfig+0x2a4>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a44      	ldr	r2, [pc, #272]	; (8001684 <HAL_RCC_OscConfig+0x2a4>)
 8001572:	f043 0308 	orr.w	r3, r3, #8
 8001576:	6013      	str	r3, [r2, #0]
 8001578:	4b42      	ldr	r3, [pc, #264]	; (8001684 <HAL_RCC_OscConfig+0x2a4>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a1b      	ldr	r3, [r3, #32]
 8001584:	493f      	ldr	r1, [pc, #252]	; (8001684 <HAL_RCC_OscConfig+0x2a4>)
 8001586:	4313      	orrs	r3, r2
 8001588:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800158a:	4b3e      	ldr	r3, [pc, #248]	; (8001684 <HAL_RCC_OscConfig+0x2a4>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	021b      	lsls	r3, r3, #8
 8001598:	493a      	ldr	r1, [pc, #232]	; (8001684 <HAL_RCC_OscConfig+0x2a4>)
 800159a:	4313      	orrs	r3, r2
 800159c:	604b      	str	r3, [r1, #4]
 800159e:	e01a      	b.n	80015d6 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015a0:	4b38      	ldr	r3, [pc, #224]	; (8001684 <HAL_RCC_OscConfig+0x2a4>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a37      	ldr	r2, [pc, #220]	; (8001684 <HAL_RCC_OscConfig+0x2a4>)
 80015a6:	f023 0301 	bic.w	r3, r3, #1
 80015aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015ac:	f7ff f888 	bl	80006c0 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015b4:	f7ff f884 	bl	80006c0 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e2f1      	b.n	8001baa <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015c6:	4b2f      	ldr	r3, [pc, #188]	; (8001684 <HAL_RCC_OscConfig+0x2a4>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f0      	bne.n	80015b4 <HAL_RCC_OscConfig+0x1d4>
 80015d2:	e000      	b.n	80015d6 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d074      	beq.n	80016cc <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	2b08      	cmp	r3, #8
 80015e6:	d005      	beq.n	80015f4 <HAL_RCC_OscConfig+0x214>
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	2b0c      	cmp	r3, #12
 80015ec:	d10e      	bne.n	800160c <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	2b03      	cmp	r3, #3
 80015f2:	d10b      	bne.n	800160c <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f4:	4b23      	ldr	r3, [pc, #140]	; (8001684 <HAL_RCC_OscConfig+0x2a4>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d064      	beq.n	80016ca <HAL_RCC_OscConfig+0x2ea>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d160      	bne.n	80016ca <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e2ce      	b.n	8001baa <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001614:	d106      	bne.n	8001624 <HAL_RCC_OscConfig+0x244>
 8001616:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <HAL_RCC_OscConfig+0x2a4>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a1a      	ldr	r2, [pc, #104]	; (8001684 <HAL_RCC_OscConfig+0x2a4>)
 800161c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001620:	6013      	str	r3, [r2, #0]
 8001622:	e01d      	b.n	8001660 <HAL_RCC_OscConfig+0x280>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800162c:	d10c      	bne.n	8001648 <HAL_RCC_OscConfig+0x268>
 800162e:	4b15      	ldr	r3, [pc, #84]	; (8001684 <HAL_RCC_OscConfig+0x2a4>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a14      	ldr	r2, [pc, #80]	; (8001684 <HAL_RCC_OscConfig+0x2a4>)
 8001634:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001638:	6013      	str	r3, [r2, #0]
 800163a:	4b12      	ldr	r3, [pc, #72]	; (8001684 <HAL_RCC_OscConfig+0x2a4>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a11      	ldr	r2, [pc, #68]	; (8001684 <HAL_RCC_OscConfig+0x2a4>)
 8001640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001644:	6013      	str	r3, [r2, #0]
 8001646:	e00b      	b.n	8001660 <HAL_RCC_OscConfig+0x280>
 8001648:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <HAL_RCC_OscConfig+0x2a4>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a0d      	ldr	r2, [pc, #52]	; (8001684 <HAL_RCC_OscConfig+0x2a4>)
 800164e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001652:	6013      	str	r3, [r2, #0]
 8001654:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <HAL_RCC_OscConfig+0x2a4>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a0a      	ldr	r2, [pc, #40]	; (8001684 <HAL_RCC_OscConfig+0x2a4>)
 800165a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800165e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d01c      	beq.n	80016a2 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001668:	f7ff f82a 	bl	80006c0 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800166e:	e011      	b.n	8001694 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001670:	f7ff f826 	bl	80006c0 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b64      	cmp	r3, #100	; 0x64
 800167c:	d90a      	bls.n	8001694 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e293      	b.n	8001baa <HAL_RCC_OscConfig+0x7ca>
 8001682:	bf00      	nop
 8001684:	40021000 	.word	0x40021000
 8001688:	08005558 	.word	0x08005558
 800168c:	2000002c 	.word	0x2000002c
 8001690:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001694:	4bae      	ldr	r3, [pc, #696]	; (8001950 <HAL_RCC_OscConfig+0x570>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d0e7      	beq.n	8001670 <HAL_RCC_OscConfig+0x290>
 80016a0:	e014      	b.n	80016cc <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a2:	f7ff f80d 	bl	80006c0 <HAL_GetTick>
 80016a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016a8:	e008      	b.n	80016bc <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016aa:	f7ff f809 	bl	80006c0 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b64      	cmp	r3, #100	; 0x64
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e276      	b.n	8001baa <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016bc:	4ba4      	ldr	r3, [pc, #656]	; (8001950 <HAL_RCC_OscConfig+0x570>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1f0      	bne.n	80016aa <HAL_RCC_OscConfig+0x2ca>
 80016c8:	e000      	b.n	80016cc <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ca:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d060      	beq.n	800179a <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	2b04      	cmp	r3, #4
 80016dc:	d005      	beq.n	80016ea <HAL_RCC_OscConfig+0x30a>
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	2b0c      	cmp	r3, #12
 80016e2:	d119      	bne.n	8001718 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d116      	bne.n	8001718 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016ea:	4b99      	ldr	r3, [pc, #612]	; (8001950 <HAL_RCC_OscConfig+0x570>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d005      	beq.n	8001702 <HAL_RCC_OscConfig+0x322>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e253      	b.n	8001baa <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001702:	4b93      	ldr	r3, [pc, #588]	; (8001950 <HAL_RCC_OscConfig+0x570>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	061b      	lsls	r3, r3, #24
 8001710:	498f      	ldr	r1, [pc, #572]	; (8001950 <HAL_RCC_OscConfig+0x570>)
 8001712:	4313      	orrs	r3, r2
 8001714:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001716:	e040      	b.n	800179a <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d023      	beq.n	8001768 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001720:	4b8b      	ldr	r3, [pc, #556]	; (8001950 <HAL_RCC_OscConfig+0x570>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a8a      	ldr	r2, [pc, #552]	; (8001950 <HAL_RCC_OscConfig+0x570>)
 8001726:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800172a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172c:	f7fe ffc8 	bl	80006c0 <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001734:	f7fe ffc4 	bl	80006c0 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e231      	b.n	8001baa <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001746:	4b82      	ldr	r3, [pc, #520]	; (8001950 <HAL_RCC_OscConfig+0x570>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0f0      	beq.n	8001734 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001752:	4b7f      	ldr	r3, [pc, #508]	; (8001950 <HAL_RCC_OscConfig+0x570>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	061b      	lsls	r3, r3, #24
 8001760:	497b      	ldr	r1, [pc, #492]	; (8001950 <HAL_RCC_OscConfig+0x570>)
 8001762:	4313      	orrs	r3, r2
 8001764:	604b      	str	r3, [r1, #4]
 8001766:	e018      	b.n	800179a <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001768:	4b79      	ldr	r3, [pc, #484]	; (8001950 <HAL_RCC_OscConfig+0x570>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a78      	ldr	r2, [pc, #480]	; (8001950 <HAL_RCC_OscConfig+0x570>)
 800176e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001772:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001774:	f7fe ffa4 	bl	80006c0 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800177c:	f7fe ffa0 	bl	80006c0 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e20d      	b.n	8001baa <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800178e:	4b70      	ldr	r3, [pc, #448]	; (8001950 <HAL_RCC_OscConfig+0x570>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1f0      	bne.n	800177c <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0308 	and.w	r3, r3, #8
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d03c      	beq.n	8001820 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d01c      	beq.n	80017e8 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ae:	4b68      	ldr	r3, [pc, #416]	; (8001950 <HAL_RCC_OscConfig+0x570>)
 80017b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017b4:	4a66      	ldr	r2, [pc, #408]	; (8001950 <HAL_RCC_OscConfig+0x570>)
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017be:	f7fe ff7f 	bl	80006c0 <HAL_GetTick>
 80017c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017c4:	e008      	b.n	80017d8 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017c6:	f7fe ff7b 	bl	80006c0 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e1e8      	b.n	8001baa <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017d8:	4b5d      	ldr	r3, [pc, #372]	; (8001950 <HAL_RCC_OscConfig+0x570>)
 80017da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0ef      	beq.n	80017c6 <HAL_RCC_OscConfig+0x3e6>
 80017e6:	e01b      	b.n	8001820 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017e8:	4b59      	ldr	r3, [pc, #356]	; (8001950 <HAL_RCC_OscConfig+0x570>)
 80017ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ee:	4a58      	ldr	r2, [pc, #352]	; (8001950 <HAL_RCC_OscConfig+0x570>)
 80017f0:	f023 0301 	bic.w	r3, r3, #1
 80017f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f8:	f7fe ff62 	bl	80006c0 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001800:	f7fe ff5e 	bl	80006c0 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e1cb      	b.n	8001baa <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001812:	4b4f      	ldr	r3, [pc, #316]	; (8001950 <HAL_RCC_OscConfig+0x570>)
 8001814:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1ef      	bne.n	8001800 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	2b00      	cmp	r3, #0
 800182a:	f000 80a5 	beq.w	8001978 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 800182e:	2300      	movs	r3, #0
 8001830:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001832:	4b47      	ldr	r3, [pc, #284]	; (8001950 <HAL_RCC_OscConfig+0x570>)
 8001834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d10d      	bne.n	800185a <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800183e:	4b44      	ldr	r3, [pc, #272]	; (8001950 <HAL_RCC_OscConfig+0x570>)
 8001840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001842:	4a43      	ldr	r2, [pc, #268]	; (8001950 <HAL_RCC_OscConfig+0x570>)
 8001844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001848:	6593      	str	r3, [r2, #88]	; 0x58
 800184a:	4b41      	ldr	r3, [pc, #260]	; (8001950 <HAL_RCC_OscConfig+0x570>)
 800184c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001852:	60bb      	str	r3, [r7, #8]
 8001854:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001856:	2301      	movs	r3, #1
 8001858:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800185a:	4b3e      	ldr	r3, [pc, #248]	; (8001954 <HAL_RCC_OscConfig+0x574>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001862:	2b00      	cmp	r3, #0
 8001864:	d118      	bne.n	8001898 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001866:	4b3b      	ldr	r3, [pc, #236]	; (8001954 <HAL_RCC_OscConfig+0x574>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a3a      	ldr	r2, [pc, #232]	; (8001954 <HAL_RCC_OscConfig+0x574>)
 800186c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001870:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001872:	f7fe ff25 	bl	80006c0 <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001878:	e008      	b.n	800188c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800187a:	f7fe ff21 	bl	80006c0 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e18e      	b.n	8001baa <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800188c:	4b31      	ldr	r3, [pc, #196]	; (8001954 <HAL_RCC_OscConfig+0x574>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001894:	2b00      	cmp	r3, #0
 8001896:	d0f0      	beq.n	800187a <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d108      	bne.n	80018b2 <HAL_RCC_OscConfig+0x4d2>
 80018a0:	4b2b      	ldr	r3, [pc, #172]	; (8001950 <HAL_RCC_OscConfig+0x570>)
 80018a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018a6:	4a2a      	ldr	r2, [pc, #168]	; (8001950 <HAL_RCC_OscConfig+0x570>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018b0:	e024      	b.n	80018fc <HAL_RCC_OscConfig+0x51c>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	2b05      	cmp	r3, #5
 80018b8:	d110      	bne.n	80018dc <HAL_RCC_OscConfig+0x4fc>
 80018ba:	4b25      	ldr	r3, [pc, #148]	; (8001950 <HAL_RCC_OscConfig+0x570>)
 80018bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018c0:	4a23      	ldr	r2, [pc, #140]	; (8001950 <HAL_RCC_OscConfig+0x570>)
 80018c2:	f043 0304 	orr.w	r3, r3, #4
 80018c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018ca:	4b21      	ldr	r3, [pc, #132]	; (8001950 <HAL_RCC_OscConfig+0x570>)
 80018cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018d0:	4a1f      	ldr	r2, [pc, #124]	; (8001950 <HAL_RCC_OscConfig+0x570>)
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018da:	e00f      	b.n	80018fc <HAL_RCC_OscConfig+0x51c>
 80018dc:	4b1c      	ldr	r3, [pc, #112]	; (8001950 <HAL_RCC_OscConfig+0x570>)
 80018de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018e2:	4a1b      	ldr	r2, [pc, #108]	; (8001950 <HAL_RCC_OscConfig+0x570>)
 80018e4:	f023 0301 	bic.w	r3, r3, #1
 80018e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018ec:	4b18      	ldr	r3, [pc, #96]	; (8001950 <HAL_RCC_OscConfig+0x570>)
 80018ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018f2:	4a17      	ldr	r2, [pc, #92]	; (8001950 <HAL_RCC_OscConfig+0x570>)
 80018f4:	f023 0304 	bic.w	r3, r3, #4
 80018f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d016      	beq.n	8001932 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001904:	f7fe fedc 	bl	80006c0 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800190a:	e00a      	b.n	8001922 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800190c:	f7fe fed8 	bl	80006c0 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	f241 3288 	movw	r2, #5000	; 0x1388
 800191a:	4293      	cmp	r3, r2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e143      	b.n	8001baa <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001922:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <HAL_RCC_OscConfig+0x570>)
 8001924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0ed      	beq.n	800190c <HAL_RCC_OscConfig+0x52c>
 8001930:	e019      	b.n	8001966 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001932:	f7fe fec5 	bl	80006c0 <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001938:	e00e      	b.n	8001958 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800193a:	f7fe fec1 	bl	80006c0 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	f241 3288 	movw	r2, #5000	; 0x1388
 8001948:	4293      	cmp	r3, r2
 800194a:	d905      	bls.n	8001958 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e12c      	b.n	8001baa <HAL_RCC_OscConfig+0x7ca>
 8001950:	40021000 	.word	0x40021000
 8001954:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001958:	4b96      	ldr	r3, [pc, #600]	; (8001bb4 <HAL_RCC_OscConfig+0x7d4>)
 800195a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1e9      	bne.n	800193a <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001966:	7ffb      	ldrb	r3, [r7, #31]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d105      	bne.n	8001978 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800196c:	4b91      	ldr	r3, [pc, #580]	; (8001bb4 <HAL_RCC_OscConfig+0x7d4>)
 800196e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001970:	4a90      	ldr	r2, [pc, #576]	; (8001bb4 <HAL_RCC_OscConfig+0x7d4>)
 8001972:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001976:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0320 	and.w	r3, r3, #32
 8001980:	2b00      	cmp	r3, #0
 8001982:	d03c      	beq.n	80019fe <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001988:	2b00      	cmp	r3, #0
 800198a:	d01c      	beq.n	80019c6 <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800198c:	4b89      	ldr	r3, [pc, #548]	; (8001bb4 <HAL_RCC_OscConfig+0x7d4>)
 800198e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001992:	4a88      	ldr	r2, [pc, #544]	; (8001bb4 <HAL_RCC_OscConfig+0x7d4>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800199c:	f7fe fe90 	bl	80006c0 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019a4:	f7fe fe8c 	bl	80006c0 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e0f9      	b.n	8001baa <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019b6:	4b7f      	ldr	r3, [pc, #508]	; (8001bb4 <HAL_RCC_OscConfig+0x7d4>)
 80019b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0ef      	beq.n	80019a4 <HAL_RCC_OscConfig+0x5c4>
 80019c4:	e01b      	b.n	80019fe <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019c6:	4b7b      	ldr	r3, [pc, #492]	; (8001bb4 <HAL_RCC_OscConfig+0x7d4>)
 80019c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019cc:	4a79      	ldr	r2, [pc, #484]	; (8001bb4 <HAL_RCC_OscConfig+0x7d4>)
 80019ce:	f023 0301 	bic.w	r3, r3, #1
 80019d2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d6:	f7fe fe73 	bl	80006c0 <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019dc:	e008      	b.n	80019f0 <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019de:	f7fe fe6f 	bl	80006c0 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e0dc      	b.n	8001baa <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019f0:	4b70      	ldr	r3, [pc, #448]	; (8001bb4 <HAL_RCC_OscConfig+0x7d4>)
 80019f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1ef      	bne.n	80019de <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f000 80d0 	beq.w	8001ba8 <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	2b0c      	cmp	r3, #12
 8001a0c:	f000 808d 	beq.w	8001b2a <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d15a      	bne.n	8001ace <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a18:	4b66      	ldr	r3, [pc, #408]	; (8001bb4 <HAL_RCC_OscConfig+0x7d4>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a65      	ldr	r2, [pc, #404]	; (8001bb4 <HAL_RCC_OscConfig+0x7d4>)
 8001a1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a24:	f7fe fe4c 	bl	80006c0 <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a2c:	f7fe fe48 	bl	80006c0 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e0b5      	b.n	8001baa <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a3e:	4b5d      	ldr	r3, [pc, #372]	; (8001bb4 <HAL_RCC_OscConfig+0x7d4>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1f0      	bne.n	8001a2c <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a4a:	4b5a      	ldr	r3, [pc, #360]	; (8001bb4 <HAL_RCC_OscConfig+0x7d4>)
 8001a4c:	68da      	ldr	r2, [r3, #12]
 8001a4e:	4b5a      	ldr	r3, [pc, #360]	; (8001bb8 <HAL_RCC_OscConfig+0x7d8>)
 8001a50:	4013      	ands	r3, r2
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a5a:	3a01      	subs	r2, #1
 8001a5c:	0112      	lsls	r2, r2, #4
 8001a5e:	4311      	orrs	r1, r2
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a64:	0212      	lsls	r2, r2, #8
 8001a66:	4311      	orrs	r1, r2
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a6c:	0852      	lsrs	r2, r2, #1
 8001a6e:	3a01      	subs	r2, #1
 8001a70:	0552      	lsls	r2, r2, #21
 8001a72:	4311      	orrs	r1, r2
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a78:	0852      	lsrs	r2, r2, #1
 8001a7a:	3a01      	subs	r2, #1
 8001a7c:	0652      	lsls	r2, r2, #25
 8001a7e:	4311      	orrs	r1, r2
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a84:	06d2      	lsls	r2, r2, #27
 8001a86:	430a      	orrs	r2, r1
 8001a88:	494a      	ldr	r1, [pc, #296]	; (8001bb4 <HAL_RCC_OscConfig+0x7d4>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a8e:	4b49      	ldr	r3, [pc, #292]	; (8001bb4 <HAL_RCC_OscConfig+0x7d4>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a48      	ldr	r2, [pc, #288]	; (8001bb4 <HAL_RCC_OscConfig+0x7d4>)
 8001a94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a98:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a9a:	4b46      	ldr	r3, [pc, #280]	; (8001bb4 <HAL_RCC_OscConfig+0x7d4>)
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	4a45      	ldr	r2, [pc, #276]	; (8001bb4 <HAL_RCC_OscConfig+0x7d4>)
 8001aa0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aa4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa6:	f7fe fe0b 	bl	80006c0 <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aae:	f7fe fe07 	bl	80006c0 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e074      	b.n	8001baa <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ac0:	4b3c      	ldr	r3, [pc, #240]	; (8001bb4 <HAL_RCC_OscConfig+0x7d4>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0f0      	beq.n	8001aae <HAL_RCC_OscConfig+0x6ce>
 8001acc:	e06c      	b.n	8001ba8 <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ace:	4b39      	ldr	r3, [pc, #228]	; (8001bb4 <HAL_RCC_OscConfig+0x7d4>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a38      	ldr	r2, [pc, #224]	; (8001bb4 <HAL_RCC_OscConfig+0x7d4>)
 8001ad4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ad8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001ada:	4b36      	ldr	r3, [pc, #216]	; (8001bb4 <HAL_RCC_OscConfig+0x7d4>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d105      	bne.n	8001af2 <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ae6:	4b33      	ldr	r3, [pc, #204]	; (8001bb4 <HAL_RCC_OscConfig+0x7d4>)
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	4a32      	ldr	r2, [pc, #200]	; (8001bb4 <HAL_RCC_OscConfig+0x7d4>)
 8001aec:	f023 0303 	bic.w	r3, r3, #3
 8001af0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001af2:	4b30      	ldr	r3, [pc, #192]	; (8001bb4 <HAL_RCC_OscConfig+0x7d4>)
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	4a2f      	ldr	r2, [pc, #188]	; (8001bb4 <HAL_RCC_OscConfig+0x7d4>)
 8001af8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001afc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b00:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b02:	f7fe fddd 	bl	80006c0 <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b0a:	f7fe fdd9 	bl	80006c0 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e046      	b.n	8001baa <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b1c:	4b25      	ldr	r3, [pc, #148]	; (8001bb4 <HAL_RCC_OscConfig+0x7d4>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d1f0      	bne.n	8001b0a <HAL_RCC_OscConfig+0x72a>
 8001b28:	e03e      	b.n	8001ba8 <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d101      	bne.n	8001b36 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e039      	b.n	8001baa <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8001b36:	4b1f      	ldr	r3, [pc, #124]	; (8001bb4 <HAL_RCC_OscConfig+0x7d4>)
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	f003 0203 	and.w	r2, r3, #3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d12c      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b54:	3b01      	subs	r3, #1
 8001b56:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d123      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b66:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d11b      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b76:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d113      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b86:	085b      	lsrs	r3, r3, #1
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d109      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	085b      	lsrs	r3, r3, #1
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d001      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e000      	b.n	8001baa <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3720      	adds	r7, #32
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	019d808c 	.word	0x019d808c

08001bbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e0c8      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bd0:	4b66      	ldr	r3, [pc, #408]	; (8001d6c <HAL_RCC_ClockConfig+0x1b0>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0307 	and.w	r3, r3, #7
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d910      	bls.n	8001c00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bde:	4b63      	ldr	r3, [pc, #396]	; (8001d6c <HAL_RCC_ClockConfig+0x1b0>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f023 0207 	bic.w	r2, r3, #7
 8001be6:	4961      	ldr	r1, [pc, #388]	; (8001d6c <HAL_RCC_ClockConfig+0x1b0>)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bee:	4b5f      	ldr	r3, [pc, #380]	; (8001d6c <HAL_RCC_ClockConfig+0x1b0>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	683a      	ldr	r2, [r7, #0]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d001      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e0b0      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d04c      	beq.n	8001ca6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	2b03      	cmp	r3, #3
 8001c12:	d107      	bne.n	8001c24 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c14:	4b56      	ldr	r3, [pc, #344]	; (8001d70 <HAL_RCC_ClockConfig+0x1b4>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d121      	bne.n	8001c64 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e09e      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d107      	bne.n	8001c3c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c2c:	4b50      	ldr	r3, [pc, #320]	; (8001d70 <HAL_RCC_ClockConfig+0x1b4>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d115      	bne.n	8001c64 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e092      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d107      	bne.n	8001c54 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c44:	4b4a      	ldr	r3, [pc, #296]	; (8001d70 <HAL_RCC_ClockConfig+0x1b4>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d109      	bne.n	8001c64 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e086      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c54:	4b46      	ldr	r3, [pc, #280]	; (8001d70 <HAL_RCC_ClockConfig+0x1b4>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d101      	bne.n	8001c64 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e07e      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c64:	4b42      	ldr	r3, [pc, #264]	; (8001d70 <HAL_RCC_ClockConfig+0x1b4>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f023 0203 	bic.w	r2, r3, #3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	493f      	ldr	r1, [pc, #252]	; (8001d70 <HAL_RCC_ClockConfig+0x1b4>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c76:	f7fe fd23 	bl	80006c0 <HAL_GetTick>
 8001c7a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c7c:	e00a      	b.n	8001c94 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c7e:	f7fe fd1f 	bl	80006c0 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e066      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c94:	4b36      	ldr	r3, [pc, #216]	; (8001d70 <HAL_RCC_ClockConfig+0x1b4>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f003 020c 	and.w	r2, r3, #12
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d1eb      	bne.n	8001c7e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d008      	beq.n	8001cc4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cb2:	4b2f      	ldr	r3, [pc, #188]	; (8001d70 <HAL_RCC_ClockConfig+0x1b4>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	492c      	ldr	r1, [pc, #176]	; (8001d70 <HAL_RCC_ClockConfig+0x1b4>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cc4:	4b29      	ldr	r3, [pc, #164]	; (8001d6c <HAL_RCC_ClockConfig+0x1b0>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d210      	bcs.n	8001cf4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd2:	4b26      	ldr	r3, [pc, #152]	; (8001d6c <HAL_RCC_ClockConfig+0x1b0>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f023 0207 	bic.w	r2, r3, #7
 8001cda:	4924      	ldr	r1, [pc, #144]	; (8001d6c <HAL_RCC_ClockConfig+0x1b0>)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce2:	4b22      	ldr	r3, [pc, #136]	; (8001d6c <HAL_RCC_ClockConfig+0x1b0>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d001      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e036      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d008      	beq.n	8001d12 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d00:	4b1b      	ldr	r3, [pc, #108]	; (8001d70 <HAL_RCC_ClockConfig+0x1b4>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	4918      	ldr	r1, [pc, #96]	; (8001d70 <HAL_RCC_ClockConfig+0x1b4>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0308 	and.w	r3, r3, #8
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d009      	beq.n	8001d32 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d1e:	4b14      	ldr	r3, [pc, #80]	; (8001d70 <HAL_RCC_ClockConfig+0x1b4>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	4910      	ldr	r1, [pc, #64]	; (8001d70 <HAL_RCC_ClockConfig+0x1b4>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d32:	f000 f825 	bl	8001d80 <HAL_RCC_GetSysClockFreq>
 8001d36:	4601      	mov	r1, r0
 8001d38:	4b0d      	ldr	r3, [pc, #52]	; (8001d70 <HAL_RCC_ClockConfig+0x1b4>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	091b      	lsrs	r3, r3, #4
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	4a0c      	ldr	r2, [pc, #48]	; (8001d74 <HAL_RCC_ClockConfig+0x1b8>)
 8001d44:	5cd3      	ldrb	r3, [r2, r3]
 8001d46:	f003 031f 	and.w	r3, r3, #31
 8001d4a:	fa21 f303 	lsr.w	r3, r1, r3
 8001d4e:	4a0a      	ldr	r2, [pc, #40]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d52:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <HAL_RCC_ClockConfig+0x1c0>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7fe fc66 	bl	8000628 <HAL_InitTick>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d60:	7afb      	ldrb	r3, [r7, #11]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40022000 	.word	0x40022000
 8001d70:	40021000 	.word	0x40021000
 8001d74:	08005558 	.word	0x08005558
 8001d78:	2000002c 	.word	0x2000002c
 8001d7c:	20000000 	.word	0x20000000

08001d80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b089      	sub	sp, #36	; 0x24
 8001d84:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61fb      	str	r3, [r7, #28]
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d8e:	4b3d      	ldr	r3, [pc, #244]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 030c 	and.w	r3, r3, #12
 8001d96:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d98:	4b3a      	ldr	r3, [pc, #232]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	f003 0303 	and.w	r3, r3, #3
 8001da0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d005      	beq.n	8001db4 <HAL_RCC_GetSysClockFreq+0x34>
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	2b0c      	cmp	r3, #12
 8001dac:	d121      	bne.n	8001df2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d11e      	bne.n	8001df2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001db4:	4b33      	ldr	r3, [pc, #204]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x104>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0308 	and.w	r3, r3, #8
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d107      	bne.n	8001dd0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001dc0:	4b30      	ldr	r3, [pc, #192]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x104>)
 8001dc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dc6:	0a1b      	lsrs	r3, r3, #8
 8001dc8:	f003 030f 	and.w	r3, r3, #15
 8001dcc:	61fb      	str	r3, [r7, #28]
 8001dce:	e005      	b.n	8001ddc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001dd0:	4b2c      	ldr	r3, [pc, #176]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x104>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	091b      	lsrs	r3, r3, #4
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ddc:	4a2a      	ldr	r2, [pc, #168]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d10d      	bne.n	8001e08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001df0:	e00a      	b.n	8001e08 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	2b04      	cmp	r3, #4
 8001df6:	d102      	bne.n	8001dfe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001df8:	4b24      	ldr	r3, [pc, #144]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001dfa:	61bb      	str	r3, [r7, #24]
 8001dfc:	e004      	b.n	8001e08 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	2b08      	cmp	r3, #8
 8001e02:	d101      	bne.n	8001e08 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e04:	4b22      	ldr	r3, [pc, #136]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e06:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	2b0c      	cmp	r3, #12
 8001e0c:	d133      	bne.n	8001e76 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e0e:	4b1d      	ldr	r3, [pc, #116]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d002      	beq.n	8001e24 <HAL_RCC_GetSysClockFreq+0xa4>
 8001e1e:	2b03      	cmp	r3, #3
 8001e20:	d003      	beq.n	8001e2a <HAL_RCC_GetSysClockFreq+0xaa>
 8001e22:	e005      	b.n	8001e30 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e24:	4b19      	ldr	r3, [pc, #100]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e26:	617b      	str	r3, [r7, #20]
      break;
 8001e28:	e005      	b.n	8001e36 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e2a:	4b19      	ldr	r3, [pc, #100]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e2c:	617b      	str	r3, [r7, #20]
      break;
 8001e2e:	e002      	b.n	8001e36 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	617b      	str	r3, [r7, #20]
      break;
 8001e34:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e36:	4b13      	ldr	r3, [pc, #76]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	091b      	lsrs	r3, r3, #4
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	3301      	adds	r3, #1
 8001e42:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e44:	4b0f      	ldr	r3, [pc, #60]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	0a1b      	lsrs	r3, r3, #8
 8001e4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e4e:	697a      	ldr	r2, [r7, #20]
 8001e50:	fb02 f203 	mul.w	r2, r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e5c:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	0e5b      	lsrs	r3, r3, #25
 8001e62:	f003 0303 	and.w	r3, r3, #3
 8001e66:	3301      	adds	r3, #1
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e74:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e76:	69bb      	ldr	r3, [r7, #24]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3724      	adds	r7, #36	; 0x24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	40021000 	.word	0x40021000
 8001e88:	08005570 	.word	0x08005570
 8001e8c:	00f42400 	.word	0x00f42400
 8001e90:	007a1200 	.word	0x007a1200

08001e94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e98:	4b03      	ldr	r3, [pc, #12]	; (8001ea8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	2000002c 	.word	0x2000002c

08001eac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001eb0:	f7ff fff0 	bl	8001e94 <HAL_RCC_GetHCLKFreq>
 8001eb4:	4601      	mov	r1, r0
 8001eb6:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	0a1b      	lsrs	r3, r3, #8
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	4a04      	ldr	r2, [pc, #16]	; (8001ed4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ec2:	5cd3      	ldrb	r3, [r2, r3]
 8001ec4:	f003 031f 	and.w	r3, r3, #31
 8001ec8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	08005568 	.word	0x08005568

08001ed8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001edc:	f7ff ffda 	bl	8001e94 <HAL_RCC_GetHCLKFreq>
 8001ee0:	4601      	mov	r1, r0
 8001ee2:	4b06      	ldr	r3, [pc, #24]	; (8001efc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	0adb      	lsrs	r3, r3, #11
 8001ee8:	f003 0307 	and.w	r3, r3, #7
 8001eec:	4a04      	ldr	r2, [pc, #16]	; (8001f00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001eee:	5cd3      	ldrb	r3, [r2, r3]
 8001ef0:	f003 031f 	and.w	r3, r3, #31
 8001ef4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40021000 	.word	0x40021000
 8001f00:	08005568 	.word	0x08005568

08001f04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f10:	4b2a      	ldr	r3, [pc, #168]	; (8001fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d003      	beq.n	8001f24 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f1c:	f7ff f95a 	bl	80011d4 <HAL_PWREx_GetVoltageRange>
 8001f20:	6178      	str	r0, [r7, #20]
 8001f22:	e014      	b.n	8001f4e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f24:	4b25      	ldr	r3, [pc, #148]	; (8001fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f28:	4a24      	ldr	r2, [pc, #144]	; (8001fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f2e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f30:	4b22      	ldr	r3, [pc, #136]	; (8001fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f3c:	f7ff f94a 	bl	80011d4 <HAL_PWREx_GetVoltageRange>
 8001f40:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f42:	4b1e      	ldr	r3, [pc, #120]	; (8001fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f46:	4a1d      	ldr	r2, [pc, #116]	; (8001fbc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f4c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f54:	d10b      	bne.n	8001f6e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b80      	cmp	r3, #128	; 0x80
 8001f5a:	d919      	bls.n	8001f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2ba0      	cmp	r3, #160	; 0xa0
 8001f60:	d902      	bls.n	8001f68 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f62:	2302      	movs	r3, #2
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	e013      	b.n	8001f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f68:	2301      	movs	r3, #1
 8001f6a:	613b      	str	r3, [r7, #16]
 8001f6c:	e010      	b.n	8001f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b80      	cmp	r3, #128	; 0x80
 8001f72:	d902      	bls.n	8001f7a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f74:	2303      	movs	r3, #3
 8001f76:	613b      	str	r3, [r7, #16]
 8001f78:	e00a      	b.n	8001f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b80      	cmp	r3, #128	; 0x80
 8001f7e:	d102      	bne.n	8001f86 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f80:	2302      	movs	r3, #2
 8001f82:	613b      	str	r3, [r7, #16]
 8001f84:	e004      	b.n	8001f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b70      	cmp	r3, #112	; 0x70
 8001f8a:	d101      	bne.n	8001f90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f90:	4b0b      	ldr	r3, [pc, #44]	; (8001fc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f023 0207 	bic.w	r2, r3, #7
 8001f98:	4909      	ldr	r1, [pc, #36]	; (8001fc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001fa0:	4b07      	ldr	r3, [pc, #28]	; (8001fc0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0307 	and.w	r3, r3, #7
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d001      	beq.n	8001fb2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e000      	b.n	8001fb4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	40022000 	.word	0x40022000

08001fc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fcc:	2300      	movs	r3, #0
 8001fce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d03f      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fe4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fe8:	d01c      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001fea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fee:	d802      	bhi.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d00e      	beq.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001ff4:	e01f      	b.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001ff6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ffa:	d003      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001ffc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002000:	d01c      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002002:	e018      	b.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002004:	4b85      	ldr	r3, [pc, #532]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	4a84      	ldr	r2, [pc, #528]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800200a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800200e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002010:	e015      	b.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3304      	adds	r3, #4
 8002016:	2100      	movs	r1, #0
 8002018:	4618      	mov	r0, r3
 800201a:	f000 facb 	bl	80025b4 <RCCEx_PLLSAI1_Config>
 800201e:	4603      	mov	r3, r0
 8002020:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002022:	e00c      	b.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3320      	adds	r3, #32
 8002028:	2100      	movs	r1, #0
 800202a:	4618      	mov	r0, r3
 800202c:	f000 fbb2 	bl	8002794 <RCCEx_PLLSAI2_Config>
 8002030:	4603      	mov	r3, r0
 8002032:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002034:	e003      	b.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	74fb      	strb	r3, [r7, #19]
      break;
 800203a:	e000      	b.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800203c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800203e:	7cfb      	ldrb	r3, [r7, #19]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d10b      	bne.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002044:	4b75      	ldr	r3, [pc, #468]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800204a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002052:	4972      	ldr	r1, [pc, #456]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002054:	4313      	orrs	r3, r2
 8002056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800205a:	e001      	b.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800205c:	7cfb      	ldrb	r3, [r7, #19]
 800205e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d03f      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002070:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002074:	d01c      	beq.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002076:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800207a:	d802      	bhi.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800207c:	2b00      	cmp	r3, #0
 800207e:	d00e      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002080:	e01f      	b.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002082:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002086:	d003      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002088:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800208c:	d01c      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800208e:	e018      	b.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002090:	4b62      	ldr	r3, [pc, #392]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	4a61      	ldr	r2, [pc, #388]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002096:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800209a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800209c:	e015      	b.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	3304      	adds	r3, #4
 80020a2:	2100      	movs	r1, #0
 80020a4:	4618      	mov	r0, r3
 80020a6:	f000 fa85 	bl	80025b4 <RCCEx_PLLSAI1_Config>
 80020aa:	4603      	mov	r3, r0
 80020ac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020ae:	e00c      	b.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3320      	adds	r3, #32
 80020b4:	2100      	movs	r1, #0
 80020b6:	4618      	mov	r0, r3
 80020b8:	f000 fb6c 	bl	8002794 <RCCEx_PLLSAI2_Config>
 80020bc:	4603      	mov	r3, r0
 80020be:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020c0:	e003      	b.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	74fb      	strb	r3, [r7, #19]
      break;
 80020c6:	e000      	b.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80020c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020ca:	7cfb      	ldrb	r3, [r7, #19]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d10b      	bne.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020d0:	4b52      	ldr	r3, [pc, #328]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020de:	494f      	ldr	r1, [pc, #316]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80020e6:	e001      	b.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020e8:	7cfb      	ldrb	r3, [r7, #19]
 80020ea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f000 80a0 	beq.w	800223a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020fa:	2300      	movs	r3, #0
 80020fc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020fe:	4b47      	ldr	r3, [pc, #284]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800210a:	2301      	movs	r3, #1
 800210c:	e000      	b.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800210e:	2300      	movs	r3, #0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00d      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002114:	4b41      	ldr	r3, [pc, #260]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002118:	4a40      	ldr	r2, [pc, #256]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800211a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800211e:	6593      	str	r3, [r2, #88]	; 0x58
 8002120:	4b3e      	ldr	r3, [pc, #248]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800212c:	2301      	movs	r3, #1
 800212e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002130:	4b3b      	ldr	r3, [pc, #236]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a3a      	ldr	r2, [pc, #232]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002136:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800213a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800213c:	f7fe fac0 	bl	80006c0 <HAL_GetTick>
 8002140:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002142:	e009      	b.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002144:	f7fe fabc 	bl	80006c0 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d902      	bls.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	74fb      	strb	r3, [r7, #19]
        break;
 8002156:	e005      	b.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002158:	4b31      	ldr	r3, [pc, #196]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002160:	2b00      	cmp	r3, #0
 8002162:	d0ef      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002164:	7cfb      	ldrb	r3, [r7, #19]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d15c      	bne.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800216a:	4b2c      	ldr	r3, [pc, #176]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800216c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002170:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002174:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d01f      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	429a      	cmp	r2, r3
 8002186:	d019      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002188:	4b24      	ldr	r3, [pc, #144]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800218a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800218e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002192:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002194:	4b21      	ldr	r3, [pc, #132]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800219a:	4a20      	ldr	r2, [pc, #128]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800219c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021a4:	4b1d      	ldr	r3, [pc, #116]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021aa:	4a1c      	ldr	r2, [pc, #112]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021b4:	4a19      	ldr	r2, [pc, #100]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d016      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c6:	f7fe fa7b 	bl	80006c0 <HAL_GetTick>
 80021ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021cc:	e00b      	b.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ce:	f7fe fa77 	bl	80006c0 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021dc:	4293      	cmp	r3, r2
 80021de:	d902      	bls.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	74fb      	strb	r3, [r7, #19]
            break;
 80021e4:	e006      	b.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021e6:	4b0d      	ldr	r3, [pc, #52]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0ec      	beq.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80021f4:	7cfb      	ldrb	r3, [r7, #19]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10c      	bne.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021fa:	4b08      	ldr	r3, [pc, #32]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002200:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220a:	4904      	ldr	r1, [pc, #16]	; (800221c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800220c:	4313      	orrs	r3, r2
 800220e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002212:	e009      	b.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002214:	7cfb      	ldrb	r3, [r7, #19]
 8002216:	74bb      	strb	r3, [r7, #18]
 8002218:	e006      	b.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800221a:	bf00      	nop
 800221c:	40021000 	.word	0x40021000
 8002220:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002224:	7cfb      	ldrb	r3, [r7, #19]
 8002226:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002228:	7c7b      	ldrb	r3, [r7, #17]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d105      	bne.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800222e:	4ba6      	ldr	r3, [pc, #664]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002232:	4aa5      	ldr	r2, [pc, #660]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002234:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002238:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00a      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002246:	4ba0      	ldr	r3, [pc, #640]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800224c:	f023 0203 	bic.w	r2, r3, #3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002254:	499c      	ldr	r1, [pc, #624]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002256:	4313      	orrs	r3, r2
 8002258:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00a      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002268:	4b97      	ldr	r3, [pc, #604]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800226a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226e:	f023 020c 	bic.w	r2, r3, #12
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002276:	4994      	ldr	r1, [pc, #592]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002278:	4313      	orrs	r3, r2
 800227a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0304 	and.w	r3, r3, #4
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00a      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800228a:	4b8f      	ldr	r3, [pc, #572]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800228c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002290:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	498b      	ldr	r1, [pc, #556]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800229a:	4313      	orrs	r3, r2
 800229c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0308 	and.w	r3, r3, #8
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d00a      	beq.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022ac:	4b86      	ldr	r3, [pc, #536]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80022ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ba:	4983      	ldr	r1, [pc, #524]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0310 	and.w	r3, r3, #16
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d00a      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022ce:	4b7e      	ldr	r3, [pc, #504]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80022d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022dc:	497a      	ldr	r1, [pc, #488]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0320 	and.w	r3, r3, #32
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00a      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022f0:	4b75      	ldr	r3, [pc, #468]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80022f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fe:	4972      	ldr	r1, [pc, #456]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002300:	4313      	orrs	r3, r2
 8002302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00a      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002312:	4b6d      	ldr	r3, [pc, #436]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002318:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002320:	4969      	ldr	r1, [pc, #420]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002322:	4313      	orrs	r3, r2
 8002324:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002330:	2b00      	cmp	r3, #0
 8002332:	d00a      	beq.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002334:	4b64      	ldr	r3, [pc, #400]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002342:	4961      	ldr	r1, [pc, #388]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002344:	4313      	orrs	r3, r2
 8002346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00a      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002356:	4b5c      	ldr	r3, [pc, #368]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800235c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002364:	4958      	ldr	r1, [pc, #352]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002366:	4313      	orrs	r3, r2
 8002368:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00a      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002378:	4b53      	ldr	r3, [pc, #332]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800237a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800237e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002386:	4950      	ldr	r1, [pc, #320]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002388:	4313      	orrs	r3, r2
 800238a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00a      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800239a:	4b4b      	ldr	r3, [pc, #300]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800239c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a8:	4947      	ldr	r1, [pc, #284]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00a      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80023bc:	4b42      	ldr	r3, [pc, #264]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80023be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80023c2:	f023 0203 	bic.w	r2, r3, #3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ca:	493f      	ldr	r1, [pc, #252]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d028      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023de:	4b3a      	ldr	r3, [pc, #232]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80023e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ec:	4936      	ldr	r1, [pc, #216]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023fc:	d106      	bne.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023fe:	4b32      	ldr	r3, [pc, #200]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	4a31      	ldr	r2, [pc, #196]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002404:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002408:	60d3      	str	r3, [r2, #12]
 800240a:	e011      	b.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002410:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002414:	d10c      	bne.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	3304      	adds	r3, #4
 800241a:	2101      	movs	r1, #1
 800241c:	4618      	mov	r0, r3
 800241e:	f000 f8c9 	bl	80025b4 <RCCEx_PLLSAI1_Config>
 8002422:	4603      	mov	r3, r0
 8002424:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002426:	7cfb      	ldrb	r3, [r7, #19]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 800242c:	7cfb      	ldrb	r3, [r7, #19]
 800242e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d028      	beq.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800243c:	4b22      	ldr	r3, [pc, #136]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800243e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002442:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800244a:	491f      	ldr	r1, [pc, #124]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800244c:	4313      	orrs	r3, r2
 800244e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002456:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800245a:	d106      	bne.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800245c:	4b1a      	ldr	r3, [pc, #104]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	4a19      	ldr	r2, [pc, #100]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002462:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002466:	60d3      	str	r3, [r2, #12]
 8002468:	e011      	b.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800246e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002472:	d10c      	bne.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3304      	adds	r3, #4
 8002478:	2101      	movs	r1, #1
 800247a:	4618      	mov	r0, r3
 800247c:	f000 f89a 	bl	80025b4 <RCCEx_PLLSAI1_Config>
 8002480:	4603      	mov	r3, r0
 8002482:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002484:	7cfb      	ldrb	r3, [r7, #19]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      {
        /* set overall return value */
        status = ret;
 800248a:	7cfb      	ldrb	r3, [r7, #19]
 800248c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d02a      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800249a:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800249c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024a8:	4907      	ldr	r1, [pc, #28]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024b8:	d108      	bne.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024ba:	4b03      	ldr	r3, [pc, #12]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	4a02      	ldr	r2, [pc, #8]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80024c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024c4:	60d3      	str	r3, [r2, #12]
 80024c6:	e013      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80024c8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024d4:	d10c      	bne.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	3304      	adds	r3, #4
 80024da:	2101      	movs	r1, #1
 80024dc:	4618      	mov	r0, r3
 80024de:	f000 f869 	bl	80025b4 <RCCEx_PLLSAI1_Config>
 80024e2:	4603      	mov	r3, r0
 80024e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024e6:	7cfb      	ldrb	r3, [r7, #19]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* set overall return value */
        status = ret;
 80024ec:	7cfb      	ldrb	r3, [r7, #19]
 80024ee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d02f      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024fc:	4b2c      	ldr	r3, [pc, #176]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80024fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002502:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800250a:	4929      	ldr	r1, [pc, #164]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800250c:	4313      	orrs	r3, r2
 800250e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002516:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800251a:	d10d      	bne.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x574>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3304      	adds	r3, #4
 8002520:	2102      	movs	r1, #2
 8002522:	4618      	mov	r0, r3
 8002524:	f000 f846 	bl	80025b4 <RCCEx_PLLSAI1_Config>
 8002528:	4603      	mov	r3, r0
 800252a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800252c:	7cfb      	ldrb	r3, [r7, #19]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d014      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 8002532:	7cfb      	ldrb	r3, [r7, #19]
 8002534:	74bb      	strb	r3, [r7, #18]
 8002536:	e011      	b.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800253c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002540:	d10c      	bne.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	3320      	adds	r3, #32
 8002546:	2102      	movs	r1, #2
 8002548:	4618      	mov	r0, r3
 800254a:	f000 f923 	bl	8002794 <RCCEx_PLLSAI2_Config>
 800254e:	4603      	mov	r3, r0
 8002550:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002552:	7cfb      	ldrb	r3, [r7, #19]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 8002558:	7cfb      	ldrb	r3, [r7, #19]
 800255a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00b      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002568:	4b11      	ldr	r3, [pc, #68]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800256a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002578:	490d      	ldr	r1, [pc, #52]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800257a:	4313      	orrs	r3, r2
 800257c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00b      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800258c:	4b08      	ldr	r3, [pc, #32]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800258e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002592:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800259c:	4904      	ldr	r1, [pc, #16]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80025a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3718      	adds	r7, #24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40021000 	.word	0x40021000

080025b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025be:	2300      	movs	r3, #0
 80025c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025c2:	4b73      	ldr	r3, [pc, #460]	; (8002790 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d018      	beq.n	8002600 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80025ce:	4b70      	ldr	r3, [pc, #448]	; (8002790 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	f003 0203 	and.w	r2, r3, #3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d10d      	bne.n	80025fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
       ||
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d009      	beq.n	80025fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80025e6:	4b6a      	ldr	r3, [pc, #424]	; (8002790 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	091b      	lsrs	r3, r3, #4
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	1c5a      	adds	r2, r3, #1
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
       ||
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d044      	beq.n	8002684 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	73fb      	strb	r3, [r7, #15]
 80025fe:	e041      	b.n	8002684 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2b02      	cmp	r3, #2
 8002606:	d00c      	beq.n	8002622 <RCCEx_PLLSAI1_Config+0x6e>
 8002608:	2b03      	cmp	r3, #3
 800260a:	d013      	beq.n	8002634 <RCCEx_PLLSAI1_Config+0x80>
 800260c:	2b01      	cmp	r3, #1
 800260e:	d120      	bne.n	8002652 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002610:	4b5f      	ldr	r3, [pc, #380]	; (8002790 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d11d      	bne.n	8002658 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002620:	e01a      	b.n	8002658 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002622:	4b5b      	ldr	r3, [pc, #364]	; (8002790 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800262a:	2b00      	cmp	r3, #0
 800262c:	d116      	bne.n	800265c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002632:	e013      	b.n	800265c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002634:	4b56      	ldr	r3, [pc, #344]	; (8002790 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d10f      	bne.n	8002660 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002640:	4b53      	ldr	r3, [pc, #332]	; (8002790 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d109      	bne.n	8002660 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002650:	e006      	b.n	8002660 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	73fb      	strb	r3, [r7, #15]
      break;
 8002656:	e004      	b.n	8002662 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002658:	bf00      	nop
 800265a:	e002      	b.n	8002662 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800265c:	bf00      	nop
 800265e:	e000      	b.n	8002662 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002660:	bf00      	nop
    }

    if(status == HAL_OK)
 8002662:	7bfb      	ldrb	r3, [r7, #15]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10d      	bne.n	8002684 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002668:	4b49      	ldr	r3, [pc, #292]	; (8002790 <RCCEx_PLLSAI1_Config+0x1dc>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6819      	ldr	r1, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	3b01      	subs	r3, #1
 800267a:	011b      	lsls	r3, r3, #4
 800267c:	430b      	orrs	r3, r1
 800267e:	4944      	ldr	r1, [pc, #272]	; (8002790 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002680:	4313      	orrs	r3, r2
 8002682:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002684:	7bfb      	ldrb	r3, [r7, #15]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d17c      	bne.n	8002784 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800268a:	4b41      	ldr	r3, [pc, #260]	; (8002790 <RCCEx_PLLSAI1_Config+0x1dc>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a40      	ldr	r2, [pc, #256]	; (8002790 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002690:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002694:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002696:	f7fe f813 	bl	80006c0 <HAL_GetTick>
 800269a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800269c:	e009      	b.n	80026b2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800269e:	f7fe f80f 	bl	80006c0 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d902      	bls.n	80026b2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	73fb      	strb	r3, [r7, #15]
        break;
 80026b0:	e005      	b.n	80026be <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026b2:	4b37      	ldr	r3, [pc, #220]	; (8002790 <RCCEx_PLLSAI1_Config+0x1dc>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1ef      	bne.n	800269e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80026be:	7bfb      	ldrb	r3, [r7, #15]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d15f      	bne.n	8002784 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d110      	bne.n	80026ec <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026ca:	4b31      	ldr	r3, [pc, #196]	; (8002790 <RCCEx_PLLSAI1_Config+0x1dc>)
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80026d2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	6892      	ldr	r2, [r2, #8]
 80026da:	0211      	lsls	r1, r2, #8
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	68d2      	ldr	r2, [r2, #12]
 80026e0:	06d2      	lsls	r2, r2, #27
 80026e2:	430a      	orrs	r2, r1
 80026e4:	492a      	ldr	r1, [pc, #168]	; (8002790 <RCCEx_PLLSAI1_Config+0x1dc>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	610b      	str	r3, [r1, #16]
 80026ea:	e027      	b.n	800273c <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d112      	bne.n	8002718 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026f2:	4b27      	ldr	r3, [pc, #156]	; (8002790 <RCCEx_PLLSAI1_Config+0x1dc>)
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80026fa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	6892      	ldr	r2, [r2, #8]
 8002702:	0211      	lsls	r1, r2, #8
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	6912      	ldr	r2, [r2, #16]
 8002708:	0852      	lsrs	r2, r2, #1
 800270a:	3a01      	subs	r2, #1
 800270c:	0552      	lsls	r2, r2, #21
 800270e:	430a      	orrs	r2, r1
 8002710:	491f      	ldr	r1, [pc, #124]	; (8002790 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002712:	4313      	orrs	r3, r2
 8002714:	610b      	str	r3, [r1, #16]
 8002716:	e011      	b.n	800273c <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002718:	4b1d      	ldr	r3, [pc, #116]	; (8002790 <RCCEx_PLLSAI1_Config+0x1dc>)
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002720:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	6892      	ldr	r2, [r2, #8]
 8002728:	0211      	lsls	r1, r2, #8
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6952      	ldr	r2, [r2, #20]
 800272e:	0852      	lsrs	r2, r2, #1
 8002730:	3a01      	subs	r2, #1
 8002732:	0652      	lsls	r2, r2, #25
 8002734:	430a      	orrs	r2, r1
 8002736:	4916      	ldr	r1, [pc, #88]	; (8002790 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002738:	4313      	orrs	r3, r2
 800273a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800273c:	4b14      	ldr	r3, [pc, #80]	; (8002790 <RCCEx_PLLSAI1_Config+0x1dc>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a13      	ldr	r2, [pc, #76]	; (8002790 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002742:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002746:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002748:	f7fd ffba 	bl	80006c0 <HAL_GetTick>
 800274c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800274e:	e009      	b.n	8002764 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002750:	f7fd ffb6 	bl	80006c0 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d902      	bls.n	8002764 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	73fb      	strb	r3, [r7, #15]
          break;
 8002762:	e005      	b.n	8002770 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002764:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0ef      	beq.n	8002750 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8002770:	7bfb      	ldrb	r3, [r7, #15]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d106      	bne.n	8002784 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002776:	4b06      	ldr	r3, [pc, #24]	; (8002790 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002778:	691a      	ldr	r2, [r3, #16]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	4904      	ldr	r1, [pc, #16]	; (8002790 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002780:	4313      	orrs	r3, r2
 8002782:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002784:	7bfb      	ldrb	r3, [r7, #15]
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40021000 	.word	0x40021000

08002794 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800279e:	2300      	movs	r3, #0
 80027a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027a2:	4b68      	ldr	r3, [pc, #416]	; (8002944 <RCCEx_PLLSAI2_Config+0x1b0>)
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	f003 0303 	and.w	r3, r3, #3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d018      	beq.n	80027e0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80027ae:	4b65      	ldr	r3, [pc, #404]	; (8002944 <RCCEx_PLLSAI2_Config+0x1b0>)
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	f003 0203 	and.w	r2, r3, #3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d10d      	bne.n	80027da <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
       ||
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d009      	beq.n	80027da <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80027c6:	4b5f      	ldr	r3, [pc, #380]	; (8002944 <RCCEx_PLLSAI2_Config+0x1b0>)
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	091b      	lsrs	r3, r3, #4
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	1c5a      	adds	r2, r3, #1
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
       ||
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d044      	beq.n	8002864 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	73fb      	strb	r3, [r7, #15]
 80027de:	e041      	b.n	8002864 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d00c      	beq.n	8002802 <RCCEx_PLLSAI2_Config+0x6e>
 80027e8:	2b03      	cmp	r3, #3
 80027ea:	d013      	beq.n	8002814 <RCCEx_PLLSAI2_Config+0x80>
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d120      	bne.n	8002832 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027f0:	4b54      	ldr	r3, [pc, #336]	; (8002944 <RCCEx_PLLSAI2_Config+0x1b0>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d11d      	bne.n	8002838 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002800:	e01a      	b.n	8002838 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002802:	4b50      	ldr	r3, [pc, #320]	; (8002944 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800280a:	2b00      	cmp	r3, #0
 800280c:	d116      	bne.n	800283c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002812:	e013      	b.n	800283c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002814:	4b4b      	ldr	r3, [pc, #300]	; (8002944 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d10f      	bne.n	8002840 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002820:	4b48      	ldr	r3, [pc, #288]	; (8002944 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d109      	bne.n	8002840 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002830:	e006      	b.n	8002840 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	73fb      	strb	r3, [r7, #15]
      break;
 8002836:	e004      	b.n	8002842 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002838:	bf00      	nop
 800283a:	e002      	b.n	8002842 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800283c:	bf00      	nop
 800283e:	e000      	b.n	8002842 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002840:	bf00      	nop
    }

    if(status == HAL_OK)
 8002842:	7bfb      	ldrb	r3, [r7, #15]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d10d      	bne.n	8002864 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002848:	4b3e      	ldr	r3, [pc, #248]	; (8002944 <RCCEx_PLLSAI2_Config+0x1b0>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6819      	ldr	r1, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	3b01      	subs	r3, #1
 800285a:	011b      	lsls	r3, r3, #4
 800285c:	430b      	orrs	r3, r1
 800285e:	4939      	ldr	r1, [pc, #228]	; (8002944 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002860:	4313      	orrs	r3, r2
 8002862:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002864:	7bfb      	ldrb	r3, [r7, #15]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d166      	bne.n	8002938 <RCCEx_PLLSAI2_Config+0x1a4>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800286a:	4b36      	ldr	r3, [pc, #216]	; (8002944 <RCCEx_PLLSAI2_Config+0x1b0>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a35      	ldr	r2, [pc, #212]	; (8002944 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002870:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002874:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002876:	f7fd ff23 	bl	80006c0 <HAL_GetTick>
 800287a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800287c:	e009      	b.n	8002892 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800287e:	f7fd ff1f 	bl	80006c0 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d902      	bls.n	8002892 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	73fb      	strb	r3, [r7, #15]
        break;
 8002890:	e005      	b.n	800289e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002892:	4b2c      	ldr	r3, [pc, #176]	; (8002944 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1ef      	bne.n	800287e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800289e:	7bfb      	ldrb	r3, [r7, #15]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d149      	bne.n	8002938 <RCCEx_PLLSAI2_Config+0x1a4>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d110      	bne.n	80028cc <RCCEx_PLLSAI2_Config+0x138>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028aa:	4b26      	ldr	r3, [pc, #152]	; (8002944 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80028b2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	6892      	ldr	r2, [r2, #8]
 80028ba:	0211      	lsls	r1, r2, #8
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	68d2      	ldr	r2, [r2, #12]
 80028c0:	06d2      	lsls	r2, r2, #27
 80028c2:	430a      	orrs	r2, r1
 80028c4:	491f      	ldr	r1, [pc, #124]	; (8002944 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	614b      	str	r3, [r1, #20]
 80028ca:	e011      	b.n	80028f0 <RCCEx_PLLSAI2_Config+0x15c>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028cc:	4b1d      	ldr	r3, [pc, #116]	; (8002944 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80028d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	6892      	ldr	r2, [r2, #8]
 80028dc:	0211      	lsls	r1, r2, #8
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	6912      	ldr	r2, [r2, #16]
 80028e2:	0852      	lsrs	r2, r2, #1
 80028e4:	3a01      	subs	r2, #1
 80028e6:	0652      	lsls	r2, r2, #25
 80028e8:	430a      	orrs	r2, r1
 80028ea:	4916      	ldr	r1, [pc, #88]	; (8002944 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80028f0:	4b14      	ldr	r3, [pc, #80]	; (8002944 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a13      	ldr	r2, [pc, #76]	; (8002944 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028fc:	f7fd fee0 	bl	80006c0 <HAL_GetTick>
 8002900:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002902:	e009      	b.n	8002918 <RCCEx_PLLSAI2_Config+0x184>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002904:	f7fd fedc 	bl	80006c0 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d902      	bls.n	8002918 <RCCEx_PLLSAI2_Config+0x184>
        {
          status = HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	73fb      	strb	r3, [r7, #15]
          break;
 8002916:	e005      	b.n	8002924 <RCCEx_PLLSAI2_Config+0x190>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002918:	4b0a      	ldr	r3, [pc, #40]	; (8002944 <RCCEx_PLLSAI2_Config+0x1b0>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0ef      	beq.n	8002904 <RCCEx_PLLSAI2_Config+0x170>
        }
      }

      if(status == HAL_OK)
 8002924:	7bfb      	ldrb	r3, [r7, #15]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d106      	bne.n	8002938 <RCCEx_PLLSAI2_Config+0x1a4>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800292a:	4b06      	ldr	r3, [pc, #24]	; (8002944 <RCCEx_PLLSAI2_Config+0x1b0>)
 800292c:	695a      	ldr	r2, [r3, #20]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	4904      	ldr	r1, [pc, #16]	; (8002944 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002934:	4313      	orrs	r3, r2
 8002936:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002938:	7bfb      	ldrb	r3, [r7, #15]
}
 800293a:	4618      	mov	r0, r3
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40021000 	.word	0x40021000

08002948 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e040      	b.n	80029dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800295e:	2b00      	cmp	r3, #0
 8002960:	d106      	bne.n	8002970 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f001 fe56 	bl	800461c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2224      	movs	r2, #36	; 0x24
 8002974:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 0201 	bic.w	r2, r2, #1
 8002984:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 f98c 	bl	8002ca4 <UART_SetConfig>
 800298c:	4603      	mov	r3, r0
 800298e:	2b01      	cmp	r3, #1
 8002990:	d101      	bne.n	8002996 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e022      	b.n	80029dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	2b00      	cmp	r3, #0
 800299c:	d002      	beq.n	80029a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 fcc8 	bl	8003334 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	685a      	ldr	r2, [r3, #4]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689a      	ldr	r2, [r3, #8]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f042 0201 	orr.w	r2, r2, #1
 80029d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 fd4f 	bl	8003478 <UART_CheckIdleState>
 80029da:	4603      	mov	r3, r0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08a      	sub	sp, #40	; 0x28
 80029e8:	af02      	add	r7, sp, #8
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	603b      	str	r3, [r7, #0]
 80029f0:	4613      	mov	r3, r2
 80029f2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029f8:	2b20      	cmp	r3, #32
 80029fa:	f040 8081 	bne.w	8002b00 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d002      	beq.n	8002a0a <HAL_UART_Transmit+0x26>
 8002a04:	88fb      	ldrh	r3, [r7, #6]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e079      	b.n	8002b02 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d101      	bne.n	8002a1c <HAL_UART_Transmit+0x38>
 8002a18:	2302      	movs	r3, #2
 8002a1a:	e072      	b.n	8002b02 <HAL_UART_Transmit+0x11e>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2221      	movs	r2, #33	; 0x21
 8002a2e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002a30:	f7fd fe46 	bl	80006c0 <HAL_GetTick>
 8002a34:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	88fa      	ldrh	r2, [r7, #6]
 8002a3a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	88fa      	ldrh	r2, [r7, #6]
 8002a42:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a4e:	d108      	bne.n	8002a62 <HAL_UART_Transmit+0x7e>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d104      	bne.n	8002a62 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	61bb      	str	r3, [r7, #24]
 8002a60:	e003      	b.n	8002a6a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a66:	2300      	movs	r3, #0
 8002a68:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a6a:	e02d      	b.n	8002ac8 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	2200      	movs	r2, #0
 8002a74:	2180      	movs	r1, #128	; 0x80
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 fd43 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e03d      	b.n	8002b02 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10b      	bne.n	8002aa4 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	881a      	ldrh	r2, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a98:	b292      	uxth	r2, r2
 8002a9a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	3302      	adds	r3, #2
 8002aa0:	61bb      	str	r3, [r7, #24]
 8002aa2:	e008      	b.n	8002ab6 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	781a      	ldrb	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	b292      	uxth	r2, r2
 8002aae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1cb      	bne.n	8002a6c <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	2200      	movs	r2, #0
 8002adc:	2140      	movs	r1, #64	; 0x40
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f000 fd0f 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e009      	b.n	8002b02 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2220      	movs	r2, #32
 8002af2:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002afc:	2300      	movs	r3, #0
 8002afe:	e000      	b.n	8002b02 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002b00:	2302      	movs	r3, #2
  }
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3720      	adds	r7, #32
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_UART_Receive>:
  * @param Size    Amount of data to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b08a      	sub	sp, #40	; 0x28
 8002b0e:	af02      	add	r7, sp, #8
 8002b10:	60f8      	str	r0, [r7, #12]
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	603b      	str	r3, [r7, #0]
 8002b16:	4613      	mov	r3, r2
 8002b18:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b1e:	2b20      	cmp	r3, #32
 8002b20:	f040 80bb 	bne.w	8002c9a <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d002      	beq.n	8002b30 <HAL_UART_Receive+0x26>
 8002b2a:	88fb      	ldrh	r3, [r7, #6]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e0b3      	b.n	8002c9c <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d101      	bne.n	8002b42 <HAL_UART_Receive+0x38>
 8002b3e:	2302      	movs	r3, #2
 8002b40:	e0ac      	b.n	8002c9c <HAL_UART_Receive+0x192>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2222      	movs	r2, #34	; 0x22
 8002b54:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002b56:	f7fd fdb3 	bl	80006c0 <HAL_GetTick>
 8002b5a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	88fa      	ldrh	r2, [r7, #6]
 8002b60:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	88fa      	ldrh	r2, [r7, #6]
 8002b68:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b74:	d10e      	bne.n	8002b94 <HAL_UART_Receive+0x8a>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d105      	bne.n	8002b8a <HAL_UART_Receive+0x80>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002b84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b88:	e02d      	b.n	8002be6 <HAL_UART_Receive+0xdc>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	22ff      	movs	r2, #255	; 0xff
 8002b8e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b92:	e028      	b.n	8002be6 <HAL_UART_Receive+0xdc>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10d      	bne.n	8002bb8 <HAL_UART_Receive+0xae>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d104      	bne.n	8002bae <HAL_UART_Receive+0xa4>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	22ff      	movs	r2, #255	; 0xff
 8002ba8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002bac:	e01b      	b.n	8002be6 <HAL_UART_Receive+0xdc>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	227f      	movs	r2, #127	; 0x7f
 8002bb2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002bb6:	e016      	b.n	8002be6 <HAL_UART_Receive+0xdc>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bc0:	d10d      	bne.n	8002bde <HAL_UART_Receive+0xd4>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d104      	bne.n	8002bd4 <HAL_UART_Receive+0xca>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	227f      	movs	r2, #127	; 0x7f
 8002bce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002bd2:	e008      	b.n	8002be6 <HAL_UART_Receive+0xdc>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	223f      	movs	r2, #63	; 0x3f
 8002bd8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002bdc:	e003      	b.n	8002be6 <HAL_UART_Receive+0xdc>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002bec:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bf6:	d108      	bne.n	8002c0a <HAL_UART_Receive+0x100>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d104      	bne.n	8002c0a <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8002c00:	2300      	movs	r3, #0
 8002c02:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	61bb      	str	r3, [r7, #24]
 8002c08:	e003      	b.n	8002c12 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002c12:	e033      	b.n	8002c7c <HAL_UART_Receive+0x172>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	2120      	movs	r1, #32
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 fc6f 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_UART_Receive+0x124>
      {
        return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e036      	b.n	8002c9c <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d10c      	bne.n	8002c4e <HAL_UART_Receive+0x144>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	8a7b      	ldrh	r3, [r7, #18]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	3302      	adds	r3, #2
 8002c4a:	61bb      	str	r3, [r7, #24]
 8002c4c:	e00d      	b.n	8002c6a <HAL_UART_Receive+0x160>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	8a7b      	ldrh	r3, [r7, #18]
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	3301      	adds	r3, #1
 8002c68:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	3b01      	subs	r3, #1
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1c5      	bne.n	8002c14 <HAL_UART_Receive+0x10a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	679a      	str	r2, [r3, #120]	; 0x78

    __HAL_UNLOCK(huart);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	e000      	b.n	8002c9c <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 8002c9a:	2302      	movs	r3, #2
  }
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3720      	adds	r7, #32
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ca4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002ca8:	b088      	sub	sp, #32
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	689a      	ldr	r2, [r3, #8]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	4bac      	ldr	r3, [pc, #688]	; (8002f8c <UART_SetConfig+0x2e8>)
 8002cda:	4013      	ands	r3, r2
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	6812      	ldr	r2, [r2, #0]
 8002ce0:	69f9      	ldr	r1, [r7, #28]
 8002ce2:	430b      	orrs	r3, r1
 8002ce4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68da      	ldr	r2, [r3, #12]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4aa2      	ldr	r2, [pc, #648]	; (8002f90 <UART_SetConfig+0x2ec>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d004      	beq.n	8002d16 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	69fa      	ldr	r2, [r7, #28]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	69fa      	ldr	r2, [r7, #28]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a99      	ldr	r2, [pc, #612]	; (8002f94 <UART_SetConfig+0x2f0>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d121      	bne.n	8002d78 <UART_SetConfig+0xd4>
 8002d34:	4b98      	ldr	r3, [pc, #608]	; (8002f98 <UART_SetConfig+0x2f4>)
 8002d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3a:	f003 0303 	and.w	r3, r3, #3
 8002d3e:	2b03      	cmp	r3, #3
 8002d40:	d816      	bhi.n	8002d70 <UART_SetConfig+0xcc>
 8002d42:	a201      	add	r2, pc, #4	; (adr r2, 8002d48 <UART_SetConfig+0xa4>)
 8002d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d48:	08002d59 	.word	0x08002d59
 8002d4c:	08002d65 	.word	0x08002d65
 8002d50:	08002d5f 	.word	0x08002d5f
 8002d54:	08002d6b 	.word	0x08002d6b
 8002d58:	2301      	movs	r3, #1
 8002d5a:	76fb      	strb	r3, [r7, #27]
 8002d5c:	e0e8      	b.n	8002f30 <UART_SetConfig+0x28c>
 8002d5e:	2302      	movs	r3, #2
 8002d60:	76fb      	strb	r3, [r7, #27]
 8002d62:	e0e5      	b.n	8002f30 <UART_SetConfig+0x28c>
 8002d64:	2304      	movs	r3, #4
 8002d66:	76fb      	strb	r3, [r7, #27]
 8002d68:	e0e2      	b.n	8002f30 <UART_SetConfig+0x28c>
 8002d6a:	2308      	movs	r3, #8
 8002d6c:	76fb      	strb	r3, [r7, #27]
 8002d6e:	e0df      	b.n	8002f30 <UART_SetConfig+0x28c>
 8002d70:	2310      	movs	r3, #16
 8002d72:	76fb      	strb	r3, [r7, #27]
 8002d74:	bf00      	nop
 8002d76:	e0db      	b.n	8002f30 <UART_SetConfig+0x28c>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a87      	ldr	r2, [pc, #540]	; (8002f9c <UART_SetConfig+0x2f8>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d134      	bne.n	8002dec <UART_SetConfig+0x148>
 8002d82:	4b85      	ldr	r3, [pc, #532]	; (8002f98 <UART_SetConfig+0x2f4>)
 8002d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d88:	f003 030c 	and.w	r3, r3, #12
 8002d8c:	2b0c      	cmp	r3, #12
 8002d8e:	d829      	bhi.n	8002de4 <UART_SetConfig+0x140>
 8002d90:	a201      	add	r2, pc, #4	; (adr r2, 8002d98 <UART_SetConfig+0xf4>)
 8002d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d96:	bf00      	nop
 8002d98:	08002dcd 	.word	0x08002dcd
 8002d9c:	08002de5 	.word	0x08002de5
 8002da0:	08002de5 	.word	0x08002de5
 8002da4:	08002de5 	.word	0x08002de5
 8002da8:	08002dd9 	.word	0x08002dd9
 8002dac:	08002de5 	.word	0x08002de5
 8002db0:	08002de5 	.word	0x08002de5
 8002db4:	08002de5 	.word	0x08002de5
 8002db8:	08002dd3 	.word	0x08002dd3
 8002dbc:	08002de5 	.word	0x08002de5
 8002dc0:	08002de5 	.word	0x08002de5
 8002dc4:	08002de5 	.word	0x08002de5
 8002dc8:	08002ddf 	.word	0x08002ddf
 8002dcc:	2300      	movs	r3, #0
 8002dce:	76fb      	strb	r3, [r7, #27]
 8002dd0:	e0ae      	b.n	8002f30 <UART_SetConfig+0x28c>
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	76fb      	strb	r3, [r7, #27]
 8002dd6:	e0ab      	b.n	8002f30 <UART_SetConfig+0x28c>
 8002dd8:	2304      	movs	r3, #4
 8002dda:	76fb      	strb	r3, [r7, #27]
 8002ddc:	e0a8      	b.n	8002f30 <UART_SetConfig+0x28c>
 8002dde:	2308      	movs	r3, #8
 8002de0:	76fb      	strb	r3, [r7, #27]
 8002de2:	e0a5      	b.n	8002f30 <UART_SetConfig+0x28c>
 8002de4:	2310      	movs	r3, #16
 8002de6:	76fb      	strb	r3, [r7, #27]
 8002de8:	bf00      	nop
 8002dea:	e0a1      	b.n	8002f30 <UART_SetConfig+0x28c>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a6b      	ldr	r2, [pc, #428]	; (8002fa0 <UART_SetConfig+0x2fc>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d120      	bne.n	8002e38 <UART_SetConfig+0x194>
 8002df6:	4b68      	ldr	r3, [pc, #416]	; (8002f98 <UART_SetConfig+0x2f4>)
 8002df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002e00:	2b10      	cmp	r3, #16
 8002e02:	d00f      	beq.n	8002e24 <UART_SetConfig+0x180>
 8002e04:	2b10      	cmp	r3, #16
 8002e06:	d802      	bhi.n	8002e0e <UART_SetConfig+0x16a>
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d005      	beq.n	8002e18 <UART_SetConfig+0x174>
 8002e0c:	e010      	b.n	8002e30 <UART_SetConfig+0x18c>
 8002e0e:	2b20      	cmp	r3, #32
 8002e10:	d005      	beq.n	8002e1e <UART_SetConfig+0x17a>
 8002e12:	2b30      	cmp	r3, #48	; 0x30
 8002e14:	d009      	beq.n	8002e2a <UART_SetConfig+0x186>
 8002e16:	e00b      	b.n	8002e30 <UART_SetConfig+0x18c>
 8002e18:	2300      	movs	r3, #0
 8002e1a:	76fb      	strb	r3, [r7, #27]
 8002e1c:	e088      	b.n	8002f30 <UART_SetConfig+0x28c>
 8002e1e:	2302      	movs	r3, #2
 8002e20:	76fb      	strb	r3, [r7, #27]
 8002e22:	e085      	b.n	8002f30 <UART_SetConfig+0x28c>
 8002e24:	2304      	movs	r3, #4
 8002e26:	76fb      	strb	r3, [r7, #27]
 8002e28:	e082      	b.n	8002f30 <UART_SetConfig+0x28c>
 8002e2a:	2308      	movs	r3, #8
 8002e2c:	76fb      	strb	r3, [r7, #27]
 8002e2e:	e07f      	b.n	8002f30 <UART_SetConfig+0x28c>
 8002e30:	2310      	movs	r3, #16
 8002e32:	76fb      	strb	r3, [r7, #27]
 8002e34:	bf00      	nop
 8002e36:	e07b      	b.n	8002f30 <UART_SetConfig+0x28c>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a59      	ldr	r2, [pc, #356]	; (8002fa4 <UART_SetConfig+0x300>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d120      	bne.n	8002e84 <UART_SetConfig+0x1e0>
 8002e42:	4b55      	ldr	r3, [pc, #340]	; (8002f98 <UART_SetConfig+0x2f4>)
 8002e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e48:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002e4c:	2b40      	cmp	r3, #64	; 0x40
 8002e4e:	d00f      	beq.n	8002e70 <UART_SetConfig+0x1cc>
 8002e50:	2b40      	cmp	r3, #64	; 0x40
 8002e52:	d802      	bhi.n	8002e5a <UART_SetConfig+0x1b6>
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d005      	beq.n	8002e64 <UART_SetConfig+0x1c0>
 8002e58:	e010      	b.n	8002e7c <UART_SetConfig+0x1d8>
 8002e5a:	2b80      	cmp	r3, #128	; 0x80
 8002e5c:	d005      	beq.n	8002e6a <UART_SetConfig+0x1c6>
 8002e5e:	2bc0      	cmp	r3, #192	; 0xc0
 8002e60:	d009      	beq.n	8002e76 <UART_SetConfig+0x1d2>
 8002e62:	e00b      	b.n	8002e7c <UART_SetConfig+0x1d8>
 8002e64:	2300      	movs	r3, #0
 8002e66:	76fb      	strb	r3, [r7, #27]
 8002e68:	e062      	b.n	8002f30 <UART_SetConfig+0x28c>
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	76fb      	strb	r3, [r7, #27]
 8002e6e:	e05f      	b.n	8002f30 <UART_SetConfig+0x28c>
 8002e70:	2304      	movs	r3, #4
 8002e72:	76fb      	strb	r3, [r7, #27]
 8002e74:	e05c      	b.n	8002f30 <UART_SetConfig+0x28c>
 8002e76:	2308      	movs	r3, #8
 8002e78:	76fb      	strb	r3, [r7, #27]
 8002e7a:	e059      	b.n	8002f30 <UART_SetConfig+0x28c>
 8002e7c:	2310      	movs	r3, #16
 8002e7e:	76fb      	strb	r3, [r7, #27]
 8002e80:	bf00      	nop
 8002e82:	e055      	b.n	8002f30 <UART_SetConfig+0x28c>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a47      	ldr	r2, [pc, #284]	; (8002fa8 <UART_SetConfig+0x304>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d124      	bne.n	8002ed8 <UART_SetConfig+0x234>
 8002e8e:	4b42      	ldr	r3, [pc, #264]	; (8002f98 <UART_SetConfig+0x2f4>)
 8002e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e9c:	d012      	beq.n	8002ec4 <UART_SetConfig+0x220>
 8002e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ea2:	d802      	bhi.n	8002eaa <UART_SetConfig+0x206>
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d007      	beq.n	8002eb8 <UART_SetConfig+0x214>
 8002ea8:	e012      	b.n	8002ed0 <UART_SetConfig+0x22c>
 8002eaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eae:	d006      	beq.n	8002ebe <UART_SetConfig+0x21a>
 8002eb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002eb4:	d009      	beq.n	8002eca <UART_SetConfig+0x226>
 8002eb6:	e00b      	b.n	8002ed0 <UART_SetConfig+0x22c>
 8002eb8:	2300      	movs	r3, #0
 8002eba:	76fb      	strb	r3, [r7, #27]
 8002ebc:	e038      	b.n	8002f30 <UART_SetConfig+0x28c>
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	76fb      	strb	r3, [r7, #27]
 8002ec2:	e035      	b.n	8002f30 <UART_SetConfig+0x28c>
 8002ec4:	2304      	movs	r3, #4
 8002ec6:	76fb      	strb	r3, [r7, #27]
 8002ec8:	e032      	b.n	8002f30 <UART_SetConfig+0x28c>
 8002eca:	2308      	movs	r3, #8
 8002ecc:	76fb      	strb	r3, [r7, #27]
 8002ece:	e02f      	b.n	8002f30 <UART_SetConfig+0x28c>
 8002ed0:	2310      	movs	r3, #16
 8002ed2:	76fb      	strb	r3, [r7, #27]
 8002ed4:	bf00      	nop
 8002ed6:	e02b      	b.n	8002f30 <UART_SetConfig+0x28c>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a2c      	ldr	r2, [pc, #176]	; (8002f90 <UART_SetConfig+0x2ec>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d124      	bne.n	8002f2c <UART_SetConfig+0x288>
 8002ee2:	4b2d      	ldr	r3, [pc, #180]	; (8002f98 <UART_SetConfig+0x2f4>)
 8002ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002eec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ef0:	d012      	beq.n	8002f18 <UART_SetConfig+0x274>
 8002ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ef6:	d802      	bhi.n	8002efe <UART_SetConfig+0x25a>
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d007      	beq.n	8002f0c <UART_SetConfig+0x268>
 8002efc:	e012      	b.n	8002f24 <UART_SetConfig+0x280>
 8002efe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f02:	d006      	beq.n	8002f12 <UART_SetConfig+0x26e>
 8002f04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f08:	d009      	beq.n	8002f1e <UART_SetConfig+0x27a>
 8002f0a:	e00b      	b.n	8002f24 <UART_SetConfig+0x280>
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	76fb      	strb	r3, [r7, #27]
 8002f10:	e00e      	b.n	8002f30 <UART_SetConfig+0x28c>
 8002f12:	2302      	movs	r3, #2
 8002f14:	76fb      	strb	r3, [r7, #27]
 8002f16:	e00b      	b.n	8002f30 <UART_SetConfig+0x28c>
 8002f18:	2304      	movs	r3, #4
 8002f1a:	76fb      	strb	r3, [r7, #27]
 8002f1c:	e008      	b.n	8002f30 <UART_SetConfig+0x28c>
 8002f1e:	2308      	movs	r3, #8
 8002f20:	76fb      	strb	r3, [r7, #27]
 8002f22:	e005      	b.n	8002f30 <UART_SetConfig+0x28c>
 8002f24:	2310      	movs	r3, #16
 8002f26:	76fb      	strb	r3, [r7, #27]
 8002f28:	bf00      	nop
 8002f2a:	e001      	b.n	8002f30 <UART_SetConfig+0x28c>
 8002f2c:	2310      	movs	r3, #16
 8002f2e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a16      	ldr	r2, [pc, #88]	; (8002f90 <UART_SetConfig+0x2ec>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	f040 80fa 	bne.w	8003130 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002f3c:	7efb      	ldrb	r3, [r7, #27]
 8002f3e:	2b08      	cmp	r3, #8
 8002f40:	d836      	bhi.n	8002fb0 <UART_SetConfig+0x30c>
 8002f42:	a201      	add	r2, pc, #4	; (adr r2, 8002f48 <UART_SetConfig+0x2a4>)
 8002f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f48:	08002f6d 	.word	0x08002f6d
 8002f4c:	08002fb1 	.word	0x08002fb1
 8002f50:	08002f75 	.word	0x08002f75
 8002f54:	08002fb1 	.word	0x08002fb1
 8002f58:	08002f7b 	.word	0x08002f7b
 8002f5c:	08002fb1 	.word	0x08002fb1
 8002f60:	08002fb1 	.word	0x08002fb1
 8002f64:	08002fb1 	.word	0x08002fb1
 8002f68:	08002f83 	.word	0x08002f83
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002f6c:	f7fe ff9e 	bl	8001eac <HAL_RCC_GetPCLK1Freq>
 8002f70:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002f72:	e020      	b.n	8002fb6 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002f74:	4b0d      	ldr	r3, [pc, #52]	; (8002fac <UART_SetConfig+0x308>)
 8002f76:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002f78:	e01d      	b.n	8002fb6 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002f7a:	f7fe ff01 	bl	8001d80 <HAL_RCC_GetSysClockFreq>
 8002f7e:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002f80:	e019      	b.n	8002fb6 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002f82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f86:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002f88:	e015      	b.n	8002fb6 <UART_SetConfig+0x312>
 8002f8a:	bf00      	nop
 8002f8c:	efff69f3 	.word	0xefff69f3
 8002f90:	40008000 	.word	0x40008000
 8002f94:	40013800 	.word	0x40013800
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	40004400 	.word	0x40004400
 8002fa0:	40004800 	.word	0x40004800
 8002fa4:	40004c00 	.word	0x40004c00
 8002fa8:	40005000 	.word	0x40005000
 8002fac:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	74fb      	strb	r3, [r7, #19]
        break;
 8002fb4:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 81ac 	beq.w	8003316 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	4413      	add	r3, r2
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d305      	bcc.n	8002fda <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d902      	bls.n	8002fe0 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	74fb      	strb	r3, [r7, #19]
 8002fde:	e19a      	b.n	8003316 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8002fe0:	7efb      	ldrb	r3, [r7, #27]
 8002fe2:	2b08      	cmp	r3, #8
 8002fe4:	f200 8091 	bhi.w	800310a <UART_SetConfig+0x466>
 8002fe8:	a201      	add	r2, pc, #4	; (adr r2, 8002ff0 <UART_SetConfig+0x34c>)
 8002fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fee:	bf00      	nop
 8002ff0:	08003015 	.word	0x08003015
 8002ff4:	0800310b 	.word	0x0800310b
 8002ff8:	08003061 	.word	0x08003061
 8002ffc:	0800310b 	.word	0x0800310b
 8003000:	08003095 	.word	0x08003095
 8003004:	0800310b 	.word	0x0800310b
 8003008:	0800310b 	.word	0x0800310b
 800300c:	0800310b 	.word	0x0800310b
 8003010:	080030e1 	.word	0x080030e1
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003014:	f7fe ff4a 	bl	8001eac <HAL_RCC_GetPCLK1Freq>
 8003018:	4603      	mov	r3, r0
 800301a:	4619      	mov	r1, r3
 800301c:	f04f 0200 	mov.w	r2, #0
 8003020:	f04f 0300 	mov.w	r3, #0
 8003024:	f04f 0400 	mov.w	r4, #0
 8003028:	0214      	lsls	r4, r2, #8
 800302a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800302e:	020b      	lsls	r3, r1, #8
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	6852      	ldr	r2, [r2, #4]
 8003034:	0852      	lsrs	r2, r2, #1
 8003036:	4611      	mov	r1, r2
 8003038:	f04f 0200 	mov.w	r2, #0
 800303c:	eb13 0b01 	adds.w	fp, r3, r1
 8003040:	eb44 0c02 	adc.w	ip, r4, r2
 8003044:	4658      	mov	r0, fp
 8003046:	4661      	mov	r1, ip
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f04f 0400 	mov.w	r4, #0
 8003050:	461a      	mov	r2, r3
 8003052:	4623      	mov	r3, r4
 8003054:	f7fd f91c 	bl	8000290 <__aeabi_uldivmod>
 8003058:	4603      	mov	r3, r0
 800305a:	460c      	mov	r4, r1
 800305c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800305e:	e057      	b.n	8003110 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	085b      	lsrs	r3, r3, #1
 8003066:	f04f 0400 	mov.w	r4, #0
 800306a:	49b1      	ldr	r1, [pc, #708]	; (8003330 <UART_SetConfig+0x68c>)
 800306c:	f04f 0200 	mov.w	r2, #0
 8003070:	eb13 0b01 	adds.w	fp, r3, r1
 8003074:	eb44 0c02 	adc.w	ip, r4, r2
 8003078:	4658      	mov	r0, fp
 800307a:	4661      	mov	r1, ip
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f04f 0400 	mov.w	r4, #0
 8003084:	461a      	mov	r2, r3
 8003086:	4623      	mov	r3, r4
 8003088:	f7fd f902 	bl	8000290 <__aeabi_uldivmod>
 800308c:	4603      	mov	r3, r0
 800308e:	460c      	mov	r4, r1
 8003090:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003092:	e03d      	b.n	8003110 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003094:	f7fe fe74 	bl	8001d80 <HAL_RCC_GetSysClockFreq>
 8003098:	4603      	mov	r3, r0
 800309a:	4619      	mov	r1, r3
 800309c:	f04f 0200 	mov.w	r2, #0
 80030a0:	f04f 0300 	mov.w	r3, #0
 80030a4:	f04f 0400 	mov.w	r4, #0
 80030a8:	0214      	lsls	r4, r2, #8
 80030aa:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80030ae:	020b      	lsls	r3, r1, #8
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6852      	ldr	r2, [r2, #4]
 80030b4:	0852      	lsrs	r2, r2, #1
 80030b6:	4611      	mov	r1, r2
 80030b8:	f04f 0200 	mov.w	r2, #0
 80030bc:	eb13 0b01 	adds.w	fp, r3, r1
 80030c0:	eb44 0c02 	adc.w	ip, r4, r2
 80030c4:	4658      	mov	r0, fp
 80030c6:	4661      	mov	r1, ip
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f04f 0400 	mov.w	r4, #0
 80030d0:	461a      	mov	r2, r3
 80030d2:	4623      	mov	r3, r4
 80030d4:	f7fd f8dc 	bl	8000290 <__aeabi_uldivmod>
 80030d8:	4603      	mov	r3, r0
 80030da:	460c      	mov	r4, r1
 80030dc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80030de:	e017      	b.n	8003110 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	085b      	lsrs	r3, r3, #1
 80030e6:	f04f 0400 	mov.w	r4, #0
 80030ea:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80030ee:	f144 0100 	adc.w	r1, r4, #0
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f04f 0400 	mov.w	r4, #0
 80030fa:	461a      	mov	r2, r3
 80030fc:	4623      	mov	r3, r4
 80030fe:	f7fd f8c7 	bl	8000290 <__aeabi_uldivmod>
 8003102:	4603      	mov	r3, r0
 8003104:	460c      	mov	r4, r1
 8003106:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003108:	e002      	b.n	8003110 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	74fb      	strb	r3, [r7, #19]
            break;
 800310e:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003116:	d308      	bcc.n	800312a <UART_SetConfig+0x486>
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800311e:	d204      	bcs.n	800312a <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	60da      	str	r2, [r3, #12]
 8003128:	e0f5      	b.n	8003316 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	74fb      	strb	r3, [r7, #19]
 800312e:	e0f2      	b.n	8003316 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	69db      	ldr	r3, [r3, #28]
 8003134:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003138:	d17f      	bne.n	800323a <UART_SetConfig+0x596>
  {
    switch (clocksource)
 800313a:	7efb      	ldrb	r3, [r7, #27]
 800313c:	2b08      	cmp	r3, #8
 800313e:	d85c      	bhi.n	80031fa <UART_SetConfig+0x556>
 8003140:	a201      	add	r2, pc, #4	; (adr r2, 8003148 <UART_SetConfig+0x4a4>)
 8003142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003146:	bf00      	nop
 8003148:	0800316d 	.word	0x0800316d
 800314c:	0800318b 	.word	0x0800318b
 8003150:	080031a9 	.word	0x080031a9
 8003154:	080031fb 	.word	0x080031fb
 8003158:	080031c5 	.word	0x080031c5
 800315c:	080031fb 	.word	0x080031fb
 8003160:	080031fb 	.word	0x080031fb
 8003164:	080031fb 	.word	0x080031fb
 8003168:	080031e3 	.word	0x080031e3
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800316c:	f7fe fe9e 	bl	8001eac <HAL_RCC_GetPCLK1Freq>
 8003170:	4603      	mov	r3, r0
 8003172:	005a      	lsls	r2, r3, #1
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	085b      	lsrs	r3, r3, #1
 800317a:	441a      	add	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	fbb2 f3f3 	udiv	r3, r2, r3
 8003184:	b29b      	uxth	r3, r3
 8003186:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003188:	e03a      	b.n	8003200 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800318a:	f7fe fea5 	bl	8001ed8 <HAL_RCC_GetPCLK2Freq>
 800318e:	4603      	mov	r3, r0
 8003190:	005a      	lsls	r2, r3, #1
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	085b      	lsrs	r3, r3, #1
 8003198:	441a      	add	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80031a6:	e02b      	b.n	8003200 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	085b      	lsrs	r3, r3, #1
 80031ae:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80031b2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6852      	ldr	r2, [r2, #4]
 80031ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80031be:	b29b      	uxth	r3, r3
 80031c0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80031c2:	e01d      	b.n	8003200 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80031c4:	f7fe fddc 	bl	8001d80 <HAL_RCC_GetSysClockFreq>
 80031c8:	4603      	mov	r3, r0
 80031ca:	005a      	lsls	r2, r3, #1
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	085b      	lsrs	r3, r3, #1
 80031d2:	441a      	add	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031dc:	b29b      	uxth	r3, r3
 80031de:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80031e0:	e00e      	b.n	8003200 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	085b      	lsrs	r3, r3, #1
 80031e8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80031f8:	e002      	b.n	8003200 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	74fb      	strb	r3, [r7, #19]
        break;
 80031fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	2b0f      	cmp	r3, #15
 8003204:	d916      	bls.n	8003234 <UART_SetConfig+0x590>
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800320c:	d212      	bcs.n	8003234 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	b29b      	uxth	r3, r3
 8003212:	f023 030f 	bic.w	r3, r3, #15
 8003216:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	085b      	lsrs	r3, r3, #1
 800321c:	b29b      	uxth	r3, r3
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	b29a      	uxth	r2, r3
 8003224:	897b      	ldrh	r3, [r7, #10]
 8003226:	4313      	orrs	r3, r2
 8003228:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	897a      	ldrh	r2, [r7, #10]
 8003230:	60da      	str	r2, [r3, #12]
 8003232:	e070      	b.n	8003316 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	74fb      	strb	r3, [r7, #19]
 8003238:	e06d      	b.n	8003316 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 800323a:	7efb      	ldrb	r3, [r7, #27]
 800323c:	2b08      	cmp	r3, #8
 800323e:	d859      	bhi.n	80032f4 <UART_SetConfig+0x650>
 8003240:	a201      	add	r2, pc, #4	; (adr r2, 8003248 <UART_SetConfig+0x5a4>)
 8003242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003246:	bf00      	nop
 8003248:	0800326d 	.word	0x0800326d
 800324c:	08003289 	.word	0x08003289
 8003250:	080032a5 	.word	0x080032a5
 8003254:	080032f5 	.word	0x080032f5
 8003258:	080032c1 	.word	0x080032c1
 800325c:	080032f5 	.word	0x080032f5
 8003260:	080032f5 	.word	0x080032f5
 8003264:	080032f5 	.word	0x080032f5
 8003268:	080032dd 	.word	0x080032dd
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800326c:	f7fe fe1e 	bl	8001eac <HAL_RCC_GetPCLK1Freq>
 8003270:	4602      	mov	r2, r0
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	085b      	lsrs	r3, r3, #1
 8003278:	441a      	add	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003282:	b29b      	uxth	r3, r3
 8003284:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003286:	e038      	b.n	80032fa <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003288:	f7fe fe26 	bl	8001ed8 <HAL_RCC_GetPCLK2Freq>
 800328c:	4602      	mov	r2, r0
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	085b      	lsrs	r3, r3, #1
 8003294:	441a      	add	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	fbb2 f3f3 	udiv	r3, r2, r3
 800329e:	b29b      	uxth	r3, r3
 80032a0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80032a2:	e02a      	b.n	80032fa <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	085b      	lsrs	r3, r3, #1
 80032aa:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80032ae:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6852      	ldr	r2, [r2, #4]
 80032b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80032be:	e01c      	b.n	80032fa <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80032c0:	f7fe fd5e 	bl	8001d80 <HAL_RCC_GetSysClockFreq>
 80032c4:	4602      	mov	r2, r0
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	085b      	lsrs	r3, r3, #1
 80032cc:	441a      	add	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80032da:	e00e      	b.n	80032fa <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	085b      	lsrs	r3, r3, #1
 80032e2:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80032f2:	e002      	b.n	80032fa <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	74fb      	strb	r3, [r7, #19]
        break;
 80032f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	2b0f      	cmp	r3, #15
 80032fe:	d908      	bls.n	8003312 <UART_SetConfig+0x66e>
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003306:	d204      	bcs.n	8003312 <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	60da      	str	r2, [r3, #12]
 8003310:	e001      	b.n	8003316 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003322:	7cfb      	ldrb	r3, [r7, #19]
}
 8003324:	4618      	mov	r0, r3
 8003326:	3720      	adds	r7, #32
 8003328:	46bd      	mov	sp, r7
 800332a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800332e:	bf00      	nop
 8003330:	f4240000 	.word	0xf4240000

08003334 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00a      	beq.n	800335e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00a      	beq.n	8003380 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003384:	f003 0304 	and.w	r3, r3, #4
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00a      	beq.n	80033a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	f003 0308 	and.w	r3, r3, #8
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00a      	beq.n	80033c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c8:	f003 0310 	and.w	r3, r3, #16
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00a      	beq.n	80033e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ea:	f003 0320 	and.w	r3, r3, #32
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00a      	beq.n	8003408 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	430a      	orrs	r2, r1
 8003406:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003410:	2b00      	cmp	r3, #0
 8003412:	d01a      	beq.n	800344a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003432:	d10a      	bne.n	800344a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00a      	beq.n	800346c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	605a      	str	r2, [r3, #4]
  }
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af02      	add	r7, sp, #8
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003486:	f7fd f91b 	bl	80006c0 <HAL_GetTick>
 800348a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0308 	and.w	r3, r3, #8
 8003496:	2b08      	cmp	r3, #8
 8003498:	d10e      	bne.n	80034b8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800349a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800349e:	9300      	str	r3, [sp, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 f82a 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e020      	b.n	80034fa <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0304 	and.w	r3, r3, #4
 80034c2:	2b04      	cmp	r3, #4
 80034c4:	d10e      	bne.n	80034e4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 f814 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e00a      	b.n	80034fa <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2220      	movs	r2, #32
 80034e8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2220      	movs	r2, #32
 80034ee:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b084      	sub	sp, #16
 8003506:	af00      	add	r7, sp, #0
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	603b      	str	r3, [r7, #0]
 800350e:	4613      	mov	r3, r2
 8003510:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003512:	e02a      	b.n	800356a <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800351a:	d026      	beq.n	800356a <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800351c:	f7fd f8d0 	bl	80006c0 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	429a      	cmp	r2, r3
 800352a:	d302      	bcc.n	8003532 <UART_WaitOnFlagUntilTimeout+0x30>
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d11b      	bne.n	800356a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003540:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0201 	bic.w	r2, r2, #1
 8003550:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2220      	movs	r2, #32
 8003556:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2220      	movs	r2, #32
 800355c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e00f      	b.n	800358a <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	69da      	ldr	r2, [r3, #28]
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	4013      	ands	r3, r2
 8003574:	68ba      	ldr	r2, [r7, #8]
 8003576:	429a      	cmp	r2, r3
 8003578:	bf0c      	ite	eq
 800357a:	2301      	moveq	r3, #1
 800357c:	2300      	movne	r3, #0
 800357e:	b2db      	uxtb	r3, r3
 8003580:	461a      	mov	r2, r3
 8003582:	79fb      	ldrb	r3, [r7, #7]
 8003584:	429a      	cmp	r2, r3
 8003586:	d0c5      	beq.n	8003514 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
	...

08003594 <flash_jump_to_factory_firmware>:
typedef void (*pFunction)(void);

static uint32_t flash_ptr = FLAG_ADDRESS;

void flash_jump_to_factory_firmware(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
  /* Function pointer to the address of the user application. */
	uart_transmit_str((uint8_t*)"inside fuct.... \n\r");
 800359a:	4811      	ldr	r0, [pc, #68]	; (80035e0 <flash_jump_to_factory_firmware+0x4c>)
 800359c:	f000 f998 	bl	80038d0 <uart_transmit_str>
  fnc_ptr jump_to_app;
  jump_to_app = (fnc_ptr)(*(volatile uint32_t*) (FLASH_FFW_START_ADDRESS+4u));
 80035a0:	4b10      	ldr	r3, [pc, #64]	; (80035e4 <flash_jump_to_factory_firmware+0x50>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	607b      	str	r3, [r7, #4]
  HAL_RCC_DeInit();
 80035a6:	f7fd fe79 	bl	800129c <HAL_RCC_DeInit>
  HAL_DeInit();
 80035aa:	f7fd f809 	bl	80005c0 <HAL_DeInit>
  SysTick->CTRL = 0;
 80035ae:	4b0e      	ldr	r3, [pc, #56]	; (80035e8 <flash_jump_to_factory_firmware+0x54>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = 0;
 80035b4:	4b0c      	ldr	r3, [pc, #48]	; (80035e8 <flash_jump_to_factory_firmware+0x54>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;
 80035ba:	4b0b      	ldr	r3, [pc, #44]	; (80035e8 <flash_jump_to_factory_firmware+0x54>)
 80035bc:	2200      	movs	r2, #0
 80035be:	609a      	str	r2, [r3, #8]
  SCB->VTOR = FLASH_FFW_START_ADDRESS;
 80035c0:	4b0a      	ldr	r3, [pc, #40]	; (80035ec <flash_jump_to_factory_firmware+0x58>)
 80035c2:	4a0b      	ldr	r2, [pc, #44]	; (80035f0 <flash_jump_to_factory_firmware+0x5c>)
 80035c4:	609a      	str	r2, [r3, #8]

 // SCB->VTOR = FLASH_FFW_START_ADDRESS | 0x00; /* Vector Table Relocation in Internal FLASH */


  /* Change the main stack pointer. */
  __set_MSP(*(volatile uint32_t*)FLASH_FFW_START_ADDRESS);
 80035c6:	4b0a      	ldr	r3, [pc, #40]	; (80035f0 <flash_jump_to_factory_firmware+0x5c>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	f383 8808 	msr	MSP, r3
  jump_to_app();
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4798      	blx	r3
}
 80035d6:	bf00      	nop
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	0800513c 	.word	0x0800513c
 80035e4:	08036004 	.word	0x08036004
 80035e8:	e000e010 	.word	0xe000e010
 80035ec:	e000ed00 	.word	0xe000ed00
 80035f0:	08036000 	.word	0x08036000

080035f4 <flash_jump_to_main_firmware>:
void flash_jump_to_main_firmware(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
  /* Function pointer to the address of the user application. */
  fnc_ptr jump_to_app;
  jump_to_app = (fnc_ptr)(*(volatile uint32_t*) (FLASH_MFW_START_ADDRESS+4u));
 80035fa:	4b0f      	ldr	r3, [pc, #60]	; (8003638 <flash_jump_to_main_firmware+0x44>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	607b      	str	r3, [r7, #4]
  HAL_RCC_DeInit();
 8003600:	f7fd fe4c 	bl	800129c <HAL_RCC_DeInit>
  HAL_DeInit();
 8003604:	f7fc ffdc 	bl	80005c0 <HAL_DeInit>
  SysTick->CTRL = 0;
 8003608:	4b0c      	ldr	r3, [pc, #48]	; (800363c <flash_jump_to_main_firmware+0x48>)
 800360a:	2200      	movs	r2, #0
 800360c:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = 0;
 800360e:	4b0b      	ldr	r3, [pc, #44]	; (800363c <flash_jump_to_main_firmware+0x48>)
 8003610:	2200      	movs	r2, #0
 8003612:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;
 8003614:	4b09      	ldr	r3, [pc, #36]	; (800363c <flash_jump_to_main_firmware+0x48>)
 8003616:	2200      	movs	r2, #0
 8003618:	609a      	str	r2, [r3, #8]
  SCB->VTOR = FLASH_MFW_START_ADDRESS;
 800361a:	4b09      	ldr	r3, [pc, #36]	; (8003640 <flash_jump_to_main_firmware+0x4c>)
 800361c:	4a09      	ldr	r2, [pc, #36]	; (8003644 <flash_jump_to_main_firmware+0x50>)
 800361e:	609a      	str	r2, [r3, #8]

  //SCB->VTOR = FLASH_MFW_START_ADDRESS | 0x00; /* Vector Table Relocation in Internal FLASH */


  /* Change the main stack pointer. */
  __set_MSP(*(volatile uint32_t*)FLASH_MFW_START_ADDRESS);
 8003620:	4b08      	ldr	r3, [pc, #32]	; (8003644 <flash_jump_to_main_firmware+0x50>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	603b      	str	r3, [r7, #0]
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	f383 8808 	msr	MSP, r3
  jump_to_app();
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4798      	blx	r3
}
 8003630:	bf00      	nop
 8003632:	3708      	adds	r7, #8
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	08060004 	.word	0x08060004
 800363c:	e000e010 	.word	0xe000e010
 8003640:	e000ed00 	.word	0xe000ed00
 8003644:	08060000 	.word	0x08060000

08003648 <flash_jump_boot_loader_L2>:
void flash_jump_boot_loader_L2(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
  /* Function pointer to the address of the user application. */
	uart_transmit_str((uint8_t*)"inside fuct.... \n\r");
 800364e:	4811      	ldr	r0, [pc, #68]	; (8003694 <flash_jump_boot_loader_L2+0x4c>)
 8003650:	f000 f93e 	bl	80038d0 <uart_transmit_str>
  fnc_ptr jump_to_app;
  jump_to_app = (fnc_ptr)(*(volatile uint32_t*) (FLASH_BL2_START_ADDRESS+4u));
 8003654:	4b10      	ldr	r3, [pc, #64]	; (8003698 <flash_jump_boot_loader_L2+0x50>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	607b      	str	r3, [r7, #4]
  HAL_RCC_DeInit();
 800365a:	f7fd fe1f 	bl	800129c <HAL_RCC_DeInit>
  HAL_DeInit();
 800365e:	f7fc ffaf 	bl	80005c0 <HAL_DeInit>
  SysTick->CTRL = 0;
 8003662:	4b0e      	ldr	r3, [pc, #56]	; (800369c <flash_jump_boot_loader_L2+0x54>)
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = 0;
 8003668:	4b0c      	ldr	r3, [pc, #48]	; (800369c <flash_jump_boot_loader_L2+0x54>)
 800366a:	2200      	movs	r2, #0
 800366c:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;
 800366e:	4b0b      	ldr	r3, [pc, #44]	; (800369c <flash_jump_boot_loader_L2+0x54>)
 8003670:	2200      	movs	r2, #0
 8003672:	609a      	str	r2, [r3, #8]
  SCB->VTOR = FLASH_BL2_START_ADDRESS;
 8003674:	4b0a      	ldr	r3, [pc, #40]	; (80036a0 <flash_jump_boot_loader_L2+0x58>)
 8003676:	4a0b      	ldr	r2, [pc, #44]	; (80036a4 <flash_jump_boot_loader_L2+0x5c>)
 8003678:	609a      	str	r2, [r3, #8]

 // SCB->VTOR = FLASH_FFW_START_ADDRESS | 0x00; /* Vector Table Relocation in Internal FLASH */


  /* Change the main stack pointer. */
  __set_MSP(*(volatile uint32_t*)FLASH_BL2_START_ADDRESS);
 800367a:	4b0a      	ldr	r3, [pc, #40]	; (80036a4 <flash_jump_boot_loader_L2+0x5c>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	603b      	str	r3, [r7, #0]
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	f383 8808 	msr	MSP, r3
  jump_to_app();
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4798      	blx	r3
}
 800368a:	bf00      	nop
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	0800513c 	.word	0x0800513c
 8003698:	08010004 	.word	0x08010004
 800369c:	e000e010 	.word	0xe000e010
 80036a0:	e000ed00 	.word	0xe000ed00
 80036a4:	08010000 	.word	0x08010000

080036a8 <Bootloader_Init>:
void Bootloader_Init(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ae:	4b15      	ldr	r3, [pc, #84]	; (8003704 <Bootloader_Init+0x5c>)
 80036b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036b2:	4a14      	ldr	r2, [pc, #80]	; (8003704 <Bootloader_Init+0x5c>)
 80036b4:	f043 0301 	orr.w	r3, r3, #1
 80036b8:	6613      	str	r3, [r2, #96]	; 0x60
 80036ba:	4b12      	ldr	r3, [pc, #72]	; (8003704 <Bootloader_Init+0x5c>)
 80036bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	607b      	str	r3, [r7, #4]
 80036c4:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_FLASH_CLK_ENABLE();
 80036c6:	4b0f      	ldr	r3, [pc, #60]	; (8003704 <Bootloader_Init+0x5c>)
 80036c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ca:	4a0e      	ldr	r2, [pc, #56]	; (8003704 <Bootloader_Init+0x5c>)
 80036cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d0:	6493      	str	r3, [r2, #72]	; 0x48
 80036d2:	4b0c      	ldr	r3, [pc, #48]	; (8003704 <Bootloader_Init+0x5c>)
 80036d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036da:	603b      	str	r3, [r7, #0]
 80036dc:	683b      	ldr	r3, [r7, #0]

    /* Clear flash flags */
    HAL_FLASH_Unlock();
 80036de:	f7fd f96f 	bl	80009c0 <HAL_FLASH_Unlock>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80036e2:	4b09      	ldr	r3, [pc, #36]	; (8003708 <Bootloader_Init+0x60>)
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	4a08      	ldr	r2, [pc, #32]	; (8003708 <Bootloader_Init+0x60>)
 80036e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80036ec:	6193      	str	r3, [r2, #24]
 80036ee:	4b06      	ldr	r3, [pc, #24]	; (8003708 <Bootloader_Init+0x60>)
 80036f0:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 80036f4:	611a      	str	r2, [r3, #16]
    HAL_FLASH_Lock();
 80036f6:	f7fd f985 	bl	8000a04 <HAL_FLASH_Lock>
}
 80036fa:	bf00      	nop
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	40021000 	.word	0x40021000
 8003708:	40022000 	.word	0x40022000

0800370c <Flag_Erase_All>:

uint8_t Flag_Erase_All(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b088      	sub	sp, #32
 8003710:	af00      	add	r7, sp, #0
    uint32_t NbrOfPages = 0;
 8003712:	2300      	movs	r3, #0
 8003714:	61bb      	str	r3, [r7, #24]
    uint32_t PageError  = 0;
 8003716:	2300      	movs	r3, #0
 8003718:	617b      	str	r3, [r7, #20]
    FLASH_EraseInitTypeDef  pEraseInit;
    HAL_StatusTypeDef       status = HAL_OK;
 800371a:	2300      	movs	r3, #0
 800371c:	77fb      	strb	r3, [r7, #31]

    HAL_FLASH_Unlock();
 800371e:	f7fd f94f 	bl	80009c0 <HAL_FLASH_Unlock>

    /* Get the number of pages to erase */
    NbrOfPages = (FLASH_BASE + FLASH_SIZE - FLAG_ADDRESS) / FLASH_PAGE_SIZE;//stm32l496rg number of pages = 512
 8003722:	4b2a      	ldr	r3, [pc, #168]	; (80037cc <Flag_Erase_All+0xc0>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	b29b      	uxth	r3, r3
 8003728:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800372c:	4293      	cmp	r3, r2
 800372e:	d00a      	beq.n	8003746 <Flag_Erase_All+0x3a>
 8003730:	4b26      	ldr	r3, [pc, #152]	; (80037cc <Flag_Erase_All+0xc0>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	029a      	lsls	r2, r3, #10
 8003736:	4b26      	ldr	r3, [pc, #152]	; (80037d0 <Flag_Erase_All+0xc4>)
 8003738:	4013      	ands	r3, r2
 800373a:	f5a3 237f 	sub.w	r3, r3, #1044480	; 0xff000
 800373e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8003742:	0adb      	lsrs	r3, r3, #11
 8003744:	e000      	b.n	8003748 <Flag_Erase_All+0x3c>
 8003746:	2301      	movs	r3, #1
 8003748:	61bb      	str	r3, [r7, #24]
   // NbrOfPages= 511;

    if(NbrOfPages > FLASH_PAGE_NBPERBANK)
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003750:	d916      	bls.n	8003780 <Flag_Erase_All+0x74>
    {
        pEraseInit.Banks = FLASH_BANK_1;
 8003752:	2301      	movs	r3, #1
 8003754:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbPages = NbrOfPages % FLASH_PAGE_NBPERBANK;
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	b2db      	uxtb	r3, r3
 800375a:	613b      	str	r3, [r7, #16]
        pEraseInit.Page = FLASH_PAGE_NBPERBANK - pEraseInit.NbPages;
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8003762:	60fb      	str	r3, [r7, #12]
        pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8003764:	2300      	movs	r3, #0
 8003766:	607b      	str	r3, [r7, #4]
        status = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 8003768:	f107 0214 	add.w	r2, r7, #20
 800376c:	1d3b      	adds	r3, r7, #4
 800376e:	4611      	mov	r1, r2
 8003770:	4618      	mov	r0, r3
 8003772:	f7fd fa0f 	bl	8000b94 <HAL_FLASHEx_Erase>
 8003776:	4603      	mov	r3, r0
 8003778:	77fb      	strb	r3, [r7, #31]
        NbrOfPages = FLASH_PAGE_NBPERBANK;
 800377a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800377e:	61bb      	str	r3, [r7, #24]
    }

    if(status == HAL_OK)
 8003780:	7ffb      	ldrb	r3, [r7, #31]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d115      	bne.n	80037b2 <Flag_Erase_All+0xa6>
    {
        pEraseInit.Banks = FLASH_BANK_2;
 8003786:	2302      	movs	r3, #2
 8003788:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbPages = 4;
 800378a:	2304      	movs	r3, #4
 800378c:	613b      	str	r3, [r7, #16]
        pEraseInit.Page = FLASH_PAGE_NBPERBANK - pEraseInit.NbPages;
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8003794:	60fb      	str	r3, [r7, #12]
        pEraseInit.Page = 508;
 8003796:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
 800379a:	60fb      	str	r3, [r7, #12]
        pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 800379c:	2300      	movs	r3, #0
 800379e:	607b      	str	r3, [r7, #4]
        status = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 80037a0:	f107 0214 	add.w	r2, r7, #20
 80037a4:	1d3b      	adds	r3, r7, #4
 80037a6:	4611      	mov	r1, r2
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7fd f9f3 	bl	8000b94 <HAL_FLASHEx_Erase>
 80037ae:	4603      	mov	r3, r0
 80037b0:	77fb      	strb	r3, [r7, #31]
        //status = HAL_FLASHEx_Erase(&pEraseInit, PageError);
    }

    HAL_FLASH_Lock();
 80037b2:	f7fd f927 	bl	8000a04 <HAL_FLASH_Lock>

    return (status == HAL_OK) ? BL_OK : BL_ERASE_ERROR;
 80037b6:	7ffb      	ldrb	r3, [r7, #31]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <Flag_Erase_All+0xb4>
 80037bc:	2300      	movs	r3, #0
 80037be:	e000      	b.n	80037c2 <Flag_Erase_All+0xb6>
 80037c0:	2304      	movs	r3, #4
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3720      	adds	r7, #32
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	1fff75e0 	.word	0x1fff75e0
 80037d0:	03fffc00 	.word	0x03fffc00

080037d4 <Bootloader_FlashBegin>:

void Bootloader_FlashBegin(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
    /* Reset flash destination address */
	flash_ptr = FLAG_ADDRESS;
 80037d8:	4b03      	ldr	r3, [pc, #12]	; (80037e8 <Bootloader_FlashBegin+0x14>)
 80037da:	4a04      	ldr	r2, [pc, #16]	; (80037ec <Bootloader_FlashBegin+0x18>)
 80037dc:	601a      	str	r2, [r3, #0]

    /* Unlock flash */
    HAL_FLASH_Unlock();
 80037de:	f7fd f8ef 	bl	80009c0 <HAL_FLASH_Unlock>
}
 80037e2:	bf00      	nop
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	20000028 	.word	0x20000028
 80037ec:	080ff800 	.word	0x080ff800

080037f0 <Write_Flag>:
    }

    return BL_OK;
}
uint8_t Write_Flag(uint8_t FlagAddr, uint32_t data)
{
 80037f0:	b590      	push	{r4, r7, lr}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	4603      	mov	r3, r0
 80037f8:	6039      	str	r1, [r7, #0]
 80037fa:	71fb      	strb	r3, [r7, #7]
	uint32_t FlagAddr_temp = (FlagAddr*8)+FLAG_ADDRESS;
 80037fc:	79fb      	ldrb	r3, [r7, #7]
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	461a      	mov	r2, r3
 8003802:	4b1e      	ldr	r3, [pc, #120]	; (800387c <Write_Flag+0x8c>)
 8003804:	4413      	add	r3, r2
 8003806:	60fb      	str	r3, [r7, #12]

	if( !(FlagAddr_temp <= (FLASH_BASE + FLASH_SIZE - 8)) || (FlagAddr_temp < FLAG_ADDRESS) )
 8003808:	4b1d      	ldr	r3, [pc, #116]	; (8003880 <Write_Flag+0x90>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	b29b      	uxth	r3, r3
 800380e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003812:	4293      	cmp	r3, r2
 8003814:	d008      	beq.n	8003828 <Write_Flag+0x38>
 8003816:	4b1a      	ldr	r3, [pc, #104]	; (8003880 <Write_Flag+0x90>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	029a      	lsls	r2, r3, #10
 800381c:	4b19      	ldr	r3, [pc, #100]	; (8003884 <Write_Flag+0x94>)
 800381e:	4013      	ands	r3, r2
 8003820:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8003824:	3b08      	subs	r3, #8
 8003826:	e000      	b.n	800382a <Write_Flag+0x3a>
 8003828:	4b17      	ldr	r3, [pc, #92]	; (8003888 <Write_Flag+0x98>)
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	4293      	cmp	r3, r2
 800382e:	d303      	bcc.n	8003838 <Write_Flag+0x48>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	4a16      	ldr	r2, [pc, #88]	; (800388c <Write_Flag+0x9c>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d803      	bhi.n	8003840 <Write_Flag+0x50>
    {
        HAL_FLASH_Lock();
 8003838:	f7fd f8e4 	bl	8000a04 <HAL_FLASH_Lock>
        return BL_WRITE_ERROR;
 800383c:	2305      	movs	r3, #5
 800383e:	e019      	b.n	8003874 <Write_Flag+0x84>
    }

    if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, FlagAddr_temp, data) == HAL_OK)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	f04f 0400 	mov.w	r4, #0
 8003846:	461a      	mov	r2, r3
 8003848:	4623      	mov	r3, r4
 800384a:	68f9      	ldr	r1, [r7, #12]
 800384c:	2000      	movs	r0, #0
 800384e:	f7fd f84b 	bl	80008e8 <HAL_FLASH_Program>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d108      	bne.n	800386a <Write_Flag+0x7a>
    {
        /* Check the written value */
        if(*(uint32_t*)FlagAddr_temp != data)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	429a      	cmp	r2, r3
 8003860:	d007      	beq.n	8003872 <Write_Flag+0x82>
        {
            /* Flash content doesn't match source content */
            HAL_FLASH_Lock();
 8003862:	f7fd f8cf 	bl	8000a04 <HAL_FLASH_Lock>
            return BL_WRITE_ERROR;
 8003866:	2305      	movs	r3, #5
 8003868:	e004      	b.n	8003874 <Write_Flag+0x84>
        //flash_ptr += 8;
    }
    else
    {
        /* Error occurred while writing data into Flash */
        HAL_FLASH_Lock();
 800386a:	f7fd f8cb 	bl	8000a04 <HAL_FLASH_Lock>
        return BL_WRITE_ERROR;
 800386e:	2305      	movs	r3, #5
 8003870:	e000      	b.n	8003874 <Write_Flag+0x84>
    }

    return BL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3714      	adds	r7, #20
 8003878:	46bd      	mov	sp, r7
 800387a:	bd90      	pop	{r4, r7, pc}
 800387c:	080ff800 	.word	0x080ff800
 8003880:	1fff75e0 	.word	0x1fff75e0
 8003884:	03fffc00 	.word	0x03fffc00
 8003888:	080ffff8 	.word	0x080ffff8
 800388c:	080ff7ff 	.word	0x080ff7ff

08003890 <Bootloader_FlashEnd>:
void Bootloader_FlashEnd(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
    /* Lock flash */
    HAL_FLASH_Lock();
 8003894:	f7fd f8b6 	bl	8000a04 <HAL_FLASH_Lock>
}
 8003898:	bf00      	nop
 800389a:	bd80      	pop	{r7, pc}

0800389c <Read_Flag>:
uint32_t Read_Flag(uint8_t FlagAddr)
{
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	4603      	mov	r3, r0
 80038a4:	71fb      	strb	r3, [r7, #7]
	uint32_t FlashValue = 0;
 80038a6:	2300      	movs	r3, #0
 80038a8:	60fb      	str	r3, [r7, #12]

	uint32_t FlagAddr_temp = (FlagAddr*8)+FLAG_ADDRESS;
 80038aa:	79fb      	ldrb	r3, [r7, #7]
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	461a      	mov	r2, r3
 80038b0:	4b06      	ldr	r3, [pc, #24]	; (80038cc <Read_Flag+0x30>)
 80038b2:	4413      	add	r3, r2
 80038b4:	60bb      	str	r3, [r7, #8]
	FlashValue = *(uint32_t*)(FlagAddr_temp);
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	60fb      	str	r3, [r7, #12]
	return FlashValue;
 80038bc:	68fb      	ldr	r3, [r7, #12]

}
 80038be:	4618      	mov	r0, r3
 80038c0:	3714      	adds	r7, #20
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	080ff800 	.word	0x080ff800

080038d0 <uart_transmit_str>:
 * @brief   Transmits a string to UART.
 * @param   *data: Array of the data.
 * @return  status: Report about the success of the transmission.
 */
uart_status uart_transmit_str(uint8_t *data)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uart_status status = UART_ERROR;
 80038d8:	23ff      	movs	r3, #255	; 0xff
 80038da:	73fb      	strb	r3, [r7, #15]
  uint16_t length = 0u;
 80038dc:	2300      	movs	r3, #0
 80038de:	81bb      	strh	r3, [r7, #12]

  /* Calculate the length. */
  while ('\0' != data[length])
 80038e0:	e002      	b.n	80038e8 <uart_transmit_str+0x18>
  {
    length++;
 80038e2:	89bb      	ldrh	r3, [r7, #12]
 80038e4:	3301      	adds	r3, #1
 80038e6:	81bb      	strh	r3, [r7, #12]
  while ('\0' != data[length])
 80038e8:	89bb      	ldrh	r3, [r7, #12]
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	4413      	add	r3, r2
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1f6      	bne.n	80038e2 <uart_transmit_str+0x12>
  }

  if (HAL_OK == HAL_UART_Transmit(&DEBUG_UART, data, length, UART_TIMEOUT))
 80038f4:	89ba      	ldrh	r2, [r7, #12]
 80038f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038fa:	6879      	ldr	r1, [r7, #4]
 80038fc:	4806      	ldr	r0, [pc, #24]	; (8003918 <uart_transmit_str+0x48>)
 80038fe:	f7ff f871 	bl	80029e4 <HAL_UART_Transmit>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d101      	bne.n	800390c <uart_transmit_str+0x3c>
  {
    status = UART_OK;
 8003908:	2300      	movs	r3, #0
 800390a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800390c:	7bfb      	ldrb	r3, [r7, #15]
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	200000c4 	.word	0x200000c4

0800391c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

int boot_value = 3 ;
 8003922:	2303      	movs	r3, #3
 8003924:	60bb      	str	r3, [r7, #8]
uint8_t  FlashValue = 0;
 8003926:	2300      	movs	r3, #0
 8003928:	71fb      	strb	r3, [r7, #7]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800392a:	f7fc fe31 	bl	8000590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800392e:	f000 fd2a 	bl	8004386 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003932:	f000 fdef 	bl	8004514 <MX_GPIO_Init>
  MX_UART5_Init();
 8003936:	f000 fd8d 	bl	8004454 <MX_UART5_Init>
  MX_USART3_UART_Init();
 800393a:	f000 fdbb 	bl	80044b4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  //--------------------------------------led toggle----------------------------------------//

  led_blink(); /* Blink On board RGB LED */
 800393e:	f000 fc91 	bl	8004264 <led_blink>

  //----------------------------------------------------------------------------------------//
  //---------------------------------------Debug UART---------------------------------------//
  uart_transmit_str((uint8_t*)"\n\r================================\n\r");
 8003942:	4852      	ldr	r0, [pc, #328]	; (8003a8c <main+0x170>)
 8003944:	f7ff ffc4 	bl	80038d0 <uart_transmit_str>
  uart_transmit_str((uint8_t*)"IU Bootloader V0.01 \n\r");
 8003948:	4851      	ldr	r0, [pc, #324]	; (8003a90 <main+0x174>)
 800394a:	f7ff ffc1 	bl	80038d0 <uart_transmit_str>
  uart_transmit_str((uint8_t*)"================================\n\r\n\r");
 800394e:	4851      	ldr	r0, [pc, #324]	; (8003a94 <main+0x178>)
 8003950:	f7ff ffbe 	bl	80038d0 <uart_transmit_str>
//   uint8_t FlashValue_2 = *(uint8_t*)(FLAG_ADDRESS+16);
//  uint32_t FlashValue_1 = Read_Flag(MAIN_FW);
//  uint32_t FlashValue_2 = Read_Flag(FACTORY_FW);
//  uint32_t FlashValue_3 = Read_Flag(MFW_VER);
  //---------------------------------------GPIO INPUT---------------------------------------//
  boot_value =  boot_pins_read(); /* read PC0 and PC1 GPIO input*/
 8003954:	f000 f952 	bl	8003bfc <boot_pins_read>
 8003958:	60b8      	str	r0, [r7, #8]
   * 0 -> Factory Firmware
   * 1 -> UART Debug mode
   * 2 -> Roll Back Main Firmware
   * 3 -> Main Firmware (Default)
   */
  boot_value = 1; // pass control to UART
 800395a:	2301      	movs	r3, #1
 800395c:	60bb      	str	r3, [r7, #8]

//---------------------------------End of Test code-----------------------------------------------//


  switch(boot_value)
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d007      	beq.n	8003974 <main+0x58>
 8003964:	2b02      	cmp	r3, #2
 8003966:	d009      	beq.n	800397c <main+0x60>
 8003968:	2b00      	cmp	r3, #0
 800396a:	d10b      	bne.n	8003984 <main+0x68>
  {
  case 0: Boot_FFW_Flag = 1 ;//set Factory Image;
 800396c:	4b4a      	ldr	r3, [pc, #296]	; (8003a98 <main+0x17c>)
 800396e:	2201      	movs	r2, #1
 8003970:	701a      	strb	r2, [r3, #0]
	  break;
 8003972:	e00a      	b.n	800398a <main+0x6e>
  case 1: Debug_UART_Flag = 1; //uart_debug(); //pass control to UART
 8003974:	4b49      	ldr	r3, [pc, #292]	; (8003a9c <main+0x180>)
 8003976:	2201      	movs	r2, #1
 8003978:	701a      	strb	r2, [r3, #0]
	  break;
 800397a:	e006      	b.n	800398a <main+0x6e>
  case 2: Boot_RB_MFW_Flag = 1; //roll back main firmware
 800397c:	4b48      	ldr	r3, [pc, #288]	; (8003aa0 <main+0x184>)
 800397e:	2201      	movs	r2, #1
 8003980:	701a      	strb	r2, [r3, #0]
	  break;
 8003982:	e002      	b.n	800398a <main+0x6e>
  default :  Boot_MFW_Flag =0 ;//normal boot / boot main firmware (default)
 8003984:	4b47      	ldr	r3, [pc, #284]	; (8003aa4 <main+0x188>)
 8003986:	2200      	movs	r2, #0
 8003988:	701a      	strb	r2, [r3, #0]
  }


  if(Debug_UART_Flag == 1)
 800398a:	4b44      	ldr	r3, [pc, #272]	; (8003a9c <main+0x180>)
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d10e      	bne.n	80039b0 <main+0x94>
	  boot_uart_read(&rx_buffer_temp);
	  HAL_Delay(1000);*/
	  /*------------------------------------ Test Code End -----------------------------------------*/


	  uart_transmit_str((uint8_t*)"\n\r----------UART DEBUG MODE----------- \n\r");
 8003992:	4845      	ldr	r0, [pc, #276]	; (8003aa8 <main+0x18c>)
 8003994:	f7ff ff9c 	bl	80038d0 <uart_transmit_str>
	 // update_flag(uint8_t flag_addr, uint32_t flag_data)

	  int uart_debug_exit = 0;
 8003998:	2300      	movs	r3, #0
 800399a:	60fb      	str	r3, [r7, #12]

	  while(!uart_debug_exit)
 800399c:	e002      	b.n	80039a4 <main+0x88>
	  {
		  uart_debug_exit =  uart_debug();
 800399e:	f000 f9ff 	bl	8003da0 <uart_debug>
 80039a2:	60f8      	str	r0, [r7, #12]
	  while(!uart_debug_exit)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0f9      	beq.n	800399e <main+0x82>

	  }
	  uart_transmit_str((uint8_t*)"\n\r exiting from uart debug mode \n\r");
 80039aa:	4840      	ldr	r0, [pc, #256]	; (8003aac <main+0x190>)
 80039ac:	f7ff ff90 	bl	80038d0 <uart_transmit_str>

  }

  if(Boot_RB_MFW_Flag == 1)
 80039b0:	4b3b      	ldr	r3, [pc, #236]	; (8003aa0 <main+0x184>)
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d10d      	bne.n	80039d4 <main+0xb8>
  {

	  update_flag(FW_ROLLBACK, 1);
 80039b8:	2101      	movs	r1, #1
 80039ba:	2005      	movs	r0, #5
 80039bc:	f000 f880 	bl	8003ac0 <update_flag>
	  uart_transmit_str((uint8_t*)"Jumping to ROLLBACK MFW.... \n\r");
 80039c0:	483b      	ldr	r0, [pc, #236]	; (8003ab0 <main+0x194>)
 80039c2:	f7ff ff85 	bl	80038d0 <uart_transmit_str>
	  HAL_Delay(1000);
 80039c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039ca:	f7fc fe85 	bl	80006d8 <HAL_Delay>
	  flash_jump_boot_loader_L2();
 80039ce:	f7ff fe3b 	bl	8003648 <flash_jump_boot_loader_L2>
 80039d2:	e01a      	b.n	8003a0a <main+0xee>

  }else if(Boot_FFW_Flag == 1)
 80039d4:	4b30      	ldr	r3, [pc, #192]	; (8003a98 <main+0x17c>)
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d109      	bne.n	80039f0 <main+0xd4>
  {
	  uart_transmit_str((uint8_t*)"Jumping to FFW.... \n\r");
 80039dc:	4835      	ldr	r0, [pc, #212]	; (8003ab4 <main+0x198>)
 80039de:	f7ff ff77 	bl	80038d0 <uart_transmit_str>
	  HAL_Delay(1000);
 80039e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039e6:	f7fc fe77 	bl	80006d8 <HAL_Delay>
	  flash_jump_to_factory_firmware();
 80039ea:	f7ff fdd3 	bl	8003594 <flash_jump_to_factory_firmware>
 80039ee:	e00c      	b.n	8003a0a <main+0xee>

  }else if(Boot_MFW_Flag == 1)
 80039f0:	4b2c      	ldr	r3, [pc, #176]	; (8003aa4 <main+0x188>)
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d108      	bne.n	8003a0a <main+0xee>
  {
	  uart_transmit_str((uint8_t*)"Jumping to MFW.... \n\r");
 80039f8:	482f      	ldr	r0, [pc, #188]	; (8003ab8 <main+0x19c>)
 80039fa:	f7ff ff69 	bl	80038d0 <uart_transmit_str>
	  HAL_Delay(1000);
 80039fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a02:	f7fc fe69 	bl	80006d8 <HAL_Delay>
	  flash_jump_to_main_firmware();
 8003a06:	f7ff fdf5 	bl	80035f4 <flash_jump_to_main_firmware>
  }
/*--------------------------------------------------------------------------------------------*/
  read_all_flags();
 8003a0a:	f000 f87d 	bl	8003b08 <read_all_flags>
  if(all_flags[MFW_FLASH_FLAG]==0)
 8003a0e:	4b2b      	ldr	r3, [pc, #172]	; (8003abc <main+0x1a0>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d102      	bne.n	8003a1c <main+0x100>
  {
	  flash_jump_to_main_firmware();
 8003a16:	f7ff fded 	bl	80035f4 <flash_jump_to_main_firmware>
 8003a1a:	e031      	b.n	8003a80 <main+0x164>

  }else if(all_flags[MFW_FLASH_FLAG]==1)
 8003a1c:	4b27      	ldr	r3, [pc, #156]	; (8003abc <main+0x1a0>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d102      	bne.n	8003a2a <main+0x10e>
  {

	  flash_jump_boot_loader_L2();
 8003a24:	f7ff fe10 	bl	8003648 <flash_jump_boot_loader_L2>
 8003a28:	e02a      	b.n	8003a80 <main+0x164>
  }else if((all_flags[MFW_FLASH_FLAG]==2) && (all_flags[RETRY_FLAG]<3))
 8003a2a:	4b24      	ldr	r3, [pc, #144]	; (8003abc <main+0x1a0>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d112      	bne.n	8003a58 <main+0x13c>
 8003a32:	4b22      	ldr	r3, [pc, #136]	; (8003abc <main+0x1a0>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d80e      	bhi.n	8003a58 <main+0x13c>
  {

	  read_all_flags();
 8003a3a:	f000 f865 	bl	8003b08 <read_all_flags>
	  all_flags[MFW_FLASH_FLAG] = 1;
 8003a3e:	4b1f      	ldr	r3, [pc, #124]	; (8003abc <main+0x1a0>)
 8003a40:	2201      	movs	r2, #1
 8003a42:	601a      	str	r2, [r3, #0]
	  all_flags[RETRY_FLAG] =  all_flags[RETRY_FLAG]+1;
 8003a44:	4b1d      	ldr	r3, [pc, #116]	; (8003abc <main+0x1a0>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	4a1c      	ldr	r2, [pc, #112]	; (8003abc <main+0x1a0>)
 8003a4c:	6053      	str	r3, [r2, #4]
	  update_all_flag();
 8003a4e:	f000 f851 	bl	8003af4 <update_all_flag>
	  flash_jump_boot_loader_L2();
 8003a52:	f7ff fdf9 	bl	8003648 <flash_jump_boot_loader_L2>
 8003a56:	e013      	b.n	8003a80 <main+0x164>
  }else if(all_flags[MFW_FLASH_FLAG]==3)
 8003a58:	4b18      	ldr	r3, [pc, #96]	; (8003abc <main+0x1a0>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2b03      	cmp	r3, #3
 8003a5e:	d106      	bne.n	8003a6e <main+0x152>
  {
	  update_flag(RETRY_FLAG, 0);
 8003a60:	2100      	movs	r1, #0
 8003a62:	2001      	movs	r0, #1
 8003a64:	f000 f82c 	bl	8003ac0 <update_flag>
	  flash_jump_to_main_firmware();
 8003a68:	f7ff fdc4 	bl	80035f4 <flash_jump_to_main_firmware>
 8003a6c:	e008      	b.n	8003a80 <main+0x164>
  }else if(all_flags[MFW_FLASH_FLAG]==4)
 8003a6e:	4b13      	ldr	r3, [pc, #76]	; (8003abc <main+0x1a0>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2b04      	cmp	r3, #4
 8003a74:	d102      	bne.n	8003a7c <main+0x160>
  {
	  flash_jump_boot_loader_L2();
 8003a76:	f7ff fde7 	bl	8003648 <flash_jump_boot_loader_L2>
 8003a7a:	e001      	b.n	8003a80 <main+0x164>
  }else
  {
	  flash_jump_to_main_firmware();
 8003a7c:	f7ff fdba 	bl	80035f4 <flash_jump_to_main_firmware>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(1000);
 8003a80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a84:	f7fc fe28 	bl	80006d8 <HAL_Delay>
 8003a88:	e7fa      	b.n	8003a80 <main+0x164>
 8003a8a:	bf00      	nop
 8003a8c:	08005150 	.word	0x08005150
 8003a90:	08005178 	.word	0x08005178
 8003a94:	08005190 	.word	0x08005190
 8003a98:	200001c5 	.word	0x200001c5
 8003a9c:	200000c1 	.word	0x200000c1
 8003aa0:	200001c4 	.word	0x200001c4
 8003aa4:	200000c0 	.word	0x200000c0
 8003aa8:	080051b8 	.word	0x080051b8
 8003aac:	080051e4 	.word	0x080051e4
 8003ab0:	08005208 	.word	0x08005208
 8003ab4:	08005228 	.word	0x08005228
 8003ab8:	08005240 	.word	0x08005240
 8003abc:	20000144 	.word	0x20000144

08003ac0 <update_flag>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void update_flag(uint8_t flag_addr, uint32_t flag_data)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	6039      	str	r1, [r7, #0]
 8003aca:	71fb      	strb	r3, [r7, #7]
	  read_all_flags();
 8003acc:	f000 f81c 	bl	8003b08 <read_all_flags>
	  all_flags[flag_addr] = flag_data;
 8003ad0:	79fb      	ldrb	r3, [r7, #7]
 8003ad2:	4907      	ldr	r1, [pc, #28]	; (8003af0 <update_flag+0x30>)
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  write_flag_init();
 8003ada:	f000 f871 	bl	8003bc0 <write_flag_init>
	  write_all_flags();
 8003ade:	f000 f82f 	bl	8003b40 <write_all_flags>
	  Bootloader_FlashEnd();
 8003ae2:	f7ff fed5 	bl	8003890 <Bootloader_FlashEnd>

}
 8003ae6:	bf00      	nop
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	20000144 	.word	0x20000144

08003af4 <update_all_flag>:
void update_all_flag()
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
	//all_flags_temp[32];

		write_flag_init();
 8003af8:	f000 f862 	bl	8003bc0 <write_flag_init>
		write_all_flags();
 8003afc:	f000 f820 	bl	8003b40 <write_all_flags>
		Bootloader_FlashEnd();
 8003b00:	f7ff fec6 	bl	8003890 <Bootloader_FlashEnd>
}
 8003b04:	bf00      	nop
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <read_all_flags>:
void read_all_flags()
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
//	   ESP_FW_VER_TEMP 		= Read_Flag(ESP_FW_VER);
//	   ESP_FW_UPGRAD_TEMP 	= Read_Flag(ESP_FW_UPGRAD);
//	   ESP_RUNNING_VER_TEMP = Read_Flag(ESP_RUNNING_VER);
//	   ESP_ROLLBACK_TEMP 	= Read_Flag(ESP_ROLLBACK);

	for(int i =0 ; i<32 ; i++)
 8003b0e:	2300      	movs	r3, #0
 8003b10:	607b      	str	r3, [r7, #4]
 8003b12:	e00c      	b.n	8003b2e <read_all_flags+0x26>
	{

		all_flags[i] = Read_Flag(i);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7ff febf 	bl	800389c <Read_Flag>
 8003b1e:	4601      	mov	r1, r0
 8003b20:	4a06      	ldr	r2, [pc, #24]	; (8003b3c <read_all_flags+0x34>)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i =0 ; i<32 ; i++)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	607b      	str	r3, [r7, #4]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2b1f      	cmp	r3, #31
 8003b32:	ddef      	ble.n	8003b14 <read_all_flags+0xc>
	}


}
 8003b34:	bf00      	nop
 8003b36:	3708      	adds	r7, #8
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	20000144 	.word	0x20000144

08003b40 <write_all_flags>:
void write_all_flags()
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b0a2      	sub	sp, #136	; 0x88
 8003b44:	af00      	add	r7, sp, #0
//		Write_Flag(ESP_ROLLBACK,ESP_ROLLBACK_TEMP);


	uint32_t all_flag_temp[32];

	Buffercpy(all_flags ,all_flag_temp, 32 );
 8003b46:	1d3b      	adds	r3, r7, #4
 8003b48:	2220      	movs	r2, #32
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	4819      	ldr	r0, [pc, #100]	; (8003bb4 <write_all_flags+0x74>)
 8003b4e:	f000 fbf9 	bl	8004344 <Buffercpy>

	for(int i =0 ; i<32 ; i++)
 8003b52:	2300      	movs	r3, #0
 8003b54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b58:	e012      	b.n	8003b80 <write_all_flags+0x40>
	{
		Write_Flag(i,all_flags[i]);
 8003b5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b5e:	b2d8      	uxtb	r0, r3
 8003b60:	4a14      	ldr	r2, [pc, #80]	; (8003bb4 <write_all_flags+0x74>)
 8003b62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	f7ff fe40 	bl	80037f0 <Write_Flag>
		HAL_Delay(1);
 8003b70:	2001      	movs	r0, #1
 8003b72:	f7fc fdb1 	bl	80006d8 <HAL_Delay>
	for(int i =0 ; i<32 ; i++)
 8003b76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b84:	2b1f      	cmp	r3, #31
 8003b86:	dde8      	ble.n	8003b5a <write_all_flags+0x1a>
	}
	read_all_flags();
 8003b88:	f7ff ffbe 	bl	8003b08 <read_all_flags>

	if(Buffercmp32(all_flag_temp , all_flags, 32))
 8003b8c:	1d3b      	adds	r3, r7, #4
 8003b8e:	2220      	movs	r2, #32
 8003b90:	4908      	ldr	r1, [pc, #32]	; (8003bb4 <write_all_flags+0x74>)
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 fbb4 	bl	8004300 <Buffercmp32>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d003      	beq.n	8003ba6 <write_all_flags+0x66>
	{
		uart_transmit_str((uint8_t*)"Success.... \n\r");
 8003b9e:	4806      	ldr	r0, [pc, #24]	; (8003bb8 <write_all_flags+0x78>)
 8003ba0:	f7ff fe96 	bl	80038d0 <uart_transmit_str>
	{
		uart_transmit_str((uint8_t*)"Failed.... \n\r");

	}

}
 8003ba4:	e002      	b.n	8003bac <write_all_flags+0x6c>
		uart_transmit_str((uint8_t*)"Failed.... \n\r");
 8003ba6:	4805      	ldr	r0, [pc, #20]	; (8003bbc <write_all_flags+0x7c>)
 8003ba8:	f7ff fe92 	bl	80038d0 <uart_transmit_str>
}
 8003bac:	bf00      	nop
 8003bae:	3788      	adds	r7, #136	; 0x88
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	20000144 	.word	0x20000144
 8003bb8:	08005258 	.word	0x08005258
 8003bbc:	08005268 	.word	0x08005268

08003bc0 <write_flag_init>:
void write_flag_init()
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
	Bootloader_Init(); /* to clear system flags  */
 8003bc6:	f7ff fd6f 	bl	80036a8 <Bootloader_Init>
	int return_val = Flag_Erase_All();
 8003bca:	f7ff fd9f 	bl	800370c <Flag_Erase_All>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	607b      	str	r3, [r7, #4]
	if(return_val)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <write_flag_init+0x20>
		uart_transmit_str((uint8_t*)"Flash Erase Failed.... \n\r");
 8003bd8:	4806      	ldr	r0, [pc, #24]	; (8003bf4 <write_flag_init+0x34>)
 8003bda:	f7ff fe79 	bl	80038d0 <uart_transmit_str>
 8003bde:	e002      	b.n	8003be6 <write_flag_init+0x26>
	else
		uart_transmit_str((uint8_t*)"Flash Erase Successful.... \n\r");
 8003be0:	4805      	ldr	r0, [pc, #20]	; (8003bf8 <write_flag_init+0x38>)
 8003be2:	f7ff fe75 	bl	80038d0 <uart_transmit_str>

	Bootloader_FlashBegin();
 8003be6:	f7ff fdf5 	bl	80037d4 <Bootloader_FlashBegin>
}
 8003bea:	bf00      	nop
 8003bec:	3708      	adds	r7, #8
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	08005278 	.word	0x08005278
 8003bf8:	08005294 	.word	0x08005294

08003bfc <boot_pins_read>:
int boot_pins_read()
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
int boot_0 = 1;
 8003c02:	2301      	movs	r3, #1
 8003c04:	617b      	str	r3, [r7, #20]
int boot_1 = 1;
 8003c06:	2301      	movs	r3, #1
 8003c08:	613b      	str	r3, [r7, #16]
int boot_value = 3;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	60fb      	str	r3, [r7, #12]

_Bool boot0_1 = HAL_GPIO_ReadPin(Boot_button_port, Boot_button_0);
 8003c0e:	2101      	movs	r1, #1
 8003c10:	4862      	ldr	r0, [pc, #392]	; (8003d9c <boot_pins_read+0x1a0>)
 8003c12:	f7fd fa95 	bl	8001140 <HAL_GPIO_ReadPin>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	bf14      	ite	ne
 8003c1c:	2301      	movne	r3, #1
 8003c1e:	2300      	moveq	r3, #0
 8003c20:	72fb      	strb	r3, [r7, #11]
_Bool boot1_1 = HAL_GPIO_ReadPin(Boot_button_port, Boot_button_1);
 8003c22:	2102      	movs	r1, #2
 8003c24:	485d      	ldr	r0, [pc, #372]	; (8003d9c <boot_pins_read+0x1a0>)
 8003c26:	f7fd fa8b 	bl	8001140 <HAL_GPIO_ReadPin>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	bf14      	ite	ne
 8003c30:	2301      	movne	r3, #1
 8003c32:	2300      	moveq	r3, #0
 8003c34:	72bb      	strb	r3, [r7, #10]
	HAL_Delay(1);
 8003c36:	2001      	movs	r0, #1
 8003c38:	f7fc fd4e 	bl	80006d8 <HAL_Delay>
_Bool boot0_2 = HAL_GPIO_ReadPin(Boot_button_port, Boot_button_0);
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	4857      	ldr	r0, [pc, #348]	; (8003d9c <boot_pins_read+0x1a0>)
 8003c40:	f7fd fa7e 	bl	8001140 <HAL_GPIO_ReadPin>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	bf14      	ite	ne
 8003c4a:	2301      	movne	r3, #1
 8003c4c:	2300      	moveq	r3, #0
 8003c4e:	727b      	strb	r3, [r7, #9]
_Bool boot1_2 = HAL_GPIO_ReadPin(Boot_button_port, Boot_button_1);
 8003c50:	2102      	movs	r1, #2
 8003c52:	4852      	ldr	r0, [pc, #328]	; (8003d9c <boot_pins_read+0x1a0>)
 8003c54:	f7fd fa74 	bl	8001140 <HAL_GPIO_ReadPin>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	bf14      	ite	ne
 8003c5e:	2301      	movne	r3, #1
 8003c60:	2300      	moveq	r3, #0
 8003c62:	723b      	strb	r3, [r7, #8]
	HAL_Delay(1);
 8003c64:	2001      	movs	r0, #1
 8003c66:	f7fc fd37 	bl	80006d8 <HAL_Delay>
_Bool boot0_3 = HAL_GPIO_ReadPin(Boot_button_port, Boot_button_0);
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	484b      	ldr	r0, [pc, #300]	; (8003d9c <boot_pins_read+0x1a0>)
 8003c6e:	f7fd fa67 	bl	8001140 <HAL_GPIO_ReadPin>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	bf14      	ite	ne
 8003c78:	2301      	movne	r3, #1
 8003c7a:	2300      	moveq	r3, #0
 8003c7c:	71fb      	strb	r3, [r7, #7]
_Bool boot1_3 = HAL_GPIO_ReadPin(Boot_button_port, Boot_button_1);
 8003c7e:	2102      	movs	r1, #2
 8003c80:	4846      	ldr	r0, [pc, #280]	; (8003d9c <boot_pins_read+0x1a0>)
 8003c82:	f7fd fa5d 	bl	8001140 <HAL_GPIO_ReadPin>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	bf14      	ite	ne
 8003c8c:	2301      	movne	r3, #1
 8003c8e:	2300      	moveq	r3, #0
 8003c90:	71bb      	strb	r3, [r7, #6]
	HAL_Delay(1);
 8003c92:	2001      	movs	r0, #1
 8003c94:	f7fc fd20 	bl	80006d8 <HAL_Delay>
_Bool boot0_4 = HAL_GPIO_ReadPin(Boot_button_port, Boot_button_0);
 8003c98:	2101      	movs	r1, #1
 8003c9a:	4840      	ldr	r0, [pc, #256]	; (8003d9c <boot_pins_read+0x1a0>)
 8003c9c:	f7fd fa50 	bl	8001140 <HAL_GPIO_ReadPin>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	bf14      	ite	ne
 8003ca6:	2301      	movne	r3, #1
 8003ca8:	2300      	moveq	r3, #0
 8003caa:	717b      	strb	r3, [r7, #5]
_Bool boot1_4 = HAL_GPIO_ReadPin(Boot_button_port, Boot_button_1);
 8003cac:	2102      	movs	r1, #2
 8003cae:	483b      	ldr	r0, [pc, #236]	; (8003d9c <boot_pins_read+0x1a0>)
 8003cb0:	f7fd fa46 	bl	8001140 <HAL_GPIO_ReadPin>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	bf14      	ite	ne
 8003cba:	2301      	movne	r3, #1
 8003cbc:	2300      	moveq	r3, #0
 8003cbe:	713b      	strb	r3, [r7, #4]
	HAL_Delay(1);
 8003cc0:	2001      	movs	r0, #1
 8003cc2:	f7fc fd09 	bl	80006d8 <HAL_Delay>


if(boot0_1 && boot0_2 && boot0_3 && boot0_4)
 8003cc6:	7afb      	ldrb	r3, [r7, #11]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00b      	beq.n	8003ce4 <boot_pins_read+0xe8>
 8003ccc:	7a7b      	ldrb	r3, [r7, #9]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d008      	beq.n	8003ce4 <boot_pins_read+0xe8>
 8003cd2:	79fb      	ldrb	r3, [r7, #7]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d005      	beq.n	8003ce4 <boot_pins_read+0xe8>
 8003cd8:	797b      	ldrb	r3, [r7, #5]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d002      	beq.n	8003ce4 <boot_pins_read+0xe8>
	{
	boot_0 = 1;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	617b      	str	r3, [r7, #20]
 8003ce2:	e01c      	b.n	8003d1e <boot_pins_read+0x122>
	}else if (!boot0_1 && !boot0_2 && !boot0_3 && !boot0_4)
 8003ce4:	7afb      	ldrb	r3, [r7, #11]
 8003ce6:	f083 0301 	eor.w	r3, r3, #1
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d014      	beq.n	8003d1a <boot_pins_read+0x11e>
 8003cf0:	7a7b      	ldrb	r3, [r7, #9]
 8003cf2:	f083 0301 	eor.w	r3, r3, #1
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00e      	beq.n	8003d1a <boot_pins_read+0x11e>
 8003cfc:	79fb      	ldrb	r3, [r7, #7]
 8003cfe:	f083 0301 	eor.w	r3, r3, #1
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d008      	beq.n	8003d1a <boot_pins_read+0x11e>
 8003d08:	797b      	ldrb	r3, [r7, #5]
 8003d0a:	f083 0301 	eor.w	r3, r3, #1
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d002      	beq.n	8003d1a <boot_pins_read+0x11e>
	{
		boot_0 = 0;
 8003d14:	2300      	movs	r3, #0
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	e001      	b.n	8003d1e <boot_pins_read+0x122>
	}else{
		boot_0 = 2;
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	617b      	str	r3, [r7, #20]
	}
if(boot1_1 && boot1_2 && boot1_3 && boot1_4)
 8003d1e:	7abb      	ldrb	r3, [r7, #10]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00b      	beq.n	8003d3c <boot_pins_read+0x140>
 8003d24:	7a3b      	ldrb	r3, [r7, #8]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d008      	beq.n	8003d3c <boot_pins_read+0x140>
 8003d2a:	79bb      	ldrb	r3, [r7, #6]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d005      	beq.n	8003d3c <boot_pins_read+0x140>
 8003d30:	793b      	ldrb	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d002      	beq.n	8003d3c <boot_pins_read+0x140>
	{
	boot_1 = 1;
 8003d36:	2301      	movs	r3, #1
 8003d38:	613b      	str	r3, [r7, #16]
 8003d3a:	e01c      	b.n	8003d76 <boot_pins_read+0x17a>
	}else if (!boot1_1 && !boot1_2 && !boot1_3 && !boot1_4)
 8003d3c:	7abb      	ldrb	r3, [r7, #10]
 8003d3e:	f083 0301 	eor.w	r3, r3, #1
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d014      	beq.n	8003d72 <boot_pins_read+0x176>
 8003d48:	7a3b      	ldrb	r3, [r7, #8]
 8003d4a:	f083 0301 	eor.w	r3, r3, #1
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00e      	beq.n	8003d72 <boot_pins_read+0x176>
 8003d54:	79bb      	ldrb	r3, [r7, #6]
 8003d56:	f083 0301 	eor.w	r3, r3, #1
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d008      	beq.n	8003d72 <boot_pins_read+0x176>
 8003d60:	793b      	ldrb	r3, [r7, #4]
 8003d62:	f083 0301 	eor.w	r3, r3, #1
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d002      	beq.n	8003d72 <boot_pins_read+0x176>
	{
		boot_1 = 0;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	613b      	str	r3, [r7, #16]
 8003d70:	e001      	b.n	8003d76 <boot_pins_read+0x17a>
	}else
	{
		boot_1 = 2;
 8003d72:	2302      	movs	r3, #2
 8003d74:	613b      	str	r3, [r7, #16]
	}
if((boot_0 >= 2) && (boot_1 >= 2) )
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	dd08      	ble.n	8003d8e <boot_pins_read+0x192>
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	dd05      	ble.n	8003d8e <boot_pins_read+0x192>
	{
	 boot_value = boot_0 *2 + boot_1;
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	4413      	add	r3, r2
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	e001      	b.n	8003d92 <boot_pins_read+0x196>
	}else
	{
		boot_value = 3;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	60fb      	str	r3, [r7, #12]
	}
return boot_value;
 8003d92:	68fb      	ldr	r3, [r7, #12]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3718      	adds	r7, #24
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	48000800 	.word	0x48000800

08003da0 <uart_debug>:
int uart_debug()
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b0bc      	sub	sp, #240	; 0xf0
 8003da4:	af00      	add	r7, sp, #0
	unsigned char rx_buffer[50];
	unsigned char rx_flag_address_buffer[50];
	unsigned char rx_data_buffer[50];
	unsigned char cmd_0[3]={'B','M','F'};
 8003da6:	4ad1      	ldr	r2, [pc, #836]	; (80040ec <uart_debug+0x34c>)
 8003da8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003dac:	6812      	ldr	r2, [r2, #0]
 8003dae:	4611      	mov	r1, r2
 8003db0:	8019      	strh	r1, [r3, #0]
 8003db2:	3302      	adds	r3, #2
 8003db4:	0c12      	lsrs	r2, r2, #16
 8003db6:	701a      	strb	r2, [r3, #0]
	unsigned char cmd_1[3]={'B','F','F'};
 8003db8:	4acd      	ldr	r2, [pc, #820]	; (80040f0 <uart_debug+0x350>)
 8003dba:	f107 0320 	add.w	r3, r7, #32
 8003dbe:	6812      	ldr	r2, [r2, #0]
 8003dc0:	4611      	mov	r1, r2
 8003dc2:	8019      	strh	r1, [r3, #0]
 8003dc4:	3302      	adds	r3, #2
 8003dc6:	0c12      	lsrs	r2, r2, #16
 8003dc8:	701a      	strb	r2, [r3, #0]
	unsigned char cmd_2[3]={'R','B','M'};
 8003dca:	4aca      	ldr	r2, [pc, #808]	; (80040f4 <uart_debug+0x354>)
 8003dcc:	f107 031c 	add.w	r3, r7, #28
 8003dd0:	6812      	ldr	r2, [r2, #0]
 8003dd2:	4611      	mov	r1, r2
 8003dd4:	8019      	strh	r1, [r3, #0]
 8003dd6:	3302      	adds	r3, #2
 8003dd8:	0c12      	lsrs	r2, r2, #16
 8003dda:	701a      	strb	r2, [r3, #0]
	unsigned char cmd_3[3]={'R','F','L'};
 8003ddc:	4ac6      	ldr	r2, [pc, #792]	; (80040f8 <uart_debug+0x358>)
 8003dde:	f107 0318 	add.w	r3, r7, #24
 8003de2:	6812      	ldr	r2, [r2, #0]
 8003de4:	4611      	mov	r1, r2
 8003de6:	8019      	strh	r1, [r3, #0]
 8003de8:	3302      	adds	r3, #2
 8003dea:	0c12      	lsrs	r2, r2, #16
 8003dec:	701a      	strb	r2, [r3, #0]
	unsigned char cmd_4[3]={'W','F','L'};
 8003dee:	4ac3      	ldr	r2, [pc, #780]	; (80040fc <uart_debug+0x35c>)
 8003df0:	f107 0314 	add.w	r3, r7, #20
 8003df4:	6812      	ldr	r2, [r2, #0]
 8003df6:	4611      	mov	r1, r2
 8003df8:	8019      	strh	r1, [r3, #0]
 8003dfa:	3302      	adds	r3, #2
 8003dfc:	0c12      	lsrs	r2, r2, #16
 8003dfe:	701a      	strb	r2, [r3, #0]
	unsigned char cmd_5[4]={'H','E','L','P'};
 8003e00:	4bbf      	ldr	r3, [pc, #764]	; (8004100 <uart_debug+0x360>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	613b      	str	r3, [r7, #16]

	int uart_debug_flag = 0;
 8003e06:	2300      	movs	r3, #0
 8003e08:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

	uart_transmit_str((uint8_t*)"Waiting for command");
 8003e0c:	48bd      	ldr	r0, [pc, #756]	; (8004104 <uart_debug+0x364>)
 8003e0e:	f7ff fd5f 	bl	80038d0 <uart_transmit_str>
	uart_debug_flag = boot_uart_read((uint8_t*)rx_buffer);
 8003e12:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003e16:	4618      	mov	r0, r3
 8003e18:	f000 f9dc 	bl	80041d4 <boot_uart_read>
 8003e1c:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
	if(uart_debug_flag == 1)
 8003e20:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d106      	bne.n	8003e36 <uart_debug+0x96>
	{
		//uart_debug_flag =1
		uart_debug_flag =1;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		Boot_MFW_Flag = 0;
 8003e2e:	4bb6      	ldr	r3, [pc, #728]	; (8004108 <uart_debug+0x368>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	701a      	strb	r2, [r3, #0]
 8003e34:	e1b8      	b.n	80041a8 <uart_debug+0x408>
	}else if(Buffercmp((uint8_t*)cmd_0,(uint8_t*)rx_buffer,3))
 8003e36:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8003e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e3e:	2203      	movs	r2, #3
 8003e40:	4618      	mov	r0, r3
 8003e42:	f000 fa3b 	bl	80042bc <Buffercmp>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d009      	beq.n	8003e60 <uart_debug+0xc0>
	  {
		  uart_transmit_str((uint8_t*)"received BMF.......\n\r");
 8003e4c:	48af      	ldr	r0, [pc, #700]	; (800410c <uart_debug+0x36c>)
 8003e4e:	f7ff fd3f 	bl	80038d0 <uart_transmit_str>
		  Boot_MFW_Flag = 1; // Boot main firmware.
 8003e52:	4bad      	ldr	r3, [pc, #692]	; (8004108 <uart_debug+0x368>)
 8003e54:	2201      	movs	r2, #1
 8003e56:	701a      	strb	r2, [r3, #0]
		  uart_debug_flag =  1 ;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003e5e:	e1a3      	b.n	80041a8 <uart_debug+0x408>
	  }else if(Buffercmp((uint8_t*)cmd_1,(uint8_t*)rx_buffer,3))
 8003e60:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8003e64:	f107 0320 	add.w	r3, r7, #32
 8003e68:	2203      	movs	r2, #3
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f000 fa26 	bl	80042bc <Buffercmp>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d009      	beq.n	8003e8a <uart_debug+0xea>
	  {
		  uart_transmit_str((uint8_t*)"received BFF.......\n\r");
 8003e76:	48a6      	ldr	r0, [pc, #664]	; (8004110 <uart_debug+0x370>)
 8003e78:	f7ff fd2a 	bl	80038d0 <uart_transmit_str>
		  Boot_FFW_Flag = 1; // Boot Factory firmware.
 8003e7c:	4ba5      	ldr	r3, [pc, #660]	; (8004114 <uart_debug+0x374>)
 8003e7e:	2201      	movs	r2, #1
 8003e80:	701a      	strb	r2, [r3, #0]
		  uart_debug_flag =  1;
 8003e82:	2301      	movs	r3, #1
 8003e84:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003e88:	e18e      	b.n	80041a8 <uart_debug+0x408>

	  }else if(Buffercmp((uint8_t*)cmd_2,(uint8_t*)rx_buffer,3))
 8003e8a:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8003e8e:	f107 031c 	add.w	r3, r7, #28
 8003e92:	2203      	movs	r2, #3
 8003e94:	4618      	mov	r0, r3
 8003e96:	f000 fa11 	bl	80042bc <Buffercmp>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d009      	beq.n	8003eb4 <uart_debug+0x114>
	  {
		  uart_transmit_str((uint8_t*)"Received RBM.......\n\r");
 8003ea0:	489d      	ldr	r0, [pc, #628]	; (8004118 <uart_debug+0x378>)
 8003ea2:	f7ff fd15 	bl	80038d0 <uart_transmit_str>
		  Boot_RB_MFW_Flag = 1; // Rollback main firmware.
 8003ea6:	4b9d      	ldr	r3, [pc, #628]	; (800411c <uart_debug+0x37c>)
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	701a      	strb	r2, [r3, #0]

		  uart_debug_flag = 1;
 8003eac:	2301      	movs	r3, #1
 8003eae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003eb2:	e179      	b.n	80041a8 <uart_debug+0x408>

	  }else if(Buffercmp((uint8_t*)cmd_3,(uint8_t*)rx_buffer,3))
 8003eb4:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8003eb8:	f107 0318 	add.w	r3, r7, #24
 8003ebc:	2203      	movs	r2, #3
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f000 f9fc 	bl	80042bc <Buffercmp>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d067      	beq.n	8003f9a <uart_debug+0x1fa>
	  {
			for(int j =0; j<= 50 ; j++)
 8003eca:	2300      	movs	r3, #0
 8003ecc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003ed0:	e00b      	b.n	8003eea <uart_debug+0x14a>
			{
				rx_flag_address_buffer[j] = '\0';
 8003ed2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003ed6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003eda:	4413      	add	r3, r2
 8003edc:	2200      	movs	r2, #0
 8003ede:	701a      	strb	r2, [r3, #0]
			for(int j =0; j<= 50 ; j++)
 8003ee0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003eea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003eee:	2b32      	cmp	r3, #50	; 0x32
 8003ef0:	ddef      	ble.n	8003ed2 <uart_debug+0x132>

			}
		  uart_transmit_str((uint8_t*)"Received RFL.......\n\r");
 8003ef2:	488b      	ldr	r0, [pc, #556]	; (8004120 <uart_debug+0x380>)
 8003ef4:	f7ff fcec 	bl	80038d0 <uart_transmit_str>
		  uart_transmit_str((uint8_t*)"Enter the 2 digit flag address(01 - 13)");
 8003ef8:	488a      	ldr	r0, [pc, #552]	; (8004124 <uart_debug+0x384>)
 8003efa:	f7ff fce9 	bl	80038d0 <uart_transmit_str>
		  boot_uart_read((uint8_t*)rx_flag_address_buffer);
 8003efe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 f966 	bl	80041d4 <boot_uart_read>
/*		  uart_transmit_str((uint8_t*)"Received address :");
		  uart_transmit_str(rx_flag_address_buffer);*/
		  uart_transmit_str((uint8_t*)"Flag value at  ");
 8003f08:	4887      	ldr	r0, [pc, #540]	; (8004128 <uart_debug+0x388>)
 8003f0a:	f7ff fce1 	bl	80038d0 <uart_transmit_str>
		  uart_transmit_str(rx_flag_address_buffer);
 8003f0e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7ff fcdc 	bl	80038d0 <uart_transmit_str>
		  uart_transmit_str((uint8_t*)"is  : ");
 8003f18:	4884      	ldr	r0, [pc, #528]	; (800412c <uart_debug+0x38c>)
 8003f1a:	f7ff fcd9 	bl	80038d0 <uart_transmit_str>



		  /* Calculate the length. */
		  uint8_t result_address = 0;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
		  uint32_t result = 0;
 8003f24:	2300      	movs	r3, #0
 8003f26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		  for (int i=0; i<2;i++)
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f30:	e016      	b.n	8003f60 <uart_debug+0x1c0>
		  {
			  result_address=(result_address*10)+(rx_flag_address_buffer[i]-'0');
 8003f32:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8003f36:	461a      	mov	r2, r3
 8003f38:	0092      	lsls	r2, r2, #2
 8003f3a:	4413      	add	r3, r2
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8003f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f48:	440b      	add	r3, r1
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	3b30      	subs	r3, #48	; 0x30
 8003f52:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
		  for (int i=0; i<2;i++)
 8003f56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	dde4      	ble.n	8003f32 <uart_debug+0x192>
		 // read_all_flags();
		 // uart_transmit_str(all_flags[(uint8_t)rx_flag_address_buffer]);
		 // uint32_t result = rx_flag_address_buffer - '0';
		//  uint8_t result =  5 ;//(uint8_t*)rx_flag_address_buffer - 48 ;
		  //uint8_t address = (ui)
		  result = Read_Flag(result_address);
 8003f68:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7ff fc95 	bl	800389c <Read_Flag>
 8003f72:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
//-------------------------------------------------------------------------------
		  char buffer[10];
		  sprintf(buffer, "0%d", result);
 8003f76:	1d3b      	adds	r3, r7, #4
 8003f78:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003f7c:	496c      	ldr	r1, [pc, #432]	; (8004130 <uart_debug+0x390>)
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f000 fcca 	bl	8004918 <siprintf>
		  uart_transmit_str((uint8_t*)buffer);
 8003f84:	1d3b      	adds	r3, r7, #4
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7ff fca2 	bl	80038d0 <uart_transmit_str>
		  uart_transmit_str((uint8_t*)"\n\r");
 8003f8c:	4869      	ldr	r0, [pc, #420]	; (8004134 <uart_debug+0x394>)
 8003f8e:	f7ff fc9f 	bl	80038d0 <uart_transmit_str>


		  //goto label1;
		  uart_debug_flag = 0;
 8003f92:	2300      	movs	r3, #0
 8003f94:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003f98:	e106      	b.n	80041a8 <uart_debug+0x408>

	  }else if(Buffercmp((uint8_t*)cmd_4,(uint8_t*)rx_buffer,3))
 8003f9a:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8003f9e:	f107 0314 	add.w	r3, r7, #20
 8003fa2:	2203      	movs	r2, #3
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f000 f989 	bl	80042bc <Buffercmp>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f000 80cf 	beq.w	8004150 <uart_debug+0x3b0>
	  {
			for(int j =0; j<= 50 ; j++)
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003fb8:	e00b      	b.n	8003fd2 <uart_debug+0x232>
			{
				rx_flag_address_buffer[j] = '\0';
 8003fba:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003fbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fc2:	4413      	add	r3, r2
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	701a      	strb	r2, [r3, #0]
			for(int j =0; j<= 50 ; j++)
 8003fc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fcc:	3301      	adds	r3, #1
 8003fce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003fd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fd6:	2b32      	cmp	r3, #50	; 0x32
 8003fd8:	ddef      	ble.n	8003fba <uart_debug+0x21a>

			}
			for(int j =0; j<= 50 ; j++)
 8003fda:	2300      	movs	r3, #0
 8003fdc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003fe0:	e00b      	b.n	8003ffa <uart_debug+0x25a>
			{
				rx_data_buffer[j] = '\0';
 8003fe2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003fe6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003fea:	4413      	add	r3, r2
 8003fec:	2200      	movs	r2, #0
 8003fee:	701a      	strb	r2, [r3, #0]
			for(int j =0; j<= 50 ; j++)
 8003ff0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003ffa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ffe:	2b32      	cmp	r3, #50	; 0x32
 8004000:	ddef      	ble.n	8003fe2 <uart_debug+0x242>

			}
		  uart_transmit_str((uint8_t*)"Received WFL.......\n\r");
 8004002:	484d      	ldr	r0, [pc, #308]	; (8004138 <uart_debug+0x398>)
 8004004:	f7ff fc64 	bl	80038d0 <uart_transmit_str>
		  uart_transmit_str((uint8_t*)"Enter the 2 digit flag address(01-13)");
 8004008:	484c      	ldr	r0, [pc, #304]	; (800413c <uart_debug+0x39c>)
 800400a:	f7ff fc61 	bl	80038d0 <uart_transmit_str>
		  boot_uart_read((uint8_t*)rx_flag_address_buffer);
 800400e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004012:	4618      	mov	r0, r3
 8004014:	f000 f8de 	bl	80041d4 <boot_uart_read>
		  uart_transmit_str((uint8_t*)"received address :");
 8004018:	4849      	ldr	r0, [pc, #292]	; (8004140 <uart_debug+0x3a0>)
 800401a:	f7ff fc59 	bl	80038d0 <uart_transmit_str>
		  uart_transmit_str(rx_flag_address_buffer);
 800401e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004022:	4618      	mov	r0, r3
 8004024:	f7ff fc54 	bl	80038d0 <uart_transmit_str>
		  uart_transmit_str((uint8_t*)"Enter the 2 digit flag value(01-09)");
 8004028:	4846      	ldr	r0, [pc, #280]	; (8004144 <uart_debug+0x3a4>)
 800402a:	f7ff fc51 	bl	80038d0 <uart_transmit_str>
		  boot_uart_read((uint8_t*)rx_data_buffer);
 800402e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004032:	4618      	mov	r0, r3
 8004034:	f000 f8ce 	bl	80041d4 <boot_uart_read>
		  uart_transmit_str((uint8_t*)"received data :");
 8004038:	4843      	ldr	r0, [pc, #268]	; (8004148 <uart_debug+0x3a8>)
 800403a:	f7ff fc49 	bl	80038d0 <uart_transmit_str>
		  uart_transmit_str(rx_data_buffer);
 800403e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004042:	4618      	mov	r0, r3
 8004044:	f7ff fc44 	bl	80038d0 <uart_transmit_str>


		  uint8_t flag_address = 0;
 8004048:	2300      	movs	r3, #0
 800404a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
		  uint32_t flag_data = 0;
 800404e:	2300      	movs	r3, #0
 8004050:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
		  for (int i=0; i<2;i++)
 8004054:	2300      	movs	r3, #0
 8004056:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800405a:	e016      	b.n	800408a <uart_debug+0x2ea>
		  {
			  flag_address=(flag_address*10)+(rx_flag_address_buffer[i]-'0');
 800405c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8004060:	461a      	mov	r2, r3
 8004062:	0092      	lsls	r2, r2, #2
 8004064:	4413      	add	r3, r2
 8004066:	005b      	lsls	r3, r3, #1
 8004068:	b2da      	uxtb	r2, r3
 800406a:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800406e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004072:	440b      	add	r3, r1
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	4413      	add	r3, r2
 8004078:	b2db      	uxtb	r3, r3
 800407a:	3b30      	subs	r3, #48	; 0x30
 800407c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
		  for (int i=0; i<2;i++)
 8004080:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004084:	3301      	adds	r3, #1
 8004086:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800408a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800408e:	2b01      	cmp	r3, #1
 8004090:	dde4      	ble.n	800405c <uart_debug+0x2bc>
		  }
		  for (int i=0; i<2;i++)
 8004092:	2300      	movs	r3, #0
 8004094:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004098:	e015      	b.n	80040c6 <uart_debug+0x326>
			  {
			  flag_data=(flag_data*10)+(rx_data_buffer[i]-'0');
 800409a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800409e:	4613      	mov	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4413      	add	r3, r2
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	4619      	mov	r1, r3
 80040a8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80040ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80040b0:	4413      	add	r3, r2
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	440b      	add	r3, r1
 80040b6:	3b30      	subs	r3, #48	; 0x30
 80040b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
		  for (int i=0; i<2;i++)
 80040bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80040c0:	3301      	adds	r3, #1
 80040c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	dde5      	ble.n	800409a <uart_debug+0x2fa>
			  }
		  update_flag(flag_address, flag_data);
 80040ce:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80040d2:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7ff fcf2 	bl	8003ac0 <update_flag>
		  uart_transmit_str((uint8_t*)"\n\r flag updated !!\n\r");
 80040dc:	481b      	ldr	r0, [pc, #108]	; (800414c <uart_debug+0x3ac>)
 80040de:	f7ff fbf7 	bl	80038d0 <uart_transmit_str>

		  //goto label1;
		  uart_debug_flag = 0;
 80040e2:	2300      	movs	r3, #0
 80040e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80040e8:	e05e      	b.n	80041a8 <uart_debug+0x408>
 80040ea:	bf00      	nop
 80040ec:	08005510 	.word	0x08005510
 80040f0:	08005514 	.word	0x08005514
 80040f4:	08005518 	.word	0x08005518
 80040f8:	0800551c 	.word	0x0800551c
 80040fc:	08005520 	.word	0x08005520
 8004100:	08005524 	.word	0x08005524
 8004104:	080052b4 	.word	0x080052b4
 8004108:	200000c0 	.word	0x200000c0
 800410c:	080052c8 	.word	0x080052c8
 8004110:	080052e0 	.word	0x080052e0
 8004114:	200001c5 	.word	0x200001c5
 8004118:	080052f8 	.word	0x080052f8
 800411c:	200001c4 	.word	0x200001c4
 8004120:	08005310 	.word	0x08005310
 8004124:	08005328 	.word	0x08005328
 8004128:	08005350 	.word	0x08005350
 800412c:	08005360 	.word	0x08005360
 8004130:	08005368 	.word	0x08005368
 8004134:	0800536c 	.word	0x0800536c
 8004138:	08005370 	.word	0x08005370
 800413c:	08005388 	.word	0x08005388
 8004140:	080053b0 	.word	0x080053b0
 8004144:	080053c4 	.word	0x080053c4
 8004148:	080053e8 	.word	0x080053e8
 800414c:	080053f8 	.word	0x080053f8

	  }else if(Buffercmp((uint8_t*)cmd_5,(uint8_t*)rx_buffer,4))
 8004150:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8004154:	f107 0310 	add.w	r3, r7, #16
 8004158:	2204      	movs	r2, #4
 800415a:	4618      	mov	r0, r3
 800415c:	f000 f8ae 	bl	80042bc <Buffercmp>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d013      	beq.n	800418e <uart_debug+0x3ee>
	  {
		  uart_transmit_str((uint8_t*)"-----------IU Bootloader Commands------------\n\r");
 8004166:	4813      	ldr	r0, [pc, #76]	; (80041b4 <uart_debug+0x414>)
 8004168:	f7ff fbb2 	bl	80038d0 <uart_transmit_str>
		  uart_transmit_str((uint8_t*)"BMF : Boot Main Firmware\n\r");
 800416c:	4812      	ldr	r0, [pc, #72]	; (80041b8 <uart_debug+0x418>)
 800416e:	f7ff fbaf 	bl	80038d0 <uart_transmit_str>
		  uart_transmit_str((uint8_t*)"BFF : Boot Factory Firmware\n\r");
 8004172:	4812      	ldr	r0, [pc, #72]	; (80041bc <uart_debug+0x41c>)
 8004174:	f7ff fbac 	bl	80038d0 <uart_transmit_str>
		  uart_transmit_str((uint8_t*)"RBM : RollBack Main Firmware\n\r");
 8004178:	4811      	ldr	r0, [pc, #68]	; (80041c0 <uart_debug+0x420>)
 800417a:	f7ff fba9 	bl	80038d0 <uart_transmit_str>
		  uart_transmit_str((uint8_t*)"WFL : Write flag\n\r");
 800417e:	4811      	ldr	r0, [pc, #68]	; (80041c4 <uart_debug+0x424>)
 8004180:	f7ff fba6 	bl	80038d0 <uart_transmit_str>
		  uart_transmit_str((uint8_t*)"RFL : Read flag\n\r");
 8004184:	4810      	ldr	r0, [pc, #64]	; (80041c8 <uart_debug+0x428>)
 8004186:	f7ff fba3 	bl	80038d0 <uart_transmit_str>
		  return 0;
 800418a:	2300      	movs	r3, #0
 800418c:	e00e      	b.n	80041ac <uart_debug+0x40c>
		  //goto label1;
	  }
	  else
	  {
		  if(rx_buffer[0]!='\0')
 800418e:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8004192:	2b00      	cmp	r3, #0
 8004194:	d005      	beq.n	80041a2 <uart_debug+0x402>
		  {
		  uart_transmit_str((uint8_t*)"\n\r Invalid command !!!\n\r");
 8004196:	480d      	ldr	r0, [pc, #52]	; (80041cc <uart_debug+0x42c>)
 8004198:	f7ff fb9a 	bl	80038d0 <uart_transmit_str>
		  uart_transmit_str((uint8_t*)"enter HELP for list of supported commands !\n\r");
 800419c:	480c      	ldr	r0, [pc, #48]	; (80041d0 <uart_debug+0x430>)
 800419e:	f7ff fb97 	bl	80038d0 <uart_transmit_str>
		  }
		  //goto label1;
		  uart_debug_flag = 0;
 80041a2:	2300      	movs	r3, #0
 80041a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	  }
return uart_debug_flag;
 80041a8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec

}
 80041ac:	4618      	mov	r0, r3
 80041ae:	37f0      	adds	r7, #240	; 0xf0
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	08005410 	.word	0x08005410
 80041b8:	08005440 	.word	0x08005440
 80041bc:	0800545c 	.word	0x0800545c
 80041c0:	0800547c 	.word	0x0800547c
 80041c4:	0800549c 	.word	0x0800549c
 80041c8:	080054b0 	.word	0x080054b0
 80041cc:	080054c4 	.word	0x080054c4
 80041d0:	080054e0 	.word	0x080054e0

080041d4 <boot_uart_read>:
int boot_uart_read(uint8_t* rx_buffer)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]

int uart_receive_timout_1 =0;
 80041dc:	2300      	movs	r3, #0
 80041de:	617b      	str	r3, [r7, #20]
int time_out_flag = 0;
 80041e0:	2300      	movs	r3, #0
 80041e2:	613b      	str	r3, [r7, #16]

//uart_transmit_str((uint8_t*)"waiting for command.......");
	for(int i =0 ;i<=50; i++)
 80041e4:	2300      	movs	r3, #0
 80041e6:	60fb      	str	r3, [r7, #12]
 80041e8:	e007      	b.n	80041fa <boot_uart_read+0x26>
		{
		rx_buffer[i] = '\0';
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	4413      	add	r3, r2
 80041f0:	2200      	movs	r2, #0
 80041f2:	701a      	strb	r2, [r3, #0]
	for(int i =0 ;i<=50; i++)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	3301      	adds	r3, #1
 80041f8:	60fb      	str	r3, [r7, #12]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2b32      	cmp	r3, #50	; 0x32
 80041fe:	ddf4      	ble.n	80041ea <boot_uart_read+0x16>
		 }
	while(rx_buffer[0] == '\0')
 8004200:	e01f      	b.n	8004242 <boot_uart_read+0x6e>
		{
		uart_transmit_str((uint8_t*)".");
 8004202:	4814      	ldr	r0, [pc, #80]	; (8004254 <boot_uart_read+0x80>)
 8004204:	f7ff fb64 	bl	80038d0 <uart_transmit_str>
		HAL_UART_Receive(&DEBUG_UART, &rx_buffer[0], 50, 1000);
 8004208:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800420c:	2232      	movs	r2, #50	; 0x32
 800420e:	6879      	ldr	r1, [r7, #4]
 8004210:	4811      	ldr	r0, [pc, #68]	; (8004258 <boot_uart_read+0x84>)
 8004212:	f7fe fc7a 	bl	8002b0a <HAL_UART_Receive>
		uart_receive_timout_1++;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	3301      	adds	r3, #1
 800421a:	617b      	str	r3, [r7, #20]
		if(uart_receive_timout_1 >=60)
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	2b3b      	cmp	r3, #59	; 0x3b
 8004220:	dd05      	ble.n	800422e <boot_uart_read+0x5a>
		 	 {
		 	 	uart_transmit_str((uint8_t*)"UART timeout !!!\n\r");
 8004222:	480e      	ldr	r0, [pc, #56]	; (800425c <boot_uart_read+0x88>)
 8004224:	f7ff fb54 	bl	80038d0 <uart_transmit_str>
		 	 	time_out_flag = 1;
 8004228:	2301      	movs	r3, #1
 800422a:	613b      	str	r3, [r7, #16]
		 	 	break;
 800422c:	e00d      	b.n	800424a <boot_uart_read+0x76>
		 	 }
		 if(rx_buffer[0]!='\0')
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d005      	beq.n	8004242 <boot_uart_read+0x6e>
		 	 {
			 	 uart_receive_timout_1 = 0;
 8004236:	2300      	movs	r3, #0
 8004238:	617b      	str	r3, [r7, #20]
		 		uart_transmit_str((uint8_t*)"\n\r command received !\n\r");
 800423a:	4809      	ldr	r0, [pc, #36]	; (8004260 <boot_uart_read+0x8c>)
 800423c:	f7ff fb48 	bl	80038d0 <uart_transmit_str>
		 		break;
 8004240:	e003      	b.n	800424a <boot_uart_read+0x76>
	while(rx_buffer[0] == '\0')
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d0db      	beq.n	8004202 <boot_uart_read+0x2e>

		 	 }
		  }// end of loop
	return time_out_flag;
 800424a:	693b      	ldr	r3, [r7, #16]

}
 800424c:	4618      	mov	r0, r3
 800424e:	3718      	adds	r7, #24
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	08005528 	.word	0x08005528
 8004258:	200000c4 	.word	0x200000c4
 800425c:	0800552c 	.word	0x0800552c
 8004260:	08005540 	.word	0x08005540

08004264 <led_blink>:
void led_blink(void)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	af00      	add	r7, sp, #0
	  HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 8004268:	2104      	movs	r1, #4
 800426a:	4813      	ldr	r0, [pc, #76]	; (80042b8 <led_blink+0x54>)
 800426c:	f7fc ff98 	bl	80011a0 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8004270:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004274:	f7fc fa30 	bl	80006d8 <HAL_Delay>
	  HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 8004278:	2104      	movs	r1, #4
 800427a:	480f      	ldr	r0, [pc, #60]	; (80042b8 <led_blink+0x54>)
 800427c:	f7fc ff90 	bl	80011a0 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8004280:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004284:	f7fc fa28 	bl	80006d8 <HAL_Delay>
	  HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 8004288:	2104      	movs	r1, #4
 800428a:	480b      	ldr	r0, [pc, #44]	; (80042b8 <led_blink+0x54>)
 800428c:	f7fc ff88 	bl	80011a0 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8004290:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004294:	f7fc fa20 	bl	80006d8 <HAL_Delay>
	  HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 8004298:	2104      	movs	r1, #4
 800429a:	4807      	ldr	r0, [pc, #28]	; (80042b8 <led_blink+0x54>)
 800429c:	f7fc ff80 	bl	80011a0 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80042a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80042a4:	f7fc fa18 	bl	80006d8 <HAL_Delay>
	  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, 0);
 80042a8:	2200      	movs	r2, #0
 80042aa:	2104      	movs	r1, #4
 80042ac:	4802      	ldr	r0, [pc, #8]	; (80042b8 <led_blink+0x54>)
 80042ae:	f7fc ff5f 	bl	8001170 <HAL_GPIO_WritePin>

}
 80042b2:	bf00      	nop
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	48000400 	.word	0x48000400

080042bc <Buffercmp>:
static uint16_t Buffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength)
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	4613      	mov	r3, r2
 80042c8:	80fb      	strh	r3, [r7, #6]
  while (BufferLength--)
 80042ca:	e00d      	b.n	80042e8 <Buffercmp+0x2c>
  {
    if ((*pBuffer1) != *pBuffer2)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	781a      	ldrb	r2, [r3, #0]
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d001      	beq.n	80042dc <Buffercmp+0x20>
    {
      return 0;
 80042d8:	2300      	movs	r3, #0
 80042da:	e00b      	b.n	80042f4 <Buffercmp+0x38>
    }
    pBuffer1++;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	3301      	adds	r3, #1
 80042e0:	60fb      	str	r3, [r7, #12]
    pBuffer2++;
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	3301      	adds	r3, #1
 80042e6:	60bb      	str	r3, [r7, #8]
  while (BufferLength--)
 80042e8:	88fb      	ldrh	r3, [r7, #6]
 80042ea:	1e5a      	subs	r2, r3, #1
 80042ec:	80fa      	strh	r2, [r7, #6]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1ec      	bne.n	80042cc <Buffercmp+0x10>
  }

  return 1;
 80042f2:	2301      	movs	r3, #1
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3714      	adds	r7, #20
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <Buffercmp32>:
static uint16_t Buffercmp32(uint32_t* pBuffer1, uint32_t* pBuffer2, uint16_t BufferLength)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	4613      	mov	r3, r2
 800430c:	80fb      	strh	r3, [r7, #6]
  while (BufferLength--)
 800430e:	e00d      	b.n	800432c <Buffercmp32+0x2c>
  {
    if ((*pBuffer1) != *pBuffer2)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	429a      	cmp	r2, r3
 800431a:	d001      	beq.n	8004320 <Buffercmp32+0x20>
    {
      return 0;
 800431c:	2300      	movs	r3, #0
 800431e:	e00b      	b.n	8004338 <Buffercmp32+0x38>
    }
    pBuffer1++;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	3304      	adds	r3, #4
 8004324:	60fb      	str	r3, [r7, #12]
    pBuffer2++;
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	3304      	adds	r3, #4
 800432a:	60bb      	str	r3, [r7, #8]
  while (BufferLength--)
 800432c:	88fb      	ldrh	r3, [r7, #6]
 800432e:	1e5a      	subs	r2, r3, #1
 8004330:	80fa      	strh	r2, [r7, #6]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1ec      	bne.n	8004310 <Buffercmp32+0x10>
  }

  return 1;
 8004336:	2301      	movs	r3, #1
}
 8004338:	4618      	mov	r0, r3
 800433a:	3714      	adds	r7, #20
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <Buffercpy>:
void Buffercpy(uint32_t* sBuffer, uint32_t* dBuffer, uint16_t BufferLength)
{
 8004344:	b480      	push	{r7}
 8004346:	b087      	sub	sp, #28
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	4613      	mov	r3, r2
 8004350:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i=0 ; i< BufferLength ; i++)
 8004352:	2300      	movs	r3, #0
 8004354:	82fb      	strh	r3, [r7, #22]
 8004356:	e00c      	b.n	8004372 <Buffercpy+0x2e>
	{

		dBuffer[i] = sBuffer[i];
 8004358:	8afb      	ldrh	r3, [r7, #22]
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	441a      	add	r2, r3
 8004360:	8afb      	ldrh	r3, [r7, #22]
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	68b9      	ldr	r1, [r7, #8]
 8004366:	440b      	add	r3, r1
 8004368:	6812      	ldr	r2, [r2, #0]
 800436a:	601a      	str	r2, [r3, #0]
	for(uint16_t i=0 ; i< BufferLength ; i++)
 800436c:	8afb      	ldrh	r3, [r7, #22]
 800436e:	3301      	adds	r3, #1
 8004370:	82fb      	strh	r3, [r7, #22]
 8004372:	8afa      	ldrh	r2, [r7, #22]
 8004374:	88fb      	ldrh	r3, [r7, #6]
 8004376:	429a      	cmp	r2, r3
 8004378:	d3ee      	bcc.n	8004358 <Buffercpy+0x14>
	}

}
 800437a:	bf00      	nop
 800437c:	371c      	adds	r7, #28
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr

08004386 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b0ba      	sub	sp, #232	; 0xe8
 800438a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800438c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004390:	2244      	movs	r2, #68	; 0x44
 8004392:	2100      	movs	r1, #0
 8004394:	4618      	mov	r0, r3
 8004396:	f000 fab7 	bl	8004908 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800439a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800439e:	2200      	movs	r2, #0
 80043a0:	601a      	str	r2, [r3, #0]
 80043a2:	605a      	str	r2, [r3, #4]
 80043a4:	609a      	str	r2, [r3, #8]
 80043a6:	60da      	str	r2, [r3, #12]
 80043a8:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80043aa:	1d3b      	adds	r3, r7, #4
 80043ac:	228c      	movs	r2, #140	; 0x8c
 80043ae:	2100      	movs	r1, #0
 80043b0:	4618      	mov	r0, r3
 80043b2:	f000 faa9 	bl	8004908 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80043b6:	2310      	movs	r3, #16
 80043b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80043bc:	2301      	movs	r3, #1
 80043be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80043c2:	2300      	movs	r3, #0
 80043c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80043c8:	2360      	movs	r3, #96	; 0x60
 80043ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80043ce:	2300      	movs	r3, #0
 80043d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80043d4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80043d8:	4618      	mov	r0, r3
 80043da:	f7fd f801 	bl	80013e0 <HAL_RCC_OscConfig>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d001      	beq.n	80043e8 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80043e4:	f000 f8ee 	bl	80045c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80043e8:	230f      	movs	r3, #15
 80043ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80043ee:	2300      	movs	r3, #0
 80043f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80043f4:	2300      	movs	r3, #0
 80043f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80043fa:	2300      	movs	r3, #0
 80043fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004400:	2300      	movs	r3, #0
 8004402:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004406:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800440a:	2100      	movs	r1, #0
 800440c:	4618      	mov	r0, r3
 800440e:	f7fd fbd5 	bl	8001bbc <HAL_RCC_ClockConfig>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d001      	beq.n	800441c <SystemClock_Config+0x96>
  {
    Error_Handler();
 8004418:	f000 f8d4 	bl	80045c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART5;
 800441c:	2314      	movs	r3, #20
 800441e:	607b      	str	r3, [r7, #4]
  //PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004420:	2300      	movs	r3, #0
 8004422:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8004424:	2300      	movs	r3, #0
 8004426:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004428:	1d3b      	adds	r3, r7, #4
 800442a:	4618      	mov	r0, r3
 800442c:	f7fd fdca 	bl	8001fc4 <HAL_RCCEx_PeriphCLKConfig>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8004436:	f000 f8c5 	bl	80045c4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800443a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800443e:	f7fc fed7 	bl	80011f0 <HAL_PWREx_ControlVoltageScaling>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d001      	beq.n	800444c <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8004448:	f000 f8bc 	bl	80045c4 <Error_Handler>
  }
}
 800444c:	bf00      	nop
 800444e:	37e8      	adds	r7, #232	; 0xe8
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8004458:	4b14      	ldr	r3, [pc, #80]	; (80044ac <MX_UART5_Init+0x58>)
 800445a:	4a15      	ldr	r2, [pc, #84]	; (80044b0 <MX_UART5_Init+0x5c>)
 800445c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800445e:	4b13      	ldr	r3, [pc, #76]	; (80044ac <MX_UART5_Init+0x58>)
 8004460:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004464:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8004466:	4b11      	ldr	r3, [pc, #68]	; (80044ac <MX_UART5_Init+0x58>)
 8004468:	2200      	movs	r2, #0
 800446a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800446c:	4b0f      	ldr	r3, [pc, #60]	; (80044ac <MX_UART5_Init+0x58>)
 800446e:	2200      	movs	r2, #0
 8004470:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8004472:	4b0e      	ldr	r3, [pc, #56]	; (80044ac <MX_UART5_Init+0x58>)
 8004474:	2200      	movs	r2, #0
 8004476:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8004478:	4b0c      	ldr	r3, [pc, #48]	; (80044ac <MX_UART5_Init+0x58>)
 800447a:	220c      	movs	r2, #12
 800447c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800447e:	4b0b      	ldr	r3, [pc, #44]	; (80044ac <MX_UART5_Init+0x58>)
 8004480:	2200      	movs	r2, #0
 8004482:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8004484:	4b09      	ldr	r3, [pc, #36]	; (80044ac <MX_UART5_Init+0x58>)
 8004486:	2200      	movs	r2, #0
 8004488:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800448a:	4b08      	ldr	r3, [pc, #32]	; (80044ac <MX_UART5_Init+0x58>)
 800448c:	2200      	movs	r2, #0
 800448e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004490:	4b06      	ldr	r3, [pc, #24]	; (80044ac <MX_UART5_Init+0x58>)
 8004492:	2200      	movs	r2, #0
 8004494:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8004496:	4805      	ldr	r0, [pc, #20]	; (80044ac <MX_UART5_Init+0x58>)
 8004498:	f7fe fa56 	bl	8002948 <HAL_UART_Init>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d001      	beq.n	80044a6 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80044a2:	f000 f88f 	bl	80045c4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80044a6:	bf00      	nop
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	200001c8 	.word	0x200001c8
 80044b0:	40005000 	.word	0x40005000

080044b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80044b8:	4b14      	ldr	r3, [pc, #80]	; (800450c <MX_USART3_UART_Init+0x58>)
 80044ba:	4a15      	ldr	r2, [pc, #84]	; (8004510 <MX_USART3_UART_Init+0x5c>)
 80044bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80044be:	4b13      	ldr	r3, [pc, #76]	; (800450c <MX_USART3_UART_Init+0x58>)
 80044c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80044c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80044c6:	4b11      	ldr	r3, [pc, #68]	; (800450c <MX_USART3_UART_Init+0x58>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80044cc:	4b0f      	ldr	r3, [pc, #60]	; (800450c <MX_USART3_UART_Init+0x58>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80044d2:	4b0e      	ldr	r3, [pc, #56]	; (800450c <MX_USART3_UART_Init+0x58>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80044d8:	4b0c      	ldr	r3, [pc, #48]	; (800450c <MX_USART3_UART_Init+0x58>)
 80044da:	220c      	movs	r2, #12
 80044dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80044de:	4b0b      	ldr	r3, [pc, #44]	; (800450c <MX_USART3_UART_Init+0x58>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80044e4:	4b09      	ldr	r3, [pc, #36]	; (800450c <MX_USART3_UART_Init+0x58>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80044ea:	4b08      	ldr	r3, [pc, #32]	; (800450c <MX_USART3_UART_Init+0x58>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80044f0:	4b06      	ldr	r3, [pc, #24]	; (800450c <MX_USART3_UART_Init+0x58>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80044f6:	4805      	ldr	r0, [pc, #20]	; (800450c <MX_USART3_UART_Init+0x58>)
 80044f8:	f7fe fa26 	bl	8002948 <HAL_UART_Init>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8004502:	f000 f85f 	bl	80045c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004506:	bf00      	nop
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	200000c4 	.word	0x200000c4
 8004510:	40004800 	.word	0x40004800

08004514 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b088      	sub	sp, #32
 8004518:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800451a:	f107 030c 	add.w	r3, r7, #12
 800451e:	2200      	movs	r2, #0
 8004520:	601a      	str	r2, [r3, #0]
 8004522:	605a      	str	r2, [r3, #4]
 8004524:	609a      	str	r2, [r3, #8]
 8004526:	60da      	str	r2, [r3, #12]
 8004528:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800452a:	4b23      	ldr	r3, [pc, #140]	; (80045b8 <MX_GPIO_Init+0xa4>)
 800452c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800452e:	4a22      	ldr	r2, [pc, #136]	; (80045b8 <MX_GPIO_Init+0xa4>)
 8004530:	f043 0304 	orr.w	r3, r3, #4
 8004534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004536:	4b20      	ldr	r3, [pc, #128]	; (80045b8 <MX_GPIO_Init+0xa4>)
 8004538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800453a:	f003 0304 	and.w	r3, r3, #4
 800453e:	60bb      	str	r3, [r7, #8]
 8004540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004542:	4b1d      	ldr	r3, [pc, #116]	; (80045b8 <MX_GPIO_Init+0xa4>)
 8004544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004546:	4a1c      	ldr	r2, [pc, #112]	; (80045b8 <MX_GPIO_Init+0xa4>)
 8004548:	f043 0302 	orr.w	r3, r3, #2
 800454c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800454e:	4b1a      	ldr	r3, [pc, #104]	; (80045b8 <MX_GPIO_Init+0xa4>)
 8004550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	607b      	str	r3, [r7, #4]
 8004558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800455a:	4b17      	ldr	r3, [pc, #92]	; (80045b8 <MX_GPIO_Init+0xa4>)
 800455c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800455e:	4a16      	ldr	r2, [pc, #88]	; (80045b8 <MX_GPIO_Init+0xa4>)
 8004560:	f043 0308 	orr.w	r3, r3, #8
 8004564:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004566:	4b14      	ldr	r3, [pc, #80]	; (80045b8 <MX_GPIO_Init+0xa4>)
 8004568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800456a:	f003 0308 	and.w	r3, r3, #8
 800456e:	603b      	str	r3, [r7, #0]
 8004570:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8004572:	2201      	movs	r2, #1
 8004574:	2104      	movs	r1, #4
 8004576:	4811      	ldr	r0, [pc, #68]	; (80045bc <MX_GPIO_Init+0xa8>)
 8004578:	f7fc fdfa 	bl	8001170 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800457c:	2303      	movs	r3, #3
 800457e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004580:	2300      	movs	r3, #0
 8004582:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004584:	2301      	movs	r3, #1
 8004586:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004588:	f107 030c 	add.w	r3, r7, #12
 800458c:	4619      	mov	r1, r3
 800458e:	480c      	ldr	r0, [pc, #48]	; (80045c0 <MX_GPIO_Init+0xac>)
 8004590:	f7fc fc44 	bl	8000e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : RED_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 8004594:	2304      	movs	r3, #4
 8004596:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004598:	2301      	movs	r3, #1
 800459a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800459c:	2300      	movs	r3, #0
 800459e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045a0:	2300      	movs	r3, #0
 80045a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 80045a4:	f107 030c 	add.w	r3, r7, #12
 80045a8:	4619      	mov	r1, r3
 80045aa:	4804      	ldr	r0, [pc, #16]	; (80045bc <MX_GPIO_Init+0xa8>)
 80045ac:	f7fc fc36 	bl	8000e1c <HAL_GPIO_Init>

}
 80045b0:	bf00      	nop
 80045b2:	3720      	adds	r7, #32
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	40021000 	.word	0x40021000
 80045bc:	48000400 	.word	0x48000400
 80045c0:	48000800 	.word	0x48000800

080045c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80045c8:	bf00      	nop
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
	...

080045d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045da:	4b0f      	ldr	r3, [pc, #60]	; (8004618 <HAL_MspInit+0x44>)
 80045dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045de:	4a0e      	ldr	r2, [pc, #56]	; (8004618 <HAL_MspInit+0x44>)
 80045e0:	f043 0301 	orr.w	r3, r3, #1
 80045e4:	6613      	str	r3, [r2, #96]	; 0x60
 80045e6:	4b0c      	ldr	r3, [pc, #48]	; (8004618 <HAL_MspInit+0x44>)
 80045e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	607b      	str	r3, [r7, #4]
 80045f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80045f2:	4b09      	ldr	r3, [pc, #36]	; (8004618 <HAL_MspInit+0x44>)
 80045f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f6:	4a08      	ldr	r2, [pc, #32]	; (8004618 <HAL_MspInit+0x44>)
 80045f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045fc:	6593      	str	r3, [r2, #88]	; 0x58
 80045fe:	4b06      	ldr	r3, [pc, #24]	; (8004618 <HAL_MspInit+0x44>)
 8004600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004606:	603b      	str	r3, [r7, #0]
 8004608:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800460a:	bf00      	nop
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	40021000 	.word	0x40021000

0800461c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b08c      	sub	sp, #48	; 0x30
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004624:	f107 031c 	add.w	r3, r7, #28
 8004628:	2200      	movs	r2, #0
 800462a:	601a      	str	r2, [r3, #0]
 800462c:	605a      	str	r2, [r3, #4]
 800462e:	609a      	str	r2, [r3, #8]
 8004630:	60da      	str	r2, [r3, #12]
 8004632:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a3c      	ldr	r2, [pc, #240]	; (800472c <HAL_UART_MspInit+0x110>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d145      	bne.n	80046ca <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800463e:	4b3c      	ldr	r3, [pc, #240]	; (8004730 <HAL_UART_MspInit+0x114>)
 8004640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004642:	4a3b      	ldr	r2, [pc, #236]	; (8004730 <HAL_UART_MspInit+0x114>)
 8004644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004648:	6593      	str	r3, [r2, #88]	; 0x58
 800464a:	4b39      	ldr	r3, [pc, #228]	; (8004730 <HAL_UART_MspInit+0x114>)
 800464c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800464e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004652:	61bb      	str	r3, [r7, #24]
 8004654:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004656:	4b36      	ldr	r3, [pc, #216]	; (8004730 <HAL_UART_MspInit+0x114>)
 8004658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800465a:	4a35      	ldr	r2, [pc, #212]	; (8004730 <HAL_UART_MspInit+0x114>)
 800465c:	f043 0304 	orr.w	r3, r3, #4
 8004660:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004662:	4b33      	ldr	r3, [pc, #204]	; (8004730 <HAL_UART_MspInit+0x114>)
 8004664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004666:	f003 0304 	and.w	r3, r3, #4
 800466a:	617b      	str	r3, [r7, #20]
 800466c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800466e:	4b30      	ldr	r3, [pc, #192]	; (8004730 <HAL_UART_MspInit+0x114>)
 8004670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004672:	4a2f      	ldr	r2, [pc, #188]	; (8004730 <HAL_UART_MspInit+0x114>)
 8004674:	f043 0308 	orr.w	r3, r3, #8
 8004678:	64d3      	str	r3, [r2, #76]	; 0x4c
 800467a:	4b2d      	ldr	r3, [pc, #180]	; (8004730 <HAL_UART_MspInit+0x114>)
 800467c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800467e:	f003 0308 	and.w	r3, r3, #8
 8004682:	613b      	str	r3, [r7, #16]
 8004684:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004686:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800468a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800468c:	2302      	movs	r3, #2
 800468e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004690:	2300      	movs	r3, #0
 8004692:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004694:	2303      	movs	r3, #3
 8004696:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004698:	2308      	movs	r3, #8
 800469a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800469c:	f107 031c 	add.w	r3, r7, #28
 80046a0:	4619      	mov	r1, r3
 80046a2:	4824      	ldr	r0, [pc, #144]	; (8004734 <HAL_UART_MspInit+0x118>)
 80046a4:	f7fc fbba 	bl	8000e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80046a8:	2304      	movs	r3, #4
 80046aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ac:	2302      	movs	r3, #2
 80046ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046b0:	2300      	movs	r3, #0
 80046b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046b4:	2303      	movs	r3, #3
 80046b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80046b8:	2308      	movs	r3, #8
 80046ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80046bc:	f107 031c 	add.w	r3, r7, #28
 80046c0:	4619      	mov	r1, r3
 80046c2:	481d      	ldr	r0, [pc, #116]	; (8004738 <HAL_UART_MspInit+0x11c>)
 80046c4:	f7fc fbaa 	bl	8000e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80046c8:	e02c      	b.n	8004724 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART3)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a1b      	ldr	r2, [pc, #108]	; (800473c <HAL_UART_MspInit+0x120>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d127      	bne.n	8004724 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART3_CLK_ENABLE();
 80046d4:	4b16      	ldr	r3, [pc, #88]	; (8004730 <HAL_UART_MspInit+0x114>)
 80046d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d8:	4a15      	ldr	r2, [pc, #84]	; (8004730 <HAL_UART_MspInit+0x114>)
 80046da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046de:	6593      	str	r3, [r2, #88]	; 0x58
 80046e0:	4b13      	ldr	r3, [pc, #76]	; (8004730 <HAL_UART_MspInit+0x114>)
 80046e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046e8:	60fb      	str	r3, [r7, #12]
 80046ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046ec:	4b10      	ldr	r3, [pc, #64]	; (8004730 <HAL_UART_MspInit+0x114>)
 80046ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046f0:	4a0f      	ldr	r2, [pc, #60]	; (8004730 <HAL_UART_MspInit+0x114>)
 80046f2:	f043 0304 	orr.w	r3, r3, #4
 80046f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046f8:	4b0d      	ldr	r3, [pc, #52]	; (8004730 <HAL_UART_MspInit+0x114>)
 80046fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046fc:	f003 0304 	and.w	r3, r3, #4
 8004700:	60bb      	str	r3, [r7, #8]
 8004702:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004704:	2330      	movs	r3, #48	; 0x30
 8004706:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004708:	2302      	movs	r3, #2
 800470a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800470c:	2300      	movs	r3, #0
 800470e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004710:	2303      	movs	r3, #3
 8004712:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004714:	2307      	movs	r3, #7
 8004716:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004718:	f107 031c 	add.w	r3, r7, #28
 800471c:	4619      	mov	r1, r3
 800471e:	4805      	ldr	r0, [pc, #20]	; (8004734 <HAL_UART_MspInit+0x118>)
 8004720:	f7fc fb7c 	bl	8000e1c <HAL_GPIO_Init>
}
 8004724:	bf00      	nop
 8004726:	3730      	adds	r7, #48	; 0x30
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	40005000 	.word	0x40005000
 8004730:	40021000 	.word	0x40021000
 8004734:	48000800 	.word	0x48000800
 8004738:	48000c00 	.word	0x48000c00
 800473c:	40004800 	.word	0x40004800

08004740 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004740:	b480      	push	{r7}
 8004742:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004744:	bf00      	nop
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr

0800474e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800474e:	b480      	push	{r7}
 8004750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004752:	e7fe      	b.n	8004752 <HardFault_Handler+0x4>

08004754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004754:	b480      	push	{r7}
 8004756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004758:	e7fe      	b.n	8004758 <MemManage_Handler+0x4>

0800475a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800475a:	b480      	push	{r7}
 800475c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800475e:	e7fe      	b.n	800475e <BusFault_Handler+0x4>

08004760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004760:	b480      	push	{r7}
 8004762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004764:	e7fe      	b.n	8004764 <UsageFault_Handler+0x4>

08004766 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004766:	b480      	push	{r7}
 8004768:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800476a:	bf00      	nop
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004774:	b480      	push	{r7}
 8004776:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004778:	bf00      	nop
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr

08004782 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004782:	b480      	push	{r7}
 8004784:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004786:	bf00      	nop
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004794:	f7fb ff82 	bl	800069c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004798:	bf00      	nop
 800479a:	bd80      	pop	{r7, pc}

0800479c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80047a4:	4b11      	ldr	r3, [pc, #68]	; (80047ec <_sbrk+0x50>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d102      	bne.n	80047b2 <_sbrk+0x16>
		heap_end = &end;
 80047ac:	4b0f      	ldr	r3, [pc, #60]	; (80047ec <_sbrk+0x50>)
 80047ae:	4a10      	ldr	r2, [pc, #64]	; (80047f0 <_sbrk+0x54>)
 80047b0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80047b2:	4b0e      	ldr	r3, [pc, #56]	; (80047ec <_sbrk+0x50>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80047b8:	4b0c      	ldr	r3, [pc, #48]	; (80047ec <_sbrk+0x50>)
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4413      	add	r3, r2
 80047c0:	466a      	mov	r2, sp
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d907      	bls.n	80047d6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80047c6:	f000 f875 	bl	80048b4 <__errno>
 80047ca:	4602      	mov	r2, r0
 80047cc:	230c      	movs	r3, #12
 80047ce:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80047d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047d4:	e006      	b.n	80047e4 <_sbrk+0x48>
	}

	heap_end += incr;
 80047d6:	4b05      	ldr	r3, [pc, #20]	; (80047ec <_sbrk+0x50>)
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4413      	add	r3, r2
 80047de:	4a03      	ldr	r2, [pc, #12]	; (80047ec <_sbrk+0x50>)
 80047e0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80047e2:	68fb      	ldr	r3, [r7, #12]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	200000b0 	.word	0x200000b0
 80047f0:	20000250 	.word	0x20000250

080047f4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80047f4:	b480      	push	{r7}
 80047f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80047f8:	4b17      	ldr	r3, [pc, #92]	; (8004858 <SystemInit+0x64>)
 80047fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fe:	4a16      	ldr	r2, [pc, #88]	; (8004858 <SystemInit+0x64>)
 8004800:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004804:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004808:	4b14      	ldr	r3, [pc, #80]	; (800485c <SystemInit+0x68>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a13      	ldr	r2, [pc, #76]	; (800485c <SystemInit+0x68>)
 800480e:	f043 0301 	orr.w	r3, r3, #1
 8004812:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8004814:	4b11      	ldr	r3, [pc, #68]	; (800485c <SystemInit+0x68>)
 8004816:	2200      	movs	r2, #0
 8004818:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800481a:	4b10      	ldr	r3, [pc, #64]	; (800485c <SystemInit+0x68>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a0f      	ldr	r2, [pc, #60]	; (800485c <SystemInit+0x68>)
 8004820:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8004824:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8004828:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800482a:	4b0c      	ldr	r3, [pc, #48]	; (800485c <SystemInit+0x68>)
 800482c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004830:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004832:	4b0a      	ldr	r3, [pc, #40]	; (800485c <SystemInit+0x68>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a09      	ldr	r2, [pc, #36]	; (800485c <SystemInit+0x68>)
 8004838:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800483c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800483e:	4b07      	ldr	r3, [pc, #28]	; (800485c <SystemInit+0x68>)
 8004840:	2200      	movs	r2, #0
 8004842:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004844:	4b04      	ldr	r3, [pc, #16]	; (8004858 <SystemInit+0x64>)
 8004846:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800484a:	609a      	str	r2, [r3, #8]
#endif
}
 800484c:	bf00      	nop
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	e000ed00 	.word	0xe000ed00
 800485c:	40021000 	.word	0x40021000

08004860 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004860:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004898 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004864:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004866:	e003      	b.n	8004870 <LoopCopyDataInit>

08004868 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004868:	4b0c      	ldr	r3, [pc, #48]	; (800489c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800486a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800486c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800486e:	3104      	adds	r1, #4

08004870 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004870:	480b      	ldr	r0, [pc, #44]	; (80048a0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004872:	4b0c      	ldr	r3, [pc, #48]	; (80048a4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004874:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004876:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004878:	d3f6      	bcc.n	8004868 <CopyDataInit>
	ldr	r2, =_sbss
 800487a:	4a0b      	ldr	r2, [pc, #44]	; (80048a8 <LoopForever+0x12>)
	b	LoopFillZerobss
 800487c:	e002      	b.n	8004884 <LoopFillZerobss>

0800487e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800487e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004880:	f842 3b04 	str.w	r3, [r2], #4

08004884 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004884:	4b09      	ldr	r3, [pc, #36]	; (80048ac <LoopForever+0x16>)
	cmp	r2, r3
 8004886:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004888:	d3f9      	bcc.n	800487e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800488a:	f7ff ffb3 	bl	80047f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800488e:	f000 f817 	bl	80048c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004892:	f7ff f843 	bl	800391c <main>

08004896 <LoopForever>:

LoopForever:
    b LoopForever
 8004896:	e7fe      	b.n	8004896 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004898:	2004ffff 	.word	0x2004ffff
	ldr	r3, =_sidata
 800489c:	080055e4 	.word	0x080055e4
	ldr	r0, =_sdata
 80048a0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80048a4:	20000094 	.word	0x20000094
	ldr	r2, =_sbss
 80048a8:	20000094 	.word	0x20000094
	ldr	r3, = _ebss
 80048ac:	2000024c 	.word	0x2000024c

080048b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80048b0:	e7fe      	b.n	80048b0 <ADC1_2_IRQHandler>
	...

080048b4 <__errno>:
 80048b4:	4b01      	ldr	r3, [pc, #4]	; (80048bc <__errno+0x8>)
 80048b6:	6818      	ldr	r0, [r3, #0]
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	20000030 	.word	0x20000030

080048c0 <__libc_init_array>:
 80048c0:	b570      	push	{r4, r5, r6, lr}
 80048c2:	4e0d      	ldr	r6, [pc, #52]	; (80048f8 <__libc_init_array+0x38>)
 80048c4:	4c0d      	ldr	r4, [pc, #52]	; (80048fc <__libc_init_array+0x3c>)
 80048c6:	1ba4      	subs	r4, r4, r6
 80048c8:	10a4      	asrs	r4, r4, #2
 80048ca:	2500      	movs	r5, #0
 80048cc:	42a5      	cmp	r5, r4
 80048ce:	d109      	bne.n	80048e4 <__libc_init_array+0x24>
 80048d0:	4e0b      	ldr	r6, [pc, #44]	; (8004900 <__libc_init_array+0x40>)
 80048d2:	4c0c      	ldr	r4, [pc, #48]	; (8004904 <__libc_init_array+0x44>)
 80048d4:	f000 fc26 	bl	8005124 <_init>
 80048d8:	1ba4      	subs	r4, r4, r6
 80048da:	10a4      	asrs	r4, r4, #2
 80048dc:	2500      	movs	r5, #0
 80048de:	42a5      	cmp	r5, r4
 80048e0:	d105      	bne.n	80048ee <__libc_init_array+0x2e>
 80048e2:	bd70      	pop	{r4, r5, r6, pc}
 80048e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80048e8:	4798      	blx	r3
 80048ea:	3501      	adds	r5, #1
 80048ec:	e7ee      	b.n	80048cc <__libc_init_array+0xc>
 80048ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80048f2:	4798      	blx	r3
 80048f4:	3501      	adds	r5, #1
 80048f6:	e7f2      	b.n	80048de <__libc_init_array+0x1e>
 80048f8:	080055dc 	.word	0x080055dc
 80048fc:	080055dc 	.word	0x080055dc
 8004900:	080055dc 	.word	0x080055dc
 8004904:	080055e0 	.word	0x080055e0

08004908 <memset>:
 8004908:	4402      	add	r2, r0
 800490a:	4603      	mov	r3, r0
 800490c:	4293      	cmp	r3, r2
 800490e:	d100      	bne.n	8004912 <memset+0xa>
 8004910:	4770      	bx	lr
 8004912:	f803 1b01 	strb.w	r1, [r3], #1
 8004916:	e7f9      	b.n	800490c <memset+0x4>

08004918 <siprintf>:
 8004918:	b40e      	push	{r1, r2, r3}
 800491a:	b500      	push	{lr}
 800491c:	b09c      	sub	sp, #112	; 0x70
 800491e:	ab1d      	add	r3, sp, #116	; 0x74
 8004920:	9002      	str	r0, [sp, #8]
 8004922:	9006      	str	r0, [sp, #24]
 8004924:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004928:	4809      	ldr	r0, [pc, #36]	; (8004950 <siprintf+0x38>)
 800492a:	9107      	str	r1, [sp, #28]
 800492c:	9104      	str	r1, [sp, #16]
 800492e:	4909      	ldr	r1, [pc, #36]	; (8004954 <siprintf+0x3c>)
 8004930:	f853 2b04 	ldr.w	r2, [r3], #4
 8004934:	9105      	str	r1, [sp, #20]
 8004936:	6800      	ldr	r0, [r0, #0]
 8004938:	9301      	str	r3, [sp, #4]
 800493a:	a902      	add	r1, sp, #8
 800493c:	f000 f866 	bl	8004a0c <_svfiprintf_r>
 8004940:	9b02      	ldr	r3, [sp, #8]
 8004942:	2200      	movs	r2, #0
 8004944:	701a      	strb	r2, [r3, #0]
 8004946:	b01c      	add	sp, #112	; 0x70
 8004948:	f85d eb04 	ldr.w	lr, [sp], #4
 800494c:	b003      	add	sp, #12
 800494e:	4770      	bx	lr
 8004950:	20000030 	.word	0x20000030
 8004954:	ffff0208 	.word	0xffff0208

08004958 <__ssputs_r>:
 8004958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800495c:	688e      	ldr	r6, [r1, #8]
 800495e:	429e      	cmp	r6, r3
 8004960:	4682      	mov	sl, r0
 8004962:	460c      	mov	r4, r1
 8004964:	4690      	mov	r8, r2
 8004966:	4699      	mov	r9, r3
 8004968:	d837      	bhi.n	80049da <__ssputs_r+0x82>
 800496a:	898a      	ldrh	r2, [r1, #12]
 800496c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004970:	d031      	beq.n	80049d6 <__ssputs_r+0x7e>
 8004972:	6825      	ldr	r5, [r4, #0]
 8004974:	6909      	ldr	r1, [r1, #16]
 8004976:	1a6f      	subs	r7, r5, r1
 8004978:	6965      	ldr	r5, [r4, #20]
 800497a:	2302      	movs	r3, #2
 800497c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004980:	fb95 f5f3 	sdiv	r5, r5, r3
 8004984:	f109 0301 	add.w	r3, r9, #1
 8004988:	443b      	add	r3, r7
 800498a:	429d      	cmp	r5, r3
 800498c:	bf38      	it	cc
 800498e:	461d      	movcc	r5, r3
 8004990:	0553      	lsls	r3, r2, #21
 8004992:	d530      	bpl.n	80049f6 <__ssputs_r+0x9e>
 8004994:	4629      	mov	r1, r5
 8004996:	f000 fb2b 	bl	8004ff0 <_malloc_r>
 800499a:	4606      	mov	r6, r0
 800499c:	b950      	cbnz	r0, 80049b4 <__ssputs_r+0x5c>
 800499e:	230c      	movs	r3, #12
 80049a0:	f8ca 3000 	str.w	r3, [sl]
 80049a4:	89a3      	ldrh	r3, [r4, #12]
 80049a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049aa:	81a3      	strh	r3, [r4, #12]
 80049ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049b4:	463a      	mov	r2, r7
 80049b6:	6921      	ldr	r1, [r4, #16]
 80049b8:	f000 faa8 	bl	8004f0c <memcpy>
 80049bc:	89a3      	ldrh	r3, [r4, #12]
 80049be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80049c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049c6:	81a3      	strh	r3, [r4, #12]
 80049c8:	6126      	str	r6, [r4, #16]
 80049ca:	6165      	str	r5, [r4, #20]
 80049cc:	443e      	add	r6, r7
 80049ce:	1bed      	subs	r5, r5, r7
 80049d0:	6026      	str	r6, [r4, #0]
 80049d2:	60a5      	str	r5, [r4, #8]
 80049d4:	464e      	mov	r6, r9
 80049d6:	454e      	cmp	r6, r9
 80049d8:	d900      	bls.n	80049dc <__ssputs_r+0x84>
 80049da:	464e      	mov	r6, r9
 80049dc:	4632      	mov	r2, r6
 80049de:	4641      	mov	r1, r8
 80049e0:	6820      	ldr	r0, [r4, #0]
 80049e2:	f000 fa9e 	bl	8004f22 <memmove>
 80049e6:	68a3      	ldr	r3, [r4, #8]
 80049e8:	1b9b      	subs	r3, r3, r6
 80049ea:	60a3      	str	r3, [r4, #8]
 80049ec:	6823      	ldr	r3, [r4, #0]
 80049ee:	441e      	add	r6, r3
 80049f0:	6026      	str	r6, [r4, #0]
 80049f2:	2000      	movs	r0, #0
 80049f4:	e7dc      	b.n	80049b0 <__ssputs_r+0x58>
 80049f6:	462a      	mov	r2, r5
 80049f8:	f000 fb54 	bl	80050a4 <_realloc_r>
 80049fc:	4606      	mov	r6, r0
 80049fe:	2800      	cmp	r0, #0
 8004a00:	d1e2      	bne.n	80049c8 <__ssputs_r+0x70>
 8004a02:	6921      	ldr	r1, [r4, #16]
 8004a04:	4650      	mov	r0, sl
 8004a06:	f000 faa5 	bl	8004f54 <_free_r>
 8004a0a:	e7c8      	b.n	800499e <__ssputs_r+0x46>

08004a0c <_svfiprintf_r>:
 8004a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a10:	461d      	mov	r5, r3
 8004a12:	898b      	ldrh	r3, [r1, #12]
 8004a14:	061f      	lsls	r7, r3, #24
 8004a16:	b09d      	sub	sp, #116	; 0x74
 8004a18:	4680      	mov	r8, r0
 8004a1a:	460c      	mov	r4, r1
 8004a1c:	4616      	mov	r6, r2
 8004a1e:	d50f      	bpl.n	8004a40 <_svfiprintf_r+0x34>
 8004a20:	690b      	ldr	r3, [r1, #16]
 8004a22:	b96b      	cbnz	r3, 8004a40 <_svfiprintf_r+0x34>
 8004a24:	2140      	movs	r1, #64	; 0x40
 8004a26:	f000 fae3 	bl	8004ff0 <_malloc_r>
 8004a2a:	6020      	str	r0, [r4, #0]
 8004a2c:	6120      	str	r0, [r4, #16]
 8004a2e:	b928      	cbnz	r0, 8004a3c <_svfiprintf_r+0x30>
 8004a30:	230c      	movs	r3, #12
 8004a32:	f8c8 3000 	str.w	r3, [r8]
 8004a36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a3a:	e0c8      	b.n	8004bce <_svfiprintf_r+0x1c2>
 8004a3c:	2340      	movs	r3, #64	; 0x40
 8004a3e:	6163      	str	r3, [r4, #20]
 8004a40:	2300      	movs	r3, #0
 8004a42:	9309      	str	r3, [sp, #36]	; 0x24
 8004a44:	2320      	movs	r3, #32
 8004a46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a4a:	2330      	movs	r3, #48	; 0x30
 8004a4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a50:	9503      	str	r5, [sp, #12]
 8004a52:	f04f 0b01 	mov.w	fp, #1
 8004a56:	4637      	mov	r7, r6
 8004a58:	463d      	mov	r5, r7
 8004a5a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004a5e:	b10b      	cbz	r3, 8004a64 <_svfiprintf_r+0x58>
 8004a60:	2b25      	cmp	r3, #37	; 0x25
 8004a62:	d13e      	bne.n	8004ae2 <_svfiprintf_r+0xd6>
 8004a64:	ebb7 0a06 	subs.w	sl, r7, r6
 8004a68:	d00b      	beq.n	8004a82 <_svfiprintf_r+0x76>
 8004a6a:	4653      	mov	r3, sl
 8004a6c:	4632      	mov	r2, r6
 8004a6e:	4621      	mov	r1, r4
 8004a70:	4640      	mov	r0, r8
 8004a72:	f7ff ff71 	bl	8004958 <__ssputs_r>
 8004a76:	3001      	adds	r0, #1
 8004a78:	f000 80a4 	beq.w	8004bc4 <_svfiprintf_r+0x1b8>
 8004a7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a7e:	4453      	add	r3, sl
 8004a80:	9309      	str	r3, [sp, #36]	; 0x24
 8004a82:	783b      	ldrb	r3, [r7, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 809d 	beq.w	8004bc4 <_svfiprintf_r+0x1b8>
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a94:	9304      	str	r3, [sp, #16]
 8004a96:	9307      	str	r3, [sp, #28]
 8004a98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a9c:	931a      	str	r3, [sp, #104]	; 0x68
 8004a9e:	462f      	mov	r7, r5
 8004aa0:	2205      	movs	r2, #5
 8004aa2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004aa6:	4850      	ldr	r0, [pc, #320]	; (8004be8 <_svfiprintf_r+0x1dc>)
 8004aa8:	f7fb fba2 	bl	80001f0 <memchr>
 8004aac:	9b04      	ldr	r3, [sp, #16]
 8004aae:	b9d0      	cbnz	r0, 8004ae6 <_svfiprintf_r+0xda>
 8004ab0:	06d9      	lsls	r1, r3, #27
 8004ab2:	bf44      	itt	mi
 8004ab4:	2220      	movmi	r2, #32
 8004ab6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004aba:	071a      	lsls	r2, r3, #28
 8004abc:	bf44      	itt	mi
 8004abe:	222b      	movmi	r2, #43	; 0x2b
 8004ac0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004ac4:	782a      	ldrb	r2, [r5, #0]
 8004ac6:	2a2a      	cmp	r2, #42	; 0x2a
 8004ac8:	d015      	beq.n	8004af6 <_svfiprintf_r+0xea>
 8004aca:	9a07      	ldr	r2, [sp, #28]
 8004acc:	462f      	mov	r7, r5
 8004ace:	2000      	movs	r0, #0
 8004ad0:	250a      	movs	r5, #10
 8004ad2:	4639      	mov	r1, r7
 8004ad4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ad8:	3b30      	subs	r3, #48	; 0x30
 8004ada:	2b09      	cmp	r3, #9
 8004adc:	d94d      	bls.n	8004b7a <_svfiprintf_r+0x16e>
 8004ade:	b1b8      	cbz	r0, 8004b10 <_svfiprintf_r+0x104>
 8004ae0:	e00f      	b.n	8004b02 <_svfiprintf_r+0xf6>
 8004ae2:	462f      	mov	r7, r5
 8004ae4:	e7b8      	b.n	8004a58 <_svfiprintf_r+0x4c>
 8004ae6:	4a40      	ldr	r2, [pc, #256]	; (8004be8 <_svfiprintf_r+0x1dc>)
 8004ae8:	1a80      	subs	r0, r0, r2
 8004aea:	fa0b f000 	lsl.w	r0, fp, r0
 8004aee:	4318      	orrs	r0, r3
 8004af0:	9004      	str	r0, [sp, #16]
 8004af2:	463d      	mov	r5, r7
 8004af4:	e7d3      	b.n	8004a9e <_svfiprintf_r+0x92>
 8004af6:	9a03      	ldr	r2, [sp, #12]
 8004af8:	1d11      	adds	r1, r2, #4
 8004afa:	6812      	ldr	r2, [r2, #0]
 8004afc:	9103      	str	r1, [sp, #12]
 8004afe:	2a00      	cmp	r2, #0
 8004b00:	db01      	blt.n	8004b06 <_svfiprintf_r+0xfa>
 8004b02:	9207      	str	r2, [sp, #28]
 8004b04:	e004      	b.n	8004b10 <_svfiprintf_r+0x104>
 8004b06:	4252      	negs	r2, r2
 8004b08:	f043 0302 	orr.w	r3, r3, #2
 8004b0c:	9207      	str	r2, [sp, #28]
 8004b0e:	9304      	str	r3, [sp, #16]
 8004b10:	783b      	ldrb	r3, [r7, #0]
 8004b12:	2b2e      	cmp	r3, #46	; 0x2e
 8004b14:	d10c      	bne.n	8004b30 <_svfiprintf_r+0x124>
 8004b16:	787b      	ldrb	r3, [r7, #1]
 8004b18:	2b2a      	cmp	r3, #42	; 0x2a
 8004b1a:	d133      	bne.n	8004b84 <_svfiprintf_r+0x178>
 8004b1c:	9b03      	ldr	r3, [sp, #12]
 8004b1e:	1d1a      	adds	r2, r3, #4
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	9203      	str	r2, [sp, #12]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	bfb8      	it	lt
 8004b28:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004b2c:	3702      	adds	r7, #2
 8004b2e:	9305      	str	r3, [sp, #20]
 8004b30:	4d2e      	ldr	r5, [pc, #184]	; (8004bec <_svfiprintf_r+0x1e0>)
 8004b32:	7839      	ldrb	r1, [r7, #0]
 8004b34:	2203      	movs	r2, #3
 8004b36:	4628      	mov	r0, r5
 8004b38:	f7fb fb5a 	bl	80001f0 <memchr>
 8004b3c:	b138      	cbz	r0, 8004b4e <_svfiprintf_r+0x142>
 8004b3e:	2340      	movs	r3, #64	; 0x40
 8004b40:	1b40      	subs	r0, r0, r5
 8004b42:	fa03 f000 	lsl.w	r0, r3, r0
 8004b46:	9b04      	ldr	r3, [sp, #16]
 8004b48:	4303      	orrs	r3, r0
 8004b4a:	3701      	adds	r7, #1
 8004b4c:	9304      	str	r3, [sp, #16]
 8004b4e:	7839      	ldrb	r1, [r7, #0]
 8004b50:	4827      	ldr	r0, [pc, #156]	; (8004bf0 <_svfiprintf_r+0x1e4>)
 8004b52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b56:	2206      	movs	r2, #6
 8004b58:	1c7e      	adds	r6, r7, #1
 8004b5a:	f7fb fb49 	bl	80001f0 <memchr>
 8004b5e:	2800      	cmp	r0, #0
 8004b60:	d038      	beq.n	8004bd4 <_svfiprintf_r+0x1c8>
 8004b62:	4b24      	ldr	r3, [pc, #144]	; (8004bf4 <_svfiprintf_r+0x1e8>)
 8004b64:	bb13      	cbnz	r3, 8004bac <_svfiprintf_r+0x1a0>
 8004b66:	9b03      	ldr	r3, [sp, #12]
 8004b68:	3307      	adds	r3, #7
 8004b6a:	f023 0307 	bic.w	r3, r3, #7
 8004b6e:	3308      	adds	r3, #8
 8004b70:	9303      	str	r3, [sp, #12]
 8004b72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b74:	444b      	add	r3, r9
 8004b76:	9309      	str	r3, [sp, #36]	; 0x24
 8004b78:	e76d      	b.n	8004a56 <_svfiprintf_r+0x4a>
 8004b7a:	fb05 3202 	mla	r2, r5, r2, r3
 8004b7e:	2001      	movs	r0, #1
 8004b80:	460f      	mov	r7, r1
 8004b82:	e7a6      	b.n	8004ad2 <_svfiprintf_r+0xc6>
 8004b84:	2300      	movs	r3, #0
 8004b86:	3701      	adds	r7, #1
 8004b88:	9305      	str	r3, [sp, #20]
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	250a      	movs	r5, #10
 8004b8e:	4638      	mov	r0, r7
 8004b90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b94:	3a30      	subs	r2, #48	; 0x30
 8004b96:	2a09      	cmp	r2, #9
 8004b98:	d903      	bls.n	8004ba2 <_svfiprintf_r+0x196>
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d0c8      	beq.n	8004b30 <_svfiprintf_r+0x124>
 8004b9e:	9105      	str	r1, [sp, #20]
 8004ba0:	e7c6      	b.n	8004b30 <_svfiprintf_r+0x124>
 8004ba2:	fb05 2101 	mla	r1, r5, r1, r2
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	4607      	mov	r7, r0
 8004baa:	e7f0      	b.n	8004b8e <_svfiprintf_r+0x182>
 8004bac:	ab03      	add	r3, sp, #12
 8004bae:	9300      	str	r3, [sp, #0]
 8004bb0:	4622      	mov	r2, r4
 8004bb2:	4b11      	ldr	r3, [pc, #68]	; (8004bf8 <_svfiprintf_r+0x1ec>)
 8004bb4:	a904      	add	r1, sp, #16
 8004bb6:	4640      	mov	r0, r8
 8004bb8:	f3af 8000 	nop.w
 8004bbc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004bc0:	4681      	mov	r9, r0
 8004bc2:	d1d6      	bne.n	8004b72 <_svfiprintf_r+0x166>
 8004bc4:	89a3      	ldrh	r3, [r4, #12]
 8004bc6:	065b      	lsls	r3, r3, #25
 8004bc8:	f53f af35 	bmi.w	8004a36 <_svfiprintf_r+0x2a>
 8004bcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004bce:	b01d      	add	sp, #116	; 0x74
 8004bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bd4:	ab03      	add	r3, sp, #12
 8004bd6:	9300      	str	r3, [sp, #0]
 8004bd8:	4622      	mov	r2, r4
 8004bda:	4b07      	ldr	r3, [pc, #28]	; (8004bf8 <_svfiprintf_r+0x1ec>)
 8004bdc:	a904      	add	r1, sp, #16
 8004bde:	4640      	mov	r0, r8
 8004be0:	f000 f882 	bl	8004ce8 <_printf_i>
 8004be4:	e7ea      	b.n	8004bbc <_svfiprintf_r+0x1b0>
 8004be6:	bf00      	nop
 8004be8:	080055a0 	.word	0x080055a0
 8004bec:	080055a6 	.word	0x080055a6
 8004bf0:	080055aa 	.word	0x080055aa
 8004bf4:	00000000 	.word	0x00000000
 8004bf8:	08004959 	.word	0x08004959

08004bfc <_printf_common>:
 8004bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c00:	4691      	mov	r9, r2
 8004c02:	461f      	mov	r7, r3
 8004c04:	688a      	ldr	r2, [r1, #8]
 8004c06:	690b      	ldr	r3, [r1, #16]
 8004c08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	bfb8      	it	lt
 8004c10:	4613      	movlt	r3, r2
 8004c12:	f8c9 3000 	str.w	r3, [r9]
 8004c16:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c1a:	4606      	mov	r6, r0
 8004c1c:	460c      	mov	r4, r1
 8004c1e:	b112      	cbz	r2, 8004c26 <_printf_common+0x2a>
 8004c20:	3301      	adds	r3, #1
 8004c22:	f8c9 3000 	str.w	r3, [r9]
 8004c26:	6823      	ldr	r3, [r4, #0]
 8004c28:	0699      	lsls	r1, r3, #26
 8004c2a:	bf42      	ittt	mi
 8004c2c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004c30:	3302      	addmi	r3, #2
 8004c32:	f8c9 3000 	strmi.w	r3, [r9]
 8004c36:	6825      	ldr	r5, [r4, #0]
 8004c38:	f015 0506 	ands.w	r5, r5, #6
 8004c3c:	d107      	bne.n	8004c4e <_printf_common+0x52>
 8004c3e:	f104 0a19 	add.w	sl, r4, #25
 8004c42:	68e3      	ldr	r3, [r4, #12]
 8004c44:	f8d9 2000 	ldr.w	r2, [r9]
 8004c48:	1a9b      	subs	r3, r3, r2
 8004c4a:	42ab      	cmp	r3, r5
 8004c4c:	dc28      	bgt.n	8004ca0 <_printf_common+0xa4>
 8004c4e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004c52:	6822      	ldr	r2, [r4, #0]
 8004c54:	3300      	adds	r3, #0
 8004c56:	bf18      	it	ne
 8004c58:	2301      	movne	r3, #1
 8004c5a:	0692      	lsls	r2, r2, #26
 8004c5c:	d42d      	bmi.n	8004cba <_printf_common+0xbe>
 8004c5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c62:	4639      	mov	r1, r7
 8004c64:	4630      	mov	r0, r6
 8004c66:	47c0      	blx	r8
 8004c68:	3001      	adds	r0, #1
 8004c6a:	d020      	beq.n	8004cae <_printf_common+0xb2>
 8004c6c:	6823      	ldr	r3, [r4, #0]
 8004c6e:	68e5      	ldr	r5, [r4, #12]
 8004c70:	f8d9 2000 	ldr.w	r2, [r9]
 8004c74:	f003 0306 	and.w	r3, r3, #6
 8004c78:	2b04      	cmp	r3, #4
 8004c7a:	bf08      	it	eq
 8004c7c:	1aad      	subeq	r5, r5, r2
 8004c7e:	68a3      	ldr	r3, [r4, #8]
 8004c80:	6922      	ldr	r2, [r4, #16]
 8004c82:	bf0c      	ite	eq
 8004c84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c88:	2500      	movne	r5, #0
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	bfc4      	itt	gt
 8004c8e:	1a9b      	subgt	r3, r3, r2
 8004c90:	18ed      	addgt	r5, r5, r3
 8004c92:	f04f 0900 	mov.w	r9, #0
 8004c96:	341a      	adds	r4, #26
 8004c98:	454d      	cmp	r5, r9
 8004c9a:	d11a      	bne.n	8004cd2 <_printf_common+0xd6>
 8004c9c:	2000      	movs	r0, #0
 8004c9e:	e008      	b.n	8004cb2 <_printf_common+0xb6>
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	4652      	mov	r2, sl
 8004ca4:	4639      	mov	r1, r7
 8004ca6:	4630      	mov	r0, r6
 8004ca8:	47c0      	blx	r8
 8004caa:	3001      	adds	r0, #1
 8004cac:	d103      	bne.n	8004cb6 <_printf_common+0xba>
 8004cae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cb6:	3501      	adds	r5, #1
 8004cb8:	e7c3      	b.n	8004c42 <_printf_common+0x46>
 8004cba:	18e1      	adds	r1, r4, r3
 8004cbc:	1c5a      	adds	r2, r3, #1
 8004cbe:	2030      	movs	r0, #48	; 0x30
 8004cc0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004cc4:	4422      	add	r2, r4
 8004cc6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004cca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004cce:	3302      	adds	r3, #2
 8004cd0:	e7c5      	b.n	8004c5e <_printf_common+0x62>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	4622      	mov	r2, r4
 8004cd6:	4639      	mov	r1, r7
 8004cd8:	4630      	mov	r0, r6
 8004cda:	47c0      	blx	r8
 8004cdc:	3001      	adds	r0, #1
 8004cde:	d0e6      	beq.n	8004cae <_printf_common+0xb2>
 8004ce0:	f109 0901 	add.w	r9, r9, #1
 8004ce4:	e7d8      	b.n	8004c98 <_printf_common+0x9c>
	...

08004ce8 <_printf_i>:
 8004ce8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004cec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004cf0:	460c      	mov	r4, r1
 8004cf2:	7e09      	ldrb	r1, [r1, #24]
 8004cf4:	b085      	sub	sp, #20
 8004cf6:	296e      	cmp	r1, #110	; 0x6e
 8004cf8:	4617      	mov	r7, r2
 8004cfa:	4606      	mov	r6, r0
 8004cfc:	4698      	mov	r8, r3
 8004cfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004d00:	f000 80b3 	beq.w	8004e6a <_printf_i+0x182>
 8004d04:	d822      	bhi.n	8004d4c <_printf_i+0x64>
 8004d06:	2963      	cmp	r1, #99	; 0x63
 8004d08:	d036      	beq.n	8004d78 <_printf_i+0x90>
 8004d0a:	d80a      	bhi.n	8004d22 <_printf_i+0x3a>
 8004d0c:	2900      	cmp	r1, #0
 8004d0e:	f000 80b9 	beq.w	8004e84 <_printf_i+0x19c>
 8004d12:	2958      	cmp	r1, #88	; 0x58
 8004d14:	f000 8083 	beq.w	8004e1e <_printf_i+0x136>
 8004d18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d1c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004d20:	e032      	b.n	8004d88 <_printf_i+0xa0>
 8004d22:	2964      	cmp	r1, #100	; 0x64
 8004d24:	d001      	beq.n	8004d2a <_printf_i+0x42>
 8004d26:	2969      	cmp	r1, #105	; 0x69
 8004d28:	d1f6      	bne.n	8004d18 <_printf_i+0x30>
 8004d2a:	6820      	ldr	r0, [r4, #0]
 8004d2c:	6813      	ldr	r3, [r2, #0]
 8004d2e:	0605      	lsls	r5, r0, #24
 8004d30:	f103 0104 	add.w	r1, r3, #4
 8004d34:	d52a      	bpl.n	8004d8c <_printf_i+0xa4>
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6011      	str	r1, [r2, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	da03      	bge.n	8004d46 <_printf_i+0x5e>
 8004d3e:	222d      	movs	r2, #45	; 0x2d
 8004d40:	425b      	negs	r3, r3
 8004d42:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004d46:	486f      	ldr	r0, [pc, #444]	; (8004f04 <_printf_i+0x21c>)
 8004d48:	220a      	movs	r2, #10
 8004d4a:	e039      	b.n	8004dc0 <_printf_i+0xd8>
 8004d4c:	2973      	cmp	r1, #115	; 0x73
 8004d4e:	f000 809d 	beq.w	8004e8c <_printf_i+0x1a4>
 8004d52:	d808      	bhi.n	8004d66 <_printf_i+0x7e>
 8004d54:	296f      	cmp	r1, #111	; 0x6f
 8004d56:	d020      	beq.n	8004d9a <_printf_i+0xb2>
 8004d58:	2970      	cmp	r1, #112	; 0x70
 8004d5a:	d1dd      	bne.n	8004d18 <_printf_i+0x30>
 8004d5c:	6823      	ldr	r3, [r4, #0]
 8004d5e:	f043 0320 	orr.w	r3, r3, #32
 8004d62:	6023      	str	r3, [r4, #0]
 8004d64:	e003      	b.n	8004d6e <_printf_i+0x86>
 8004d66:	2975      	cmp	r1, #117	; 0x75
 8004d68:	d017      	beq.n	8004d9a <_printf_i+0xb2>
 8004d6a:	2978      	cmp	r1, #120	; 0x78
 8004d6c:	d1d4      	bne.n	8004d18 <_printf_i+0x30>
 8004d6e:	2378      	movs	r3, #120	; 0x78
 8004d70:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d74:	4864      	ldr	r0, [pc, #400]	; (8004f08 <_printf_i+0x220>)
 8004d76:	e055      	b.n	8004e24 <_printf_i+0x13c>
 8004d78:	6813      	ldr	r3, [r2, #0]
 8004d7a:	1d19      	adds	r1, r3, #4
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	6011      	str	r1, [r2, #0]
 8004d80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e08c      	b.n	8004ea6 <_printf_i+0x1be>
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	6011      	str	r1, [r2, #0]
 8004d90:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004d94:	bf18      	it	ne
 8004d96:	b21b      	sxthne	r3, r3
 8004d98:	e7cf      	b.n	8004d3a <_printf_i+0x52>
 8004d9a:	6813      	ldr	r3, [r2, #0]
 8004d9c:	6825      	ldr	r5, [r4, #0]
 8004d9e:	1d18      	adds	r0, r3, #4
 8004da0:	6010      	str	r0, [r2, #0]
 8004da2:	0628      	lsls	r0, r5, #24
 8004da4:	d501      	bpl.n	8004daa <_printf_i+0xc2>
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	e002      	b.n	8004db0 <_printf_i+0xc8>
 8004daa:	0668      	lsls	r0, r5, #25
 8004dac:	d5fb      	bpl.n	8004da6 <_printf_i+0xbe>
 8004dae:	881b      	ldrh	r3, [r3, #0]
 8004db0:	4854      	ldr	r0, [pc, #336]	; (8004f04 <_printf_i+0x21c>)
 8004db2:	296f      	cmp	r1, #111	; 0x6f
 8004db4:	bf14      	ite	ne
 8004db6:	220a      	movne	r2, #10
 8004db8:	2208      	moveq	r2, #8
 8004dba:	2100      	movs	r1, #0
 8004dbc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004dc0:	6865      	ldr	r5, [r4, #4]
 8004dc2:	60a5      	str	r5, [r4, #8]
 8004dc4:	2d00      	cmp	r5, #0
 8004dc6:	f2c0 8095 	blt.w	8004ef4 <_printf_i+0x20c>
 8004dca:	6821      	ldr	r1, [r4, #0]
 8004dcc:	f021 0104 	bic.w	r1, r1, #4
 8004dd0:	6021      	str	r1, [r4, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d13d      	bne.n	8004e52 <_printf_i+0x16a>
 8004dd6:	2d00      	cmp	r5, #0
 8004dd8:	f040 808e 	bne.w	8004ef8 <_printf_i+0x210>
 8004ddc:	4665      	mov	r5, ip
 8004dde:	2a08      	cmp	r2, #8
 8004de0:	d10b      	bne.n	8004dfa <_printf_i+0x112>
 8004de2:	6823      	ldr	r3, [r4, #0]
 8004de4:	07db      	lsls	r3, r3, #31
 8004de6:	d508      	bpl.n	8004dfa <_printf_i+0x112>
 8004de8:	6923      	ldr	r3, [r4, #16]
 8004dea:	6862      	ldr	r2, [r4, #4]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	bfde      	ittt	le
 8004df0:	2330      	movle	r3, #48	; 0x30
 8004df2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004df6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004dfa:	ebac 0305 	sub.w	r3, ip, r5
 8004dfe:	6123      	str	r3, [r4, #16]
 8004e00:	f8cd 8000 	str.w	r8, [sp]
 8004e04:	463b      	mov	r3, r7
 8004e06:	aa03      	add	r2, sp, #12
 8004e08:	4621      	mov	r1, r4
 8004e0a:	4630      	mov	r0, r6
 8004e0c:	f7ff fef6 	bl	8004bfc <_printf_common>
 8004e10:	3001      	adds	r0, #1
 8004e12:	d14d      	bne.n	8004eb0 <_printf_i+0x1c8>
 8004e14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e18:	b005      	add	sp, #20
 8004e1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e1e:	4839      	ldr	r0, [pc, #228]	; (8004f04 <_printf_i+0x21c>)
 8004e20:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004e24:	6813      	ldr	r3, [r2, #0]
 8004e26:	6821      	ldr	r1, [r4, #0]
 8004e28:	1d1d      	adds	r5, r3, #4
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	6015      	str	r5, [r2, #0]
 8004e2e:	060a      	lsls	r2, r1, #24
 8004e30:	d50b      	bpl.n	8004e4a <_printf_i+0x162>
 8004e32:	07ca      	lsls	r2, r1, #31
 8004e34:	bf44      	itt	mi
 8004e36:	f041 0120 	orrmi.w	r1, r1, #32
 8004e3a:	6021      	strmi	r1, [r4, #0]
 8004e3c:	b91b      	cbnz	r3, 8004e46 <_printf_i+0x15e>
 8004e3e:	6822      	ldr	r2, [r4, #0]
 8004e40:	f022 0220 	bic.w	r2, r2, #32
 8004e44:	6022      	str	r2, [r4, #0]
 8004e46:	2210      	movs	r2, #16
 8004e48:	e7b7      	b.n	8004dba <_printf_i+0xd2>
 8004e4a:	064d      	lsls	r5, r1, #25
 8004e4c:	bf48      	it	mi
 8004e4e:	b29b      	uxthmi	r3, r3
 8004e50:	e7ef      	b.n	8004e32 <_printf_i+0x14a>
 8004e52:	4665      	mov	r5, ip
 8004e54:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e58:	fb02 3311 	mls	r3, r2, r1, r3
 8004e5c:	5cc3      	ldrb	r3, [r0, r3]
 8004e5e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004e62:	460b      	mov	r3, r1
 8004e64:	2900      	cmp	r1, #0
 8004e66:	d1f5      	bne.n	8004e54 <_printf_i+0x16c>
 8004e68:	e7b9      	b.n	8004dde <_printf_i+0xf6>
 8004e6a:	6813      	ldr	r3, [r2, #0]
 8004e6c:	6825      	ldr	r5, [r4, #0]
 8004e6e:	6961      	ldr	r1, [r4, #20]
 8004e70:	1d18      	adds	r0, r3, #4
 8004e72:	6010      	str	r0, [r2, #0]
 8004e74:	0628      	lsls	r0, r5, #24
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	d501      	bpl.n	8004e7e <_printf_i+0x196>
 8004e7a:	6019      	str	r1, [r3, #0]
 8004e7c:	e002      	b.n	8004e84 <_printf_i+0x19c>
 8004e7e:	066a      	lsls	r2, r5, #25
 8004e80:	d5fb      	bpl.n	8004e7a <_printf_i+0x192>
 8004e82:	8019      	strh	r1, [r3, #0]
 8004e84:	2300      	movs	r3, #0
 8004e86:	6123      	str	r3, [r4, #16]
 8004e88:	4665      	mov	r5, ip
 8004e8a:	e7b9      	b.n	8004e00 <_printf_i+0x118>
 8004e8c:	6813      	ldr	r3, [r2, #0]
 8004e8e:	1d19      	adds	r1, r3, #4
 8004e90:	6011      	str	r1, [r2, #0]
 8004e92:	681d      	ldr	r5, [r3, #0]
 8004e94:	6862      	ldr	r2, [r4, #4]
 8004e96:	2100      	movs	r1, #0
 8004e98:	4628      	mov	r0, r5
 8004e9a:	f7fb f9a9 	bl	80001f0 <memchr>
 8004e9e:	b108      	cbz	r0, 8004ea4 <_printf_i+0x1bc>
 8004ea0:	1b40      	subs	r0, r0, r5
 8004ea2:	6060      	str	r0, [r4, #4]
 8004ea4:	6863      	ldr	r3, [r4, #4]
 8004ea6:	6123      	str	r3, [r4, #16]
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004eae:	e7a7      	b.n	8004e00 <_printf_i+0x118>
 8004eb0:	6923      	ldr	r3, [r4, #16]
 8004eb2:	462a      	mov	r2, r5
 8004eb4:	4639      	mov	r1, r7
 8004eb6:	4630      	mov	r0, r6
 8004eb8:	47c0      	blx	r8
 8004eba:	3001      	adds	r0, #1
 8004ebc:	d0aa      	beq.n	8004e14 <_printf_i+0x12c>
 8004ebe:	6823      	ldr	r3, [r4, #0]
 8004ec0:	079b      	lsls	r3, r3, #30
 8004ec2:	d413      	bmi.n	8004eec <_printf_i+0x204>
 8004ec4:	68e0      	ldr	r0, [r4, #12]
 8004ec6:	9b03      	ldr	r3, [sp, #12]
 8004ec8:	4298      	cmp	r0, r3
 8004eca:	bfb8      	it	lt
 8004ecc:	4618      	movlt	r0, r3
 8004ece:	e7a3      	b.n	8004e18 <_printf_i+0x130>
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	464a      	mov	r2, r9
 8004ed4:	4639      	mov	r1, r7
 8004ed6:	4630      	mov	r0, r6
 8004ed8:	47c0      	blx	r8
 8004eda:	3001      	adds	r0, #1
 8004edc:	d09a      	beq.n	8004e14 <_printf_i+0x12c>
 8004ede:	3501      	adds	r5, #1
 8004ee0:	68e3      	ldr	r3, [r4, #12]
 8004ee2:	9a03      	ldr	r2, [sp, #12]
 8004ee4:	1a9b      	subs	r3, r3, r2
 8004ee6:	42ab      	cmp	r3, r5
 8004ee8:	dcf2      	bgt.n	8004ed0 <_printf_i+0x1e8>
 8004eea:	e7eb      	b.n	8004ec4 <_printf_i+0x1dc>
 8004eec:	2500      	movs	r5, #0
 8004eee:	f104 0919 	add.w	r9, r4, #25
 8004ef2:	e7f5      	b.n	8004ee0 <_printf_i+0x1f8>
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1ac      	bne.n	8004e52 <_printf_i+0x16a>
 8004ef8:	7803      	ldrb	r3, [r0, #0]
 8004efa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004efe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f02:	e76c      	b.n	8004dde <_printf_i+0xf6>
 8004f04:	080055b1 	.word	0x080055b1
 8004f08:	080055c2 	.word	0x080055c2

08004f0c <memcpy>:
 8004f0c:	b510      	push	{r4, lr}
 8004f0e:	1e43      	subs	r3, r0, #1
 8004f10:	440a      	add	r2, r1
 8004f12:	4291      	cmp	r1, r2
 8004f14:	d100      	bne.n	8004f18 <memcpy+0xc>
 8004f16:	bd10      	pop	{r4, pc}
 8004f18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f20:	e7f7      	b.n	8004f12 <memcpy+0x6>

08004f22 <memmove>:
 8004f22:	4288      	cmp	r0, r1
 8004f24:	b510      	push	{r4, lr}
 8004f26:	eb01 0302 	add.w	r3, r1, r2
 8004f2a:	d807      	bhi.n	8004f3c <memmove+0x1a>
 8004f2c:	1e42      	subs	r2, r0, #1
 8004f2e:	4299      	cmp	r1, r3
 8004f30:	d00a      	beq.n	8004f48 <memmove+0x26>
 8004f32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f36:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004f3a:	e7f8      	b.n	8004f2e <memmove+0xc>
 8004f3c:	4283      	cmp	r3, r0
 8004f3e:	d9f5      	bls.n	8004f2c <memmove+0xa>
 8004f40:	1881      	adds	r1, r0, r2
 8004f42:	1ad2      	subs	r2, r2, r3
 8004f44:	42d3      	cmn	r3, r2
 8004f46:	d100      	bne.n	8004f4a <memmove+0x28>
 8004f48:	bd10      	pop	{r4, pc}
 8004f4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f4e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004f52:	e7f7      	b.n	8004f44 <memmove+0x22>

08004f54 <_free_r>:
 8004f54:	b538      	push	{r3, r4, r5, lr}
 8004f56:	4605      	mov	r5, r0
 8004f58:	2900      	cmp	r1, #0
 8004f5a:	d045      	beq.n	8004fe8 <_free_r+0x94>
 8004f5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f60:	1f0c      	subs	r4, r1, #4
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	bfb8      	it	lt
 8004f66:	18e4      	addlt	r4, r4, r3
 8004f68:	f000 f8d2 	bl	8005110 <__malloc_lock>
 8004f6c:	4a1f      	ldr	r2, [pc, #124]	; (8004fec <_free_r+0x98>)
 8004f6e:	6813      	ldr	r3, [r2, #0]
 8004f70:	4610      	mov	r0, r2
 8004f72:	b933      	cbnz	r3, 8004f82 <_free_r+0x2e>
 8004f74:	6063      	str	r3, [r4, #4]
 8004f76:	6014      	str	r4, [r2, #0]
 8004f78:	4628      	mov	r0, r5
 8004f7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f7e:	f000 b8c8 	b.w	8005112 <__malloc_unlock>
 8004f82:	42a3      	cmp	r3, r4
 8004f84:	d90c      	bls.n	8004fa0 <_free_r+0x4c>
 8004f86:	6821      	ldr	r1, [r4, #0]
 8004f88:	1862      	adds	r2, r4, r1
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	bf04      	itt	eq
 8004f8e:	681a      	ldreq	r2, [r3, #0]
 8004f90:	685b      	ldreq	r3, [r3, #4]
 8004f92:	6063      	str	r3, [r4, #4]
 8004f94:	bf04      	itt	eq
 8004f96:	1852      	addeq	r2, r2, r1
 8004f98:	6022      	streq	r2, [r4, #0]
 8004f9a:	6004      	str	r4, [r0, #0]
 8004f9c:	e7ec      	b.n	8004f78 <_free_r+0x24>
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	685a      	ldr	r2, [r3, #4]
 8004fa2:	b10a      	cbz	r2, 8004fa8 <_free_r+0x54>
 8004fa4:	42a2      	cmp	r2, r4
 8004fa6:	d9fa      	bls.n	8004f9e <_free_r+0x4a>
 8004fa8:	6819      	ldr	r1, [r3, #0]
 8004faa:	1858      	adds	r0, r3, r1
 8004fac:	42a0      	cmp	r0, r4
 8004fae:	d10b      	bne.n	8004fc8 <_free_r+0x74>
 8004fb0:	6820      	ldr	r0, [r4, #0]
 8004fb2:	4401      	add	r1, r0
 8004fb4:	1858      	adds	r0, r3, r1
 8004fb6:	4282      	cmp	r2, r0
 8004fb8:	6019      	str	r1, [r3, #0]
 8004fba:	d1dd      	bne.n	8004f78 <_free_r+0x24>
 8004fbc:	6810      	ldr	r0, [r2, #0]
 8004fbe:	6852      	ldr	r2, [r2, #4]
 8004fc0:	605a      	str	r2, [r3, #4]
 8004fc2:	4401      	add	r1, r0
 8004fc4:	6019      	str	r1, [r3, #0]
 8004fc6:	e7d7      	b.n	8004f78 <_free_r+0x24>
 8004fc8:	d902      	bls.n	8004fd0 <_free_r+0x7c>
 8004fca:	230c      	movs	r3, #12
 8004fcc:	602b      	str	r3, [r5, #0]
 8004fce:	e7d3      	b.n	8004f78 <_free_r+0x24>
 8004fd0:	6820      	ldr	r0, [r4, #0]
 8004fd2:	1821      	adds	r1, r4, r0
 8004fd4:	428a      	cmp	r2, r1
 8004fd6:	bf04      	itt	eq
 8004fd8:	6811      	ldreq	r1, [r2, #0]
 8004fda:	6852      	ldreq	r2, [r2, #4]
 8004fdc:	6062      	str	r2, [r4, #4]
 8004fde:	bf04      	itt	eq
 8004fe0:	1809      	addeq	r1, r1, r0
 8004fe2:	6021      	streq	r1, [r4, #0]
 8004fe4:	605c      	str	r4, [r3, #4]
 8004fe6:	e7c7      	b.n	8004f78 <_free_r+0x24>
 8004fe8:	bd38      	pop	{r3, r4, r5, pc}
 8004fea:	bf00      	nop
 8004fec:	200000b4 	.word	0x200000b4

08004ff0 <_malloc_r>:
 8004ff0:	b570      	push	{r4, r5, r6, lr}
 8004ff2:	1ccd      	adds	r5, r1, #3
 8004ff4:	f025 0503 	bic.w	r5, r5, #3
 8004ff8:	3508      	adds	r5, #8
 8004ffa:	2d0c      	cmp	r5, #12
 8004ffc:	bf38      	it	cc
 8004ffe:	250c      	movcc	r5, #12
 8005000:	2d00      	cmp	r5, #0
 8005002:	4606      	mov	r6, r0
 8005004:	db01      	blt.n	800500a <_malloc_r+0x1a>
 8005006:	42a9      	cmp	r1, r5
 8005008:	d903      	bls.n	8005012 <_malloc_r+0x22>
 800500a:	230c      	movs	r3, #12
 800500c:	6033      	str	r3, [r6, #0]
 800500e:	2000      	movs	r0, #0
 8005010:	bd70      	pop	{r4, r5, r6, pc}
 8005012:	f000 f87d 	bl	8005110 <__malloc_lock>
 8005016:	4a21      	ldr	r2, [pc, #132]	; (800509c <_malloc_r+0xac>)
 8005018:	6814      	ldr	r4, [r2, #0]
 800501a:	4621      	mov	r1, r4
 800501c:	b991      	cbnz	r1, 8005044 <_malloc_r+0x54>
 800501e:	4c20      	ldr	r4, [pc, #128]	; (80050a0 <_malloc_r+0xb0>)
 8005020:	6823      	ldr	r3, [r4, #0]
 8005022:	b91b      	cbnz	r3, 800502c <_malloc_r+0x3c>
 8005024:	4630      	mov	r0, r6
 8005026:	f000 f863 	bl	80050f0 <_sbrk_r>
 800502a:	6020      	str	r0, [r4, #0]
 800502c:	4629      	mov	r1, r5
 800502e:	4630      	mov	r0, r6
 8005030:	f000 f85e 	bl	80050f0 <_sbrk_r>
 8005034:	1c43      	adds	r3, r0, #1
 8005036:	d124      	bne.n	8005082 <_malloc_r+0x92>
 8005038:	230c      	movs	r3, #12
 800503a:	6033      	str	r3, [r6, #0]
 800503c:	4630      	mov	r0, r6
 800503e:	f000 f868 	bl	8005112 <__malloc_unlock>
 8005042:	e7e4      	b.n	800500e <_malloc_r+0x1e>
 8005044:	680b      	ldr	r3, [r1, #0]
 8005046:	1b5b      	subs	r3, r3, r5
 8005048:	d418      	bmi.n	800507c <_malloc_r+0x8c>
 800504a:	2b0b      	cmp	r3, #11
 800504c:	d90f      	bls.n	800506e <_malloc_r+0x7e>
 800504e:	600b      	str	r3, [r1, #0]
 8005050:	50cd      	str	r5, [r1, r3]
 8005052:	18cc      	adds	r4, r1, r3
 8005054:	4630      	mov	r0, r6
 8005056:	f000 f85c 	bl	8005112 <__malloc_unlock>
 800505a:	f104 000b 	add.w	r0, r4, #11
 800505e:	1d23      	adds	r3, r4, #4
 8005060:	f020 0007 	bic.w	r0, r0, #7
 8005064:	1ac3      	subs	r3, r0, r3
 8005066:	d0d3      	beq.n	8005010 <_malloc_r+0x20>
 8005068:	425a      	negs	r2, r3
 800506a:	50e2      	str	r2, [r4, r3]
 800506c:	e7d0      	b.n	8005010 <_malloc_r+0x20>
 800506e:	428c      	cmp	r4, r1
 8005070:	684b      	ldr	r3, [r1, #4]
 8005072:	bf16      	itet	ne
 8005074:	6063      	strne	r3, [r4, #4]
 8005076:	6013      	streq	r3, [r2, #0]
 8005078:	460c      	movne	r4, r1
 800507a:	e7eb      	b.n	8005054 <_malloc_r+0x64>
 800507c:	460c      	mov	r4, r1
 800507e:	6849      	ldr	r1, [r1, #4]
 8005080:	e7cc      	b.n	800501c <_malloc_r+0x2c>
 8005082:	1cc4      	adds	r4, r0, #3
 8005084:	f024 0403 	bic.w	r4, r4, #3
 8005088:	42a0      	cmp	r0, r4
 800508a:	d005      	beq.n	8005098 <_malloc_r+0xa8>
 800508c:	1a21      	subs	r1, r4, r0
 800508e:	4630      	mov	r0, r6
 8005090:	f000 f82e 	bl	80050f0 <_sbrk_r>
 8005094:	3001      	adds	r0, #1
 8005096:	d0cf      	beq.n	8005038 <_malloc_r+0x48>
 8005098:	6025      	str	r5, [r4, #0]
 800509a:	e7db      	b.n	8005054 <_malloc_r+0x64>
 800509c:	200000b4 	.word	0x200000b4
 80050a0:	200000b8 	.word	0x200000b8

080050a4 <_realloc_r>:
 80050a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050a6:	4607      	mov	r7, r0
 80050a8:	4614      	mov	r4, r2
 80050aa:	460e      	mov	r6, r1
 80050ac:	b921      	cbnz	r1, 80050b8 <_realloc_r+0x14>
 80050ae:	4611      	mov	r1, r2
 80050b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80050b4:	f7ff bf9c 	b.w	8004ff0 <_malloc_r>
 80050b8:	b922      	cbnz	r2, 80050c4 <_realloc_r+0x20>
 80050ba:	f7ff ff4b 	bl	8004f54 <_free_r>
 80050be:	4625      	mov	r5, r4
 80050c0:	4628      	mov	r0, r5
 80050c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050c4:	f000 f826 	bl	8005114 <_malloc_usable_size_r>
 80050c8:	42a0      	cmp	r0, r4
 80050ca:	d20f      	bcs.n	80050ec <_realloc_r+0x48>
 80050cc:	4621      	mov	r1, r4
 80050ce:	4638      	mov	r0, r7
 80050d0:	f7ff ff8e 	bl	8004ff0 <_malloc_r>
 80050d4:	4605      	mov	r5, r0
 80050d6:	2800      	cmp	r0, #0
 80050d8:	d0f2      	beq.n	80050c0 <_realloc_r+0x1c>
 80050da:	4631      	mov	r1, r6
 80050dc:	4622      	mov	r2, r4
 80050de:	f7ff ff15 	bl	8004f0c <memcpy>
 80050e2:	4631      	mov	r1, r6
 80050e4:	4638      	mov	r0, r7
 80050e6:	f7ff ff35 	bl	8004f54 <_free_r>
 80050ea:	e7e9      	b.n	80050c0 <_realloc_r+0x1c>
 80050ec:	4635      	mov	r5, r6
 80050ee:	e7e7      	b.n	80050c0 <_realloc_r+0x1c>

080050f0 <_sbrk_r>:
 80050f0:	b538      	push	{r3, r4, r5, lr}
 80050f2:	4c06      	ldr	r4, [pc, #24]	; (800510c <_sbrk_r+0x1c>)
 80050f4:	2300      	movs	r3, #0
 80050f6:	4605      	mov	r5, r0
 80050f8:	4608      	mov	r0, r1
 80050fa:	6023      	str	r3, [r4, #0]
 80050fc:	f7ff fb4e 	bl	800479c <_sbrk>
 8005100:	1c43      	adds	r3, r0, #1
 8005102:	d102      	bne.n	800510a <_sbrk_r+0x1a>
 8005104:	6823      	ldr	r3, [r4, #0]
 8005106:	b103      	cbz	r3, 800510a <_sbrk_r+0x1a>
 8005108:	602b      	str	r3, [r5, #0]
 800510a:	bd38      	pop	{r3, r4, r5, pc}
 800510c:	20000248 	.word	0x20000248

08005110 <__malloc_lock>:
 8005110:	4770      	bx	lr

08005112 <__malloc_unlock>:
 8005112:	4770      	bx	lr

08005114 <_malloc_usable_size_r>:
 8005114:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005118:	1f18      	subs	r0, r3, #4
 800511a:	2b00      	cmp	r3, #0
 800511c:	bfbc      	itt	lt
 800511e:	580b      	ldrlt	r3, [r1, r0]
 8005120:	18c0      	addlt	r0, r0, r3
 8005122:	4770      	bx	lr

08005124 <_init>:
 8005124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005126:	bf00      	nop
 8005128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800512a:	bc08      	pop	{r3}
 800512c:	469e      	mov	lr, r3
 800512e:	4770      	bx	lr

08005130 <_fini>:
 8005130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005132:	bf00      	nop
 8005134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005136:	bc08      	pop	{r3}
 8005138:	469e      	mov	lr, r3
 800513a:	4770      	bx	lr
