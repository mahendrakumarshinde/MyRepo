
APPLICATION_TEST_CODE_L496.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08060000  08060000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000304c  080601ac  080601ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080631f8  080631f8  000131f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0806325c  0806325c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0806325c  0806325c  0001325c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08063264  08063264  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08063264  08063264  00013264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08063268  08063268  00013268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0806326c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  2000000c  08063278  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08063278  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008bff  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000014a8  00000000  00000000  00028c3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000898  00000000  00000000  0002a0e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007e0  00000000  00000000  0002a980  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002742d  00000000  00000000  0002b160  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006bea  00000000  00000000  0005258d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f2823  00000000  00000000  00059177  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014b99a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000222c  00000000  00000000  0014ba18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080601ac <__do_global_dtors_aux>:
 80601ac:	b510      	push	{r4, lr}
 80601ae:	4c05      	ldr	r4, [pc, #20]	; (80601c4 <__do_global_dtors_aux+0x18>)
 80601b0:	7823      	ldrb	r3, [r4, #0]
 80601b2:	b933      	cbnz	r3, 80601c2 <__do_global_dtors_aux+0x16>
 80601b4:	4b04      	ldr	r3, [pc, #16]	; (80601c8 <__do_global_dtors_aux+0x1c>)
 80601b6:	b113      	cbz	r3, 80601be <__do_global_dtors_aux+0x12>
 80601b8:	4804      	ldr	r0, [pc, #16]	; (80601cc <__do_global_dtors_aux+0x20>)
 80601ba:	f3af 8000 	nop.w
 80601be:	2301      	movs	r3, #1
 80601c0:	7023      	strb	r3, [r4, #0]
 80601c2:	bd10      	pop	{r4, pc}
 80601c4:	2000000c 	.word	0x2000000c
 80601c8:	00000000 	.word	0x00000000
 80601cc:	080631e0 	.word	0x080631e0

080601d0 <frame_dummy>:
 80601d0:	b508      	push	{r3, lr}
 80601d2:	4b03      	ldr	r3, [pc, #12]	; (80601e0 <frame_dummy+0x10>)
 80601d4:	b11b      	cbz	r3, 80601de <frame_dummy+0xe>
 80601d6:	4903      	ldr	r1, [pc, #12]	; (80601e4 <frame_dummy+0x14>)
 80601d8:	4803      	ldr	r0, [pc, #12]	; (80601e8 <frame_dummy+0x18>)
 80601da:	f3af 8000 	nop.w
 80601de:	bd08      	pop	{r3, pc}
 80601e0:	00000000 	.word	0x00000000
 80601e4:	20000010 	.word	0x20000010
 80601e8:	080631e0 	.word	0x080631e0

080601ec <__aeabi_uldivmod>:
 80601ec:	b953      	cbnz	r3, 8060204 <__aeabi_uldivmod+0x18>
 80601ee:	b94a      	cbnz	r2, 8060204 <__aeabi_uldivmod+0x18>
 80601f0:	2900      	cmp	r1, #0
 80601f2:	bf08      	it	eq
 80601f4:	2800      	cmpeq	r0, #0
 80601f6:	bf1c      	itt	ne
 80601f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80601fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8060200:	f000 b972 	b.w	80604e8 <__aeabi_idiv0>
 8060204:	f1ad 0c08 	sub.w	ip, sp, #8
 8060208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 806020c:	f000 f806 	bl	806021c <__udivmoddi4>
 8060210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8060214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8060218:	b004      	add	sp, #16
 806021a:	4770      	bx	lr

0806021c <__udivmoddi4>:
 806021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8060220:	9e08      	ldr	r6, [sp, #32]
 8060222:	4604      	mov	r4, r0
 8060224:	4688      	mov	r8, r1
 8060226:	2b00      	cmp	r3, #0
 8060228:	d14b      	bne.n	80602c2 <__udivmoddi4+0xa6>
 806022a:	428a      	cmp	r2, r1
 806022c:	4615      	mov	r5, r2
 806022e:	d967      	bls.n	8060300 <__udivmoddi4+0xe4>
 8060230:	fab2 f282 	clz	r2, r2
 8060234:	b14a      	cbz	r2, 806024a <__udivmoddi4+0x2e>
 8060236:	f1c2 0720 	rsb	r7, r2, #32
 806023a:	fa01 f302 	lsl.w	r3, r1, r2
 806023e:	fa20 f707 	lsr.w	r7, r0, r7
 8060242:	4095      	lsls	r5, r2
 8060244:	ea47 0803 	orr.w	r8, r7, r3
 8060248:	4094      	lsls	r4, r2
 806024a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 806024e:	0c23      	lsrs	r3, r4, #16
 8060250:	fbb8 f7fe 	udiv	r7, r8, lr
 8060254:	fa1f fc85 	uxth.w	ip, r5
 8060258:	fb0e 8817 	mls	r8, lr, r7, r8
 806025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8060260:	fb07 f10c 	mul.w	r1, r7, ip
 8060264:	4299      	cmp	r1, r3
 8060266:	d909      	bls.n	806027c <__udivmoddi4+0x60>
 8060268:	18eb      	adds	r3, r5, r3
 806026a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 806026e:	f080 811b 	bcs.w	80604a8 <__udivmoddi4+0x28c>
 8060272:	4299      	cmp	r1, r3
 8060274:	f240 8118 	bls.w	80604a8 <__udivmoddi4+0x28c>
 8060278:	3f02      	subs	r7, #2
 806027a:	442b      	add	r3, r5
 806027c:	1a5b      	subs	r3, r3, r1
 806027e:	b2a4      	uxth	r4, r4
 8060280:	fbb3 f0fe 	udiv	r0, r3, lr
 8060284:	fb0e 3310 	mls	r3, lr, r0, r3
 8060288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 806028c:	fb00 fc0c 	mul.w	ip, r0, ip
 8060290:	45a4      	cmp	ip, r4
 8060292:	d909      	bls.n	80602a8 <__udivmoddi4+0x8c>
 8060294:	192c      	adds	r4, r5, r4
 8060296:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 806029a:	f080 8107 	bcs.w	80604ac <__udivmoddi4+0x290>
 806029e:	45a4      	cmp	ip, r4
 80602a0:	f240 8104 	bls.w	80604ac <__udivmoddi4+0x290>
 80602a4:	3802      	subs	r0, #2
 80602a6:	442c      	add	r4, r5
 80602a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80602ac:	eba4 040c 	sub.w	r4, r4, ip
 80602b0:	2700      	movs	r7, #0
 80602b2:	b11e      	cbz	r6, 80602bc <__udivmoddi4+0xa0>
 80602b4:	40d4      	lsrs	r4, r2
 80602b6:	2300      	movs	r3, #0
 80602b8:	e9c6 4300 	strd	r4, r3, [r6]
 80602bc:	4639      	mov	r1, r7
 80602be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80602c2:	428b      	cmp	r3, r1
 80602c4:	d909      	bls.n	80602da <__udivmoddi4+0xbe>
 80602c6:	2e00      	cmp	r6, #0
 80602c8:	f000 80eb 	beq.w	80604a2 <__udivmoddi4+0x286>
 80602cc:	2700      	movs	r7, #0
 80602ce:	e9c6 0100 	strd	r0, r1, [r6]
 80602d2:	4638      	mov	r0, r7
 80602d4:	4639      	mov	r1, r7
 80602d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80602da:	fab3 f783 	clz	r7, r3
 80602de:	2f00      	cmp	r7, #0
 80602e0:	d147      	bne.n	8060372 <__udivmoddi4+0x156>
 80602e2:	428b      	cmp	r3, r1
 80602e4:	d302      	bcc.n	80602ec <__udivmoddi4+0xd0>
 80602e6:	4282      	cmp	r2, r0
 80602e8:	f200 80fa 	bhi.w	80604e0 <__udivmoddi4+0x2c4>
 80602ec:	1a84      	subs	r4, r0, r2
 80602ee:	eb61 0303 	sbc.w	r3, r1, r3
 80602f2:	2001      	movs	r0, #1
 80602f4:	4698      	mov	r8, r3
 80602f6:	2e00      	cmp	r6, #0
 80602f8:	d0e0      	beq.n	80602bc <__udivmoddi4+0xa0>
 80602fa:	e9c6 4800 	strd	r4, r8, [r6]
 80602fe:	e7dd      	b.n	80602bc <__udivmoddi4+0xa0>
 8060300:	b902      	cbnz	r2, 8060304 <__udivmoddi4+0xe8>
 8060302:	deff      	udf	#255	; 0xff
 8060304:	fab2 f282 	clz	r2, r2
 8060308:	2a00      	cmp	r2, #0
 806030a:	f040 808f 	bne.w	806042c <__udivmoddi4+0x210>
 806030e:	1b49      	subs	r1, r1, r5
 8060310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8060314:	fa1f f885 	uxth.w	r8, r5
 8060318:	2701      	movs	r7, #1
 806031a:	fbb1 fcfe 	udiv	ip, r1, lr
 806031e:	0c23      	lsrs	r3, r4, #16
 8060320:	fb0e 111c 	mls	r1, lr, ip, r1
 8060324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8060328:	fb08 f10c 	mul.w	r1, r8, ip
 806032c:	4299      	cmp	r1, r3
 806032e:	d907      	bls.n	8060340 <__udivmoddi4+0x124>
 8060330:	18eb      	adds	r3, r5, r3
 8060332:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8060336:	d202      	bcs.n	806033e <__udivmoddi4+0x122>
 8060338:	4299      	cmp	r1, r3
 806033a:	f200 80cd 	bhi.w	80604d8 <__udivmoddi4+0x2bc>
 806033e:	4684      	mov	ip, r0
 8060340:	1a59      	subs	r1, r3, r1
 8060342:	b2a3      	uxth	r3, r4
 8060344:	fbb1 f0fe 	udiv	r0, r1, lr
 8060348:	fb0e 1410 	mls	r4, lr, r0, r1
 806034c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8060350:	fb08 f800 	mul.w	r8, r8, r0
 8060354:	45a0      	cmp	r8, r4
 8060356:	d907      	bls.n	8060368 <__udivmoddi4+0x14c>
 8060358:	192c      	adds	r4, r5, r4
 806035a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 806035e:	d202      	bcs.n	8060366 <__udivmoddi4+0x14a>
 8060360:	45a0      	cmp	r8, r4
 8060362:	f200 80b6 	bhi.w	80604d2 <__udivmoddi4+0x2b6>
 8060366:	4618      	mov	r0, r3
 8060368:	eba4 0408 	sub.w	r4, r4, r8
 806036c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8060370:	e79f      	b.n	80602b2 <__udivmoddi4+0x96>
 8060372:	f1c7 0c20 	rsb	ip, r7, #32
 8060376:	40bb      	lsls	r3, r7
 8060378:	fa22 fe0c 	lsr.w	lr, r2, ip
 806037c:	ea4e 0e03 	orr.w	lr, lr, r3
 8060380:	fa01 f407 	lsl.w	r4, r1, r7
 8060384:	fa20 f50c 	lsr.w	r5, r0, ip
 8060388:	fa21 f30c 	lsr.w	r3, r1, ip
 806038c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8060390:	4325      	orrs	r5, r4
 8060392:	fbb3 f9f8 	udiv	r9, r3, r8
 8060396:	0c2c      	lsrs	r4, r5, #16
 8060398:	fb08 3319 	mls	r3, r8, r9, r3
 806039c:	fa1f fa8e 	uxth.w	sl, lr
 80603a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80603a4:	fb09 f40a 	mul.w	r4, r9, sl
 80603a8:	429c      	cmp	r4, r3
 80603aa:	fa02 f207 	lsl.w	r2, r2, r7
 80603ae:	fa00 f107 	lsl.w	r1, r0, r7
 80603b2:	d90b      	bls.n	80603cc <__udivmoddi4+0x1b0>
 80603b4:	eb1e 0303 	adds.w	r3, lr, r3
 80603b8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80603bc:	f080 8087 	bcs.w	80604ce <__udivmoddi4+0x2b2>
 80603c0:	429c      	cmp	r4, r3
 80603c2:	f240 8084 	bls.w	80604ce <__udivmoddi4+0x2b2>
 80603c6:	f1a9 0902 	sub.w	r9, r9, #2
 80603ca:	4473      	add	r3, lr
 80603cc:	1b1b      	subs	r3, r3, r4
 80603ce:	b2ad      	uxth	r5, r5
 80603d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80603d4:	fb08 3310 	mls	r3, r8, r0, r3
 80603d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80603dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80603e0:	45a2      	cmp	sl, r4
 80603e2:	d908      	bls.n	80603f6 <__udivmoddi4+0x1da>
 80603e4:	eb1e 0404 	adds.w	r4, lr, r4
 80603e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80603ec:	d26b      	bcs.n	80604c6 <__udivmoddi4+0x2aa>
 80603ee:	45a2      	cmp	sl, r4
 80603f0:	d969      	bls.n	80604c6 <__udivmoddi4+0x2aa>
 80603f2:	3802      	subs	r0, #2
 80603f4:	4474      	add	r4, lr
 80603f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80603fa:	fba0 8902 	umull	r8, r9, r0, r2
 80603fe:	eba4 040a 	sub.w	r4, r4, sl
 8060402:	454c      	cmp	r4, r9
 8060404:	46c2      	mov	sl, r8
 8060406:	464b      	mov	r3, r9
 8060408:	d354      	bcc.n	80604b4 <__udivmoddi4+0x298>
 806040a:	d051      	beq.n	80604b0 <__udivmoddi4+0x294>
 806040c:	2e00      	cmp	r6, #0
 806040e:	d069      	beq.n	80604e4 <__udivmoddi4+0x2c8>
 8060410:	ebb1 050a 	subs.w	r5, r1, sl
 8060414:	eb64 0403 	sbc.w	r4, r4, r3
 8060418:	fa04 fc0c 	lsl.w	ip, r4, ip
 806041c:	40fd      	lsrs	r5, r7
 806041e:	40fc      	lsrs	r4, r7
 8060420:	ea4c 0505 	orr.w	r5, ip, r5
 8060424:	e9c6 5400 	strd	r5, r4, [r6]
 8060428:	2700      	movs	r7, #0
 806042a:	e747      	b.n	80602bc <__udivmoddi4+0xa0>
 806042c:	f1c2 0320 	rsb	r3, r2, #32
 8060430:	fa20 f703 	lsr.w	r7, r0, r3
 8060434:	4095      	lsls	r5, r2
 8060436:	fa01 f002 	lsl.w	r0, r1, r2
 806043a:	fa21 f303 	lsr.w	r3, r1, r3
 806043e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8060442:	4338      	orrs	r0, r7
 8060444:	0c01      	lsrs	r1, r0, #16
 8060446:	fbb3 f7fe 	udiv	r7, r3, lr
 806044a:	fa1f f885 	uxth.w	r8, r5
 806044e:	fb0e 3317 	mls	r3, lr, r7, r3
 8060452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8060456:	fb07 f308 	mul.w	r3, r7, r8
 806045a:	428b      	cmp	r3, r1
 806045c:	fa04 f402 	lsl.w	r4, r4, r2
 8060460:	d907      	bls.n	8060472 <__udivmoddi4+0x256>
 8060462:	1869      	adds	r1, r5, r1
 8060464:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8060468:	d22f      	bcs.n	80604ca <__udivmoddi4+0x2ae>
 806046a:	428b      	cmp	r3, r1
 806046c:	d92d      	bls.n	80604ca <__udivmoddi4+0x2ae>
 806046e:	3f02      	subs	r7, #2
 8060470:	4429      	add	r1, r5
 8060472:	1acb      	subs	r3, r1, r3
 8060474:	b281      	uxth	r1, r0
 8060476:	fbb3 f0fe 	udiv	r0, r3, lr
 806047a:	fb0e 3310 	mls	r3, lr, r0, r3
 806047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8060482:	fb00 f308 	mul.w	r3, r0, r8
 8060486:	428b      	cmp	r3, r1
 8060488:	d907      	bls.n	806049a <__udivmoddi4+0x27e>
 806048a:	1869      	adds	r1, r5, r1
 806048c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8060490:	d217      	bcs.n	80604c2 <__udivmoddi4+0x2a6>
 8060492:	428b      	cmp	r3, r1
 8060494:	d915      	bls.n	80604c2 <__udivmoddi4+0x2a6>
 8060496:	3802      	subs	r0, #2
 8060498:	4429      	add	r1, r5
 806049a:	1ac9      	subs	r1, r1, r3
 806049c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80604a0:	e73b      	b.n	806031a <__udivmoddi4+0xfe>
 80604a2:	4637      	mov	r7, r6
 80604a4:	4630      	mov	r0, r6
 80604a6:	e709      	b.n	80602bc <__udivmoddi4+0xa0>
 80604a8:	4607      	mov	r7, r0
 80604aa:	e6e7      	b.n	806027c <__udivmoddi4+0x60>
 80604ac:	4618      	mov	r0, r3
 80604ae:	e6fb      	b.n	80602a8 <__udivmoddi4+0x8c>
 80604b0:	4541      	cmp	r1, r8
 80604b2:	d2ab      	bcs.n	806040c <__udivmoddi4+0x1f0>
 80604b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80604b8:	eb69 020e 	sbc.w	r2, r9, lr
 80604bc:	3801      	subs	r0, #1
 80604be:	4613      	mov	r3, r2
 80604c0:	e7a4      	b.n	806040c <__udivmoddi4+0x1f0>
 80604c2:	4660      	mov	r0, ip
 80604c4:	e7e9      	b.n	806049a <__udivmoddi4+0x27e>
 80604c6:	4618      	mov	r0, r3
 80604c8:	e795      	b.n	80603f6 <__udivmoddi4+0x1da>
 80604ca:	4667      	mov	r7, ip
 80604cc:	e7d1      	b.n	8060472 <__udivmoddi4+0x256>
 80604ce:	4681      	mov	r9, r0
 80604d0:	e77c      	b.n	80603cc <__udivmoddi4+0x1b0>
 80604d2:	3802      	subs	r0, #2
 80604d4:	442c      	add	r4, r5
 80604d6:	e747      	b.n	8060368 <__udivmoddi4+0x14c>
 80604d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80604dc:	442b      	add	r3, r5
 80604de:	e72f      	b.n	8060340 <__udivmoddi4+0x124>
 80604e0:	4638      	mov	r0, r7
 80604e2:	e708      	b.n	80602f6 <__udivmoddi4+0xda>
 80604e4:	4637      	mov	r7, r6
 80604e6:	e6e9      	b.n	80602bc <__udivmoddi4+0xa0>

080604e8 <__aeabi_idiv0>:
 80604e8:	4770      	bx	lr
 80604ea:	bf00      	nop

080604ec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80604ec:	b580      	push	{r7, lr}
 80604ee:	b082      	sub	sp, #8
 80604f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80604f2:	2300      	movs	r3, #0
 80604f4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80604f6:	2003      	movs	r0, #3
 80604f8:	f000 f93c 	bl	8060774 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80604fc:	2000      	movs	r0, #0
 80604fe:	f000 f80d 	bl	806051c <HAL_InitTick>
 8060502:	4603      	mov	r3, r0
 8060504:	2b00      	cmp	r3, #0
 8060506:	d002      	beq.n	806050e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8060508:	2301      	movs	r3, #1
 806050a:	71fb      	strb	r3, [r7, #7]
 806050c:	e001      	b.n	8060512 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 806050e:	f002 fcf7 	bl	8062f00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8060512:	79fb      	ldrb	r3, [r7, #7]
}
 8060514:	4618      	mov	r0, r3
 8060516:	3708      	adds	r7, #8
 8060518:	46bd      	mov	sp, r7
 806051a:	bd80      	pop	{r7, pc}

0806051c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 806051c:	b580      	push	{r7, lr}
 806051e:	b084      	sub	sp, #16
 8060520:	af00      	add	r7, sp, #0
 8060522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8060524:	2300      	movs	r3, #0
 8060526:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8060528:	4b16      	ldr	r3, [pc, #88]	; (8060584 <HAL_InitTick+0x68>)
 806052a:	681b      	ldr	r3, [r3, #0]
 806052c:	2b00      	cmp	r3, #0
 806052e:	d022      	beq.n	8060576 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8060530:	4b15      	ldr	r3, [pc, #84]	; (8060588 <HAL_InitTick+0x6c>)
 8060532:	681a      	ldr	r2, [r3, #0]
 8060534:	4b13      	ldr	r3, [pc, #76]	; (8060584 <HAL_InitTick+0x68>)
 8060536:	681b      	ldr	r3, [r3, #0]
 8060538:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 806053c:	fbb1 f3f3 	udiv	r3, r1, r3
 8060540:	fbb2 f3f3 	udiv	r3, r2, r3
 8060544:	4618      	mov	r0, r3
 8060546:	f000 f93c 	bl	80607c2 <HAL_SYSTICK_Config>
 806054a:	4603      	mov	r3, r0
 806054c:	2b00      	cmp	r3, #0
 806054e:	d10f      	bne.n	8060570 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8060550:	687b      	ldr	r3, [r7, #4]
 8060552:	2b0f      	cmp	r3, #15
 8060554:	d809      	bhi.n	806056a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8060556:	2200      	movs	r2, #0
 8060558:	6879      	ldr	r1, [r7, #4]
 806055a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 806055e:	f000 f914 	bl	806078a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8060562:	4a0a      	ldr	r2, [pc, #40]	; (806058c <HAL_InitTick+0x70>)
 8060564:	687b      	ldr	r3, [r7, #4]
 8060566:	6013      	str	r3, [r2, #0]
 8060568:	e007      	b.n	806057a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 806056a:	2301      	movs	r3, #1
 806056c:	73fb      	strb	r3, [r7, #15]
 806056e:	e004      	b.n	806057a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8060570:	2301      	movs	r3, #1
 8060572:	73fb      	strb	r3, [r7, #15]
 8060574:	e001      	b.n	806057a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8060576:	2301      	movs	r3, #1
 8060578:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 806057a:	7bfb      	ldrb	r3, [r7, #15]
}
 806057c:	4618      	mov	r0, r3
 806057e:	3710      	adds	r7, #16
 8060580:	46bd      	mov	sp, r7
 8060582:	bd80      	pop	{r7, pc}
 8060584:	20000004 	.word	0x20000004
 8060588:	20000008 	.word	0x20000008
 806058c:	20000000 	.word	0x20000000

08060590 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8060590:	b480      	push	{r7}
 8060592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8060594:	4b05      	ldr	r3, [pc, #20]	; (80605ac <HAL_IncTick+0x1c>)
 8060596:	681a      	ldr	r2, [r3, #0]
 8060598:	4b05      	ldr	r3, [pc, #20]	; (80605b0 <HAL_IncTick+0x20>)
 806059a:	681b      	ldr	r3, [r3, #0]
 806059c:	4413      	add	r3, r2
 806059e:	4a03      	ldr	r2, [pc, #12]	; (80605ac <HAL_IncTick+0x1c>)
 80605a0:	6013      	str	r3, [r2, #0]
}
 80605a2:	bf00      	nop
 80605a4:	46bd      	mov	sp, r7
 80605a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80605aa:	4770      	bx	lr
 80605ac:	20000028 	.word	0x20000028
 80605b0:	20000004 	.word	0x20000004

080605b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80605b4:	b480      	push	{r7}
 80605b6:	af00      	add	r7, sp, #0
  return uwTick;
 80605b8:	4b03      	ldr	r3, [pc, #12]	; (80605c8 <HAL_GetTick+0x14>)
 80605ba:	681b      	ldr	r3, [r3, #0]
}
 80605bc:	4618      	mov	r0, r3
 80605be:	46bd      	mov	sp, r7
 80605c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80605c4:	4770      	bx	lr
 80605c6:	bf00      	nop
 80605c8:	20000028 	.word	0x20000028

080605cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80605cc:	b580      	push	{r7, lr}
 80605ce:	b084      	sub	sp, #16
 80605d0:	af00      	add	r7, sp, #0
 80605d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80605d4:	f7ff ffee 	bl	80605b4 <HAL_GetTick>
 80605d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80605da:	687b      	ldr	r3, [r7, #4]
 80605dc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80605de:	68fb      	ldr	r3, [r7, #12]
 80605e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80605e4:	d004      	beq.n	80605f0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80605e6:	4b09      	ldr	r3, [pc, #36]	; (806060c <HAL_Delay+0x40>)
 80605e8:	681b      	ldr	r3, [r3, #0]
 80605ea:	68fa      	ldr	r2, [r7, #12]
 80605ec:	4413      	add	r3, r2
 80605ee:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80605f0:	bf00      	nop
 80605f2:	f7ff ffdf 	bl	80605b4 <HAL_GetTick>
 80605f6:	4602      	mov	r2, r0
 80605f8:	68bb      	ldr	r3, [r7, #8]
 80605fa:	1ad3      	subs	r3, r2, r3
 80605fc:	68fa      	ldr	r2, [r7, #12]
 80605fe:	429a      	cmp	r2, r3
 8060600:	d8f7      	bhi.n	80605f2 <HAL_Delay+0x26>
  {
  }
}
 8060602:	bf00      	nop
 8060604:	3710      	adds	r7, #16
 8060606:	46bd      	mov	sp, r7
 8060608:	bd80      	pop	{r7, pc}
 806060a:	bf00      	nop
 806060c:	20000004 	.word	0x20000004

08060610 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8060610:	b480      	push	{r7}
 8060612:	b085      	sub	sp, #20
 8060614:	af00      	add	r7, sp, #0
 8060616:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8060618:	687b      	ldr	r3, [r7, #4]
 806061a:	f003 0307 	and.w	r3, r3, #7
 806061e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8060620:	4b0c      	ldr	r3, [pc, #48]	; (8060654 <__NVIC_SetPriorityGrouping+0x44>)
 8060622:	68db      	ldr	r3, [r3, #12]
 8060624:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8060626:	68ba      	ldr	r2, [r7, #8]
 8060628:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 806062c:	4013      	ands	r3, r2
 806062e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8060630:	68fb      	ldr	r3, [r7, #12]
 8060632:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8060634:	68bb      	ldr	r3, [r7, #8]
 8060636:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8060638:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 806063c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8060640:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8060642:	4a04      	ldr	r2, [pc, #16]	; (8060654 <__NVIC_SetPriorityGrouping+0x44>)
 8060644:	68bb      	ldr	r3, [r7, #8]
 8060646:	60d3      	str	r3, [r2, #12]
}
 8060648:	bf00      	nop
 806064a:	3714      	adds	r7, #20
 806064c:	46bd      	mov	sp, r7
 806064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060652:	4770      	bx	lr
 8060654:	e000ed00 	.word	0xe000ed00

08060658 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8060658:	b480      	push	{r7}
 806065a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 806065c:	4b04      	ldr	r3, [pc, #16]	; (8060670 <__NVIC_GetPriorityGrouping+0x18>)
 806065e:	68db      	ldr	r3, [r3, #12]
 8060660:	0a1b      	lsrs	r3, r3, #8
 8060662:	f003 0307 	and.w	r3, r3, #7
}
 8060666:	4618      	mov	r0, r3
 8060668:	46bd      	mov	sp, r7
 806066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 806066e:	4770      	bx	lr
 8060670:	e000ed00 	.word	0xe000ed00

08060674 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8060674:	b480      	push	{r7}
 8060676:	b083      	sub	sp, #12
 8060678:	af00      	add	r7, sp, #0
 806067a:	4603      	mov	r3, r0
 806067c:	6039      	str	r1, [r7, #0]
 806067e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8060680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8060684:	2b00      	cmp	r3, #0
 8060686:	db0a      	blt.n	806069e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8060688:	683b      	ldr	r3, [r7, #0]
 806068a:	b2da      	uxtb	r2, r3
 806068c:	490c      	ldr	r1, [pc, #48]	; (80606c0 <__NVIC_SetPriority+0x4c>)
 806068e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8060692:	0112      	lsls	r2, r2, #4
 8060694:	b2d2      	uxtb	r2, r2
 8060696:	440b      	add	r3, r1
 8060698:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 806069c:	e00a      	b.n	80606b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 806069e:	683b      	ldr	r3, [r7, #0]
 80606a0:	b2da      	uxtb	r2, r3
 80606a2:	4908      	ldr	r1, [pc, #32]	; (80606c4 <__NVIC_SetPriority+0x50>)
 80606a4:	79fb      	ldrb	r3, [r7, #7]
 80606a6:	f003 030f 	and.w	r3, r3, #15
 80606aa:	3b04      	subs	r3, #4
 80606ac:	0112      	lsls	r2, r2, #4
 80606ae:	b2d2      	uxtb	r2, r2
 80606b0:	440b      	add	r3, r1
 80606b2:	761a      	strb	r2, [r3, #24]
}
 80606b4:	bf00      	nop
 80606b6:	370c      	adds	r7, #12
 80606b8:	46bd      	mov	sp, r7
 80606ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80606be:	4770      	bx	lr
 80606c0:	e000e100 	.word	0xe000e100
 80606c4:	e000ed00 	.word	0xe000ed00

080606c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80606c8:	b480      	push	{r7}
 80606ca:	b089      	sub	sp, #36	; 0x24
 80606cc:	af00      	add	r7, sp, #0
 80606ce:	60f8      	str	r0, [r7, #12]
 80606d0:	60b9      	str	r1, [r7, #8]
 80606d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80606d4:	68fb      	ldr	r3, [r7, #12]
 80606d6:	f003 0307 	and.w	r3, r3, #7
 80606da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80606dc:	69fb      	ldr	r3, [r7, #28]
 80606de:	f1c3 0307 	rsb	r3, r3, #7
 80606e2:	2b04      	cmp	r3, #4
 80606e4:	bf28      	it	cs
 80606e6:	2304      	movcs	r3, #4
 80606e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80606ea:	69fb      	ldr	r3, [r7, #28]
 80606ec:	3304      	adds	r3, #4
 80606ee:	2b06      	cmp	r3, #6
 80606f0:	d902      	bls.n	80606f8 <NVIC_EncodePriority+0x30>
 80606f2:	69fb      	ldr	r3, [r7, #28]
 80606f4:	3b03      	subs	r3, #3
 80606f6:	e000      	b.n	80606fa <NVIC_EncodePriority+0x32>
 80606f8:	2300      	movs	r3, #0
 80606fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80606fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8060700:	69bb      	ldr	r3, [r7, #24]
 8060702:	fa02 f303 	lsl.w	r3, r2, r3
 8060706:	43da      	mvns	r2, r3
 8060708:	68bb      	ldr	r3, [r7, #8]
 806070a:	401a      	ands	r2, r3
 806070c:	697b      	ldr	r3, [r7, #20]
 806070e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8060710:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8060714:	697b      	ldr	r3, [r7, #20]
 8060716:	fa01 f303 	lsl.w	r3, r1, r3
 806071a:	43d9      	mvns	r1, r3
 806071c:	687b      	ldr	r3, [r7, #4]
 806071e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8060720:	4313      	orrs	r3, r2
         );
}
 8060722:	4618      	mov	r0, r3
 8060724:	3724      	adds	r7, #36	; 0x24
 8060726:	46bd      	mov	sp, r7
 8060728:	f85d 7b04 	ldr.w	r7, [sp], #4
 806072c:	4770      	bx	lr
	...

08060730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8060730:	b580      	push	{r7, lr}
 8060732:	b082      	sub	sp, #8
 8060734:	af00      	add	r7, sp, #0
 8060736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8060738:	687b      	ldr	r3, [r7, #4]
 806073a:	3b01      	subs	r3, #1
 806073c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8060740:	d301      	bcc.n	8060746 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8060742:	2301      	movs	r3, #1
 8060744:	e00f      	b.n	8060766 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8060746:	4a0a      	ldr	r2, [pc, #40]	; (8060770 <SysTick_Config+0x40>)
 8060748:	687b      	ldr	r3, [r7, #4]
 806074a:	3b01      	subs	r3, #1
 806074c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 806074e:	210f      	movs	r1, #15
 8060750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8060754:	f7ff ff8e 	bl	8060674 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8060758:	4b05      	ldr	r3, [pc, #20]	; (8060770 <SysTick_Config+0x40>)
 806075a:	2200      	movs	r2, #0
 806075c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 806075e:	4b04      	ldr	r3, [pc, #16]	; (8060770 <SysTick_Config+0x40>)
 8060760:	2207      	movs	r2, #7
 8060762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8060764:	2300      	movs	r3, #0
}
 8060766:	4618      	mov	r0, r3
 8060768:	3708      	adds	r7, #8
 806076a:	46bd      	mov	sp, r7
 806076c:	bd80      	pop	{r7, pc}
 806076e:	bf00      	nop
 8060770:	e000e010 	.word	0xe000e010

08060774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8060774:	b580      	push	{r7, lr}
 8060776:	b082      	sub	sp, #8
 8060778:	af00      	add	r7, sp, #0
 806077a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 806077c:	6878      	ldr	r0, [r7, #4]
 806077e:	f7ff ff47 	bl	8060610 <__NVIC_SetPriorityGrouping>
}
 8060782:	bf00      	nop
 8060784:	3708      	adds	r7, #8
 8060786:	46bd      	mov	sp, r7
 8060788:	bd80      	pop	{r7, pc}

0806078a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 806078a:	b580      	push	{r7, lr}
 806078c:	b086      	sub	sp, #24
 806078e:	af00      	add	r7, sp, #0
 8060790:	4603      	mov	r3, r0
 8060792:	60b9      	str	r1, [r7, #8]
 8060794:	607a      	str	r2, [r7, #4]
 8060796:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8060798:	2300      	movs	r3, #0
 806079a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 806079c:	f7ff ff5c 	bl	8060658 <__NVIC_GetPriorityGrouping>
 80607a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80607a2:	687a      	ldr	r2, [r7, #4]
 80607a4:	68b9      	ldr	r1, [r7, #8]
 80607a6:	6978      	ldr	r0, [r7, #20]
 80607a8:	f7ff ff8e 	bl	80606c8 <NVIC_EncodePriority>
 80607ac:	4602      	mov	r2, r0
 80607ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80607b2:	4611      	mov	r1, r2
 80607b4:	4618      	mov	r0, r3
 80607b6:	f7ff ff5d 	bl	8060674 <__NVIC_SetPriority>
}
 80607ba:	bf00      	nop
 80607bc:	3718      	adds	r7, #24
 80607be:	46bd      	mov	sp, r7
 80607c0:	bd80      	pop	{r7, pc}

080607c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80607c2:	b580      	push	{r7, lr}
 80607c4:	b082      	sub	sp, #8
 80607c6:	af00      	add	r7, sp, #0
 80607c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80607ca:	6878      	ldr	r0, [r7, #4]
 80607cc:	f7ff ffb0 	bl	8060730 <SysTick_Config>
 80607d0:	4603      	mov	r3, r0
}
 80607d2:	4618      	mov	r0, r3
 80607d4:	3708      	adds	r7, #8
 80607d6:	46bd      	mov	sp, r7
 80607d8:	bd80      	pop	{r7, pc}
	...

080607dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80607dc:	b480      	push	{r7}
 80607de:	b087      	sub	sp, #28
 80607e0:	af00      	add	r7, sp, #0
 80607e2:	6078      	str	r0, [r7, #4]
 80607e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80607e6:	2300      	movs	r3, #0
 80607e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80607ea:	e166      	b.n	8060aba <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80607ec:	683b      	ldr	r3, [r7, #0]
 80607ee:	681a      	ldr	r2, [r3, #0]
 80607f0:	2101      	movs	r1, #1
 80607f2:	697b      	ldr	r3, [r7, #20]
 80607f4:	fa01 f303 	lsl.w	r3, r1, r3
 80607f8:	4013      	ands	r3, r2
 80607fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80607fc:	68fb      	ldr	r3, [r7, #12]
 80607fe:	2b00      	cmp	r3, #0
 8060800:	f000 8158 	beq.w	8060ab4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8060804:	683b      	ldr	r3, [r7, #0]
 8060806:	685b      	ldr	r3, [r3, #4]
 8060808:	2b02      	cmp	r3, #2
 806080a:	d003      	beq.n	8060814 <HAL_GPIO_Init+0x38>
 806080c:	683b      	ldr	r3, [r7, #0]
 806080e:	685b      	ldr	r3, [r3, #4]
 8060810:	2b12      	cmp	r3, #18
 8060812:	d123      	bne.n	806085c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8060814:	697b      	ldr	r3, [r7, #20]
 8060816:	08da      	lsrs	r2, r3, #3
 8060818:	687b      	ldr	r3, [r7, #4]
 806081a:	3208      	adds	r2, #8
 806081c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8060820:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8060822:	697b      	ldr	r3, [r7, #20]
 8060824:	f003 0307 	and.w	r3, r3, #7
 8060828:	009b      	lsls	r3, r3, #2
 806082a:	220f      	movs	r2, #15
 806082c:	fa02 f303 	lsl.w	r3, r2, r3
 8060830:	43db      	mvns	r3, r3
 8060832:	693a      	ldr	r2, [r7, #16]
 8060834:	4013      	ands	r3, r2
 8060836:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8060838:	683b      	ldr	r3, [r7, #0]
 806083a:	691a      	ldr	r2, [r3, #16]
 806083c:	697b      	ldr	r3, [r7, #20]
 806083e:	f003 0307 	and.w	r3, r3, #7
 8060842:	009b      	lsls	r3, r3, #2
 8060844:	fa02 f303 	lsl.w	r3, r2, r3
 8060848:	693a      	ldr	r2, [r7, #16]
 806084a:	4313      	orrs	r3, r2
 806084c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 806084e:	697b      	ldr	r3, [r7, #20]
 8060850:	08da      	lsrs	r2, r3, #3
 8060852:	687b      	ldr	r3, [r7, #4]
 8060854:	3208      	adds	r2, #8
 8060856:	6939      	ldr	r1, [r7, #16]
 8060858:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 806085c:	687b      	ldr	r3, [r7, #4]
 806085e:	681b      	ldr	r3, [r3, #0]
 8060860:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8060862:	697b      	ldr	r3, [r7, #20]
 8060864:	005b      	lsls	r3, r3, #1
 8060866:	2203      	movs	r2, #3
 8060868:	fa02 f303 	lsl.w	r3, r2, r3
 806086c:	43db      	mvns	r3, r3
 806086e:	693a      	ldr	r2, [r7, #16]
 8060870:	4013      	ands	r3, r2
 8060872:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8060874:	683b      	ldr	r3, [r7, #0]
 8060876:	685b      	ldr	r3, [r3, #4]
 8060878:	f003 0203 	and.w	r2, r3, #3
 806087c:	697b      	ldr	r3, [r7, #20]
 806087e:	005b      	lsls	r3, r3, #1
 8060880:	fa02 f303 	lsl.w	r3, r2, r3
 8060884:	693a      	ldr	r2, [r7, #16]
 8060886:	4313      	orrs	r3, r2
 8060888:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 806088a:	687b      	ldr	r3, [r7, #4]
 806088c:	693a      	ldr	r2, [r7, #16]
 806088e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8060890:	683b      	ldr	r3, [r7, #0]
 8060892:	685b      	ldr	r3, [r3, #4]
 8060894:	2b01      	cmp	r3, #1
 8060896:	d00b      	beq.n	80608b0 <HAL_GPIO_Init+0xd4>
 8060898:	683b      	ldr	r3, [r7, #0]
 806089a:	685b      	ldr	r3, [r3, #4]
 806089c:	2b02      	cmp	r3, #2
 806089e:	d007      	beq.n	80608b0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80608a0:	683b      	ldr	r3, [r7, #0]
 80608a2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80608a4:	2b11      	cmp	r3, #17
 80608a6:	d003      	beq.n	80608b0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80608a8:	683b      	ldr	r3, [r7, #0]
 80608aa:	685b      	ldr	r3, [r3, #4]
 80608ac:	2b12      	cmp	r3, #18
 80608ae:	d130      	bne.n	8060912 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80608b0:	687b      	ldr	r3, [r7, #4]
 80608b2:	689b      	ldr	r3, [r3, #8]
 80608b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80608b6:	697b      	ldr	r3, [r7, #20]
 80608b8:	005b      	lsls	r3, r3, #1
 80608ba:	2203      	movs	r2, #3
 80608bc:	fa02 f303 	lsl.w	r3, r2, r3
 80608c0:	43db      	mvns	r3, r3
 80608c2:	693a      	ldr	r2, [r7, #16]
 80608c4:	4013      	ands	r3, r2
 80608c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80608c8:	683b      	ldr	r3, [r7, #0]
 80608ca:	68da      	ldr	r2, [r3, #12]
 80608cc:	697b      	ldr	r3, [r7, #20]
 80608ce:	005b      	lsls	r3, r3, #1
 80608d0:	fa02 f303 	lsl.w	r3, r2, r3
 80608d4:	693a      	ldr	r2, [r7, #16]
 80608d6:	4313      	orrs	r3, r2
 80608d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80608da:	687b      	ldr	r3, [r7, #4]
 80608dc:	693a      	ldr	r2, [r7, #16]
 80608de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80608e0:	687b      	ldr	r3, [r7, #4]
 80608e2:	685b      	ldr	r3, [r3, #4]
 80608e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80608e6:	2201      	movs	r2, #1
 80608e8:	697b      	ldr	r3, [r7, #20]
 80608ea:	fa02 f303 	lsl.w	r3, r2, r3
 80608ee:	43db      	mvns	r3, r3
 80608f0:	693a      	ldr	r2, [r7, #16]
 80608f2:	4013      	ands	r3, r2
 80608f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80608f6:	683b      	ldr	r3, [r7, #0]
 80608f8:	685b      	ldr	r3, [r3, #4]
 80608fa:	091b      	lsrs	r3, r3, #4
 80608fc:	f003 0201 	and.w	r2, r3, #1
 8060900:	697b      	ldr	r3, [r7, #20]
 8060902:	fa02 f303 	lsl.w	r3, r2, r3
 8060906:	693a      	ldr	r2, [r7, #16]
 8060908:	4313      	orrs	r3, r2
 806090a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 806090c:	687b      	ldr	r3, [r7, #4]
 806090e:	693a      	ldr	r2, [r7, #16]
 8060910:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8060912:	687b      	ldr	r3, [r7, #4]
 8060914:	68db      	ldr	r3, [r3, #12]
 8060916:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8060918:	697b      	ldr	r3, [r7, #20]
 806091a:	005b      	lsls	r3, r3, #1
 806091c:	2203      	movs	r2, #3
 806091e:	fa02 f303 	lsl.w	r3, r2, r3
 8060922:	43db      	mvns	r3, r3
 8060924:	693a      	ldr	r2, [r7, #16]
 8060926:	4013      	ands	r3, r2
 8060928:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 806092a:	683b      	ldr	r3, [r7, #0]
 806092c:	689a      	ldr	r2, [r3, #8]
 806092e:	697b      	ldr	r3, [r7, #20]
 8060930:	005b      	lsls	r3, r3, #1
 8060932:	fa02 f303 	lsl.w	r3, r2, r3
 8060936:	693a      	ldr	r2, [r7, #16]
 8060938:	4313      	orrs	r3, r2
 806093a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 806093c:	687b      	ldr	r3, [r7, #4]
 806093e:	693a      	ldr	r2, [r7, #16]
 8060940:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8060942:	683b      	ldr	r3, [r7, #0]
 8060944:	685b      	ldr	r3, [r3, #4]
 8060946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 806094a:	2b00      	cmp	r3, #0
 806094c:	f000 80b2 	beq.w	8060ab4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8060950:	4b61      	ldr	r3, [pc, #388]	; (8060ad8 <HAL_GPIO_Init+0x2fc>)
 8060952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8060954:	4a60      	ldr	r2, [pc, #384]	; (8060ad8 <HAL_GPIO_Init+0x2fc>)
 8060956:	f043 0301 	orr.w	r3, r3, #1
 806095a:	6613      	str	r3, [r2, #96]	; 0x60
 806095c:	4b5e      	ldr	r3, [pc, #376]	; (8060ad8 <HAL_GPIO_Init+0x2fc>)
 806095e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8060960:	f003 0301 	and.w	r3, r3, #1
 8060964:	60bb      	str	r3, [r7, #8]
 8060966:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8060968:	4a5c      	ldr	r2, [pc, #368]	; (8060adc <HAL_GPIO_Init+0x300>)
 806096a:	697b      	ldr	r3, [r7, #20]
 806096c:	089b      	lsrs	r3, r3, #2
 806096e:	3302      	adds	r3, #2
 8060970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8060974:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8060976:	697b      	ldr	r3, [r7, #20]
 8060978:	f003 0303 	and.w	r3, r3, #3
 806097c:	009b      	lsls	r3, r3, #2
 806097e:	220f      	movs	r2, #15
 8060980:	fa02 f303 	lsl.w	r3, r2, r3
 8060984:	43db      	mvns	r3, r3
 8060986:	693a      	ldr	r2, [r7, #16]
 8060988:	4013      	ands	r3, r2
 806098a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 806098c:	687b      	ldr	r3, [r7, #4]
 806098e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8060992:	d02b      	beq.n	80609ec <HAL_GPIO_Init+0x210>
 8060994:	687b      	ldr	r3, [r7, #4]
 8060996:	4a52      	ldr	r2, [pc, #328]	; (8060ae0 <HAL_GPIO_Init+0x304>)
 8060998:	4293      	cmp	r3, r2
 806099a:	d025      	beq.n	80609e8 <HAL_GPIO_Init+0x20c>
 806099c:	687b      	ldr	r3, [r7, #4]
 806099e:	4a51      	ldr	r2, [pc, #324]	; (8060ae4 <HAL_GPIO_Init+0x308>)
 80609a0:	4293      	cmp	r3, r2
 80609a2:	d01f      	beq.n	80609e4 <HAL_GPIO_Init+0x208>
 80609a4:	687b      	ldr	r3, [r7, #4]
 80609a6:	4a50      	ldr	r2, [pc, #320]	; (8060ae8 <HAL_GPIO_Init+0x30c>)
 80609a8:	4293      	cmp	r3, r2
 80609aa:	d019      	beq.n	80609e0 <HAL_GPIO_Init+0x204>
 80609ac:	687b      	ldr	r3, [r7, #4]
 80609ae:	4a4f      	ldr	r2, [pc, #316]	; (8060aec <HAL_GPIO_Init+0x310>)
 80609b0:	4293      	cmp	r3, r2
 80609b2:	d013      	beq.n	80609dc <HAL_GPIO_Init+0x200>
 80609b4:	687b      	ldr	r3, [r7, #4]
 80609b6:	4a4e      	ldr	r2, [pc, #312]	; (8060af0 <HAL_GPIO_Init+0x314>)
 80609b8:	4293      	cmp	r3, r2
 80609ba:	d00d      	beq.n	80609d8 <HAL_GPIO_Init+0x1fc>
 80609bc:	687b      	ldr	r3, [r7, #4]
 80609be:	4a4d      	ldr	r2, [pc, #308]	; (8060af4 <HAL_GPIO_Init+0x318>)
 80609c0:	4293      	cmp	r3, r2
 80609c2:	d007      	beq.n	80609d4 <HAL_GPIO_Init+0x1f8>
 80609c4:	687b      	ldr	r3, [r7, #4]
 80609c6:	4a4c      	ldr	r2, [pc, #304]	; (8060af8 <HAL_GPIO_Init+0x31c>)
 80609c8:	4293      	cmp	r3, r2
 80609ca:	d101      	bne.n	80609d0 <HAL_GPIO_Init+0x1f4>
 80609cc:	2307      	movs	r3, #7
 80609ce:	e00e      	b.n	80609ee <HAL_GPIO_Init+0x212>
 80609d0:	2308      	movs	r3, #8
 80609d2:	e00c      	b.n	80609ee <HAL_GPIO_Init+0x212>
 80609d4:	2306      	movs	r3, #6
 80609d6:	e00a      	b.n	80609ee <HAL_GPIO_Init+0x212>
 80609d8:	2305      	movs	r3, #5
 80609da:	e008      	b.n	80609ee <HAL_GPIO_Init+0x212>
 80609dc:	2304      	movs	r3, #4
 80609de:	e006      	b.n	80609ee <HAL_GPIO_Init+0x212>
 80609e0:	2303      	movs	r3, #3
 80609e2:	e004      	b.n	80609ee <HAL_GPIO_Init+0x212>
 80609e4:	2302      	movs	r3, #2
 80609e6:	e002      	b.n	80609ee <HAL_GPIO_Init+0x212>
 80609e8:	2301      	movs	r3, #1
 80609ea:	e000      	b.n	80609ee <HAL_GPIO_Init+0x212>
 80609ec:	2300      	movs	r3, #0
 80609ee:	697a      	ldr	r2, [r7, #20]
 80609f0:	f002 0203 	and.w	r2, r2, #3
 80609f4:	0092      	lsls	r2, r2, #2
 80609f6:	4093      	lsls	r3, r2
 80609f8:	693a      	ldr	r2, [r7, #16]
 80609fa:	4313      	orrs	r3, r2
 80609fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80609fe:	4937      	ldr	r1, [pc, #220]	; (8060adc <HAL_GPIO_Init+0x300>)
 8060a00:	697b      	ldr	r3, [r7, #20]
 8060a02:	089b      	lsrs	r3, r3, #2
 8060a04:	3302      	adds	r3, #2
 8060a06:	693a      	ldr	r2, [r7, #16]
 8060a08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8060a0c:	4b3b      	ldr	r3, [pc, #236]	; (8060afc <HAL_GPIO_Init+0x320>)
 8060a0e:	681b      	ldr	r3, [r3, #0]
 8060a10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8060a12:	68fb      	ldr	r3, [r7, #12]
 8060a14:	43db      	mvns	r3, r3
 8060a16:	693a      	ldr	r2, [r7, #16]
 8060a18:	4013      	ands	r3, r2
 8060a1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8060a1c:	683b      	ldr	r3, [r7, #0]
 8060a1e:	685b      	ldr	r3, [r3, #4]
 8060a20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8060a24:	2b00      	cmp	r3, #0
 8060a26:	d003      	beq.n	8060a30 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8060a28:	693a      	ldr	r2, [r7, #16]
 8060a2a:	68fb      	ldr	r3, [r7, #12]
 8060a2c:	4313      	orrs	r3, r2
 8060a2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8060a30:	4a32      	ldr	r2, [pc, #200]	; (8060afc <HAL_GPIO_Init+0x320>)
 8060a32:	693b      	ldr	r3, [r7, #16]
 8060a34:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8060a36:	4b31      	ldr	r3, [pc, #196]	; (8060afc <HAL_GPIO_Init+0x320>)
 8060a38:	685b      	ldr	r3, [r3, #4]
 8060a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8060a3c:	68fb      	ldr	r3, [r7, #12]
 8060a3e:	43db      	mvns	r3, r3
 8060a40:	693a      	ldr	r2, [r7, #16]
 8060a42:	4013      	ands	r3, r2
 8060a44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8060a46:	683b      	ldr	r3, [r7, #0]
 8060a48:	685b      	ldr	r3, [r3, #4]
 8060a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8060a4e:	2b00      	cmp	r3, #0
 8060a50:	d003      	beq.n	8060a5a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8060a52:	693a      	ldr	r2, [r7, #16]
 8060a54:	68fb      	ldr	r3, [r7, #12]
 8060a56:	4313      	orrs	r3, r2
 8060a58:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8060a5a:	4a28      	ldr	r2, [pc, #160]	; (8060afc <HAL_GPIO_Init+0x320>)
 8060a5c:	693b      	ldr	r3, [r7, #16]
 8060a5e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8060a60:	4b26      	ldr	r3, [pc, #152]	; (8060afc <HAL_GPIO_Init+0x320>)
 8060a62:	689b      	ldr	r3, [r3, #8]
 8060a64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8060a66:	68fb      	ldr	r3, [r7, #12]
 8060a68:	43db      	mvns	r3, r3
 8060a6a:	693a      	ldr	r2, [r7, #16]
 8060a6c:	4013      	ands	r3, r2
 8060a6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8060a70:	683b      	ldr	r3, [r7, #0]
 8060a72:	685b      	ldr	r3, [r3, #4]
 8060a74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8060a78:	2b00      	cmp	r3, #0
 8060a7a:	d003      	beq.n	8060a84 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8060a7c:	693a      	ldr	r2, [r7, #16]
 8060a7e:	68fb      	ldr	r3, [r7, #12]
 8060a80:	4313      	orrs	r3, r2
 8060a82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8060a84:	4a1d      	ldr	r2, [pc, #116]	; (8060afc <HAL_GPIO_Init+0x320>)
 8060a86:	693b      	ldr	r3, [r7, #16]
 8060a88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8060a8a:	4b1c      	ldr	r3, [pc, #112]	; (8060afc <HAL_GPIO_Init+0x320>)
 8060a8c:	68db      	ldr	r3, [r3, #12]
 8060a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8060a90:	68fb      	ldr	r3, [r7, #12]
 8060a92:	43db      	mvns	r3, r3
 8060a94:	693a      	ldr	r2, [r7, #16]
 8060a96:	4013      	ands	r3, r2
 8060a98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8060a9a:	683b      	ldr	r3, [r7, #0]
 8060a9c:	685b      	ldr	r3, [r3, #4]
 8060a9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8060aa2:	2b00      	cmp	r3, #0
 8060aa4:	d003      	beq.n	8060aae <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8060aa6:	693a      	ldr	r2, [r7, #16]
 8060aa8:	68fb      	ldr	r3, [r7, #12]
 8060aaa:	4313      	orrs	r3, r2
 8060aac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8060aae:	4a13      	ldr	r2, [pc, #76]	; (8060afc <HAL_GPIO_Init+0x320>)
 8060ab0:	693b      	ldr	r3, [r7, #16]
 8060ab2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8060ab4:	697b      	ldr	r3, [r7, #20]
 8060ab6:	3301      	adds	r3, #1
 8060ab8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8060aba:	683b      	ldr	r3, [r7, #0]
 8060abc:	681a      	ldr	r2, [r3, #0]
 8060abe:	697b      	ldr	r3, [r7, #20]
 8060ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8060ac4:	2b00      	cmp	r3, #0
 8060ac6:	f47f ae91 	bne.w	80607ec <HAL_GPIO_Init+0x10>
  }
}
 8060aca:	bf00      	nop
 8060acc:	371c      	adds	r7, #28
 8060ace:	46bd      	mov	sp, r7
 8060ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060ad4:	4770      	bx	lr
 8060ad6:	bf00      	nop
 8060ad8:	40021000 	.word	0x40021000
 8060adc:	40010000 	.word	0x40010000
 8060ae0:	48000400 	.word	0x48000400
 8060ae4:	48000800 	.word	0x48000800
 8060ae8:	48000c00 	.word	0x48000c00
 8060aec:	48001000 	.word	0x48001000
 8060af0:	48001400 	.word	0x48001400
 8060af4:	48001800 	.word	0x48001800
 8060af8:	48001c00 	.word	0x48001c00
 8060afc:	40010400 	.word	0x40010400

08060b00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8060b00:	b480      	push	{r7}
 8060b02:	b083      	sub	sp, #12
 8060b04:	af00      	add	r7, sp, #0
 8060b06:	6078      	str	r0, [r7, #4]
 8060b08:	460b      	mov	r3, r1
 8060b0a:	807b      	strh	r3, [r7, #2]
 8060b0c:	4613      	mov	r3, r2
 8060b0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8060b10:	787b      	ldrb	r3, [r7, #1]
 8060b12:	2b00      	cmp	r3, #0
 8060b14:	d003      	beq.n	8060b1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8060b16:	887a      	ldrh	r2, [r7, #2]
 8060b18:	687b      	ldr	r3, [r7, #4]
 8060b1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8060b1c:	e002      	b.n	8060b24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8060b1e:	887a      	ldrh	r2, [r7, #2]
 8060b20:	687b      	ldr	r3, [r7, #4]
 8060b22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8060b24:	bf00      	nop
 8060b26:	370c      	adds	r7, #12
 8060b28:	46bd      	mov	sp, r7
 8060b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060b2e:	4770      	bx	lr

08060b30 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8060b30:	b480      	push	{r7}
 8060b32:	b083      	sub	sp, #12
 8060b34:	af00      	add	r7, sp, #0
 8060b36:	6078      	str	r0, [r7, #4]
 8060b38:	460b      	mov	r3, r1
 8060b3a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8060b3c:	687b      	ldr	r3, [r7, #4]
 8060b3e:	695a      	ldr	r2, [r3, #20]
 8060b40:	887b      	ldrh	r3, [r7, #2]
 8060b42:	4013      	ands	r3, r2
 8060b44:	2b00      	cmp	r3, #0
 8060b46:	d003      	beq.n	8060b50 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8060b48:	887a      	ldrh	r2, [r7, #2]
 8060b4a:	687b      	ldr	r3, [r7, #4]
 8060b4c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8060b4e:	e002      	b.n	8060b56 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8060b50:	887a      	ldrh	r2, [r7, #2]
 8060b52:	687b      	ldr	r3, [r7, #4]
 8060b54:	619a      	str	r2, [r3, #24]
}
 8060b56:	bf00      	nop
 8060b58:	370c      	adds	r7, #12
 8060b5a:	46bd      	mov	sp, r7
 8060b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060b60:	4770      	bx	lr
	...

08060b64 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8060b64:	b480      	push	{r7}
 8060b66:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8060b68:	4b04      	ldr	r3, [pc, #16]	; (8060b7c <HAL_PWREx_GetVoltageRange+0x18>)
 8060b6a:	681b      	ldr	r3, [r3, #0]
 8060b6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8060b70:	4618      	mov	r0, r3
 8060b72:	46bd      	mov	sp, r7
 8060b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060b78:	4770      	bx	lr
 8060b7a:	bf00      	nop
 8060b7c:	40007000 	.word	0x40007000

08060b80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8060b80:	b480      	push	{r7}
 8060b82:	b085      	sub	sp, #20
 8060b84:	af00      	add	r7, sp, #0
 8060b86:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8060b88:	687b      	ldr	r3, [r7, #4]
 8060b8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8060b8e:	d130      	bne.n	8060bf2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8060b90:	4b23      	ldr	r3, [pc, #140]	; (8060c20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8060b92:	681b      	ldr	r3, [r3, #0]
 8060b94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8060b98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8060b9c:	d038      	beq.n	8060c10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8060b9e:	4b20      	ldr	r3, [pc, #128]	; (8060c20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8060ba0:	681b      	ldr	r3, [r3, #0]
 8060ba2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8060ba6:	4a1e      	ldr	r2, [pc, #120]	; (8060c20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8060ba8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8060bac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8060bae:	4b1d      	ldr	r3, [pc, #116]	; (8060c24 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8060bb0:	681b      	ldr	r3, [r3, #0]
 8060bb2:	2232      	movs	r2, #50	; 0x32
 8060bb4:	fb02 f303 	mul.w	r3, r2, r3
 8060bb8:	4a1b      	ldr	r2, [pc, #108]	; (8060c28 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8060bba:	fba2 2303 	umull	r2, r3, r2, r3
 8060bbe:	0c9b      	lsrs	r3, r3, #18
 8060bc0:	3301      	adds	r3, #1
 8060bc2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8060bc4:	e002      	b.n	8060bcc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8060bc6:	68fb      	ldr	r3, [r7, #12]
 8060bc8:	3b01      	subs	r3, #1
 8060bca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8060bcc:	4b14      	ldr	r3, [pc, #80]	; (8060c20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8060bce:	695b      	ldr	r3, [r3, #20]
 8060bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8060bd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8060bd8:	d102      	bne.n	8060be0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8060bda:	68fb      	ldr	r3, [r7, #12]
 8060bdc:	2b00      	cmp	r3, #0
 8060bde:	d1f2      	bne.n	8060bc6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8060be0:	4b0f      	ldr	r3, [pc, #60]	; (8060c20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8060be2:	695b      	ldr	r3, [r3, #20]
 8060be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8060be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8060bec:	d110      	bne.n	8060c10 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8060bee:	2303      	movs	r3, #3
 8060bf0:	e00f      	b.n	8060c12 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8060bf2:	4b0b      	ldr	r3, [pc, #44]	; (8060c20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8060bf4:	681b      	ldr	r3, [r3, #0]
 8060bf6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8060bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8060bfe:	d007      	beq.n	8060c10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8060c00:	4b07      	ldr	r3, [pc, #28]	; (8060c20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8060c02:	681b      	ldr	r3, [r3, #0]
 8060c04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8060c08:	4a05      	ldr	r2, [pc, #20]	; (8060c20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8060c0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8060c0e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8060c10:	2300      	movs	r3, #0
}
 8060c12:	4618      	mov	r0, r3
 8060c14:	3714      	adds	r7, #20
 8060c16:	46bd      	mov	sp, r7
 8060c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8060c1c:	4770      	bx	lr
 8060c1e:	bf00      	nop
 8060c20:	40007000 	.word	0x40007000
 8060c24:	20000008 	.word	0x20000008
 8060c28:	431bde83 	.word	0x431bde83

08060c2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8060c2c:	b580      	push	{r7, lr}
 8060c2e:	b088      	sub	sp, #32
 8060c30:	af00      	add	r7, sp, #0
 8060c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8060c34:	687b      	ldr	r3, [r7, #4]
 8060c36:	2b00      	cmp	r3, #0
 8060c38:	d101      	bne.n	8060c3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8060c3a:	2301      	movs	r3, #1
 8060c3c:	e3db      	b.n	80613f6 <HAL_RCC_OscConfig+0x7ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8060c3e:	4ba4      	ldr	r3, [pc, #656]	; (8060ed0 <HAL_RCC_OscConfig+0x2a4>)
 8060c40:	689b      	ldr	r3, [r3, #8]
 8060c42:	f003 030c 	and.w	r3, r3, #12
 8060c46:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8060c48:	4ba1      	ldr	r3, [pc, #644]	; (8060ed0 <HAL_RCC_OscConfig+0x2a4>)
 8060c4a:	68db      	ldr	r3, [r3, #12]
 8060c4c:	f003 0303 	and.w	r3, r3, #3
 8060c50:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8060c52:	687b      	ldr	r3, [r7, #4]
 8060c54:	681b      	ldr	r3, [r3, #0]
 8060c56:	f003 0310 	and.w	r3, r3, #16
 8060c5a:	2b00      	cmp	r3, #0
 8060c5c:	f000 80e1 	beq.w	8060e22 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8060c60:	69bb      	ldr	r3, [r7, #24]
 8060c62:	2b00      	cmp	r3, #0
 8060c64:	d007      	beq.n	8060c76 <HAL_RCC_OscConfig+0x4a>
 8060c66:	69bb      	ldr	r3, [r7, #24]
 8060c68:	2b0c      	cmp	r3, #12
 8060c6a:	f040 8088 	bne.w	8060d7e <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8060c6e:	697b      	ldr	r3, [r7, #20]
 8060c70:	2b01      	cmp	r3, #1
 8060c72:	f040 8084 	bne.w	8060d7e <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8060c76:	4b96      	ldr	r3, [pc, #600]	; (8060ed0 <HAL_RCC_OscConfig+0x2a4>)
 8060c78:	681b      	ldr	r3, [r3, #0]
 8060c7a:	f003 0302 	and.w	r3, r3, #2
 8060c7e:	2b00      	cmp	r3, #0
 8060c80:	d005      	beq.n	8060c8e <HAL_RCC_OscConfig+0x62>
 8060c82:	687b      	ldr	r3, [r7, #4]
 8060c84:	699b      	ldr	r3, [r3, #24]
 8060c86:	2b00      	cmp	r3, #0
 8060c88:	d101      	bne.n	8060c8e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8060c8a:	2301      	movs	r3, #1
 8060c8c:	e3b3      	b.n	80613f6 <HAL_RCC_OscConfig+0x7ca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8060c8e:	687b      	ldr	r3, [r7, #4]
 8060c90:	6a1a      	ldr	r2, [r3, #32]
 8060c92:	4b8f      	ldr	r3, [pc, #572]	; (8060ed0 <HAL_RCC_OscConfig+0x2a4>)
 8060c94:	681b      	ldr	r3, [r3, #0]
 8060c96:	f003 0308 	and.w	r3, r3, #8
 8060c9a:	2b00      	cmp	r3, #0
 8060c9c:	d004      	beq.n	8060ca8 <HAL_RCC_OscConfig+0x7c>
 8060c9e:	4b8c      	ldr	r3, [pc, #560]	; (8060ed0 <HAL_RCC_OscConfig+0x2a4>)
 8060ca0:	681b      	ldr	r3, [r3, #0]
 8060ca2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8060ca6:	e005      	b.n	8060cb4 <HAL_RCC_OscConfig+0x88>
 8060ca8:	4b89      	ldr	r3, [pc, #548]	; (8060ed0 <HAL_RCC_OscConfig+0x2a4>)
 8060caa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8060cae:	091b      	lsrs	r3, r3, #4
 8060cb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8060cb4:	4293      	cmp	r3, r2
 8060cb6:	d223      	bcs.n	8060d00 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8060cb8:	687b      	ldr	r3, [r7, #4]
 8060cba:	6a1b      	ldr	r3, [r3, #32]
 8060cbc:	4618      	mov	r0, r3
 8060cbe:	f000 fd47 	bl	8061750 <RCC_SetFlashLatencyFromMSIRange>
 8060cc2:	4603      	mov	r3, r0
 8060cc4:	2b00      	cmp	r3, #0
 8060cc6:	d001      	beq.n	8060ccc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8060cc8:	2301      	movs	r3, #1
 8060cca:	e394      	b.n	80613f6 <HAL_RCC_OscConfig+0x7ca>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8060ccc:	4b80      	ldr	r3, [pc, #512]	; (8060ed0 <HAL_RCC_OscConfig+0x2a4>)
 8060cce:	681b      	ldr	r3, [r3, #0]
 8060cd0:	4a7f      	ldr	r2, [pc, #508]	; (8060ed0 <HAL_RCC_OscConfig+0x2a4>)
 8060cd2:	f043 0308 	orr.w	r3, r3, #8
 8060cd6:	6013      	str	r3, [r2, #0]
 8060cd8:	4b7d      	ldr	r3, [pc, #500]	; (8060ed0 <HAL_RCC_OscConfig+0x2a4>)
 8060cda:	681b      	ldr	r3, [r3, #0]
 8060cdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8060ce0:	687b      	ldr	r3, [r7, #4]
 8060ce2:	6a1b      	ldr	r3, [r3, #32]
 8060ce4:	497a      	ldr	r1, [pc, #488]	; (8060ed0 <HAL_RCC_OscConfig+0x2a4>)
 8060ce6:	4313      	orrs	r3, r2
 8060ce8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8060cea:	4b79      	ldr	r3, [pc, #484]	; (8060ed0 <HAL_RCC_OscConfig+0x2a4>)
 8060cec:	685b      	ldr	r3, [r3, #4]
 8060cee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8060cf2:	687b      	ldr	r3, [r7, #4]
 8060cf4:	69db      	ldr	r3, [r3, #28]
 8060cf6:	021b      	lsls	r3, r3, #8
 8060cf8:	4975      	ldr	r1, [pc, #468]	; (8060ed0 <HAL_RCC_OscConfig+0x2a4>)
 8060cfa:	4313      	orrs	r3, r2
 8060cfc:	604b      	str	r3, [r1, #4]
 8060cfe:	e022      	b.n	8060d46 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8060d00:	4b73      	ldr	r3, [pc, #460]	; (8060ed0 <HAL_RCC_OscConfig+0x2a4>)
 8060d02:	681b      	ldr	r3, [r3, #0]
 8060d04:	4a72      	ldr	r2, [pc, #456]	; (8060ed0 <HAL_RCC_OscConfig+0x2a4>)
 8060d06:	f043 0308 	orr.w	r3, r3, #8
 8060d0a:	6013      	str	r3, [r2, #0]
 8060d0c:	4b70      	ldr	r3, [pc, #448]	; (8060ed0 <HAL_RCC_OscConfig+0x2a4>)
 8060d0e:	681b      	ldr	r3, [r3, #0]
 8060d10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8060d14:	687b      	ldr	r3, [r7, #4]
 8060d16:	6a1b      	ldr	r3, [r3, #32]
 8060d18:	496d      	ldr	r1, [pc, #436]	; (8060ed0 <HAL_RCC_OscConfig+0x2a4>)
 8060d1a:	4313      	orrs	r3, r2
 8060d1c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8060d1e:	4b6c      	ldr	r3, [pc, #432]	; (8060ed0 <HAL_RCC_OscConfig+0x2a4>)
 8060d20:	685b      	ldr	r3, [r3, #4]
 8060d22:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8060d26:	687b      	ldr	r3, [r7, #4]
 8060d28:	69db      	ldr	r3, [r3, #28]
 8060d2a:	021b      	lsls	r3, r3, #8
 8060d2c:	4968      	ldr	r1, [pc, #416]	; (8060ed0 <HAL_RCC_OscConfig+0x2a4>)
 8060d2e:	4313      	orrs	r3, r2
 8060d30:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8060d32:	687b      	ldr	r3, [r7, #4]
 8060d34:	6a1b      	ldr	r3, [r3, #32]
 8060d36:	4618      	mov	r0, r3
 8060d38:	f000 fd0a 	bl	8061750 <RCC_SetFlashLatencyFromMSIRange>
 8060d3c:	4603      	mov	r3, r0
 8060d3e:	2b00      	cmp	r3, #0
 8060d40:	d001      	beq.n	8060d46 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8060d42:	2301      	movs	r3, #1
 8060d44:	e357      	b.n	80613f6 <HAL_RCC_OscConfig+0x7ca>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8060d46:	f000 fc41 	bl	80615cc <HAL_RCC_GetSysClockFreq>
 8060d4a:	4601      	mov	r1, r0
 8060d4c:	4b60      	ldr	r3, [pc, #384]	; (8060ed0 <HAL_RCC_OscConfig+0x2a4>)
 8060d4e:	689b      	ldr	r3, [r3, #8]
 8060d50:	091b      	lsrs	r3, r3, #4
 8060d52:	f003 030f 	and.w	r3, r3, #15
 8060d56:	4a5f      	ldr	r2, [pc, #380]	; (8060ed4 <HAL_RCC_OscConfig+0x2a8>)
 8060d58:	5cd3      	ldrb	r3, [r2, r3]
 8060d5a:	f003 031f 	and.w	r3, r3, #31
 8060d5e:	fa21 f303 	lsr.w	r3, r1, r3
 8060d62:	4a5d      	ldr	r2, [pc, #372]	; (8060ed8 <HAL_RCC_OscConfig+0x2ac>)
 8060d64:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8060d66:	4b5d      	ldr	r3, [pc, #372]	; (8060edc <HAL_RCC_OscConfig+0x2b0>)
 8060d68:	681b      	ldr	r3, [r3, #0]
 8060d6a:	4618      	mov	r0, r3
 8060d6c:	f7ff fbd6 	bl	806051c <HAL_InitTick>
 8060d70:	4603      	mov	r3, r0
 8060d72:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8060d74:	7bfb      	ldrb	r3, [r7, #15]
 8060d76:	2b00      	cmp	r3, #0
 8060d78:	d052      	beq.n	8060e20 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8060d7a:	7bfb      	ldrb	r3, [r7, #15]
 8060d7c:	e33b      	b.n	80613f6 <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8060d7e:	687b      	ldr	r3, [r7, #4]
 8060d80:	699b      	ldr	r3, [r3, #24]
 8060d82:	2b00      	cmp	r3, #0
 8060d84:	d032      	beq.n	8060dec <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8060d86:	4b52      	ldr	r3, [pc, #328]	; (8060ed0 <HAL_RCC_OscConfig+0x2a4>)
 8060d88:	681b      	ldr	r3, [r3, #0]
 8060d8a:	4a51      	ldr	r2, [pc, #324]	; (8060ed0 <HAL_RCC_OscConfig+0x2a4>)
 8060d8c:	f043 0301 	orr.w	r3, r3, #1
 8060d90:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8060d92:	f7ff fc0f 	bl	80605b4 <HAL_GetTick>
 8060d96:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8060d98:	e008      	b.n	8060dac <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8060d9a:	f7ff fc0b 	bl	80605b4 <HAL_GetTick>
 8060d9e:	4602      	mov	r2, r0
 8060da0:	693b      	ldr	r3, [r7, #16]
 8060da2:	1ad3      	subs	r3, r2, r3
 8060da4:	2b02      	cmp	r3, #2
 8060da6:	d901      	bls.n	8060dac <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8060da8:	2303      	movs	r3, #3
 8060daa:	e324      	b.n	80613f6 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8060dac:	4b48      	ldr	r3, [pc, #288]	; (8060ed0 <HAL_RCC_OscConfig+0x2a4>)
 8060dae:	681b      	ldr	r3, [r3, #0]
 8060db0:	f003 0302 	and.w	r3, r3, #2
 8060db4:	2b00      	cmp	r3, #0
 8060db6:	d0f0      	beq.n	8060d9a <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8060db8:	4b45      	ldr	r3, [pc, #276]	; (8060ed0 <HAL_RCC_OscConfig+0x2a4>)
 8060dba:	681b      	ldr	r3, [r3, #0]
 8060dbc:	4a44      	ldr	r2, [pc, #272]	; (8060ed0 <HAL_RCC_OscConfig+0x2a4>)
 8060dbe:	f043 0308 	orr.w	r3, r3, #8
 8060dc2:	6013      	str	r3, [r2, #0]
 8060dc4:	4b42      	ldr	r3, [pc, #264]	; (8060ed0 <HAL_RCC_OscConfig+0x2a4>)
 8060dc6:	681b      	ldr	r3, [r3, #0]
 8060dc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8060dcc:	687b      	ldr	r3, [r7, #4]
 8060dce:	6a1b      	ldr	r3, [r3, #32]
 8060dd0:	493f      	ldr	r1, [pc, #252]	; (8060ed0 <HAL_RCC_OscConfig+0x2a4>)
 8060dd2:	4313      	orrs	r3, r2
 8060dd4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8060dd6:	4b3e      	ldr	r3, [pc, #248]	; (8060ed0 <HAL_RCC_OscConfig+0x2a4>)
 8060dd8:	685b      	ldr	r3, [r3, #4]
 8060dda:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8060dde:	687b      	ldr	r3, [r7, #4]
 8060de0:	69db      	ldr	r3, [r3, #28]
 8060de2:	021b      	lsls	r3, r3, #8
 8060de4:	493a      	ldr	r1, [pc, #232]	; (8060ed0 <HAL_RCC_OscConfig+0x2a4>)
 8060de6:	4313      	orrs	r3, r2
 8060de8:	604b      	str	r3, [r1, #4]
 8060dea:	e01a      	b.n	8060e22 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8060dec:	4b38      	ldr	r3, [pc, #224]	; (8060ed0 <HAL_RCC_OscConfig+0x2a4>)
 8060dee:	681b      	ldr	r3, [r3, #0]
 8060df0:	4a37      	ldr	r2, [pc, #220]	; (8060ed0 <HAL_RCC_OscConfig+0x2a4>)
 8060df2:	f023 0301 	bic.w	r3, r3, #1
 8060df6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8060df8:	f7ff fbdc 	bl	80605b4 <HAL_GetTick>
 8060dfc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8060dfe:	e008      	b.n	8060e12 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8060e00:	f7ff fbd8 	bl	80605b4 <HAL_GetTick>
 8060e04:	4602      	mov	r2, r0
 8060e06:	693b      	ldr	r3, [r7, #16]
 8060e08:	1ad3      	subs	r3, r2, r3
 8060e0a:	2b02      	cmp	r3, #2
 8060e0c:	d901      	bls.n	8060e12 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8060e0e:	2303      	movs	r3, #3
 8060e10:	e2f1      	b.n	80613f6 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8060e12:	4b2f      	ldr	r3, [pc, #188]	; (8060ed0 <HAL_RCC_OscConfig+0x2a4>)
 8060e14:	681b      	ldr	r3, [r3, #0]
 8060e16:	f003 0302 	and.w	r3, r3, #2
 8060e1a:	2b00      	cmp	r3, #0
 8060e1c:	d1f0      	bne.n	8060e00 <HAL_RCC_OscConfig+0x1d4>
 8060e1e:	e000      	b.n	8060e22 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8060e20:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8060e22:	687b      	ldr	r3, [r7, #4]
 8060e24:	681b      	ldr	r3, [r3, #0]
 8060e26:	f003 0301 	and.w	r3, r3, #1
 8060e2a:	2b00      	cmp	r3, #0
 8060e2c:	d074      	beq.n	8060f18 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8060e2e:	69bb      	ldr	r3, [r7, #24]
 8060e30:	2b08      	cmp	r3, #8
 8060e32:	d005      	beq.n	8060e40 <HAL_RCC_OscConfig+0x214>
 8060e34:	69bb      	ldr	r3, [r7, #24]
 8060e36:	2b0c      	cmp	r3, #12
 8060e38:	d10e      	bne.n	8060e58 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8060e3a:	697b      	ldr	r3, [r7, #20]
 8060e3c:	2b03      	cmp	r3, #3
 8060e3e:	d10b      	bne.n	8060e58 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8060e40:	4b23      	ldr	r3, [pc, #140]	; (8060ed0 <HAL_RCC_OscConfig+0x2a4>)
 8060e42:	681b      	ldr	r3, [r3, #0]
 8060e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8060e48:	2b00      	cmp	r3, #0
 8060e4a:	d064      	beq.n	8060f16 <HAL_RCC_OscConfig+0x2ea>
 8060e4c:	687b      	ldr	r3, [r7, #4]
 8060e4e:	685b      	ldr	r3, [r3, #4]
 8060e50:	2b00      	cmp	r3, #0
 8060e52:	d160      	bne.n	8060f16 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8060e54:	2301      	movs	r3, #1
 8060e56:	e2ce      	b.n	80613f6 <HAL_RCC_OscConfig+0x7ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8060e58:	687b      	ldr	r3, [r7, #4]
 8060e5a:	685b      	ldr	r3, [r3, #4]
 8060e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8060e60:	d106      	bne.n	8060e70 <HAL_RCC_OscConfig+0x244>
 8060e62:	4b1b      	ldr	r3, [pc, #108]	; (8060ed0 <HAL_RCC_OscConfig+0x2a4>)
 8060e64:	681b      	ldr	r3, [r3, #0]
 8060e66:	4a1a      	ldr	r2, [pc, #104]	; (8060ed0 <HAL_RCC_OscConfig+0x2a4>)
 8060e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8060e6c:	6013      	str	r3, [r2, #0]
 8060e6e:	e01d      	b.n	8060eac <HAL_RCC_OscConfig+0x280>
 8060e70:	687b      	ldr	r3, [r7, #4]
 8060e72:	685b      	ldr	r3, [r3, #4]
 8060e74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8060e78:	d10c      	bne.n	8060e94 <HAL_RCC_OscConfig+0x268>
 8060e7a:	4b15      	ldr	r3, [pc, #84]	; (8060ed0 <HAL_RCC_OscConfig+0x2a4>)
 8060e7c:	681b      	ldr	r3, [r3, #0]
 8060e7e:	4a14      	ldr	r2, [pc, #80]	; (8060ed0 <HAL_RCC_OscConfig+0x2a4>)
 8060e80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8060e84:	6013      	str	r3, [r2, #0]
 8060e86:	4b12      	ldr	r3, [pc, #72]	; (8060ed0 <HAL_RCC_OscConfig+0x2a4>)
 8060e88:	681b      	ldr	r3, [r3, #0]
 8060e8a:	4a11      	ldr	r2, [pc, #68]	; (8060ed0 <HAL_RCC_OscConfig+0x2a4>)
 8060e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8060e90:	6013      	str	r3, [r2, #0]
 8060e92:	e00b      	b.n	8060eac <HAL_RCC_OscConfig+0x280>
 8060e94:	4b0e      	ldr	r3, [pc, #56]	; (8060ed0 <HAL_RCC_OscConfig+0x2a4>)
 8060e96:	681b      	ldr	r3, [r3, #0]
 8060e98:	4a0d      	ldr	r2, [pc, #52]	; (8060ed0 <HAL_RCC_OscConfig+0x2a4>)
 8060e9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8060e9e:	6013      	str	r3, [r2, #0]
 8060ea0:	4b0b      	ldr	r3, [pc, #44]	; (8060ed0 <HAL_RCC_OscConfig+0x2a4>)
 8060ea2:	681b      	ldr	r3, [r3, #0]
 8060ea4:	4a0a      	ldr	r2, [pc, #40]	; (8060ed0 <HAL_RCC_OscConfig+0x2a4>)
 8060ea6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8060eaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8060eac:	687b      	ldr	r3, [r7, #4]
 8060eae:	685b      	ldr	r3, [r3, #4]
 8060eb0:	2b00      	cmp	r3, #0
 8060eb2:	d01c      	beq.n	8060eee <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8060eb4:	f7ff fb7e 	bl	80605b4 <HAL_GetTick>
 8060eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8060eba:	e011      	b.n	8060ee0 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8060ebc:	f7ff fb7a 	bl	80605b4 <HAL_GetTick>
 8060ec0:	4602      	mov	r2, r0
 8060ec2:	693b      	ldr	r3, [r7, #16]
 8060ec4:	1ad3      	subs	r3, r2, r3
 8060ec6:	2b64      	cmp	r3, #100	; 0x64
 8060ec8:	d90a      	bls.n	8060ee0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8060eca:	2303      	movs	r3, #3
 8060ecc:	e293      	b.n	80613f6 <HAL_RCC_OscConfig+0x7ca>
 8060ece:	bf00      	nop
 8060ed0:	40021000 	.word	0x40021000
 8060ed4:	08063214 	.word	0x08063214
 8060ed8:	20000008 	.word	0x20000008
 8060edc:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8060ee0:	4bae      	ldr	r3, [pc, #696]	; (806119c <HAL_RCC_OscConfig+0x570>)
 8060ee2:	681b      	ldr	r3, [r3, #0]
 8060ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8060ee8:	2b00      	cmp	r3, #0
 8060eea:	d0e7      	beq.n	8060ebc <HAL_RCC_OscConfig+0x290>
 8060eec:	e014      	b.n	8060f18 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8060eee:	f7ff fb61 	bl	80605b4 <HAL_GetTick>
 8060ef2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8060ef4:	e008      	b.n	8060f08 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8060ef6:	f7ff fb5d 	bl	80605b4 <HAL_GetTick>
 8060efa:	4602      	mov	r2, r0
 8060efc:	693b      	ldr	r3, [r7, #16]
 8060efe:	1ad3      	subs	r3, r2, r3
 8060f00:	2b64      	cmp	r3, #100	; 0x64
 8060f02:	d901      	bls.n	8060f08 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8060f04:	2303      	movs	r3, #3
 8060f06:	e276      	b.n	80613f6 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8060f08:	4ba4      	ldr	r3, [pc, #656]	; (806119c <HAL_RCC_OscConfig+0x570>)
 8060f0a:	681b      	ldr	r3, [r3, #0]
 8060f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8060f10:	2b00      	cmp	r3, #0
 8060f12:	d1f0      	bne.n	8060ef6 <HAL_RCC_OscConfig+0x2ca>
 8060f14:	e000      	b.n	8060f18 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8060f16:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8060f18:	687b      	ldr	r3, [r7, #4]
 8060f1a:	681b      	ldr	r3, [r3, #0]
 8060f1c:	f003 0302 	and.w	r3, r3, #2
 8060f20:	2b00      	cmp	r3, #0
 8060f22:	d060      	beq.n	8060fe6 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8060f24:	69bb      	ldr	r3, [r7, #24]
 8060f26:	2b04      	cmp	r3, #4
 8060f28:	d005      	beq.n	8060f36 <HAL_RCC_OscConfig+0x30a>
 8060f2a:	69bb      	ldr	r3, [r7, #24]
 8060f2c:	2b0c      	cmp	r3, #12
 8060f2e:	d119      	bne.n	8060f64 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8060f30:	697b      	ldr	r3, [r7, #20]
 8060f32:	2b02      	cmp	r3, #2
 8060f34:	d116      	bne.n	8060f64 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8060f36:	4b99      	ldr	r3, [pc, #612]	; (806119c <HAL_RCC_OscConfig+0x570>)
 8060f38:	681b      	ldr	r3, [r3, #0]
 8060f3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8060f3e:	2b00      	cmp	r3, #0
 8060f40:	d005      	beq.n	8060f4e <HAL_RCC_OscConfig+0x322>
 8060f42:	687b      	ldr	r3, [r7, #4]
 8060f44:	68db      	ldr	r3, [r3, #12]
 8060f46:	2b00      	cmp	r3, #0
 8060f48:	d101      	bne.n	8060f4e <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8060f4a:	2301      	movs	r3, #1
 8060f4c:	e253      	b.n	80613f6 <HAL_RCC_OscConfig+0x7ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8060f4e:	4b93      	ldr	r3, [pc, #588]	; (806119c <HAL_RCC_OscConfig+0x570>)
 8060f50:	685b      	ldr	r3, [r3, #4]
 8060f52:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8060f56:	687b      	ldr	r3, [r7, #4]
 8060f58:	691b      	ldr	r3, [r3, #16]
 8060f5a:	061b      	lsls	r3, r3, #24
 8060f5c:	498f      	ldr	r1, [pc, #572]	; (806119c <HAL_RCC_OscConfig+0x570>)
 8060f5e:	4313      	orrs	r3, r2
 8060f60:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8060f62:	e040      	b.n	8060fe6 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8060f64:	687b      	ldr	r3, [r7, #4]
 8060f66:	68db      	ldr	r3, [r3, #12]
 8060f68:	2b00      	cmp	r3, #0
 8060f6a:	d023      	beq.n	8060fb4 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8060f6c:	4b8b      	ldr	r3, [pc, #556]	; (806119c <HAL_RCC_OscConfig+0x570>)
 8060f6e:	681b      	ldr	r3, [r3, #0]
 8060f70:	4a8a      	ldr	r2, [pc, #552]	; (806119c <HAL_RCC_OscConfig+0x570>)
 8060f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8060f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8060f78:	f7ff fb1c 	bl	80605b4 <HAL_GetTick>
 8060f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8060f7e:	e008      	b.n	8060f92 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8060f80:	f7ff fb18 	bl	80605b4 <HAL_GetTick>
 8060f84:	4602      	mov	r2, r0
 8060f86:	693b      	ldr	r3, [r7, #16]
 8060f88:	1ad3      	subs	r3, r2, r3
 8060f8a:	2b02      	cmp	r3, #2
 8060f8c:	d901      	bls.n	8060f92 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8060f8e:	2303      	movs	r3, #3
 8060f90:	e231      	b.n	80613f6 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8060f92:	4b82      	ldr	r3, [pc, #520]	; (806119c <HAL_RCC_OscConfig+0x570>)
 8060f94:	681b      	ldr	r3, [r3, #0]
 8060f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8060f9a:	2b00      	cmp	r3, #0
 8060f9c:	d0f0      	beq.n	8060f80 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8060f9e:	4b7f      	ldr	r3, [pc, #508]	; (806119c <HAL_RCC_OscConfig+0x570>)
 8060fa0:	685b      	ldr	r3, [r3, #4]
 8060fa2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8060fa6:	687b      	ldr	r3, [r7, #4]
 8060fa8:	691b      	ldr	r3, [r3, #16]
 8060faa:	061b      	lsls	r3, r3, #24
 8060fac:	497b      	ldr	r1, [pc, #492]	; (806119c <HAL_RCC_OscConfig+0x570>)
 8060fae:	4313      	orrs	r3, r2
 8060fb0:	604b      	str	r3, [r1, #4]
 8060fb2:	e018      	b.n	8060fe6 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8060fb4:	4b79      	ldr	r3, [pc, #484]	; (806119c <HAL_RCC_OscConfig+0x570>)
 8060fb6:	681b      	ldr	r3, [r3, #0]
 8060fb8:	4a78      	ldr	r2, [pc, #480]	; (806119c <HAL_RCC_OscConfig+0x570>)
 8060fba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8060fbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8060fc0:	f7ff faf8 	bl	80605b4 <HAL_GetTick>
 8060fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8060fc6:	e008      	b.n	8060fda <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8060fc8:	f7ff faf4 	bl	80605b4 <HAL_GetTick>
 8060fcc:	4602      	mov	r2, r0
 8060fce:	693b      	ldr	r3, [r7, #16]
 8060fd0:	1ad3      	subs	r3, r2, r3
 8060fd2:	2b02      	cmp	r3, #2
 8060fd4:	d901      	bls.n	8060fda <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8060fd6:	2303      	movs	r3, #3
 8060fd8:	e20d      	b.n	80613f6 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8060fda:	4b70      	ldr	r3, [pc, #448]	; (806119c <HAL_RCC_OscConfig+0x570>)
 8060fdc:	681b      	ldr	r3, [r3, #0]
 8060fde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8060fe2:	2b00      	cmp	r3, #0
 8060fe4:	d1f0      	bne.n	8060fc8 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8060fe6:	687b      	ldr	r3, [r7, #4]
 8060fe8:	681b      	ldr	r3, [r3, #0]
 8060fea:	f003 0308 	and.w	r3, r3, #8
 8060fee:	2b00      	cmp	r3, #0
 8060ff0:	d03c      	beq.n	806106c <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8060ff2:	687b      	ldr	r3, [r7, #4]
 8060ff4:	695b      	ldr	r3, [r3, #20]
 8060ff6:	2b00      	cmp	r3, #0
 8060ff8:	d01c      	beq.n	8061034 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8060ffa:	4b68      	ldr	r3, [pc, #416]	; (806119c <HAL_RCC_OscConfig+0x570>)
 8060ffc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8061000:	4a66      	ldr	r2, [pc, #408]	; (806119c <HAL_RCC_OscConfig+0x570>)
 8061002:	f043 0301 	orr.w	r3, r3, #1
 8061006:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 806100a:	f7ff fad3 	bl	80605b4 <HAL_GetTick>
 806100e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8061010:	e008      	b.n	8061024 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8061012:	f7ff facf 	bl	80605b4 <HAL_GetTick>
 8061016:	4602      	mov	r2, r0
 8061018:	693b      	ldr	r3, [r7, #16]
 806101a:	1ad3      	subs	r3, r2, r3
 806101c:	2b02      	cmp	r3, #2
 806101e:	d901      	bls.n	8061024 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8061020:	2303      	movs	r3, #3
 8061022:	e1e8      	b.n	80613f6 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8061024:	4b5d      	ldr	r3, [pc, #372]	; (806119c <HAL_RCC_OscConfig+0x570>)
 8061026:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 806102a:	f003 0302 	and.w	r3, r3, #2
 806102e:	2b00      	cmp	r3, #0
 8061030:	d0ef      	beq.n	8061012 <HAL_RCC_OscConfig+0x3e6>
 8061032:	e01b      	b.n	806106c <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8061034:	4b59      	ldr	r3, [pc, #356]	; (806119c <HAL_RCC_OscConfig+0x570>)
 8061036:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 806103a:	4a58      	ldr	r2, [pc, #352]	; (806119c <HAL_RCC_OscConfig+0x570>)
 806103c:	f023 0301 	bic.w	r3, r3, #1
 8061040:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8061044:	f7ff fab6 	bl	80605b4 <HAL_GetTick>
 8061048:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 806104a:	e008      	b.n	806105e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 806104c:	f7ff fab2 	bl	80605b4 <HAL_GetTick>
 8061050:	4602      	mov	r2, r0
 8061052:	693b      	ldr	r3, [r7, #16]
 8061054:	1ad3      	subs	r3, r2, r3
 8061056:	2b02      	cmp	r3, #2
 8061058:	d901      	bls.n	806105e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 806105a:	2303      	movs	r3, #3
 806105c:	e1cb      	b.n	80613f6 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 806105e:	4b4f      	ldr	r3, [pc, #316]	; (806119c <HAL_RCC_OscConfig+0x570>)
 8061060:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8061064:	f003 0302 	and.w	r3, r3, #2
 8061068:	2b00      	cmp	r3, #0
 806106a:	d1ef      	bne.n	806104c <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 806106c:	687b      	ldr	r3, [r7, #4]
 806106e:	681b      	ldr	r3, [r3, #0]
 8061070:	f003 0304 	and.w	r3, r3, #4
 8061074:	2b00      	cmp	r3, #0
 8061076:	f000 80a5 	beq.w	80611c4 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 806107a:	2300      	movs	r3, #0
 806107c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 806107e:	4b47      	ldr	r3, [pc, #284]	; (806119c <HAL_RCC_OscConfig+0x570>)
 8061080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8061082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8061086:	2b00      	cmp	r3, #0
 8061088:	d10d      	bne.n	80610a6 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 806108a:	4b44      	ldr	r3, [pc, #272]	; (806119c <HAL_RCC_OscConfig+0x570>)
 806108c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 806108e:	4a43      	ldr	r2, [pc, #268]	; (806119c <HAL_RCC_OscConfig+0x570>)
 8061090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8061094:	6593      	str	r3, [r2, #88]	; 0x58
 8061096:	4b41      	ldr	r3, [pc, #260]	; (806119c <HAL_RCC_OscConfig+0x570>)
 8061098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 806109a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 806109e:	60bb      	str	r3, [r7, #8]
 80610a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80610a2:	2301      	movs	r3, #1
 80610a4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80610a6:	4b3e      	ldr	r3, [pc, #248]	; (80611a0 <HAL_RCC_OscConfig+0x574>)
 80610a8:	681b      	ldr	r3, [r3, #0]
 80610aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80610ae:	2b00      	cmp	r3, #0
 80610b0:	d118      	bne.n	80610e4 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80610b2:	4b3b      	ldr	r3, [pc, #236]	; (80611a0 <HAL_RCC_OscConfig+0x574>)
 80610b4:	681b      	ldr	r3, [r3, #0]
 80610b6:	4a3a      	ldr	r2, [pc, #232]	; (80611a0 <HAL_RCC_OscConfig+0x574>)
 80610b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80610bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80610be:	f7ff fa79 	bl	80605b4 <HAL_GetTick>
 80610c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80610c4:	e008      	b.n	80610d8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80610c6:	f7ff fa75 	bl	80605b4 <HAL_GetTick>
 80610ca:	4602      	mov	r2, r0
 80610cc:	693b      	ldr	r3, [r7, #16]
 80610ce:	1ad3      	subs	r3, r2, r3
 80610d0:	2b02      	cmp	r3, #2
 80610d2:	d901      	bls.n	80610d8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80610d4:	2303      	movs	r3, #3
 80610d6:	e18e      	b.n	80613f6 <HAL_RCC_OscConfig+0x7ca>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80610d8:	4b31      	ldr	r3, [pc, #196]	; (80611a0 <HAL_RCC_OscConfig+0x574>)
 80610da:	681b      	ldr	r3, [r3, #0]
 80610dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80610e0:	2b00      	cmp	r3, #0
 80610e2:	d0f0      	beq.n	80610c6 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80610e4:	687b      	ldr	r3, [r7, #4]
 80610e6:	689b      	ldr	r3, [r3, #8]
 80610e8:	2b01      	cmp	r3, #1
 80610ea:	d108      	bne.n	80610fe <HAL_RCC_OscConfig+0x4d2>
 80610ec:	4b2b      	ldr	r3, [pc, #172]	; (806119c <HAL_RCC_OscConfig+0x570>)
 80610ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80610f2:	4a2a      	ldr	r2, [pc, #168]	; (806119c <HAL_RCC_OscConfig+0x570>)
 80610f4:	f043 0301 	orr.w	r3, r3, #1
 80610f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80610fc:	e024      	b.n	8061148 <HAL_RCC_OscConfig+0x51c>
 80610fe:	687b      	ldr	r3, [r7, #4]
 8061100:	689b      	ldr	r3, [r3, #8]
 8061102:	2b05      	cmp	r3, #5
 8061104:	d110      	bne.n	8061128 <HAL_RCC_OscConfig+0x4fc>
 8061106:	4b25      	ldr	r3, [pc, #148]	; (806119c <HAL_RCC_OscConfig+0x570>)
 8061108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 806110c:	4a23      	ldr	r2, [pc, #140]	; (806119c <HAL_RCC_OscConfig+0x570>)
 806110e:	f043 0304 	orr.w	r3, r3, #4
 8061112:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8061116:	4b21      	ldr	r3, [pc, #132]	; (806119c <HAL_RCC_OscConfig+0x570>)
 8061118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 806111c:	4a1f      	ldr	r2, [pc, #124]	; (806119c <HAL_RCC_OscConfig+0x570>)
 806111e:	f043 0301 	orr.w	r3, r3, #1
 8061122:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8061126:	e00f      	b.n	8061148 <HAL_RCC_OscConfig+0x51c>
 8061128:	4b1c      	ldr	r3, [pc, #112]	; (806119c <HAL_RCC_OscConfig+0x570>)
 806112a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 806112e:	4a1b      	ldr	r2, [pc, #108]	; (806119c <HAL_RCC_OscConfig+0x570>)
 8061130:	f023 0301 	bic.w	r3, r3, #1
 8061134:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8061138:	4b18      	ldr	r3, [pc, #96]	; (806119c <HAL_RCC_OscConfig+0x570>)
 806113a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 806113e:	4a17      	ldr	r2, [pc, #92]	; (806119c <HAL_RCC_OscConfig+0x570>)
 8061140:	f023 0304 	bic.w	r3, r3, #4
 8061144:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8061148:	687b      	ldr	r3, [r7, #4]
 806114a:	689b      	ldr	r3, [r3, #8]
 806114c:	2b00      	cmp	r3, #0
 806114e:	d016      	beq.n	806117e <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8061150:	f7ff fa30 	bl	80605b4 <HAL_GetTick>
 8061154:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8061156:	e00a      	b.n	806116e <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8061158:	f7ff fa2c 	bl	80605b4 <HAL_GetTick>
 806115c:	4602      	mov	r2, r0
 806115e:	693b      	ldr	r3, [r7, #16]
 8061160:	1ad3      	subs	r3, r2, r3
 8061162:	f241 3288 	movw	r2, #5000	; 0x1388
 8061166:	4293      	cmp	r3, r2
 8061168:	d901      	bls.n	806116e <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 806116a:	2303      	movs	r3, #3
 806116c:	e143      	b.n	80613f6 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 806116e:	4b0b      	ldr	r3, [pc, #44]	; (806119c <HAL_RCC_OscConfig+0x570>)
 8061170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8061174:	f003 0302 	and.w	r3, r3, #2
 8061178:	2b00      	cmp	r3, #0
 806117a:	d0ed      	beq.n	8061158 <HAL_RCC_OscConfig+0x52c>
 806117c:	e019      	b.n	80611b2 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 806117e:	f7ff fa19 	bl	80605b4 <HAL_GetTick>
 8061182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8061184:	e00e      	b.n	80611a4 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8061186:	f7ff fa15 	bl	80605b4 <HAL_GetTick>
 806118a:	4602      	mov	r2, r0
 806118c:	693b      	ldr	r3, [r7, #16]
 806118e:	1ad3      	subs	r3, r2, r3
 8061190:	f241 3288 	movw	r2, #5000	; 0x1388
 8061194:	4293      	cmp	r3, r2
 8061196:	d905      	bls.n	80611a4 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8061198:	2303      	movs	r3, #3
 806119a:	e12c      	b.n	80613f6 <HAL_RCC_OscConfig+0x7ca>
 806119c:	40021000 	.word	0x40021000
 80611a0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80611a4:	4b96      	ldr	r3, [pc, #600]	; (8061400 <HAL_RCC_OscConfig+0x7d4>)
 80611a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80611aa:	f003 0302 	and.w	r3, r3, #2
 80611ae:	2b00      	cmp	r3, #0
 80611b0:	d1e9      	bne.n	8061186 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80611b2:	7ffb      	ldrb	r3, [r7, #31]
 80611b4:	2b01      	cmp	r3, #1
 80611b6:	d105      	bne.n	80611c4 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80611b8:	4b91      	ldr	r3, [pc, #580]	; (8061400 <HAL_RCC_OscConfig+0x7d4>)
 80611ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80611bc:	4a90      	ldr	r2, [pc, #576]	; (8061400 <HAL_RCC_OscConfig+0x7d4>)
 80611be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80611c2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80611c4:	687b      	ldr	r3, [r7, #4]
 80611c6:	681b      	ldr	r3, [r3, #0]
 80611c8:	f003 0320 	and.w	r3, r3, #32
 80611cc:	2b00      	cmp	r3, #0
 80611ce:	d03c      	beq.n	806124a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80611d0:	687b      	ldr	r3, [r7, #4]
 80611d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80611d4:	2b00      	cmp	r3, #0
 80611d6:	d01c      	beq.n	8061212 <HAL_RCC_OscConfig+0x5e6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80611d8:	4b89      	ldr	r3, [pc, #548]	; (8061400 <HAL_RCC_OscConfig+0x7d4>)
 80611da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80611de:	4a88      	ldr	r2, [pc, #544]	; (8061400 <HAL_RCC_OscConfig+0x7d4>)
 80611e0:	f043 0301 	orr.w	r3, r3, #1
 80611e4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80611e8:	f7ff f9e4 	bl	80605b4 <HAL_GetTick>
 80611ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80611ee:	e008      	b.n	8061202 <HAL_RCC_OscConfig+0x5d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80611f0:	f7ff f9e0 	bl	80605b4 <HAL_GetTick>
 80611f4:	4602      	mov	r2, r0
 80611f6:	693b      	ldr	r3, [r7, #16]
 80611f8:	1ad3      	subs	r3, r2, r3
 80611fa:	2b02      	cmp	r3, #2
 80611fc:	d901      	bls.n	8061202 <HAL_RCC_OscConfig+0x5d6>
        {
          return HAL_TIMEOUT;
 80611fe:	2303      	movs	r3, #3
 8061200:	e0f9      	b.n	80613f6 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8061202:	4b7f      	ldr	r3, [pc, #508]	; (8061400 <HAL_RCC_OscConfig+0x7d4>)
 8061204:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8061208:	f003 0302 	and.w	r3, r3, #2
 806120c:	2b00      	cmp	r3, #0
 806120e:	d0ef      	beq.n	80611f0 <HAL_RCC_OscConfig+0x5c4>
 8061210:	e01b      	b.n	806124a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8061212:	4b7b      	ldr	r3, [pc, #492]	; (8061400 <HAL_RCC_OscConfig+0x7d4>)
 8061214:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8061218:	4a79      	ldr	r2, [pc, #484]	; (8061400 <HAL_RCC_OscConfig+0x7d4>)
 806121a:	f023 0301 	bic.w	r3, r3, #1
 806121e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8061222:	f7ff f9c7 	bl	80605b4 <HAL_GetTick>
 8061226:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8061228:	e008      	b.n	806123c <HAL_RCC_OscConfig+0x610>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 806122a:	f7ff f9c3 	bl	80605b4 <HAL_GetTick>
 806122e:	4602      	mov	r2, r0
 8061230:	693b      	ldr	r3, [r7, #16]
 8061232:	1ad3      	subs	r3, r2, r3
 8061234:	2b02      	cmp	r3, #2
 8061236:	d901      	bls.n	806123c <HAL_RCC_OscConfig+0x610>
        {
          return HAL_TIMEOUT;
 8061238:	2303      	movs	r3, #3
 806123a:	e0dc      	b.n	80613f6 <HAL_RCC_OscConfig+0x7ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 806123c:	4b70      	ldr	r3, [pc, #448]	; (8061400 <HAL_RCC_OscConfig+0x7d4>)
 806123e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8061242:	f003 0302 	and.w	r3, r3, #2
 8061246:	2b00      	cmp	r3, #0
 8061248:	d1ef      	bne.n	806122a <HAL_RCC_OscConfig+0x5fe>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 806124a:	687b      	ldr	r3, [r7, #4]
 806124c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 806124e:	2b00      	cmp	r3, #0
 8061250:	f000 80d0 	beq.w	80613f4 <HAL_RCC_OscConfig+0x7c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8061254:	69bb      	ldr	r3, [r7, #24]
 8061256:	2b0c      	cmp	r3, #12
 8061258:	f000 808d 	beq.w	8061376 <HAL_RCC_OscConfig+0x74a>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 806125c:	687b      	ldr	r3, [r7, #4]
 806125e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8061260:	2b02      	cmp	r3, #2
 8061262:	d15a      	bne.n	806131a <HAL_RCC_OscConfig+0x6ee>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8061264:	4b66      	ldr	r3, [pc, #408]	; (8061400 <HAL_RCC_OscConfig+0x7d4>)
 8061266:	681b      	ldr	r3, [r3, #0]
 8061268:	4a65      	ldr	r2, [pc, #404]	; (8061400 <HAL_RCC_OscConfig+0x7d4>)
 806126a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 806126e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8061270:	f7ff f9a0 	bl	80605b4 <HAL_GetTick>
 8061274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8061276:	e008      	b.n	806128a <HAL_RCC_OscConfig+0x65e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8061278:	f7ff f99c 	bl	80605b4 <HAL_GetTick>
 806127c:	4602      	mov	r2, r0
 806127e:	693b      	ldr	r3, [r7, #16]
 8061280:	1ad3      	subs	r3, r2, r3
 8061282:	2b02      	cmp	r3, #2
 8061284:	d901      	bls.n	806128a <HAL_RCC_OscConfig+0x65e>
          {
            return HAL_TIMEOUT;
 8061286:	2303      	movs	r3, #3
 8061288:	e0b5      	b.n	80613f6 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 806128a:	4b5d      	ldr	r3, [pc, #372]	; (8061400 <HAL_RCC_OscConfig+0x7d4>)
 806128c:	681b      	ldr	r3, [r3, #0]
 806128e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8061292:	2b00      	cmp	r3, #0
 8061294:	d1f0      	bne.n	8061278 <HAL_RCC_OscConfig+0x64c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8061296:	4b5a      	ldr	r3, [pc, #360]	; (8061400 <HAL_RCC_OscConfig+0x7d4>)
 8061298:	68da      	ldr	r2, [r3, #12]
 806129a:	4b5a      	ldr	r3, [pc, #360]	; (8061404 <HAL_RCC_OscConfig+0x7d8>)
 806129c:	4013      	ands	r3, r2
 806129e:	687a      	ldr	r2, [r7, #4]
 80612a0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80612a2:	687a      	ldr	r2, [r7, #4]
 80612a4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80612a6:	3a01      	subs	r2, #1
 80612a8:	0112      	lsls	r2, r2, #4
 80612aa:	4311      	orrs	r1, r2
 80612ac:	687a      	ldr	r2, [r7, #4]
 80612ae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80612b0:	0212      	lsls	r2, r2, #8
 80612b2:	4311      	orrs	r1, r2
 80612b4:	687a      	ldr	r2, [r7, #4]
 80612b6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80612b8:	0852      	lsrs	r2, r2, #1
 80612ba:	3a01      	subs	r2, #1
 80612bc:	0552      	lsls	r2, r2, #21
 80612be:	4311      	orrs	r1, r2
 80612c0:	687a      	ldr	r2, [r7, #4]
 80612c2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80612c4:	0852      	lsrs	r2, r2, #1
 80612c6:	3a01      	subs	r2, #1
 80612c8:	0652      	lsls	r2, r2, #25
 80612ca:	4311      	orrs	r1, r2
 80612cc:	687a      	ldr	r2, [r7, #4]
 80612ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80612d0:	06d2      	lsls	r2, r2, #27
 80612d2:	430a      	orrs	r2, r1
 80612d4:	494a      	ldr	r1, [pc, #296]	; (8061400 <HAL_RCC_OscConfig+0x7d4>)
 80612d6:	4313      	orrs	r3, r2
 80612d8:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80612da:	4b49      	ldr	r3, [pc, #292]	; (8061400 <HAL_RCC_OscConfig+0x7d4>)
 80612dc:	681b      	ldr	r3, [r3, #0]
 80612de:	4a48      	ldr	r2, [pc, #288]	; (8061400 <HAL_RCC_OscConfig+0x7d4>)
 80612e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80612e4:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80612e6:	4b46      	ldr	r3, [pc, #280]	; (8061400 <HAL_RCC_OscConfig+0x7d4>)
 80612e8:	68db      	ldr	r3, [r3, #12]
 80612ea:	4a45      	ldr	r2, [pc, #276]	; (8061400 <HAL_RCC_OscConfig+0x7d4>)
 80612ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80612f0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80612f2:	f7ff f95f 	bl	80605b4 <HAL_GetTick>
 80612f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80612f8:	e008      	b.n	806130c <HAL_RCC_OscConfig+0x6e0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80612fa:	f7ff f95b 	bl	80605b4 <HAL_GetTick>
 80612fe:	4602      	mov	r2, r0
 8061300:	693b      	ldr	r3, [r7, #16]
 8061302:	1ad3      	subs	r3, r2, r3
 8061304:	2b02      	cmp	r3, #2
 8061306:	d901      	bls.n	806130c <HAL_RCC_OscConfig+0x6e0>
          {
            return HAL_TIMEOUT;
 8061308:	2303      	movs	r3, #3
 806130a:	e074      	b.n	80613f6 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 806130c:	4b3c      	ldr	r3, [pc, #240]	; (8061400 <HAL_RCC_OscConfig+0x7d4>)
 806130e:	681b      	ldr	r3, [r3, #0]
 8061310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8061314:	2b00      	cmp	r3, #0
 8061316:	d0f0      	beq.n	80612fa <HAL_RCC_OscConfig+0x6ce>
 8061318:	e06c      	b.n	80613f4 <HAL_RCC_OscConfig+0x7c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 806131a:	4b39      	ldr	r3, [pc, #228]	; (8061400 <HAL_RCC_OscConfig+0x7d4>)
 806131c:	681b      	ldr	r3, [r3, #0]
 806131e:	4a38      	ldr	r2, [pc, #224]	; (8061400 <HAL_RCC_OscConfig+0x7d4>)
 8061320:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8061324:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8061326:	4b36      	ldr	r3, [pc, #216]	; (8061400 <HAL_RCC_OscConfig+0x7d4>)
 8061328:	681b      	ldr	r3, [r3, #0]
 806132a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 806132e:	2b00      	cmp	r3, #0
 8061330:	d105      	bne.n	806133e <HAL_RCC_OscConfig+0x712>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8061332:	4b33      	ldr	r3, [pc, #204]	; (8061400 <HAL_RCC_OscConfig+0x7d4>)
 8061334:	68db      	ldr	r3, [r3, #12]
 8061336:	4a32      	ldr	r2, [pc, #200]	; (8061400 <HAL_RCC_OscConfig+0x7d4>)
 8061338:	f023 0303 	bic.w	r3, r3, #3
 806133c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 806133e:	4b30      	ldr	r3, [pc, #192]	; (8061400 <HAL_RCC_OscConfig+0x7d4>)
 8061340:	68db      	ldr	r3, [r3, #12]
 8061342:	4a2f      	ldr	r2, [pc, #188]	; (8061400 <HAL_RCC_OscConfig+0x7d4>)
 8061344:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8061348:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 806134c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 806134e:	f7ff f931 	bl	80605b4 <HAL_GetTick>
 8061352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8061354:	e008      	b.n	8061368 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8061356:	f7ff f92d 	bl	80605b4 <HAL_GetTick>
 806135a:	4602      	mov	r2, r0
 806135c:	693b      	ldr	r3, [r7, #16]
 806135e:	1ad3      	subs	r3, r2, r3
 8061360:	2b02      	cmp	r3, #2
 8061362:	d901      	bls.n	8061368 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8061364:	2303      	movs	r3, #3
 8061366:	e046      	b.n	80613f6 <HAL_RCC_OscConfig+0x7ca>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8061368:	4b25      	ldr	r3, [pc, #148]	; (8061400 <HAL_RCC_OscConfig+0x7d4>)
 806136a:	681b      	ldr	r3, [r3, #0]
 806136c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8061370:	2b00      	cmp	r3, #0
 8061372:	d1f0      	bne.n	8061356 <HAL_RCC_OscConfig+0x72a>
 8061374:	e03e      	b.n	80613f4 <HAL_RCC_OscConfig+0x7c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8061376:	687b      	ldr	r3, [r7, #4]
 8061378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 806137a:	2b01      	cmp	r3, #1
 806137c:	d101      	bne.n	8061382 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 806137e:	2301      	movs	r3, #1
 8061380:	e039      	b.n	80613f6 <HAL_RCC_OscConfig+0x7ca>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8061382:	4b1f      	ldr	r3, [pc, #124]	; (8061400 <HAL_RCC_OscConfig+0x7d4>)
 8061384:	68db      	ldr	r3, [r3, #12]
 8061386:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8061388:	697b      	ldr	r3, [r7, #20]
 806138a:	f003 0203 	and.w	r2, r3, #3
 806138e:	687b      	ldr	r3, [r7, #4]
 8061390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8061392:	429a      	cmp	r2, r3
 8061394:	d12c      	bne.n	80613f0 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8061396:	697b      	ldr	r3, [r7, #20]
 8061398:	f003 0270 	and.w	r2, r3, #112	; 0x70
 806139c:	687b      	ldr	r3, [r7, #4]
 806139e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80613a0:	3b01      	subs	r3, #1
 80613a2:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80613a4:	429a      	cmp	r2, r3
 80613a6:	d123      	bne.n	80613f0 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80613a8:	697b      	ldr	r3, [r7, #20]
 80613aa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80613ae:	687b      	ldr	r3, [r7, #4]
 80613b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80613b2:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80613b4:	429a      	cmp	r2, r3
 80613b6:	d11b      	bne.n	80613f0 <HAL_RCC_OscConfig+0x7c4>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80613b8:	697b      	ldr	r3, [r7, #20]
 80613ba:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80613be:	687b      	ldr	r3, [r7, #4]
 80613c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80613c2:	06db      	lsls	r3, r3, #27
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80613c4:	429a      	cmp	r2, r3
 80613c6:	d113      	bne.n	80613f0 <HAL_RCC_OscConfig+0x7c4>
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80613c8:	697b      	ldr	r3, [r7, #20]
 80613ca:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80613ce:	687b      	ldr	r3, [r7, #4]
 80613d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80613d2:	085b      	lsrs	r3, r3, #1
 80613d4:	3b01      	subs	r3, #1
 80613d6:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80613d8:	429a      	cmp	r2, r3
 80613da:	d109      	bne.n	80613f0 <HAL_RCC_OscConfig+0x7c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80613dc:	697b      	ldr	r3, [r7, #20]
 80613de:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80613e2:	687b      	ldr	r3, [r7, #4]
 80613e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80613e6:	085b      	lsrs	r3, r3, #1
 80613e8:	3b01      	subs	r3, #1
 80613ea:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80613ec:	429a      	cmp	r2, r3
 80613ee:	d001      	beq.n	80613f4 <HAL_RCC_OscConfig+0x7c8>
        {
          return HAL_ERROR;
 80613f0:	2301      	movs	r3, #1
 80613f2:	e000      	b.n	80613f6 <HAL_RCC_OscConfig+0x7ca>
        }
      }
    }
  }
  return HAL_OK;
 80613f4:	2300      	movs	r3, #0
}
 80613f6:	4618      	mov	r0, r3
 80613f8:	3720      	adds	r7, #32
 80613fa:	46bd      	mov	sp, r7
 80613fc:	bd80      	pop	{r7, pc}
 80613fe:	bf00      	nop
 8061400:	40021000 	.word	0x40021000
 8061404:	019d808c 	.word	0x019d808c

08061408 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8061408:	b580      	push	{r7, lr}
 806140a:	b084      	sub	sp, #16
 806140c:	af00      	add	r7, sp, #0
 806140e:	6078      	str	r0, [r7, #4]
 8061410:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8061412:	687b      	ldr	r3, [r7, #4]
 8061414:	2b00      	cmp	r3, #0
 8061416:	d101      	bne.n	806141c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8061418:	2301      	movs	r3, #1
 806141a:	e0c8      	b.n	80615ae <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 806141c:	4b66      	ldr	r3, [pc, #408]	; (80615b8 <HAL_RCC_ClockConfig+0x1b0>)
 806141e:	681b      	ldr	r3, [r3, #0]
 8061420:	f003 0307 	and.w	r3, r3, #7
 8061424:	683a      	ldr	r2, [r7, #0]
 8061426:	429a      	cmp	r2, r3
 8061428:	d910      	bls.n	806144c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 806142a:	4b63      	ldr	r3, [pc, #396]	; (80615b8 <HAL_RCC_ClockConfig+0x1b0>)
 806142c:	681b      	ldr	r3, [r3, #0]
 806142e:	f023 0207 	bic.w	r2, r3, #7
 8061432:	4961      	ldr	r1, [pc, #388]	; (80615b8 <HAL_RCC_ClockConfig+0x1b0>)
 8061434:	683b      	ldr	r3, [r7, #0]
 8061436:	4313      	orrs	r3, r2
 8061438:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 806143a:	4b5f      	ldr	r3, [pc, #380]	; (80615b8 <HAL_RCC_ClockConfig+0x1b0>)
 806143c:	681b      	ldr	r3, [r3, #0]
 806143e:	f003 0307 	and.w	r3, r3, #7
 8061442:	683a      	ldr	r2, [r7, #0]
 8061444:	429a      	cmp	r2, r3
 8061446:	d001      	beq.n	806144c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8061448:	2301      	movs	r3, #1
 806144a:	e0b0      	b.n	80615ae <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 806144c:	687b      	ldr	r3, [r7, #4]
 806144e:	681b      	ldr	r3, [r3, #0]
 8061450:	f003 0301 	and.w	r3, r3, #1
 8061454:	2b00      	cmp	r3, #0
 8061456:	d04c      	beq.n	80614f2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8061458:	687b      	ldr	r3, [r7, #4]
 806145a:	685b      	ldr	r3, [r3, #4]
 806145c:	2b03      	cmp	r3, #3
 806145e:	d107      	bne.n	8061470 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8061460:	4b56      	ldr	r3, [pc, #344]	; (80615bc <HAL_RCC_ClockConfig+0x1b4>)
 8061462:	681b      	ldr	r3, [r3, #0]
 8061464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8061468:	2b00      	cmp	r3, #0
 806146a:	d121      	bne.n	80614b0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 806146c:	2301      	movs	r3, #1
 806146e:	e09e      	b.n	80615ae <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8061470:	687b      	ldr	r3, [r7, #4]
 8061472:	685b      	ldr	r3, [r3, #4]
 8061474:	2b02      	cmp	r3, #2
 8061476:	d107      	bne.n	8061488 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8061478:	4b50      	ldr	r3, [pc, #320]	; (80615bc <HAL_RCC_ClockConfig+0x1b4>)
 806147a:	681b      	ldr	r3, [r3, #0]
 806147c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8061480:	2b00      	cmp	r3, #0
 8061482:	d115      	bne.n	80614b0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8061484:	2301      	movs	r3, #1
 8061486:	e092      	b.n	80615ae <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8061488:	687b      	ldr	r3, [r7, #4]
 806148a:	685b      	ldr	r3, [r3, #4]
 806148c:	2b00      	cmp	r3, #0
 806148e:	d107      	bne.n	80614a0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8061490:	4b4a      	ldr	r3, [pc, #296]	; (80615bc <HAL_RCC_ClockConfig+0x1b4>)
 8061492:	681b      	ldr	r3, [r3, #0]
 8061494:	f003 0302 	and.w	r3, r3, #2
 8061498:	2b00      	cmp	r3, #0
 806149a:	d109      	bne.n	80614b0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 806149c:	2301      	movs	r3, #1
 806149e:	e086      	b.n	80615ae <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80614a0:	4b46      	ldr	r3, [pc, #280]	; (80615bc <HAL_RCC_ClockConfig+0x1b4>)
 80614a2:	681b      	ldr	r3, [r3, #0]
 80614a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80614a8:	2b00      	cmp	r3, #0
 80614aa:	d101      	bne.n	80614b0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80614ac:	2301      	movs	r3, #1
 80614ae:	e07e      	b.n	80615ae <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80614b0:	4b42      	ldr	r3, [pc, #264]	; (80615bc <HAL_RCC_ClockConfig+0x1b4>)
 80614b2:	689b      	ldr	r3, [r3, #8]
 80614b4:	f023 0203 	bic.w	r2, r3, #3
 80614b8:	687b      	ldr	r3, [r7, #4]
 80614ba:	685b      	ldr	r3, [r3, #4]
 80614bc:	493f      	ldr	r1, [pc, #252]	; (80615bc <HAL_RCC_ClockConfig+0x1b4>)
 80614be:	4313      	orrs	r3, r2
 80614c0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80614c2:	f7ff f877 	bl	80605b4 <HAL_GetTick>
 80614c6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80614c8:	e00a      	b.n	80614e0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80614ca:	f7ff f873 	bl	80605b4 <HAL_GetTick>
 80614ce:	4602      	mov	r2, r0
 80614d0:	68fb      	ldr	r3, [r7, #12]
 80614d2:	1ad3      	subs	r3, r2, r3
 80614d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80614d8:	4293      	cmp	r3, r2
 80614da:	d901      	bls.n	80614e0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80614dc:	2303      	movs	r3, #3
 80614de:	e066      	b.n	80615ae <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80614e0:	4b36      	ldr	r3, [pc, #216]	; (80615bc <HAL_RCC_ClockConfig+0x1b4>)
 80614e2:	689b      	ldr	r3, [r3, #8]
 80614e4:	f003 020c 	and.w	r2, r3, #12
 80614e8:	687b      	ldr	r3, [r7, #4]
 80614ea:	685b      	ldr	r3, [r3, #4]
 80614ec:	009b      	lsls	r3, r3, #2
 80614ee:	429a      	cmp	r2, r3
 80614f0:	d1eb      	bne.n	80614ca <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80614f2:	687b      	ldr	r3, [r7, #4]
 80614f4:	681b      	ldr	r3, [r3, #0]
 80614f6:	f003 0302 	and.w	r3, r3, #2
 80614fa:	2b00      	cmp	r3, #0
 80614fc:	d008      	beq.n	8061510 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80614fe:	4b2f      	ldr	r3, [pc, #188]	; (80615bc <HAL_RCC_ClockConfig+0x1b4>)
 8061500:	689b      	ldr	r3, [r3, #8]
 8061502:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8061506:	687b      	ldr	r3, [r7, #4]
 8061508:	689b      	ldr	r3, [r3, #8]
 806150a:	492c      	ldr	r1, [pc, #176]	; (80615bc <HAL_RCC_ClockConfig+0x1b4>)
 806150c:	4313      	orrs	r3, r2
 806150e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8061510:	4b29      	ldr	r3, [pc, #164]	; (80615b8 <HAL_RCC_ClockConfig+0x1b0>)
 8061512:	681b      	ldr	r3, [r3, #0]
 8061514:	f003 0307 	and.w	r3, r3, #7
 8061518:	683a      	ldr	r2, [r7, #0]
 806151a:	429a      	cmp	r2, r3
 806151c:	d210      	bcs.n	8061540 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 806151e:	4b26      	ldr	r3, [pc, #152]	; (80615b8 <HAL_RCC_ClockConfig+0x1b0>)
 8061520:	681b      	ldr	r3, [r3, #0]
 8061522:	f023 0207 	bic.w	r2, r3, #7
 8061526:	4924      	ldr	r1, [pc, #144]	; (80615b8 <HAL_RCC_ClockConfig+0x1b0>)
 8061528:	683b      	ldr	r3, [r7, #0]
 806152a:	4313      	orrs	r3, r2
 806152c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 806152e:	4b22      	ldr	r3, [pc, #136]	; (80615b8 <HAL_RCC_ClockConfig+0x1b0>)
 8061530:	681b      	ldr	r3, [r3, #0]
 8061532:	f003 0307 	and.w	r3, r3, #7
 8061536:	683a      	ldr	r2, [r7, #0]
 8061538:	429a      	cmp	r2, r3
 806153a:	d001      	beq.n	8061540 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 806153c:	2301      	movs	r3, #1
 806153e:	e036      	b.n	80615ae <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8061540:	687b      	ldr	r3, [r7, #4]
 8061542:	681b      	ldr	r3, [r3, #0]
 8061544:	f003 0304 	and.w	r3, r3, #4
 8061548:	2b00      	cmp	r3, #0
 806154a:	d008      	beq.n	806155e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 806154c:	4b1b      	ldr	r3, [pc, #108]	; (80615bc <HAL_RCC_ClockConfig+0x1b4>)
 806154e:	689b      	ldr	r3, [r3, #8]
 8061550:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8061554:	687b      	ldr	r3, [r7, #4]
 8061556:	68db      	ldr	r3, [r3, #12]
 8061558:	4918      	ldr	r1, [pc, #96]	; (80615bc <HAL_RCC_ClockConfig+0x1b4>)
 806155a:	4313      	orrs	r3, r2
 806155c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 806155e:	687b      	ldr	r3, [r7, #4]
 8061560:	681b      	ldr	r3, [r3, #0]
 8061562:	f003 0308 	and.w	r3, r3, #8
 8061566:	2b00      	cmp	r3, #0
 8061568:	d009      	beq.n	806157e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 806156a:	4b14      	ldr	r3, [pc, #80]	; (80615bc <HAL_RCC_ClockConfig+0x1b4>)
 806156c:	689b      	ldr	r3, [r3, #8]
 806156e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8061572:	687b      	ldr	r3, [r7, #4]
 8061574:	691b      	ldr	r3, [r3, #16]
 8061576:	00db      	lsls	r3, r3, #3
 8061578:	4910      	ldr	r1, [pc, #64]	; (80615bc <HAL_RCC_ClockConfig+0x1b4>)
 806157a:	4313      	orrs	r3, r2
 806157c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 806157e:	f000 f825 	bl	80615cc <HAL_RCC_GetSysClockFreq>
 8061582:	4601      	mov	r1, r0
 8061584:	4b0d      	ldr	r3, [pc, #52]	; (80615bc <HAL_RCC_ClockConfig+0x1b4>)
 8061586:	689b      	ldr	r3, [r3, #8]
 8061588:	091b      	lsrs	r3, r3, #4
 806158a:	f003 030f 	and.w	r3, r3, #15
 806158e:	4a0c      	ldr	r2, [pc, #48]	; (80615c0 <HAL_RCC_ClockConfig+0x1b8>)
 8061590:	5cd3      	ldrb	r3, [r2, r3]
 8061592:	f003 031f 	and.w	r3, r3, #31
 8061596:	fa21 f303 	lsr.w	r3, r1, r3
 806159a:	4a0a      	ldr	r2, [pc, #40]	; (80615c4 <HAL_RCC_ClockConfig+0x1bc>)
 806159c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 806159e:	4b0a      	ldr	r3, [pc, #40]	; (80615c8 <HAL_RCC_ClockConfig+0x1c0>)
 80615a0:	681b      	ldr	r3, [r3, #0]
 80615a2:	4618      	mov	r0, r3
 80615a4:	f7fe ffba 	bl	806051c <HAL_InitTick>
 80615a8:	4603      	mov	r3, r0
 80615aa:	72fb      	strb	r3, [r7, #11]

  return status;
 80615ac:	7afb      	ldrb	r3, [r7, #11]
}
 80615ae:	4618      	mov	r0, r3
 80615b0:	3710      	adds	r7, #16
 80615b2:	46bd      	mov	sp, r7
 80615b4:	bd80      	pop	{r7, pc}
 80615b6:	bf00      	nop
 80615b8:	40022000 	.word	0x40022000
 80615bc:	40021000 	.word	0x40021000
 80615c0:	08063214 	.word	0x08063214
 80615c4:	20000008 	.word	0x20000008
 80615c8:	20000000 	.word	0x20000000

080615cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80615cc:	b480      	push	{r7}
 80615ce:	b089      	sub	sp, #36	; 0x24
 80615d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80615d2:	2300      	movs	r3, #0
 80615d4:	61fb      	str	r3, [r7, #28]
 80615d6:	2300      	movs	r3, #0
 80615d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80615da:	4b3d      	ldr	r3, [pc, #244]	; (80616d0 <HAL_RCC_GetSysClockFreq+0x104>)
 80615dc:	689b      	ldr	r3, [r3, #8]
 80615de:	f003 030c 	and.w	r3, r3, #12
 80615e2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80615e4:	4b3a      	ldr	r3, [pc, #232]	; (80616d0 <HAL_RCC_GetSysClockFreq+0x104>)
 80615e6:	68db      	ldr	r3, [r3, #12]
 80615e8:	f003 0303 	and.w	r3, r3, #3
 80615ec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80615ee:	693b      	ldr	r3, [r7, #16]
 80615f0:	2b00      	cmp	r3, #0
 80615f2:	d005      	beq.n	8061600 <HAL_RCC_GetSysClockFreq+0x34>
 80615f4:	693b      	ldr	r3, [r7, #16]
 80615f6:	2b0c      	cmp	r3, #12
 80615f8:	d121      	bne.n	806163e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80615fa:	68fb      	ldr	r3, [r7, #12]
 80615fc:	2b01      	cmp	r3, #1
 80615fe:	d11e      	bne.n	806163e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8061600:	4b33      	ldr	r3, [pc, #204]	; (80616d0 <HAL_RCC_GetSysClockFreq+0x104>)
 8061602:	681b      	ldr	r3, [r3, #0]
 8061604:	f003 0308 	and.w	r3, r3, #8
 8061608:	2b00      	cmp	r3, #0
 806160a:	d107      	bne.n	806161c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 806160c:	4b30      	ldr	r3, [pc, #192]	; (80616d0 <HAL_RCC_GetSysClockFreq+0x104>)
 806160e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8061612:	0a1b      	lsrs	r3, r3, #8
 8061614:	f003 030f 	and.w	r3, r3, #15
 8061618:	61fb      	str	r3, [r7, #28]
 806161a:	e005      	b.n	8061628 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 806161c:	4b2c      	ldr	r3, [pc, #176]	; (80616d0 <HAL_RCC_GetSysClockFreq+0x104>)
 806161e:	681b      	ldr	r3, [r3, #0]
 8061620:	091b      	lsrs	r3, r3, #4
 8061622:	f003 030f 	and.w	r3, r3, #15
 8061626:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8061628:	4a2a      	ldr	r2, [pc, #168]	; (80616d4 <HAL_RCC_GetSysClockFreq+0x108>)
 806162a:	69fb      	ldr	r3, [r7, #28]
 806162c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8061630:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8061632:	693b      	ldr	r3, [r7, #16]
 8061634:	2b00      	cmp	r3, #0
 8061636:	d10d      	bne.n	8061654 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8061638:	69fb      	ldr	r3, [r7, #28]
 806163a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 806163c:	e00a      	b.n	8061654 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 806163e:	693b      	ldr	r3, [r7, #16]
 8061640:	2b04      	cmp	r3, #4
 8061642:	d102      	bne.n	806164a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8061644:	4b24      	ldr	r3, [pc, #144]	; (80616d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8061646:	61bb      	str	r3, [r7, #24]
 8061648:	e004      	b.n	8061654 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 806164a:	693b      	ldr	r3, [r7, #16]
 806164c:	2b08      	cmp	r3, #8
 806164e:	d101      	bne.n	8061654 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8061650:	4b22      	ldr	r3, [pc, #136]	; (80616dc <HAL_RCC_GetSysClockFreq+0x110>)
 8061652:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8061654:	693b      	ldr	r3, [r7, #16]
 8061656:	2b0c      	cmp	r3, #12
 8061658:	d133      	bne.n	80616c2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 806165a:	4b1d      	ldr	r3, [pc, #116]	; (80616d0 <HAL_RCC_GetSysClockFreq+0x104>)
 806165c:	68db      	ldr	r3, [r3, #12]
 806165e:	f003 0303 	and.w	r3, r3, #3
 8061662:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8061664:	68bb      	ldr	r3, [r7, #8]
 8061666:	2b02      	cmp	r3, #2
 8061668:	d002      	beq.n	8061670 <HAL_RCC_GetSysClockFreq+0xa4>
 806166a:	2b03      	cmp	r3, #3
 806166c:	d003      	beq.n	8061676 <HAL_RCC_GetSysClockFreq+0xaa>
 806166e:	e005      	b.n	806167c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8061670:	4b19      	ldr	r3, [pc, #100]	; (80616d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8061672:	617b      	str	r3, [r7, #20]
      break;
 8061674:	e005      	b.n	8061682 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8061676:	4b19      	ldr	r3, [pc, #100]	; (80616dc <HAL_RCC_GetSysClockFreq+0x110>)
 8061678:	617b      	str	r3, [r7, #20]
      break;
 806167a:	e002      	b.n	8061682 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 806167c:	69fb      	ldr	r3, [r7, #28]
 806167e:	617b      	str	r3, [r7, #20]
      break;
 8061680:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8061682:	4b13      	ldr	r3, [pc, #76]	; (80616d0 <HAL_RCC_GetSysClockFreq+0x104>)
 8061684:	68db      	ldr	r3, [r3, #12]
 8061686:	091b      	lsrs	r3, r3, #4
 8061688:	f003 0307 	and.w	r3, r3, #7
 806168c:	3301      	adds	r3, #1
 806168e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8061690:	4b0f      	ldr	r3, [pc, #60]	; (80616d0 <HAL_RCC_GetSysClockFreq+0x104>)
 8061692:	68db      	ldr	r3, [r3, #12]
 8061694:	0a1b      	lsrs	r3, r3, #8
 8061696:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 806169a:	697a      	ldr	r2, [r7, #20]
 806169c:	fb02 f203 	mul.w	r2, r2, r3
 80616a0:	687b      	ldr	r3, [r7, #4]
 80616a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80616a6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80616a8:	4b09      	ldr	r3, [pc, #36]	; (80616d0 <HAL_RCC_GetSysClockFreq+0x104>)
 80616aa:	68db      	ldr	r3, [r3, #12]
 80616ac:	0e5b      	lsrs	r3, r3, #25
 80616ae:	f003 0303 	and.w	r3, r3, #3
 80616b2:	3301      	adds	r3, #1
 80616b4:	005b      	lsls	r3, r3, #1
 80616b6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80616b8:	697a      	ldr	r2, [r7, #20]
 80616ba:	683b      	ldr	r3, [r7, #0]
 80616bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80616c0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80616c2:	69bb      	ldr	r3, [r7, #24]
}
 80616c4:	4618      	mov	r0, r3
 80616c6:	3724      	adds	r7, #36	; 0x24
 80616c8:	46bd      	mov	sp, r7
 80616ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80616ce:	4770      	bx	lr
 80616d0:	40021000 	.word	0x40021000
 80616d4:	0806322c 	.word	0x0806322c
 80616d8:	00f42400 	.word	0x00f42400
 80616dc:	007a1200 	.word	0x007a1200

080616e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80616e0:	b480      	push	{r7}
 80616e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80616e4:	4b03      	ldr	r3, [pc, #12]	; (80616f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80616e6:	681b      	ldr	r3, [r3, #0]
}
 80616e8:	4618      	mov	r0, r3
 80616ea:	46bd      	mov	sp, r7
 80616ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80616f0:	4770      	bx	lr
 80616f2:	bf00      	nop
 80616f4:	20000008 	.word	0x20000008

080616f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80616f8:	b580      	push	{r7, lr}
 80616fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80616fc:	f7ff fff0 	bl	80616e0 <HAL_RCC_GetHCLKFreq>
 8061700:	4601      	mov	r1, r0
 8061702:	4b06      	ldr	r3, [pc, #24]	; (806171c <HAL_RCC_GetPCLK1Freq+0x24>)
 8061704:	689b      	ldr	r3, [r3, #8]
 8061706:	0a1b      	lsrs	r3, r3, #8
 8061708:	f003 0307 	and.w	r3, r3, #7
 806170c:	4a04      	ldr	r2, [pc, #16]	; (8061720 <HAL_RCC_GetPCLK1Freq+0x28>)
 806170e:	5cd3      	ldrb	r3, [r2, r3]
 8061710:	f003 031f 	and.w	r3, r3, #31
 8061714:	fa21 f303 	lsr.w	r3, r1, r3
}
 8061718:	4618      	mov	r0, r3
 806171a:	bd80      	pop	{r7, pc}
 806171c:	40021000 	.word	0x40021000
 8061720:	08063224 	.word	0x08063224

08061724 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8061724:	b580      	push	{r7, lr}
 8061726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8061728:	f7ff ffda 	bl	80616e0 <HAL_RCC_GetHCLKFreq>
 806172c:	4601      	mov	r1, r0
 806172e:	4b06      	ldr	r3, [pc, #24]	; (8061748 <HAL_RCC_GetPCLK2Freq+0x24>)
 8061730:	689b      	ldr	r3, [r3, #8]
 8061732:	0adb      	lsrs	r3, r3, #11
 8061734:	f003 0307 	and.w	r3, r3, #7
 8061738:	4a04      	ldr	r2, [pc, #16]	; (806174c <HAL_RCC_GetPCLK2Freq+0x28>)
 806173a:	5cd3      	ldrb	r3, [r2, r3]
 806173c:	f003 031f 	and.w	r3, r3, #31
 8061740:	fa21 f303 	lsr.w	r3, r1, r3
}
 8061744:	4618      	mov	r0, r3
 8061746:	bd80      	pop	{r7, pc}
 8061748:	40021000 	.word	0x40021000
 806174c:	08063224 	.word	0x08063224

08061750 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8061750:	b580      	push	{r7, lr}
 8061752:	b086      	sub	sp, #24
 8061754:	af00      	add	r7, sp, #0
 8061756:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8061758:	2300      	movs	r3, #0
 806175a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 806175c:	4b2a      	ldr	r3, [pc, #168]	; (8061808 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 806175e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8061760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8061764:	2b00      	cmp	r3, #0
 8061766:	d003      	beq.n	8061770 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8061768:	f7ff f9fc 	bl	8060b64 <HAL_PWREx_GetVoltageRange>
 806176c:	6178      	str	r0, [r7, #20]
 806176e:	e014      	b.n	806179a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8061770:	4b25      	ldr	r3, [pc, #148]	; (8061808 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8061772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8061774:	4a24      	ldr	r2, [pc, #144]	; (8061808 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8061776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 806177a:	6593      	str	r3, [r2, #88]	; 0x58
 806177c:	4b22      	ldr	r3, [pc, #136]	; (8061808 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 806177e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8061780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8061784:	60fb      	str	r3, [r7, #12]
 8061786:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8061788:	f7ff f9ec 	bl	8060b64 <HAL_PWREx_GetVoltageRange>
 806178c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 806178e:	4b1e      	ldr	r3, [pc, #120]	; (8061808 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8061790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8061792:	4a1d      	ldr	r2, [pc, #116]	; (8061808 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8061794:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8061798:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 806179a:	697b      	ldr	r3, [r7, #20]
 806179c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80617a0:	d10b      	bne.n	80617ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80617a2:	687b      	ldr	r3, [r7, #4]
 80617a4:	2b80      	cmp	r3, #128	; 0x80
 80617a6:	d919      	bls.n	80617dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80617a8:	687b      	ldr	r3, [r7, #4]
 80617aa:	2ba0      	cmp	r3, #160	; 0xa0
 80617ac:	d902      	bls.n	80617b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80617ae:	2302      	movs	r3, #2
 80617b0:	613b      	str	r3, [r7, #16]
 80617b2:	e013      	b.n	80617dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80617b4:	2301      	movs	r3, #1
 80617b6:	613b      	str	r3, [r7, #16]
 80617b8:	e010      	b.n	80617dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80617ba:	687b      	ldr	r3, [r7, #4]
 80617bc:	2b80      	cmp	r3, #128	; 0x80
 80617be:	d902      	bls.n	80617c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80617c0:	2303      	movs	r3, #3
 80617c2:	613b      	str	r3, [r7, #16]
 80617c4:	e00a      	b.n	80617dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80617c6:	687b      	ldr	r3, [r7, #4]
 80617c8:	2b80      	cmp	r3, #128	; 0x80
 80617ca:	d102      	bne.n	80617d2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80617cc:	2302      	movs	r3, #2
 80617ce:	613b      	str	r3, [r7, #16]
 80617d0:	e004      	b.n	80617dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80617d2:	687b      	ldr	r3, [r7, #4]
 80617d4:	2b70      	cmp	r3, #112	; 0x70
 80617d6:	d101      	bne.n	80617dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80617d8:	2301      	movs	r3, #1
 80617da:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80617dc:	4b0b      	ldr	r3, [pc, #44]	; (806180c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80617de:	681b      	ldr	r3, [r3, #0]
 80617e0:	f023 0207 	bic.w	r2, r3, #7
 80617e4:	4909      	ldr	r1, [pc, #36]	; (806180c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80617e6:	693b      	ldr	r3, [r7, #16]
 80617e8:	4313      	orrs	r3, r2
 80617ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80617ec:	4b07      	ldr	r3, [pc, #28]	; (806180c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80617ee:	681b      	ldr	r3, [r3, #0]
 80617f0:	f003 0307 	and.w	r3, r3, #7
 80617f4:	693a      	ldr	r2, [r7, #16]
 80617f6:	429a      	cmp	r2, r3
 80617f8:	d001      	beq.n	80617fe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80617fa:	2301      	movs	r3, #1
 80617fc:	e000      	b.n	8061800 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80617fe:	2300      	movs	r3, #0
}
 8061800:	4618      	mov	r0, r3
 8061802:	3718      	adds	r7, #24
 8061804:	46bd      	mov	sp, r7
 8061806:	bd80      	pop	{r7, pc}
 8061808:	40021000 	.word	0x40021000
 806180c:	40022000 	.word	0x40022000

08061810 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8061810:	b580      	push	{r7, lr}
 8061812:	b086      	sub	sp, #24
 8061814:	af00      	add	r7, sp, #0
 8061816:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8061818:	2300      	movs	r3, #0
 806181a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 806181c:	2300      	movs	r3, #0
 806181e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8061820:	687b      	ldr	r3, [r7, #4]
 8061822:	681b      	ldr	r3, [r3, #0]
 8061824:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8061828:	2b00      	cmp	r3, #0
 806182a:	d03f      	beq.n	80618ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 806182c:	687b      	ldr	r3, [r7, #4]
 806182e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8061830:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8061834:	d01c      	beq.n	8061870 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8061836:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 806183a:	d802      	bhi.n	8061842 <HAL_RCCEx_PeriphCLKConfig+0x32>
 806183c:	2b00      	cmp	r3, #0
 806183e:	d00e      	beq.n	806185e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8061840:	e01f      	b.n	8061882 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8061842:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8061846:	d003      	beq.n	8061850 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8061848:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 806184c:	d01c      	beq.n	8061888 <HAL_RCCEx_PeriphCLKConfig+0x78>
 806184e:	e018      	b.n	8061882 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8061850:	4b85      	ldr	r3, [pc, #532]	; (8061a68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8061852:	68db      	ldr	r3, [r3, #12]
 8061854:	4a84      	ldr	r2, [pc, #528]	; (8061a68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8061856:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 806185a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 806185c:	e015      	b.n	806188a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 806185e:	687b      	ldr	r3, [r7, #4]
 8061860:	3304      	adds	r3, #4
 8061862:	2100      	movs	r1, #0
 8061864:	4618      	mov	r0, r3
 8061866:	f000 facb 	bl	8061e00 <RCCEx_PLLSAI1_Config>
 806186a:	4603      	mov	r3, r0
 806186c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 806186e:	e00c      	b.n	806188a <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8061870:	687b      	ldr	r3, [r7, #4]
 8061872:	3320      	adds	r3, #32
 8061874:	2100      	movs	r1, #0
 8061876:	4618      	mov	r0, r3
 8061878:	f000 fbb2 	bl	8061fe0 <RCCEx_PLLSAI2_Config>
 806187c:	4603      	mov	r3, r0
 806187e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8061880:	e003      	b.n	806188a <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8061882:	2301      	movs	r3, #1
 8061884:	74fb      	strb	r3, [r7, #19]
      break;
 8061886:	e000      	b.n	806188a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8061888:	bf00      	nop
    }

    if(ret == HAL_OK)
 806188a:	7cfb      	ldrb	r3, [r7, #19]
 806188c:	2b00      	cmp	r3, #0
 806188e:	d10b      	bne.n	80618a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8061890:	4b75      	ldr	r3, [pc, #468]	; (8061a68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8061892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8061896:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 806189a:	687b      	ldr	r3, [r7, #4]
 806189c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 806189e:	4972      	ldr	r1, [pc, #456]	; (8061a68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80618a0:	4313      	orrs	r3, r2
 80618a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80618a6:	e001      	b.n	80618ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80618a8:	7cfb      	ldrb	r3, [r7, #19]
 80618aa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80618ac:	687b      	ldr	r3, [r7, #4]
 80618ae:	681b      	ldr	r3, [r3, #0]
 80618b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80618b4:	2b00      	cmp	r3, #0
 80618b6:	d03f      	beq.n	8061938 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80618b8:	687b      	ldr	r3, [r7, #4]
 80618ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80618bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80618c0:	d01c      	beq.n	80618fc <HAL_RCCEx_PeriphCLKConfig+0xec>
 80618c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80618c6:	d802      	bhi.n	80618ce <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80618c8:	2b00      	cmp	r3, #0
 80618ca:	d00e      	beq.n	80618ea <HAL_RCCEx_PeriphCLKConfig+0xda>
 80618cc:	e01f      	b.n	806190e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80618ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80618d2:	d003      	beq.n	80618dc <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80618d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80618d8:	d01c      	beq.n	8061914 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80618da:	e018      	b.n	806190e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80618dc:	4b62      	ldr	r3, [pc, #392]	; (8061a68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80618de:	68db      	ldr	r3, [r3, #12]
 80618e0:	4a61      	ldr	r2, [pc, #388]	; (8061a68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80618e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80618e6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80618e8:	e015      	b.n	8061916 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80618ea:	687b      	ldr	r3, [r7, #4]
 80618ec:	3304      	adds	r3, #4
 80618ee:	2100      	movs	r1, #0
 80618f0:	4618      	mov	r0, r3
 80618f2:	f000 fa85 	bl	8061e00 <RCCEx_PLLSAI1_Config>
 80618f6:	4603      	mov	r3, r0
 80618f8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80618fa:	e00c      	b.n	8061916 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80618fc:	687b      	ldr	r3, [r7, #4]
 80618fe:	3320      	adds	r3, #32
 8061900:	2100      	movs	r1, #0
 8061902:	4618      	mov	r0, r3
 8061904:	f000 fb6c 	bl	8061fe0 <RCCEx_PLLSAI2_Config>
 8061908:	4603      	mov	r3, r0
 806190a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 806190c:	e003      	b.n	8061916 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 806190e:	2301      	movs	r3, #1
 8061910:	74fb      	strb	r3, [r7, #19]
      break;
 8061912:	e000      	b.n	8061916 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8061914:	bf00      	nop
    }

    if(ret == HAL_OK)
 8061916:	7cfb      	ldrb	r3, [r7, #19]
 8061918:	2b00      	cmp	r3, #0
 806191a:	d10b      	bne.n	8061934 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 806191c:	4b52      	ldr	r3, [pc, #328]	; (8061a68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 806191e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8061922:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8061926:	687b      	ldr	r3, [r7, #4]
 8061928:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 806192a:	494f      	ldr	r1, [pc, #316]	; (8061a68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 806192c:	4313      	orrs	r3, r2
 806192e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8061932:	e001      	b.n	8061938 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8061934:	7cfb      	ldrb	r3, [r7, #19]
 8061936:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8061938:	687b      	ldr	r3, [r7, #4]
 806193a:	681b      	ldr	r3, [r3, #0]
 806193c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8061940:	2b00      	cmp	r3, #0
 8061942:	f000 80a0 	beq.w	8061a86 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8061946:	2300      	movs	r3, #0
 8061948:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 806194a:	4b47      	ldr	r3, [pc, #284]	; (8061a68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 806194c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 806194e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8061952:	2b00      	cmp	r3, #0
 8061954:	d101      	bne.n	806195a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8061956:	2301      	movs	r3, #1
 8061958:	e000      	b.n	806195c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 806195a:	2300      	movs	r3, #0
 806195c:	2b00      	cmp	r3, #0
 806195e:	d00d      	beq.n	806197c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8061960:	4b41      	ldr	r3, [pc, #260]	; (8061a68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8061962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8061964:	4a40      	ldr	r2, [pc, #256]	; (8061a68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8061966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 806196a:	6593      	str	r3, [r2, #88]	; 0x58
 806196c:	4b3e      	ldr	r3, [pc, #248]	; (8061a68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 806196e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8061970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8061974:	60bb      	str	r3, [r7, #8]
 8061976:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8061978:	2301      	movs	r3, #1
 806197a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 806197c:	4b3b      	ldr	r3, [pc, #236]	; (8061a6c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 806197e:	681b      	ldr	r3, [r3, #0]
 8061980:	4a3a      	ldr	r2, [pc, #232]	; (8061a6c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8061982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8061986:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8061988:	f7fe fe14 	bl	80605b4 <HAL_GetTick>
 806198c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 806198e:	e009      	b.n	80619a4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8061990:	f7fe fe10 	bl	80605b4 <HAL_GetTick>
 8061994:	4602      	mov	r2, r0
 8061996:	68fb      	ldr	r3, [r7, #12]
 8061998:	1ad3      	subs	r3, r2, r3
 806199a:	2b02      	cmp	r3, #2
 806199c:	d902      	bls.n	80619a4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 806199e:	2303      	movs	r3, #3
 80619a0:	74fb      	strb	r3, [r7, #19]
        break;
 80619a2:	e005      	b.n	80619b0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80619a4:	4b31      	ldr	r3, [pc, #196]	; (8061a6c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80619a6:	681b      	ldr	r3, [r3, #0]
 80619a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80619ac:	2b00      	cmp	r3, #0
 80619ae:	d0ef      	beq.n	8061990 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80619b0:	7cfb      	ldrb	r3, [r7, #19]
 80619b2:	2b00      	cmp	r3, #0
 80619b4:	d15c      	bne.n	8061a70 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80619b6:	4b2c      	ldr	r3, [pc, #176]	; (8061a68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80619b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80619bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80619c0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80619c2:	697b      	ldr	r3, [r7, #20]
 80619c4:	2b00      	cmp	r3, #0
 80619c6:	d01f      	beq.n	8061a08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80619c8:	687b      	ldr	r3, [r7, #4]
 80619ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80619ce:	697a      	ldr	r2, [r7, #20]
 80619d0:	429a      	cmp	r2, r3
 80619d2:	d019      	beq.n	8061a08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80619d4:	4b24      	ldr	r3, [pc, #144]	; (8061a68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80619d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80619da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80619de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80619e0:	4b21      	ldr	r3, [pc, #132]	; (8061a68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80619e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80619e6:	4a20      	ldr	r2, [pc, #128]	; (8061a68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80619e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80619ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80619f0:	4b1d      	ldr	r3, [pc, #116]	; (8061a68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80619f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80619f6:	4a1c      	ldr	r2, [pc, #112]	; (8061a68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80619f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80619fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8061a00:	4a19      	ldr	r2, [pc, #100]	; (8061a68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8061a02:	697b      	ldr	r3, [r7, #20]
 8061a04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8061a08:	697b      	ldr	r3, [r7, #20]
 8061a0a:	f003 0301 	and.w	r3, r3, #1
 8061a0e:	2b00      	cmp	r3, #0
 8061a10:	d016      	beq.n	8061a40 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8061a12:	f7fe fdcf 	bl	80605b4 <HAL_GetTick>
 8061a16:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8061a18:	e00b      	b.n	8061a32 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8061a1a:	f7fe fdcb 	bl	80605b4 <HAL_GetTick>
 8061a1e:	4602      	mov	r2, r0
 8061a20:	68fb      	ldr	r3, [r7, #12]
 8061a22:	1ad3      	subs	r3, r2, r3
 8061a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8061a28:	4293      	cmp	r3, r2
 8061a2a:	d902      	bls.n	8061a32 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8061a2c:	2303      	movs	r3, #3
 8061a2e:	74fb      	strb	r3, [r7, #19]
            break;
 8061a30:	e006      	b.n	8061a40 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8061a32:	4b0d      	ldr	r3, [pc, #52]	; (8061a68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8061a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8061a38:	f003 0302 	and.w	r3, r3, #2
 8061a3c:	2b00      	cmp	r3, #0
 8061a3e:	d0ec      	beq.n	8061a1a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8061a40:	7cfb      	ldrb	r3, [r7, #19]
 8061a42:	2b00      	cmp	r3, #0
 8061a44:	d10c      	bne.n	8061a60 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8061a46:	4b08      	ldr	r3, [pc, #32]	; (8061a68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8061a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8061a4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8061a50:	687b      	ldr	r3, [r7, #4]
 8061a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8061a56:	4904      	ldr	r1, [pc, #16]	; (8061a68 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8061a58:	4313      	orrs	r3, r2
 8061a5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8061a5e:	e009      	b.n	8061a74 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8061a60:	7cfb      	ldrb	r3, [r7, #19]
 8061a62:	74bb      	strb	r3, [r7, #18]
 8061a64:	e006      	b.n	8061a74 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8061a66:	bf00      	nop
 8061a68:	40021000 	.word	0x40021000
 8061a6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8061a70:	7cfb      	ldrb	r3, [r7, #19]
 8061a72:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8061a74:	7c7b      	ldrb	r3, [r7, #17]
 8061a76:	2b01      	cmp	r3, #1
 8061a78:	d105      	bne.n	8061a86 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8061a7a:	4ba6      	ldr	r3, [pc, #664]	; (8061d14 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8061a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8061a7e:	4aa5      	ldr	r2, [pc, #660]	; (8061d14 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8061a80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8061a84:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8061a86:	687b      	ldr	r3, [r7, #4]
 8061a88:	681b      	ldr	r3, [r3, #0]
 8061a8a:	f003 0301 	and.w	r3, r3, #1
 8061a8e:	2b00      	cmp	r3, #0
 8061a90:	d00a      	beq.n	8061aa8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8061a92:	4ba0      	ldr	r3, [pc, #640]	; (8061d14 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8061a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8061a98:	f023 0203 	bic.w	r2, r3, #3
 8061a9c:	687b      	ldr	r3, [r7, #4]
 8061a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8061aa0:	499c      	ldr	r1, [pc, #624]	; (8061d14 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8061aa2:	4313      	orrs	r3, r2
 8061aa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8061aa8:	687b      	ldr	r3, [r7, #4]
 8061aaa:	681b      	ldr	r3, [r3, #0]
 8061aac:	f003 0302 	and.w	r3, r3, #2
 8061ab0:	2b00      	cmp	r3, #0
 8061ab2:	d00a      	beq.n	8061aca <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8061ab4:	4b97      	ldr	r3, [pc, #604]	; (8061d14 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8061ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8061aba:	f023 020c 	bic.w	r2, r3, #12
 8061abe:	687b      	ldr	r3, [r7, #4]
 8061ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8061ac2:	4994      	ldr	r1, [pc, #592]	; (8061d14 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8061ac4:	4313      	orrs	r3, r2
 8061ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8061aca:	687b      	ldr	r3, [r7, #4]
 8061acc:	681b      	ldr	r3, [r3, #0]
 8061ace:	f003 0304 	and.w	r3, r3, #4
 8061ad2:	2b00      	cmp	r3, #0
 8061ad4:	d00a      	beq.n	8061aec <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8061ad6:	4b8f      	ldr	r3, [pc, #572]	; (8061d14 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8061ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8061adc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8061ae0:	687b      	ldr	r3, [r7, #4]
 8061ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8061ae4:	498b      	ldr	r1, [pc, #556]	; (8061d14 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8061ae6:	4313      	orrs	r3, r2
 8061ae8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8061aec:	687b      	ldr	r3, [r7, #4]
 8061aee:	681b      	ldr	r3, [r3, #0]
 8061af0:	f003 0308 	and.w	r3, r3, #8
 8061af4:	2b00      	cmp	r3, #0
 8061af6:	d00a      	beq.n	8061b0e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8061af8:	4b86      	ldr	r3, [pc, #536]	; (8061d14 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8061afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8061afe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8061b02:	687b      	ldr	r3, [r7, #4]
 8061b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8061b06:	4983      	ldr	r1, [pc, #524]	; (8061d14 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8061b08:	4313      	orrs	r3, r2
 8061b0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8061b0e:	687b      	ldr	r3, [r7, #4]
 8061b10:	681b      	ldr	r3, [r3, #0]
 8061b12:	f003 0310 	and.w	r3, r3, #16
 8061b16:	2b00      	cmp	r3, #0
 8061b18:	d00a      	beq.n	8061b30 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8061b1a:	4b7e      	ldr	r3, [pc, #504]	; (8061d14 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8061b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8061b20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8061b24:	687b      	ldr	r3, [r7, #4]
 8061b26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8061b28:	497a      	ldr	r1, [pc, #488]	; (8061d14 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8061b2a:	4313      	orrs	r3, r2
 8061b2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8061b30:	687b      	ldr	r3, [r7, #4]
 8061b32:	681b      	ldr	r3, [r3, #0]
 8061b34:	f003 0320 	and.w	r3, r3, #32
 8061b38:	2b00      	cmp	r3, #0
 8061b3a:	d00a      	beq.n	8061b52 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8061b3c:	4b75      	ldr	r3, [pc, #468]	; (8061d14 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8061b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8061b42:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8061b46:	687b      	ldr	r3, [r7, #4]
 8061b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8061b4a:	4972      	ldr	r1, [pc, #456]	; (8061d14 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8061b4c:	4313      	orrs	r3, r2
 8061b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8061b52:	687b      	ldr	r3, [r7, #4]
 8061b54:	681b      	ldr	r3, [r3, #0]
 8061b56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8061b5a:	2b00      	cmp	r3, #0
 8061b5c:	d00a      	beq.n	8061b74 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8061b5e:	4b6d      	ldr	r3, [pc, #436]	; (8061d14 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8061b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8061b64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8061b68:	687b      	ldr	r3, [r7, #4]
 8061b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8061b6c:	4969      	ldr	r1, [pc, #420]	; (8061d14 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8061b6e:	4313      	orrs	r3, r2
 8061b70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8061b74:	687b      	ldr	r3, [r7, #4]
 8061b76:	681b      	ldr	r3, [r3, #0]
 8061b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8061b7c:	2b00      	cmp	r3, #0
 8061b7e:	d00a      	beq.n	8061b96 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8061b80:	4b64      	ldr	r3, [pc, #400]	; (8061d14 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8061b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8061b86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8061b8a:	687b      	ldr	r3, [r7, #4]
 8061b8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8061b8e:	4961      	ldr	r1, [pc, #388]	; (8061d14 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8061b90:	4313      	orrs	r3, r2
 8061b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8061b96:	687b      	ldr	r3, [r7, #4]
 8061b98:	681b      	ldr	r3, [r3, #0]
 8061b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8061b9e:	2b00      	cmp	r3, #0
 8061ba0:	d00a      	beq.n	8061bb8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8061ba2:	4b5c      	ldr	r3, [pc, #368]	; (8061d14 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8061ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8061ba8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8061bac:	687b      	ldr	r3, [r7, #4]
 8061bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8061bb0:	4958      	ldr	r1, [pc, #352]	; (8061d14 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8061bb2:	4313      	orrs	r3, r2
 8061bb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8061bb8:	687b      	ldr	r3, [r7, #4]
 8061bba:	681b      	ldr	r3, [r3, #0]
 8061bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8061bc0:	2b00      	cmp	r3, #0
 8061bc2:	d00a      	beq.n	8061bda <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8061bc4:	4b53      	ldr	r3, [pc, #332]	; (8061d14 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8061bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8061bca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8061bce:	687b      	ldr	r3, [r7, #4]
 8061bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8061bd2:	4950      	ldr	r1, [pc, #320]	; (8061d14 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8061bd4:	4313      	orrs	r3, r2
 8061bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8061bda:	687b      	ldr	r3, [r7, #4]
 8061bdc:	681b      	ldr	r3, [r3, #0]
 8061bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8061be2:	2b00      	cmp	r3, #0
 8061be4:	d00a      	beq.n	8061bfc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8061be6:	4b4b      	ldr	r3, [pc, #300]	; (8061d14 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8061be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8061bec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8061bf0:	687b      	ldr	r3, [r7, #4]
 8061bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8061bf4:	4947      	ldr	r1, [pc, #284]	; (8061d14 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8061bf6:	4313      	orrs	r3, r2
 8061bf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8061bfc:	687b      	ldr	r3, [r7, #4]
 8061bfe:	681b      	ldr	r3, [r3, #0]
 8061c00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8061c04:	2b00      	cmp	r3, #0
 8061c06:	d00a      	beq.n	8061c1e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8061c08:	4b42      	ldr	r3, [pc, #264]	; (8061d14 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8061c0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8061c0e:	f023 0203 	bic.w	r2, r3, #3
 8061c12:	687b      	ldr	r3, [r7, #4]
 8061c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8061c16:	493f      	ldr	r1, [pc, #252]	; (8061d14 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8061c18:	4313      	orrs	r3, r2
 8061c1a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8061c1e:	687b      	ldr	r3, [r7, #4]
 8061c20:	681b      	ldr	r3, [r3, #0]
 8061c22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8061c26:	2b00      	cmp	r3, #0
 8061c28:	d028      	beq.n	8061c7c <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8061c2a:	4b3a      	ldr	r3, [pc, #232]	; (8061d14 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8061c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8061c30:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8061c34:	687b      	ldr	r3, [r7, #4]
 8061c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8061c38:	4936      	ldr	r1, [pc, #216]	; (8061d14 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8061c3a:	4313      	orrs	r3, r2
 8061c3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8061c40:	687b      	ldr	r3, [r7, #4]
 8061c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8061c44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8061c48:	d106      	bne.n	8061c58 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8061c4a:	4b32      	ldr	r3, [pc, #200]	; (8061d14 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8061c4c:	68db      	ldr	r3, [r3, #12]
 8061c4e:	4a31      	ldr	r2, [pc, #196]	; (8061d14 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8061c50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8061c54:	60d3      	str	r3, [r2, #12]
 8061c56:	e011      	b.n	8061c7c <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8061c58:	687b      	ldr	r3, [r7, #4]
 8061c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8061c5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8061c60:	d10c      	bne.n	8061c7c <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8061c62:	687b      	ldr	r3, [r7, #4]
 8061c64:	3304      	adds	r3, #4
 8061c66:	2101      	movs	r1, #1
 8061c68:	4618      	mov	r0, r3
 8061c6a:	f000 f8c9 	bl	8061e00 <RCCEx_PLLSAI1_Config>
 8061c6e:	4603      	mov	r3, r0
 8061c70:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8061c72:	7cfb      	ldrb	r3, [r7, #19]
 8061c74:	2b00      	cmp	r3, #0
 8061c76:	d001      	beq.n	8061c7c <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8061c78:	7cfb      	ldrb	r3, [r7, #19]
 8061c7a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8061c7c:	687b      	ldr	r3, [r7, #4]
 8061c7e:	681b      	ldr	r3, [r3, #0]
 8061c80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8061c84:	2b00      	cmp	r3, #0
 8061c86:	d028      	beq.n	8061cda <HAL_RCCEx_PeriphCLKConfig+0x4ca>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8061c88:	4b22      	ldr	r3, [pc, #136]	; (8061d14 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8061c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8061c8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8061c92:	687b      	ldr	r3, [r7, #4]
 8061c94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8061c96:	491f      	ldr	r1, [pc, #124]	; (8061d14 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8061c98:	4313      	orrs	r3, r2
 8061c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8061c9e:	687b      	ldr	r3, [r7, #4]
 8061ca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8061ca2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8061ca6:	d106      	bne.n	8061cb6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8061ca8:	4b1a      	ldr	r3, [pc, #104]	; (8061d14 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8061caa:	68db      	ldr	r3, [r3, #12]
 8061cac:	4a19      	ldr	r2, [pc, #100]	; (8061d14 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8061cae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8061cb2:	60d3      	str	r3, [r2, #12]
 8061cb4:	e011      	b.n	8061cda <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8061cb6:	687b      	ldr	r3, [r7, #4]
 8061cb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8061cba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8061cbe:	d10c      	bne.n	8061cda <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8061cc0:	687b      	ldr	r3, [r7, #4]
 8061cc2:	3304      	adds	r3, #4
 8061cc4:	2101      	movs	r1, #1
 8061cc6:	4618      	mov	r0, r3
 8061cc8:	f000 f89a 	bl	8061e00 <RCCEx_PLLSAI1_Config>
 8061ccc:	4603      	mov	r3, r0
 8061cce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8061cd0:	7cfb      	ldrb	r3, [r7, #19]
 8061cd2:	2b00      	cmp	r3, #0
 8061cd4:	d001      	beq.n	8061cda <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      {
        /* set overall return value */
        status = ret;
 8061cd6:	7cfb      	ldrb	r3, [r7, #19]
 8061cd8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8061cda:	687b      	ldr	r3, [r7, #4]
 8061cdc:	681b      	ldr	r3, [r3, #0]
 8061cde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8061ce2:	2b00      	cmp	r3, #0
 8061ce4:	d02a      	beq.n	8061d3c <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8061ce6:	4b0b      	ldr	r3, [pc, #44]	; (8061d14 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8061ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8061cec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8061cf0:	687b      	ldr	r3, [r7, #4]
 8061cf2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8061cf4:	4907      	ldr	r1, [pc, #28]	; (8061d14 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8061cf6:	4313      	orrs	r3, r2
 8061cf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8061cfc:	687b      	ldr	r3, [r7, #4]
 8061cfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8061d00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8061d04:	d108      	bne.n	8061d18 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8061d06:	4b03      	ldr	r3, [pc, #12]	; (8061d14 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8061d08:	68db      	ldr	r3, [r3, #12]
 8061d0a:	4a02      	ldr	r2, [pc, #8]	; (8061d14 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8061d0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8061d10:	60d3      	str	r3, [r2, #12]
 8061d12:	e013      	b.n	8061d3c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8061d14:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8061d18:	687b      	ldr	r3, [r7, #4]
 8061d1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8061d1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8061d20:	d10c      	bne.n	8061d3c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8061d22:	687b      	ldr	r3, [r7, #4]
 8061d24:	3304      	adds	r3, #4
 8061d26:	2101      	movs	r1, #1
 8061d28:	4618      	mov	r0, r3
 8061d2a:	f000 f869 	bl	8061e00 <RCCEx_PLLSAI1_Config>
 8061d2e:	4603      	mov	r3, r0
 8061d30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8061d32:	7cfb      	ldrb	r3, [r7, #19]
 8061d34:	2b00      	cmp	r3, #0
 8061d36:	d001      	beq.n	8061d3c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* set overall return value */
        status = ret;
 8061d38:	7cfb      	ldrb	r3, [r7, #19]
 8061d3a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8061d3c:	687b      	ldr	r3, [r7, #4]
 8061d3e:	681b      	ldr	r3, [r3, #0]
 8061d40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8061d44:	2b00      	cmp	r3, #0
 8061d46:	d02f      	beq.n	8061da8 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8061d48:	4b2c      	ldr	r3, [pc, #176]	; (8061dfc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8061d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8061d4e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8061d52:	687b      	ldr	r3, [r7, #4]
 8061d54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8061d56:	4929      	ldr	r1, [pc, #164]	; (8061dfc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8061d58:	4313      	orrs	r3, r2
 8061d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8061d5e:	687b      	ldr	r3, [r7, #4]
 8061d60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8061d62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8061d66:	d10d      	bne.n	8061d84 <HAL_RCCEx_PeriphCLKConfig+0x574>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8061d68:	687b      	ldr	r3, [r7, #4]
 8061d6a:	3304      	adds	r3, #4
 8061d6c:	2102      	movs	r1, #2
 8061d6e:	4618      	mov	r0, r3
 8061d70:	f000 f846 	bl	8061e00 <RCCEx_PLLSAI1_Config>
 8061d74:	4603      	mov	r3, r0
 8061d76:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8061d78:	7cfb      	ldrb	r3, [r7, #19]
 8061d7a:	2b00      	cmp	r3, #0
 8061d7c:	d014      	beq.n	8061da8 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 8061d7e:	7cfb      	ldrb	r3, [r7, #19]
 8061d80:	74bb      	strb	r3, [r7, #18]
 8061d82:	e011      	b.n	8061da8 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8061d84:	687b      	ldr	r3, [r7, #4]
 8061d86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8061d88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8061d8c:	d10c      	bne.n	8061da8 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8061d8e:	687b      	ldr	r3, [r7, #4]
 8061d90:	3320      	adds	r3, #32
 8061d92:	2102      	movs	r1, #2
 8061d94:	4618      	mov	r0, r3
 8061d96:	f000 f923 	bl	8061fe0 <RCCEx_PLLSAI2_Config>
 8061d9a:	4603      	mov	r3, r0
 8061d9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8061d9e:	7cfb      	ldrb	r3, [r7, #19]
 8061da0:	2b00      	cmp	r3, #0
 8061da2:	d001      	beq.n	8061da8 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 8061da4:	7cfb      	ldrb	r3, [r7, #19]
 8061da6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8061da8:	687b      	ldr	r3, [r7, #4]
 8061daa:	681b      	ldr	r3, [r3, #0]
 8061dac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8061db0:	2b00      	cmp	r3, #0
 8061db2:	d00b      	beq.n	8061dcc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8061db4:	4b11      	ldr	r3, [pc, #68]	; (8061dfc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8061db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8061dba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8061dbe:	687b      	ldr	r3, [r7, #4]
 8061dc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8061dc4:	490d      	ldr	r1, [pc, #52]	; (8061dfc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8061dc6:	4313      	orrs	r3, r2
 8061dc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8061dcc:	687b      	ldr	r3, [r7, #4]
 8061dce:	681b      	ldr	r3, [r3, #0]
 8061dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8061dd4:	2b00      	cmp	r3, #0
 8061dd6:	d00b      	beq.n	8061df0 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8061dd8:	4b08      	ldr	r3, [pc, #32]	; (8061dfc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8061dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8061dde:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8061de2:	687b      	ldr	r3, [r7, #4]
 8061de4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8061de8:	4904      	ldr	r1, [pc, #16]	; (8061dfc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8061dea:	4313      	orrs	r3, r2
 8061dec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8061df0:	7cbb      	ldrb	r3, [r7, #18]
}
 8061df2:	4618      	mov	r0, r3
 8061df4:	3718      	adds	r7, #24
 8061df6:	46bd      	mov	sp, r7
 8061df8:	bd80      	pop	{r7, pc}
 8061dfa:	bf00      	nop
 8061dfc:	40021000 	.word	0x40021000

08061e00 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8061e00:	b580      	push	{r7, lr}
 8061e02:	b084      	sub	sp, #16
 8061e04:	af00      	add	r7, sp, #0
 8061e06:	6078      	str	r0, [r7, #4]
 8061e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8061e0a:	2300      	movs	r3, #0
 8061e0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8061e0e:	4b73      	ldr	r3, [pc, #460]	; (8061fdc <RCCEx_PLLSAI1_Config+0x1dc>)
 8061e10:	68db      	ldr	r3, [r3, #12]
 8061e12:	f003 0303 	and.w	r3, r3, #3
 8061e16:	2b00      	cmp	r3, #0
 8061e18:	d018      	beq.n	8061e4c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8061e1a:	4b70      	ldr	r3, [pc, #448]	; (8061fdc <RCCEx_PLLSAI1_Config+0x1dc>)
 8061e1c:	68db      	ldr	r3, [r3, #12]
 8061e1e:	f003 0203 	and.w	r2, r3, #3
 8061e22:	687b      	ldr	r3, [r7, #4]
 8061e24:	681b      	ldr	r3, [r3, #0]
 8061e26:	429a      	cmp	r2, r3
 8061e28:	d10d      	bne.n	8061e46 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8061e2a:	687b      	ldr	r3, [r7, #4]
 8061e2c:	681b      	ldr	r3, [r3, #0]
       ||
 8061e2e:	2b00      	cmp	r3, #0
 8061e30:	d009      	beq.n	8061e46 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8061e32:	4b6a      	ldr	r3, [pc, #424]	; (8061fdc <RCCEx_PLLSAI1_Config+0x1dc>)
 8061e34:	68db      	ldr	r3, [r3, #12]
 8061e36:	091b      	lsrs	r3, r3, #4
 8061e38:	f003 0307 	and.w	r3, r3, #7
 8061e3c:	1c5a      	adds	r2, r3, #1
 8061e3e:	687b      	ldr	r3, [r7, #4]
 8061e40:	685b      	ldr	r3, [r3, #4]
       ||
 8061e42:	429a      	cmp	r2, r3
 8061e44:	d044      	beq.n	8061ed0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8061e46:	2301      	movs	r3, #1
 8061e48:	73fb      	strb	r3, [r7, #15]
 8061e4a:	e041      	b.n	8061ed0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8061e4c:	687b      	ldr	r3, [r7, #4]
 8061e4e:	681b      	ldr	r3, [r3, #0]
 8061e50:	2b02      	cmp	r3, #2
 8061e52:	d00c      	beq.n	8061e6e <RCCEx_PLLSAI1_Config+0x6e>
 8061e54:	2b03      	cmp	r3, #3
 8061e56:	d013      	beq.n	8061e80 <RCCEx_PLLSAI1_Config+0x80>
 8061e58:	2b01      	cmp	r3, #1
 8061e5a:	d120      	bne.n	8061e9e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8061e5c:	4b5f      	ldr	r3, [pc, #380]	; (8061fdc <RCCEx_PLLSAI1_Config+0x1dc>)
 8061e5e:	681b      	ldr	r3, [r3, #0]
 8061e60:	f003 0302 	and.w	r3, r3, #2
 8061e64:	2b00      	cmp	r3, #0
 8061e66:	d11d      	bne.n	8061ea4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8061e68:	2301      	movs	r3, #1
 8061e6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8061e6c:	e01a      	b.n	8061ea4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8061e6e:	4b5b      	ldr	r3, [pc, #364]	; (8061fdc <RCCEx_PLLSAI1_Config+0x1dc>)
 8061e70:	681b      	ldr	r3, [r3, #0]
 8061e72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8061e76:	2b00      	cmp	r3, #0
 8061e78:	d116      	bne.n	8061ea8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8061e7a:	2301      	movs	r3, #1
 8061e7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8061e7e:	e013      	b.n	8061ea8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8061e80:	4b56      	ldr	r3, [pc, #344]	; (8061fdc <RCCEx_PLLSAI1_Config+0x1dc>)
 8061e82:	681b      	ldr	r3, [r3, #0]
 8061e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8061e88:	2b00      	cmp	r3, #0
 8061e8a:	d10f      	bne.n	8061eac <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8061e8c:	4b53      	ldr	r3, [pc, #332]	; (8061fdc <RCCEx_PLLSAI1_Config+0x1dc>)
 8061e8e:	681b      	ldr	r3, [r3, #0]
 8061e90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8061e94:	2b00      	cmp	r3, #0
 8061e96:	d109      	bne.n	8061eac <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8061e98:	2301      	movs	r3, #1
 8061e9a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8061e9c:	e006      	b.n	8061eac <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8061e9e:	2301      	movs	r3, #1
 8061ea0:	73fb      	strb	r3, [r7, #15]
      break;
 8061ea2:	e004      	b.n	8061eae <RCCEx_PLLSAI1_Config+0xae>
      break;
 8061ea4:	bf00      	nop
 8061ea6:	e002      	b.n	8061eae <RCCEx_PLLSAI1_Config+0xae>
      break;
 8061ea8:	bf00      	nop
 8061eaa:	e000      	b.n	8061eae <RCCEx_PLLSAI1_Config+0xae>
      break;
 8061eac:	bf00      	nop
    }

    if(status == HAL_OK)
 8061eae:	7bfb      	ldrb	r3, [r7, #15]
 8061eb0:	2b00      	cmp	r3, #0
 8061eb2:	d10d      	bne.n	8061ed0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8061eb4:	4b49      	ldr	r3, [pc, #292]	; (8061fdc <RCCEx_PLLSAI1_Config+0x1dc>)
 8061eb6:	68db      	ldr	r3, [r3, #12]
 8061eb8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8061ebc:	687b      	ldr	r3, [r7, #4]
 8061ebe:	6819      	ldr	r1, [r3, #0]
 8061ec0:	687b      	ldr	r3, [r7, #4]
 8061ec2:	685b      	ldr	r3, [r3, #4]
 8061ec4:	3b01      	subs	r3, #1
 8061ec6:	011b      	lsls	r3, r3, #4
 8061ec8:	430b      	orrs	r3, r1
 8061eca:	4944      	ldr	r1, [pc, #272]	; (8061fdc <RCCEx_PLLSAI1_Config+0x1dc>)
 8061ecc:	4313      	orrs	r3, r2
 8061ece:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8061ed0:	7bfb      	ldrb	r3, [r7, #15]
 8061ed2:	2b00      	cmp	r3, #0
 8061ed4:	d17c      	bne.n	8061fd0 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8061ed6:	4b41      	ldr	r3, [pc, #260]	; (8061fdc <RCCEx_PLLSAI1_Config+0x1dc>)
 8061ed8:	681b      	ldr	r3, [r3, #0]
 8061eda:	4a40      	ldr	r2, [pc, #256]	; (8061fdc <RCCEx_PLLSAI1_Config+0x1dc>)
 8061edc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8061ee0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8061ee2:	f7fe fb67 	bl	80605b4 <HAL_GetTick>
 8061ee6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8061ee8:	e009      	b.n	8061efe <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8061eea:	f7fe fb63 	bl	80605b4 <HAL_GetTick>
 8061eee:	4602      	mov	r2, r0
 8061ef0:	68bb      	ldr	r3, [r7, #8]
 8061ef2:	1ad3      	subs	r3, r2, r3
 8061ef4:	2b02      	cmp	r3, #2
 8061ef6:	d902      	bls.n	8061efe <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8061ef8:	2303      	movs	r3, #3
 8061efa:	73fb      	strb	r3, [r7, #15]
        break;
 8061efc:	e005      	b.n	8061f0a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8061efe:	4b37      	ldr	r3, [pc, #220]	; (8061fdc <RCCEx_PLLSAI1_Config+0x1dc>)
 8061f00:	681b      	ldr	r3, [r3, #0]
 8061f02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8061f06:	2b00      	cmp	r3, #0
 8061f08:	d1ef      	bne.n	8061eea <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8061f0a:	7bfb      	ldrb	r3, [r7, #15]
 8061f0c:	2b00      	cmp	r3, #0
 8061f0e:	d15f      	bne.n	8061fd0 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8061f10:	683b      	ldr	r3, [r7, #0]
 8061f12:	2b00      	cmp	r3, #0
 8061f14:	d110      	bne.n	8061f38 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8061f16:	4b31      	ldr	r3, [pc, #196]	; (8061fdc <RCCEx_PLLSAI1_Config+0x1dc>)
 8061f18:	691b      	ldr	r3, [r3, #16]
 8061f1a:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8061f1e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8061f22:	687a      	ldr	r2, [r7, #4]
 8061f24:	6892      	ldr	r2, [r2, #8]
 8061f26:	0211      	lsls	r1, r2, #8
 8061f28:	687a      	ldr	r2, [r7, #4]
 8061f2a:	68d2      	ldr	r2, [r2, #12]
 8061f2c:	06d2      	lsls	r2, r2, #27
 8061f2e:	430a      	orrs	r2, r1
 8061f30:	492a      	ldr	r1, [pc, #168]	; (8061fdc <RCCEx_PLLSAI1_Config+0x1dc>)
 8061f32:	4313      	orrs	r3, r2
 8061f34:	610b      	str	r3, [r1, #16]
 8061f36:	e027      	b.n	8061f88 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8061f38:	683b      	ldr	r3, [r7, #0]
 8061f3a:	2b01      	cmp	r3, #1
 8061f3c:	d112      	bne.n	8061f64 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8061f3e:	4b27      	ldr	r3, [pc, #156]	; (8061fdc <RCCEx_PLLSAI1_Config+0x1dc>)
 8061f40:	691b      	ldr	r3, [r3, #16]
 8061f42:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8061f46:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8061f4a:	687a      	ldr	r2, [r7, #4]
 8061f4c:	6892      	ldr	r2, [r2, #8]
 8061f4e:	0211      	lsls	r1, r2, #8
 8061f50:	687a      	ldr	r2, [r7, #4]
 8061f52:	6912      	ldr	r2, [r2, #16]
 8061f54:	0852      	lsrs	r2, r2, #1
 8061f56:	3a01      	subs	r2, #1
 8061f58:	0552      	lsls	r2, r2, #21
 8061f5a:	430a      	orrs	r2, r1
 8061f5c:	491f      	ldr	r1, [pc, #124]	; (8061fdc <RCCEx_PLLSAI1_Config+0x1dc>)
 8061f5e:	4313      	orrs	r3, r2
 8061f60:	610b      	str	r3, [r1, #16]
 8061f62:	e011      	b.n	8061f88 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8061f64:	4b1d      	ldr	r3, [pc, #116]	; (8061fdc <RCCEx_PLLSAI1_Config+0x1dc>)
 8061f66:	691b      	ldr	r3, [r3, #16]
 8061f68:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8061f6c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8061f70:	687a      	ldr	r2, [r7, #4]
 8061f72:	6892      	ldr	r2, [r2, #8]
 8061f74:	0211      	lsls	r1, r2, #8
 8061f76:	687a      	ldr	r2, [r7, #4]
 8061f78:	6952      	ldr	r2, [r2, #20]
 8061f7a:	0852      	lsrs	r2, r2, #1
 8061f7c:	3a01      	subs	r2, #1
 8061f7e:	0652      	lsls	r2, r2, #25
 8061f80:	430a      	orrs	r2, r1
 8061f82:	4916      	ldr	r1, [pc, #88]	; (8061fdc <RCCEx_PLLSAI1_Config+0x1dc>)
 8061f84:	4313      	orrs	r3, r2
 8061f86:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8061f88:	4b14      	ldr	r3, [pc, #80]	; (8061fdc <RCCEx_PLLSAI1_Config+0x1dc>)
 8061f8a:	681b      	ldr	r3, [r3, #0]
 8061f8c:	4a13      	ldr	r2, [pc, #76]	; (8061fdc <RCCEx_PLLSAI1_Config+0x1dc>)
 8061f8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8061f92:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8061f94:	f7fe fb0e 	bl	80605b4 <HAL_GetTick>
 8061f98:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8061f9a:	e009      	b.n	8061fb0 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8061f9c:	f7fe fb0a 	bl	80605b4 <HAL_GetTick>
 8061fa0:	4602      	mov	r2, r0
 8061fa2:	68bb      	ldr	r3, [r7, #8]
 8061fa4:	1ad3      	subs	r3, r2, r3
 8061fa6:	2b02      	cmp	r3, #2
 8061fa8:	d902      	bls.n	8061fb0 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8061faa:	2303      	movs	r3, #3
 8061fac:	73fb      	strb	r3, [r7, #15]
          break;
 8061fae:	e005      	b.n	8061fbc <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8061fb0:	4b0a      	ldr	r3, [pc, #40]	; (8061fdc <RCCEx_PLLSAI1_Config+0x1dc>)
 8061fb2:	681b      	ldr	r3, [r3, #0]
 8061fb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8061fb8:	2b00      	cmp	r3, #0
 8061fba:	d0ef      	beq.n	8061f9c <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8061fbc:	7bfb      	ldrb	r3, [r7, #15]
 8061fbe:	2b00      	cmp	r3, #0
 8061fc0:	d106      	bne.n	8061fd0 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8061fc2:	4b06      	ldr	r3, [pc, #24]	; (8061fdc <RCCEx_PLLSAI1_Config+0x1dc>)
 8061fc4:	691a      	ldr	r2, [r3, #16]
 8061fc6:	687b      	ldr	r3, [r7, #4]
 8061fc8:	699b      	ldr	r3, [r3, #24]
 8061fca:	4904      	ldr	r1, [pc, #16]	; (8061fdc <RCCEx_PLLSAI1_Config+0x1dc>)
 8061fcc:	4313      	orrs	r3, r2
 8061fce:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8061fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8061fd2:	4618      	mov	r0, r3
 8061fd4:	3710      	adds	r7, #16
 8061fd6:	46bd      	mov	sp, r7
 8061fd8:	bd80      	pop	{r7, pc}
 8061fda:	bf00      	nop
 8061fdc:	40021000 	.word	0x40021000

08061fe0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8061fe0:	b580      	push	{r7, lr}
 8061fe2:	b084      	sub	sp, #16
 8061fe4:	af00      	add	r7, sp, #0
 8061fe6:	6078      	str	r0, [r7, #4]
 8061fe8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8061fea:	2300      	movs	r3, #0
 8061fec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8061fee:	4b68      	ldr	r3, [pc, #416]	; (8062190 <RCCEx_PLLSAI2_Config+0x1b0>)
 8061ff0:	68db      	ldr	r3, [r3, #12]
 8061ff2:	f003 0303 	and.w	r3, r3, #3
 8061ff6:	2b00      	cmp	r3, #0
 8061ff8:	d018      	beq.n	806202c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8061ffa:	4b65      	ldr	r3, [pc, #404]	; (8062190 <RCCEx_PLLSAI2_Config+0x1b0>)
 8061ffc:	68db      	ldr	r3, [r3, #12]
 8061ffe:	f003 0203 	and.w	r2, r3, #3
 8062002:	687b      	ldr	r3, [r7, #4]
 8062004:	681b      	ldr	r3, [r3, #0]
 8062006:	429a      	cmp	r2, r3
 8062008:	d10d      	bne.n	8062026 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 806200a:	687b      	ldr	r3, [r7, #4]
 806200c:	681b      	ldr	r3, [r3, #0]
       ||
 806200e:	2b00      	cmp	r3, #0
 8062010:	d009      	beq.n	8062026 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8062012:	4b5f      	ldr	r3, [pc, #380]	; (8062190 <RCCEx_PLLSAI2_Config+0x1b0>)
 8062014:	68db      	ldr	r3, [r3, #12]
 8062016:	091b      	lsrs	r3, r3, #4
 8062018:	f003 0307 	and.w	r3, r3, #7
 806201c:	1c5a      	adds	r2, r3, #1
 806201e:	687b      	ldr	r3, [r7, #4]
 8062020:	685b      	ldr	r3, [r3, #4]
       ||
 8062022:	429a      	cmp	r2, r3
 8062024:	d044      	beq.n	80620b0 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8062026:	2301      	movs	r3, #1
 8062028:	73fb      	strb	r3, [r7, #15]
 806202a:	e041      	b.n	80620b0 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 806202c:	687b      	ldr	r3, [r7, #4]
 806202e:	681b      	ldr	r3, [r3, #0]
 8062030:	2b02      	cmp	r3, #2
 8062032:	d00c      	beq.n	806204e <RCCEx_PLLSAI2_Config+0x6e>
 8062034:	2b03      	cmp	r3, #3
 8062036:	d013      	beq.n	8062060 <RCCEx_PLLSAI2_Config+0x80>
 8062038:	2b01      	cmp	r3, #1
 806203a:	d120      	bne.n	806207e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 806203c:	4b54      	ldr	r3, [pc, #336]	; (8062190 <RCCEx_PLLSAI2_Config+0x1b0>)
 806203e:	681b      	ldr	r3, [r3, #0]
 8062040:	f003 0302 	and.w	r3, r3, #2
 8062044:	2b00      	cmp	r3, #0
 8062046:	d11d      	bne.n	8062084 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8062048:	2301      	movs	r3, #1
 806204a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 806204c:	e01a      	b.n	8062084 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 806204e:	4b50      	ldr	r3, [pc, #320]	; (8062190 <RCCEx_PLLSAI2_Config+0x1b0>)
 8062050:	681b      	ldr	r3, [r3, #0]
 8062052:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8062056:	2b00      	cmp	r3, #0
 8062058:	d116      	bne.n	8062088 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 806205a:	2301      	movs	r3, #1
 806205c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 806205e:	e013      	b.n	8062088 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8062060:	4b4b      	ldr	r3, [pc, #300]	; (8062190 <RCCEx_PLLSAI2_Config+0x1b0>)
 8062062:	681b      	ldr	r3, [r3, #0]
 8062064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8062068:	2b00      	cmp	r3, #0
 806206a:	d10f      	bne.n	806208c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 806206c:	4b48      	ldr	r3, [pc, #288]	; (8062190 <RCCEx_PLLSAI2_Config+0x1b0>)
 806206e:	681b      	ldr	r3, [r3, #0]
 8062070:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8062074:	2b00      	cmp	r3, #0
 8062076:	d109      	bne.n	806208c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8062078:	2301      	movs	r3, #1
 806207a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 806207c:	e006      	b.n	806208c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 806207e:	2301      	movs	r3, #1
 8062080:	73fb      	strb	r3, [r7, #15]
      break;
 8062082:	e004      	b.n	806208e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8062084:	bf00      	nop
 8062086:	e002      	b.n	806208e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8062088:	bf00      	nop
 806208a:	e000      	b.n	806208e <RCCEx_PLLSAI2_Config+0xae>
      break;
 806208c:	bf00      	nop
    }

    if(status == HAL_OK)
 806208e:	7bfb      	ldrb	r3, [r7, #15]
 8062090:	2b00      	cmp	r3, #0
 8062092:	d10d      	bne.n	80620b0 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8062094:	4b3e      	ldr	r3, [pc, #248]	; (8062190 <RCCEx_PLLSAI2_Config+0x1b0>)
 8062096:	68db      	ldr	r3, [r3, #12]
 8062098:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 806209c:	687b      	ldr	r3, [r7, #4]
 806209e:	6819      	ldr	r1, [r3, #0]
 80620a0:	687b      	ldr	r3, [r7, #4]
 80620a2:	685b      	ldr	r3, [r3, #4]
 80620a4:	3b01      	subs	r3, #1
 80620a6:	011b      	lsls	r3, r3, #4
 80620a8:	430b      	orrs	r3, r1
 80620aa:	4939      	ldr	r1, [pc, #228]	; (8062190 <RCCEx_PLLSAI2_Config+0x1b0>)
 80620ac:	4313      	orrs	r3, r2
 80620ae:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80620b0:	7bfb      	ldrb	r3, [r7, #15]
 80620b2:	2b00      	cmp	r3, #0
 80620b4:	d166      	bne.n	8062184 <RCCEx_PLLSAI2_Config+0x1a4>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80620b6:	4b36      	ldr	r3, [pc, #216]	; (8062190 <RCCEx_PLLSAI2_Config+0x1b0>)
 80620b8:	681b      	ldr	r3, [r3, #0]
 80620ba:	4a35      	ldr	r2, [pc, #212]	; (8062190 <RCCEx_PLLSAI2_Config+0x1b0>)
 80620bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80620c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80620c2:	f7fe fa77 	bl	80605b4 <HAL_GetTick>
 80620c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80620c8:	e009      	b.n	80620de <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80620ca:	f7fe fa73 	bl	80605b4 <HAL_GetTick>
 80620ce:	4602      	mov	r2, r0
 80620d0:	68bb      	ldr	r3, [r7, #8]
 80620d2:	1ad3      	subs	r3, r2, r3
 80620d4:	2b02      	cmp	r3, #2
 80620d6:	d902      	bls.n	80620de <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80620d8:	2303      	movs	r3, #3
 80620da:	73fb      	strb	r3, [r7, #15]
        break;
 80620dc:	e005      	b.n	80620ea <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80620de:	4b2c      	ldr	r3, [pc, #176]	; (8062190 <RCCEx_PLLSAI2_Config+0x1b0>)
 80620e0:	681b      	ldr	r3, [r3, #0]
 80620e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80620e6:	2b00      	cmp	r3, #0
 80620e8:	d1ef      	bne.n	80620ca <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80620ea:	7bfb      	ldrb	r3, [r7, #15]
 80620ec:	2b00      	cmp	r3, #0
 80620ee:	d149      	bne.n	8062184 <RCCEx_PLLSAI2_Config+0x1a4>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80620f0:	683b      	ldr	r3, [r7, #0]
 80620f2:	2b00      	cmp	r3, #0
 80620f4:	d110      	bne.n	8062118 <RCCEx_PLLSAI2_Config+0x138>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80620f6:	4b26      	ldr	r3, [pc, #152]	; (8062190 <RCCEx_PLLSAI2_Config+0x1b0>)
 80620f8:	695b      	ldr	r3, [r3, #20]
 80620fa:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80620fe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8062102:	687a      	ldr	r2, [r7, #4]
 8062104:	6892      	ldr	r2, [r2, #8]
 8062106:	0211      	lsls	r1, r2, #8
 8062108:	687a      	ldr	r2, [r7, #4]
 806210a:	68d2      	ldr	r2, [r2, #12]
 806210c:	06d2      	lsls	r2, r2, #27
 806210e:	430a      	orrs	r2, r1
 8062110:	491f      	ldr	r1, [pc, #124]	; (8062190 <RCCEx_PLLSAI2_Config+0x1b0>)
 8062112:	4313      	orrs	r3, r2
 8062114:	614b      	str	r3, [r1, #20]
 8062116:	e011      	b.n	806213c <RCCEx_PLLSAI2_Config+0x15c>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8062118:	4b1d      	ldr	r3, [pc, #116]	; (8062190 <RCCEx_PLLSAI2_Config+0x1b0>)
 806211a:	695b      	ldr	r3, [r3, #20]
 806211c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8062120:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8062124:	687a      	ldr	r2, [r7, #4]
 8062126:	6892      	ldr	r2, [r2, #8]
 8062128:	0211      	lsls	r1, r2, #8
 806212a:	687a      	ldr	r2, [r7, #4]
 806212c:	6912      	ldr	r2, [r2, #16]
 806212e:	0852      	lsrs	r2, r2, #1
 8062130:	3a01      	subs	r2, #1
 8062132:	0652      	lsls	r2, r2, #25
 8062134:	430a      	orrs	r2, r1
 8062136:	4916      	ldr	r1, [pc, #88]	; (8062190 <RCCEx_PLLSAI2_Config+0x1b0>)
 8062138:	4313      	orrs	r3, r2
 806213a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 806213c:	4b14      	ldr	r3, [pc, #80]	; (8062190 <RCCEx_PLLSAI2_Config+0x1b0>)
 806213e:	681b      	ldr	r3, [r3, #0]
 8062140:	4a13      	ldr	r2, [pc, #76]	; (8062190 <RCCEx_PLLSAI2_Config+0x1b0>)
 8062142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8062146:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8062148:	f7fe fa34 	bl	80605b4 <HAL_GetTick>
 806214c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 806214e:	e009      	b.n	8062164 <RCCEx_PLLSAI2_Config+0x184>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8062150:	f7fe fa30 	bl	80605b4 <HAL_GetTick>
 8062154:	4602      	mov	r2, r0
 8062156:	68bb      	ldr	r3, [r7, #8]
 8062158:	1ad3      	subs	r3, r2, r3
 806215a:	2b02      	cmp	r3, #2
 806215c:	d902      	bls.n	8062164 <RCCEx_PLLSAI2_Config+0x184>
        {
          status = HAL_TIMEOUT;
 806215e:	2303      	movs	r3, #3
 8062160:	73fb      	strb	r3, [r7, #15]
          break;
 8062162:	e005      	b.n	8062170 <RCCEx_PLLSAI2_Config+0x190>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8062164:	4b0a      	ldr	r3, [pc, #40]	; (8062190 <RCCEx_PLLSAI2_Config+0x1b0>)
 8062166:	681b      	ldr	r3, [r3, #0]
 8062168:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 806216c:	2b00      	cmp	r3, #0
 806216e:	d0ef      	beq.n	8062150 <RCCEx_PLLSAI2_Config+0x170>
        }
      }

      if(status == HAL_OK)
 8062170:	7bfb      	ldrb	r3, [r7, #15]
 8062172:	2b00      	cmp	r3, #0
 8062174:	d106      	bne.n	8062184 <RCCEx_PLLSAI2_Config+0x1a4>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8062176:	4b06      	ldr	r3, [pc, #24]	; (8062190 <RCCEx_PLLSAI2_Config+0x1b0>)
 8062178:	695a      	ldr	r2, [r3, #20]
 806217a:	687b      	ldr	r3, [r7, #4]
 806217c:	695b      	ldr	r3, [r3, #20]
 806217e:	4904      	ldr	r1, [pc, #16]	; (8062190 <RCCEx_PLLSAI2_Config+0x1b0>)
 8062180:	4313      	orrs	r3, r2
 8062182:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8062184:	7bfb      	ldrb	r3, [r7, #15]
}
 8062186:	4618      	mov	r0, r3
 8062188:	3710      	adds	r7, #16
 806218a:	46bd      	mov	sp, r7
 806218c:	bd80      	pop	{r7, pc}
 806218e:	bf00      	nop
 8062190:	40021000 	.word	0x40021000

08062194 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8062194:	b580      	push	{r7, lr}
 8062196:	b082      	sub	sp, #8
 8062198:	af00      	add	r7, sp, #0
 806219a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 806219c:	687b      	ldr	r3, [r7, #4]
 806219e:	2b00      	cmp	r3, #0
 80621a0:	d101      	bne.n	80621a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80621a2:	2301      	movs	r3, #1
 80621a4:	e040      	b.n	8062228 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80621a6:	687b      	ldr	r3, [r7, #4]
 80621a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80621aa:	2b00      	cmp	r3, #0
 80621ac:	d106      	bne.n	80621bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80621ae:	687b      	ldr	r3, [r7, #4]
 80621b0:	2200      	movs	r2, #0
 80621b2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80621b6:	6878      	ldr	r0, [r7, #4]
 80621b8:	f000 fec6 	bl	8062f48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80621bc:	687b      	ldr	r3, [r7, #4]
 80621be:	2224      	movs	r2, #36	; 0x24
 80621c0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80621c2:	687b      	ldr	r3, [r7, #4]
 80621c4:	681b      	ldr	r3, [r3, #0]
 80621c6:	681a      	ldr	r2, [r3, #0]
 80621c8:	687b      	ldr	r3, [r7, #4]
 80621ca:	681b      	ldr	r3, [r3, #0]
 80621cc:	f022 0201 	bic.w	r2, r2, #1
 80621d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80621d2:	6878      	ldr	r0, [r7, #4]
 80621d4:	f000 f8c0 	bl	8062358 <UART_SetConfig>
 80621d8:	4603      	mov	r3, r0
 80621da:	2b01      	cmp	r3, #1
 80621dc:	d101      	bne.n	80621e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80621de:	2301      	movs	r3, #1
 80621e0:	e022      	b.n	8062228 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80621e2:	687b      	ldr	r3, [r7, #4]
 80621e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80621e6:	2b00      	cmp	r3, #0
 80621e8:	d002      	beq.n	80621f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80621ea:	6878      	ldr	r0, [r7, #4]
 80621ec:	f000 fbfc 	bl	80629e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80621f0:	687b      	ldr	r3, [r7, #4]
 80621f2:	681b      	ldr	r3, [r3, #0]
 80621f4:	685a      	ldr	r2, [r3, #4]
 80621f6:	687b      	ldr	r3, [r7, #4]
 80621f8:	681b      	ldr	r3, [r3, #0]
 80621fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80621fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8062200:	687b      	ldr	r3, [r7, #4]
 8062202:	681b      	ldr	r3, [r3, #0]
 8062204:	689a      	ldr	r2, [r3, #8]
 8062206:	687b      	ldr	r3, [r7, #4]
 8062208:	681b      	ldr	r3, [r3, #0]
 806220a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 806220e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8062210:	687b      	ldr	r3, [r7, #4]
 8062212:	681b      	ldr	r3, [r3, #0]
 8062214:	681a      	ldr	r2, [r3, #0]
 8062216:	687b      	ldr	r3, [r7, #4]
 8062218:	681b      	ldr	r3, [r3, #0]
 806221a:	f042 0201 	orr.w	r2, r2, #1
 806221e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8062220:	6878      	ldr	r0, [r7, #4]
 8062222:	f000 fc83 	bl	8062b2c <UART_CheckIdleState>
 8062226:	4603      	mov	r3, r0
}
 8062228:	4618      	mov	r0, r3
 806222a:	3708      	adds	r7, #8
 806222c:	46bd      	mov	sp, r7
 806222e:	bd80      	pop	{r7, pc}

08062230 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8062230:	b580      	push	{r7, lr}
 8062232:	b08a      	sub	sp, #40	; 0x28
 8062234:	af02      	add	r7, sp, #8
 8062236:	60f8      	str	r0, [r7, #12]
 8062238:	60b9      	str	r1, [r7, #8]
 806223a:	603b      	str	r3, [r7, #0]
 806223c:	4613      	mov	r3, r2
 806223e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8062240:	68fb      	ldr	r3, [r7, #12]
 8062242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8062244:	2b20      	cmp	r3, #32
 8062246:	f040 8081 	bne.w	806234c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 806224a:	68bb      	ldr	r3, [r7, #8]
 806224c:	2b00      	cmp	r3, #0
 806224e:	d002      	beq.n	8062256 <HAL_UART_Transmit+0x26>
 8062250:	88fb      	ldrh	r3, [r7, #6]
 8062252:	2b00      	cmp	r3, #0
 8062254:	d101      	bne.n	806225a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8062256:	2301      	movs	r3, #1
 8062258:	e079      	b.n	806234e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 806225a:	68fb      	ldr	r3, [r7, #12]
 806225c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8062260:	2b01      	cmp	r3, #1
 8062262:	d101      	bne.n	8062268 <HAL_UART_Transmit+0x38>
 8062264:	2302      	movs	r3, #2
 8062266:	e072      	b.n	806234e <HAL_UART_Transmit+0x11e>
 8062268:	68fb      	ldr	r3, [r7, #12]
 806226a:	2201      	movs	r2, #1
 806226c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8062270:	68fb      	ldr	r3, [r7, #12]
 8062272:	2200      	movs	r2, #0
 8062274:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8062276:	68fb      	ldr	r3, [r7, #12]
 8062278:	2221      	movs	r2, #33	; 0x21
 806227a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 806227c:	f7fe f99a 	bl	80605b4 <HAL_GetTick>
 8062280:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8062282:	68fb      	ldr	r3, [r7, #12]
 8062284:	88fa      	ldrh	r2, [r7, #6]
 8062286:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 806228a:	68fb      	ldr	r3, [r7, #12]
 806228c:	88fa      	ldrh	r2, [r7, #6]
 806228e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8062292:	68fb      	ldr	r3, [r7, #12]
 8062294:	689b      	ldr	r3, [r3, #8]
 8062296:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 806229a:	d108      	bne.n	80622ae <HAL_UART_Transmit+0x7e>
 806229c:	68fb      	ldr	r3, [r7, #12]
 806229e:	691b      	ldr	r3, [r3, #16]
 80622a0:	2b00      	cmp	r3, #0
 80622a2:	d104      	bne.n	80622ae <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80622a4:	2300      	movs	r3, #0
 80622a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80622a8:	68bb      	ldr	r3, [r7, #8]
 80622aa:	61bb      	str	r3, [r7, #24]
 80622ac:	e003      	b.n	80622b6 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80622ae:	68bb      	ldr	r3, [r7, #8]
 80622b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80622b2:	2300      	movs	r3, #0
 80622b4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80622b6:	e02d      	b.n	8062314 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80622b8:	683b      	ldr	r3, [r7, #0]
 80622ba:	9300      	str	r3, [sp, #0]
 80622bc:	697b      	ldr	r3, [r7, #20]
 80622be:	2200      	movs	r2, #0
 80622c0:	2180      	movs	r1, #128	; 0x80
 80622c2:	68f8      	ldr	r0, [r7, #12]
 80622c4:	f000 fc77 	bl	8062bb6 <UART_WaitOnFlagUntilTimeout>
 80622c8:	4603      	mov	r3, r0
 80622ca:	2b00      	cmp	r3, #0
 80622cc:	d001      	beq.n	80622d2 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 80622ce:	2303      	movs	r3, #3
 80622d0:	e03d      	b.n	806234e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80622d2:	69fb      	ldr	r3, [r7, #28]
 80622d4:	2b00      	cmp	r3, #0
 80622d6:	d10b      	bne.n	80622f0 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80622d8:	69bb      	ldr	r3, [r7, #24]
 80622da:	881a      	ldrh	r2, [r3, #0]
 80622dc:	68fb      	ldr	r3, [r7, #12]
 80622de:	681b      	ldr	r3, [r3, #0]
 80622e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80622e4:	b292      	uxth	r2, r2
 80622e6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80622e8:	69bb      	ldr	r3, [r7, #24]
 80622ea:	3302      	adds	r3, #2
 80622ec:	61bb      	str	r3, [r7, #24]
 80622ee:	e008      	b.n	8062302 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80622f0:	69fb      	ldr	r3, [r7, #28]
 80622f2:	781a      	ldrb	r2, [r3, #0]
 80622f4:	68fb      	ldr	r3, [r7, #12]
 80622f6:	681b      	ldr	r3, [r3, #0]
 80622f8:	b292      	uxth	r2, r2
 80622fa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80622fc:	69fb      	ldr	r3, [r7, #28]
 80622fe:	3301      	adds	r3, #1
 8062300:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8062302:	68fb      	ldr	r3, [r7, #12]
 8062304:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8062308:	b29b      	uxth	r3, r3
 806230a:	3b01      	subs	r3, #1
 806230c:	b29a      	uxth	r2, r3
 806230e:	68fb      	ldr	r3, [r7, #12]
 8062310:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8062314:	68fb      	ldr	r3, [r7, #12]
 8062316:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 806231a:	b29b      	uxth	r3, r3
 806231c:	2b00      	cmp	r3, #0
 806231e:	d1cb      	bne.n	80622b8 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8062320:	683b      	ldr	r3, [r7, #0]
 8062322:	9300      	str	r3, [sp, #0]
 8062324:	697b      	ldr	r3, [r7, #20]
 8062326:	2200      	movs	r2, #0
 8062328:	2140      	movs	r1, #64	; 0x40
 806232a:	68f8      	ldr	r0, [r7, #12]
 806232c:	f000 fc43 	bl	8062bb6 <UART_WaitOnFlagUntilTimeout>
 8062330:	4603      	mov	r3, r0
 8062332:	2b00      	cmp	r3, #0
 8062334:	d001      	beq.n	806233a <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8062336:	2303      	movs	r3, #3
 8062338:	e009      	b.n	806234e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 806233a:	68fb      	ldr	r3, [r7, #12]
 806233c:	2220      	movs	r2, #32
 806233e:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8062340:	68fb      	ldr	r3, [r7, #12]
 8062342:	2200      	movs	r2, #0
 8062344:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8062348:	2300      	movs	r3, #0
 806234a:	e000      	b.n	806234e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 806234c:	2302      	movs	r3, #2
  }
}
 806234e:	4618      	mov	r0, r3
 8062350:	3720      	adds	r7, #32
 8062352:	46bd      	mov	sp, r7
 8062354:	bd80      	pop	{r7, pc}
	...

08062358 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8062358:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 806235c:	b088      	sub	sp, #32
 806235e:	af00      	add	r7, sp, #0
 8062360:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8062362:	2300      	movs	r3, #0
 8062364:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8062366:	2300      	movs	r3, #0
 8062368:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 806236a:	2300      	movs	r3, #0
 806236c:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 806236e:	687b      	ldr	r3, [r7, #4]
 8062370:	689a      	ldr	r2, [r3, #8]
 8062372:	687b      	ldr	r3, [r7, #4]
 8062374:	691b      	ldr	r3, [r3, #16]
 8062376:	431a      	orrs	r2, r3
 8062378:	687b      	ldr	r3, [r7, #4]
 806237a:	695b      	ldr	r3, [r3, #20]
 806237c:	431a      	orrs	r2, r3
 806237e:	687b      	ldr	r3, [r7, #4]
 8062380:	69db      	ldr	r3, [r3, #28]
 8062382:	4313      	orrs	r3, r2
 8062384:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8062386:	687b      	ldr	r3, [r7, #4]
 8062388:	681b      	ldr	r3, [r3, #0]
 806238a:	681a      	ldr	r2, [r3, #0]
 806238c:	4bac      	ldr	r3, [pc, #688]	; (8062640 <UART_SetConfig+0x2e8>)
 806238e:	4013      	ands	r3, r2
 8062390:	687a      	ldr	r2, [r7, #4]
 8062392:	6812      	ldr	r2, [r2, #0]
 8062394:	69f9      	ldr	r1, [r7, #28]
 8062396:	430b      	orrs	r3, r1
 8062398:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 806239a:	687b      	ldr	r3, [r7, #4]
 806239c:	681b      	ldr	r3, [r3, #0]
 806239e:	685b      	ldr	r3, [r3, #4]
 80623a0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80623a4:	687b      	ldr	r3, [r7, #4]
 80623a6:	68da      	ldr	r2, [r3, #12]
 80623a8:	687b      	ldr	r3, [r7, #4]
 80623aa:	681b      	ldr	r3, [r3, #0]
 80623ac:	430a      	orrs	r2, r1
 80623ae:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80623b0:	687b      	ldr	r3, [r7, #4]
 80623b2:	699b      	ldr	r3, [r3, #24]
 80623b4:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80623b6:	687b      	ldr	r3, [r7, #4]
 80623b8:	681b      	ldr	r3, [r3, #0]
 80623ba:	4aa2      	ldr	r2, [pc, #648]	; (8062644 <UART_SetConfig+0x2ec>)
 80623bc:	4293      	cmp	r3, r2
 80623be:	d004      	beq.n	80623ca <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80623c0:	687b      	ldr	r3, [r7, #4]
 80623c2:	6a1b      	ldr	r3, [r3, #32]
 80623c4:	69fa      	ldr	r2, [r7, #28]
 80623c6:	4313      	orrs	r3, r2
 80623c8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80623ca:	687b      	ldr	r3, [r7, #4]
 80623cc:	681b      	ldr	r3, [r3, #0]
 80623ce:	689b      	ldr	r3, [r3, #8]
 80623d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80623d4:	687b      	ldr	r3, [r7, #4]
 80623d6:	681b      	ldr	r3, [r3, #0]
 80623d8:	69fa      	ldr	r2, [r7, #28]
 80623da:	430a      	orrs	r2, r1
 80623dc:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80623de:	687b      	ldr	r3, [r7, #4]
 80623e0:	681b      	ldr	r3, [r3, #0]
 80623e2:	4a99      	ldr	r2, [pc, #612]	; (8062648 <UART_SetConfig+0x2f0>)
 80623e4:	4293      	cmp	r3, r2
 80623e6:	d121      	bne.n	806242c <UART_SetConfig+0xd4>
 80623e8:	4b98      	ldr	r3, [pc, #608]	; (806264c <UART_SetConfig+0x2f4>)
 80623ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80623ee:	f003 0303 	and.w	r3, r3, #3
 80623f2:	2b03      	cmp	r3, #3
 80623f4:	d816      	bhi.n	8062424 <UART_SetConfig+0xcc>
 80623f6:	a201      	add	r2, pc, #4	; (adr r2, 80623fc <UART_SetConfig+0xa4>)
 80623f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80623fc:	0806240d 	.word	0x0806240d
 8062400:	08062419 	.word	0x08062419
 8062404:	08062413 	.word	0x08062413
 8062408:	0806241f 	.word	0x0806241f
 806240c:	2301      	movs	r3, #1
 806240e:	76fb      	strb	r3, [r7, #27]
 8062410:	e0e8      	b.n	80625e4 <UART_SetConfig+0x28c>
 8062412:	2302      	movs	r3, #2
 8062414:	76fb      	strb	r3, [r7, #27]
 8062416:	e0e5      	b.n	80625e4 <UART_SetConfig+0x28c>
 8062418:	2304      	movs	r3, #4
 806241a:	76fb      	strb	r3, [r7, #27]
 806241c:	e0e2      	b.n	80625e4 <UART_SetConfig+0x28c>
 806241e:	2308      	movs	r3, #8
 8062420:	76fb      	strb	r3, [r7, #27]
 8062422:	e0df      	b.n	80625e4 <UART_SetConfig+0x28c>
 8062424:	2310      	movs	r3, #16
 8062426:	76fb      	strb	r3, [r7, #27]
 8062428:	bf00      	nop
 806242a:	e0db      	b.n	80625e4 <UART_SetConfig+0x28c>
 806242c:	687b      	ldr	r3, [r7, #4]
 806242e:	681b      	ldr	r3, [r3, #0]
 8062430:	4a87      	ldr	r2, [pc, #540]	; (8062650 <UART_SetConfig+0x2f8>)
 8062432:	4293      	cmp	r3, r2
 8062434:	d134      	bne.n	80624a0 <UART_SetConfig+0x148>
 8062436:	4b85      	ldr	r3, [pc, #532]	; (806264c <UART_SetConfig+0x2f4>)
 8062438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 806243c:	f003 030c 	and.w	r3, r3, #12
 8062440:	2b0c      	cmp	r3, #12
 8062442:	d829      	bhi.n	8062498 <UART_SetConfig+0x140>
 8062444:	a201      	add	r2, pc, #4	; (adr r2, 806244c <UART_SetConfig+0xf4>)
 8062446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 806244a:	bf00      	nop
 806244c:	08062481 	.word	0x08062481
 8062450:	08062499 	.word	0x08062499
 8062454:	08062499 	.word	0x08062499
 8062458:	08062499 	.word	0x08062499
 806245c:	0806248d 	.word	0x0806248d
 8062460:	08062499 	.word	0x08062499
 8062464:	08062499 	.word	0x08062499
 8062468:	08062499 	.word	0x08062499
 806246c:	08062487 	.word	0x08062487
 8062470:	08062499 	.word	0x08062499
 8062474:	08062499 	.word	0x08062499
 8062478:	08062499 	.word	0x08062499
 806247c:	08062493 	.word	0x08062493
 8062480:	2300      	movs	r3, #0
 8062482:	76fb      	strb	r3, [r7, #27]
 8062484:	e0ae      	b.n	80625e4 <UART_SetConfig+0x28c>
 8062486:	2302      	movs	r3, #2
 8062488:	76fb      	strb	r3, [r7, #27]
 806248a:	e0ab      	b.n	80625e4 <UART_SetConfig+0x28c>
 806248c:	2304      	movs	r3, #4
 806248e:	76fb      	strb	r3, [r7, #27]
 8062490:	e0a8      	b.n	80625e4 <UART_SetConfig+0x28c>
 8062492:	2308      	movs	r3, #8
 8062494:	76fb      	strb	r3, [r7, #27]
 8062496:	e0a5      	b.n	80625e4 <UART_SetConfig+0x28c>
 8062498:	2310      	movs	r3, #16
 806249a:	76fb      	strb	r3, [r7, #27]
 806249c:	bf00      	nop
 806249e:	e0a1      	b.n	80625e4 <UART_SetConfig+0x28c>
 80624a0:	687b      	ldr	r3, [r7, #4]
 80624a2:	681b      	ldr	r3, [r3, #0]
 80624a4:	4a6b      	ldr	r2, [pc, #428]	; (8062654 <UART_SetConfig+0x2fc>)
 80624a6:	4293      	cmp	r3, r2
 80624a8:	d120      	bne.n	80624ec <UART_SetConfig+0x194>
 80624aa:	4b68      	ldr	r3, [pc, #416]	; (806264c <UART_SetConfig+0x2f4>)
 80624ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80624b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80624b4:	2b10      	cmp	r3, #16
 80624b6:	d00f      	beq.n	80624d8 <UART_SetConfig+0x180>
 80624b8:	2b10      	cmp	r3, #16
 80624ba:	d802      	bhi.n	80624c2 <UART_SetConfig+0x16a>
 80624bc:	2b00      	cmp	r3, #0
 80624be:	d005      	beq.n	80624cc <UART_SetConfig+0x174>
 80624c0:	e010      	b.n	80624e4 <UART_SetConfig+0x18c>
 80624c2:	2b20      	cmp	r3, #32
 80624c4:	d005      	beq.n	80624d2 <UART_SetConfig+0x17a>
 80624c6:	2b30      	cmp	r3, #48	; 0x30
 80624c8:	d009      	beq.n	80624de <UART_SetConfig+0x186>
 80624ca:	e00b      	b.n	80624e4 <UART_SetConfig+0x18c>
 80624cc:	2300      	movs	r3, #0
 80624ce:	76fb      	strb	r3, [r7, #27]
 80624d0:	e088      	b.n	80625e4 <UART_SetConfig+0x28c>
 80624d2:	2302      	movs	r3, #2
 80624d4:	76fb      	strb	r3, [r7, #27]
 80624d6:	e085      	b.n	80625e4 <UART_SetConfig+0x28c>
 80624d8:	2304      	movs	r3, #4
 80624da:	76fb      	strb	r3, [r7, #27]
 80624dc:	e082      	b.n	80625e4 <UART_SetConfig+0x28c>
 80624de:	2308      	movs	r3, #8
 80624e0:	76fb      	strb	r3, [r7, #27]
 80624e2:	e07f      	b.n	80625e4 <UART_SetConfig+0x28c>
 80624e4:	2310      	movs	r3, #16
 80624e6:	76fb      	strb	r3, [r7, #27]
 80624e8:	bf00      	nop
 80624ea:	e07b      	b.n	80625e4 <UART_SetConfig+0x28c>
 80624ec:	687b      	ldr	r3, [r7, #4]
 80624ee:	681b      	ldr	r3, [r3, #0]
 80624f0:	4a59      	ldr	r2, [pc, #356]	; (8062658 <UART_SetConfig+0x300>)
 80624f2:	4293      	cmp	r3, r2
 80624f4:	d120      	bne.n	8062538 <UART_SetConfig+0x1e0>
 80624f6:	4b55      	ldr	r3, [pc, #340]	; (806264c <UART_SetConfig+0x2f4>)
 80624f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80624fc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8062500:	2b40      	cmp	r3, #64	; 0x40
 8062502:	d00f      	beq.n	8062524 <UART_SetConfig+0x1cc>
 8062504:	2b40      	cmp	r3, #64	; 0x40
 8062506:	d802      	bhi.n	806250e <UART_SetConfig+0x1b6>
 8062508:	2b00      	cmp	r3, #0
 806250a:	d005      	beq.n	8062518 <UART_SetConfig+0x1c0>
 806250c:	e010      	b.n	8062530 <UART_SetConfig+0x1d8>
 806250e:	2b80      	cmp	r3, #128	; 0x80
 8062510:	d005      	beq.n	806251e <UART_SetConfig+0x1c6>
 8062512:	2bc0      	cmp	r3, #192	; 0xc0
 8062514:	d009      	beq.n	806252a <UART_SetConfig+0x1d2>
 8062516:	e00b      	b.n	8062530 <UART_SetConfig+0x1d8>
 8062518:	2300      	movs	r3, #0
 806251a:	76fb      	strb	r3, [r7, #27]
 806251c:	e062      	b.n	80625e4 <UART_SetConfig+0x28c>
 806251e:	2302      	movs	r3, #2
 8062520:	76fb      	strb	r3, [r7, #27]
 8062522:	e05f      	b.n	80625e4 <UART_SetConfig+0x28c>
 8062524:	2304      	movs	r3, #4
 8062526:	76fb      	strb	r3, [r7, #27]
 8062528:	e05c      	b.n	80625e4 <UART_SetConfig+0x28c>
 806252a:	2308      	movs	r3, #8
 806252c:	76fb      	strb	r3, [r7, #27]
 806252e:	e059      	b.n	80625e4 <UART_SetConfig+0x28c>
 8062530:	2310      	movs	r3, #16
 8062532:	76fb      	strb	r3, [r7, #27]
 8062534:	bf00      	nop
 8062536:	e055      	b.n	80625e4 <UART_SetConfig+0x28c>
 8062538:	687b      	ldr	r3, [r7, #4]
 806253a:	681b      	ldr	r3, [r3, #0]
 806253c:	4a47      	ldr	r2, [pc, #284]	; (806265c <UART_SetConfig+0x304>)
 806253e:	4293      	cmp	r3, r2
 8062540:	d124      	bne.n	806258c <UART_SetConfig+0x234>
 8062542:	4b42      	ldr	r3, [pc, #264]	; (806264c <UART_SetConfig+0x2f4>)
 8062544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8062548:	f403 7340 	and.w	r3, r3, #768	; 0x300
 806254c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8062550:	d012      	beq.n	8062578 <UART_SetConfig+0x220>
 8062552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8062556:	d802      	bhi.n	806255e <UART_SetConfig+0x206>
 8062558:	2b00      	cmp	r3, #0
 806255a:	d007      	beq.n	806256c <UART_SetConfig+0x214>
 806255c:	e012      	b.n	8062584 <UART_SetConfig+0x22c>
 806255e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8062562:	d006      	beq.n	8062572 <UART_SetConfig+0x21a>
 8062564:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8062568:	d009      	beq.n	806257e <UART_SetConfig+0x226>
 806256a:	e00b      	b.n	8062584 <UART_SetConfig+0x22c>
 806256c:	2300      	movs	r3, #0
 806256e:	76fb      	strb	r3, [r7, #27]
 8062570:	e038      	b.n	80625e4 <UART_SetConfig+0x28c>
 8062572:	2302      	movs	r3, #2
 8062574:	76fb      	strb	r3, [r7, #27]
 8062576:	e035      	b.n	80625e4 <UART_SetConfig+0x28c>
 8062578:	2304      	movs	r3, #4
 806257a:	76fb      	strb	r3, [r7, #27]
 806257c:	e032      	b.n	80625e4 <UART_SetConfig+0x28c>
 806257e:	2308      	movs	r3, #8
 8062580:	76fb      	strb	r3, [r7, #27]
 8062582:	e02f      	b.n	80625e4 <UART_SetConfig+0x28c>
 8062584:	2310      	movs	r3, #16
 8062586:	76fb      	strb	r3, [r7, #27]
 8062588:	bf00      	nop
 806258a:	e02b      	b.n	80625e4 <UART_SetConfig+0x28c>
 806258c:	687b      	ldr	r3, [r7, #4]
 806258e:	681b      	ldr	r3, [r3, #0]
 8062590:	4a2c      	ldr	r2, [pc, #176]	; (8062644 <UART_SetConfig+0x2ec>)
 8062592:	4293      	cmp	r3, r2
 8062594:	d124      	bne.n	80625e0 <UART_SetConfig+0x288>
 8062596:	4b2d      	ldr	r3, [pc, #180]	; (806264c <UART_SetConfig+0x2f4>)
 8062598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 806259c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80625a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80625a4:	d012      	beq.n	80625cc <UART_SetConfig+0x274>
 80625a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80625aa:	d802      	bhi.n	80625b2 <UART_SetConfig+0x25a>
 80625ac:	2b00      	cmp	r3, #0
 80625ae:	d007      	beq.n	80625c0 <UART_SetConfig+0x268>
 80625b0:	e012      	b.n	80625d8 <UART_SetConfig+0x280>
 80625b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80625b6:	d006      	beq.n	80625c6 <UART_SetConfig+0x26e>
 80625b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80625bc:	d009      	beq.n	80625d2 <UART_SetConfig+0x27a>
 80625be:	e00b      	b.n	80625d8 <UART_SetConfig+0x280>
 80625c0:	2300      	movs	r3, #0
 80625c2:	76fb      	strb	r3, [r7, #27]
 80625c4:	e00e      	b.n	80625e4 <UART_SetConfig+0x28c>
 80625c6:	2302      	movs	r3, #2
 80625c8:	76fb      	strb	r3, [r7, #27]
 80625ca:	e00b      	b.n	80625e4 <UART_SetConfig+0x28c>
 80625cc:	2304      	movs	r3, #4
 80625ce:	76fb      	strb	r3, [r7, #27]
 80625d0:	e008      	b.n	80625e4 <UART_SetConfig+0x28c>
 80625d2:	2308      	movs	r3, #8
 80625d4:	76fb      	strb	r3, [r7, #27]
 80625d6:	e005      	b.n	80625e4 <UART_SetConfig+0x28c>
 80625d8:	2310      	movs	r3, #16
 80625da:	76fb      	strb	r3, [r7, #27]
 80625dc:	bf00      	nop
 80625de:	e001      	b.n	80625e4 <UART_SetConfig+0x28c>
 80625e0:	2310      	movs	r3, #16
 80625e2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80625e4:	687b      	ldr	r3, [r7, #4]
 80625e6:	681b      	ldr	r3, [r3, #0]
 80625e8:	4a16      	ldr	r2, [pc, #88]	; (8062644 <UART_SetConfig+0x2ec>)
 80625ea:	4293      	cmp	r3, r2
 80625ec:	f040 80fa 	bne.w	80627e4 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80625f0:	7efb      	ldrb	r3, [r7, #27]
 80625f2:	2b08      	cmp	r3, #8
 80625f4:	d836      	bhi.n	8062664 <UART_SetConfig+0x30c>
 80625f6:	a201      	add	r2, pc, #4	; (adr r2, 80625fc <UART_SetConfig+0x2a4>)
 80625f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80625fc:	08062621 	.word	0x08062621
 8062600:	08062665 	.word	0x08062665
 8062604:	08062629 	.word	0x08062629
 8062608:	08062665 	.word	0x08062665
 806260c:	0806262f 	.word	0x0806262f
 8062610:	08062665 	.word	0x08062665
 8062614:	08062665 	.word	0x08062665
 8062618:	08062665 	.word	0x08062665
 806261c:	08062637 	.word	0x08062637
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8062620:	f7ff f86a 	bl	80616f8 <HAL_RCC_GetPCLK1Freq>
 8062624:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8062626:	e020      	b.n	806266a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8062628:	4b0d      	ldr	r3, [pc, #52]	; (8062660 <UART_SetConfig+0x308>)
 806262a:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 806262c:	e01d      	b.n	806266a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 806262e:	f7fe ffcd 	bl	80615cc <HAL_RCC_GetSysClockFreq>
 8062632:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8062634:	e019      	b.n	806266a <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8062636:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 806263a:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 806263c:	e015      	b.n	806266a <UART_SetConfig+0x312>
 806263e:	bf00      	nop
 8062640:	efff69f3 	.word	0xefff69f3
 8062644:	40008000 	.word	0x40008000
 8062648:	40013800 	.word	0x40013800
 806264c:	40021000 	.word	0x40021000
 8062650:	40004400 	.word	0x40004400
 8062654:	40004800 	.word	0x40004800
 8062658:	40004c00 	.word	0x40004c00
 806265c:	40005000 	.word	0x40005000
 8062660:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8062664:	2301      	movs	r3, #1
 8062666:	74fb      	strb	r3, [r7, #19]
        break;
 8062668:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 806266a:	68fb      	ldr	r3, [r7, #12]
 806266c:	2b00      	cmp	r3, #0
 806266e:	f000 81ac 	beq.w	80629ca <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8062672:	687b      	ldr	r3, [r7, #4]
 8062674:	685a      	ldr	r2, [r3, #4]
 8062676:	4613      	mov	r3, r2
 8062678:	005b      	lsls	r3, r3, #1
 806267a:	4413      	add	r3, r2
 806267c:	68fa      	ldr	r2, [r7, #12]
 806267e:	429a      	cmp	r2, r3
 8062680:	d305      	bcc.n	806268e <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8062682:	687b      	ldr	r3, [r7, #4]
 8062684:	685b      	ldr	r3, [r3, #4]
 8062686:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8062688:	68fa      	ldr	r2, [r7, #12]
 806268a:	429a      	cmp	r2, r3
 806268c:	d902      	bls.n	8062694 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 806268e:	2301      	movs	r3, #1
 8062690:	74fb      	strb	r3, [r7, #19]
 8062692:	e19a      	b.n	80629ca <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8062694:	7efb      	ldrb	r3, [r7, #27]
 8062696:	2b08      	cmp	r3, #8
 8062698:	f200 8091 	bhi.w	80627be <UART_SetConfig+0x466>
 806269c:	a201      	add	r2, pc, #4	; (adr r2, 80626a4 <UART_SetConfig+0x34c>)
 806269e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80626a2:	bf00      	nop
 80626a4:	080626c9 	.word	0x080626c9
 80626a8:	080627bf 	.word	0x080627bf
 80626ac:	08062715 	.word	0x08062715
 80626b0:	080627bf 	.word	0x080627bf
 80626b4:	08062749 	.word	0x08062749
 80626b8:	080627bf 	.word	0x080627bf
 80626bc:	080627bf 	.word	0x080627bf
 80626c0:	080627bf 	.word	0x080627bf
 80626c4:	08062795 	.word	0x08062795
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80626c8:	f7ff f816 	bl	80616f8 <HAL_RCC_GetPCLK1Freq>
 80626cc:	4603      	mov	r3, r0
 80626ce:	4619      	mov	r1, r3
 80626d0:	f04f 0200 	mov.w	r2, #0
 80626d4:	f04f 0300 	mov.w	r3, #0
 80626d8:	f04f 0400 	mov.w	r4, #0
 80626dc:	0214      	lsls	r4, r2, #8
 80626de:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80626e2:	020b      	lsls	r3, r1, #8
 80626e4:	687a      	ldr	r2, [r7, #4]
 80626e6:	6852      	ldr	r2, [r2, #4]
 80626e8:	0852      	lsrs	r2, r2, #1
 80626ea:	4611      	mov	r1, r2
 80626ec:	f04f 0200 	mov.w	r2, #0
 80626f0:	eb13 0b01 	adds.w	fp, r3, r1
 80626f4:	eb44 0c02 	adc.w	ip, r4, r2
 80626f8:	4658      	mov	r0, fp
 80626fa:	4661      	mov	r1, ip
 80626fc:	687b      	ldr	r3, [r7, #4]
 80626fe:	685b      	ldr	r3, [r3, #4]
 8062700:	f04f 0400 	mov.w	r4, #0
 8062704:	461a      	mov	r2, r3
 8062706:	4623      	mov	r3, r4
 8062708:	f7fd fd70 	bl	80601ec <__aeabi_uldivmod>
 806270c:	4603      	mov	r3, r0
 806270e:	460c      	mov	r4, r1
 8062710:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8062712:	e057      	b.n	80627c4 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8062714:	687b      	ldr	r3, [r7, #4]
 8062716:	685b      	ldr	r3, [r3, #4]
 8062718:	085b      	lsrs	r3, r3, #1
 806271a:	f04f 0400 	mov.w	r4, #0
 806271e:	49b1      	ldr	r1, [pc, #708]	; (80629e4 <UART_SetConfig+0x68c>)
 8062720:	f04f 0200 	mov.w	r2, #0
 8062724:	eb13 0b01 	adds.w	fp, r3, r1
 8062728:	eb44 0c02 	adc.w	ip, r4, r2
 806272c:	4658      	mov	r0, fp
 806272e:	4661      	mov	r1, ip
 8062730:	687b      	ldr	r3, [r7, #4]
 8062732:	685b      	ldr	r3, [r3, #4]
 8062734:	f04f 0400 	mov.w	r4, #0
 8062738:	461a      	mov	r2, r3
 806273a:	4623      	mov	r3, r4
 806273c:	f7fd fd56 	bl	80601ec <__aeabi_uldivmod>
 8062740:	4603      	mov	r3, r0
 8062742:	460c      	mov	r4, r1
 8062744:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8062746:	e03d      	b.n	80627c4 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8062748:	f7fe ff40 	bl	80615cc <HAL_RCC_GetSysClockFreq>
 806274c:	4603      	mov	r3, r0
 806274e:	4619      	mov	r1, r3
 8062750:	f04f 0200 	mov.w	r2, #0
 8062754:	f04f 0300 	mov.w	r3, #0
 8062758:	f04f 0400 	mov.w	r4, #0
 806275c:	0214      	lsls	r4, r2, #8
 806275e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8062762:	020b      	lsls	r3, r1, #8
 8062764:	687a      	ldr	r2, [r7, #4]
 8062766:	6852      	ldr	r2, [r2, #4]
 8062768:	0852      	lsrs	r2, r2, #1
 806276a:	4611      	mov	r1, r2
 806276c:	f04f 0200 	mov.w	r2, #0
 8062770:	eb13 0b01 	adds.w	fp, r3, r1
 8062774:	eb44 0c02 	adc.w	ip, r4, r2
 8062778:	4658      	mov	r0, fp
 806277a:	4661      	mov	r1, ip
 806277c:	687b      	ldr	r3, [r7, #4]
 806277e:	685b      	ldr	r3, [r3, #4]
 8062780:	f04f 0400 	mov.w	r4, #0
 8062784:	461a      	mov	r2, r3
 8062786:	4623      	mov	r3, r4
 8062788:	f7fd fd30 	bl	80601ec <__aeabi_uldivmod>
 806278c:	4603      	mov	r3, r0
 806278e:	460c      	mov	r4, r1
 8062790:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8062792:	e017      	b.n	80627c4 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8062794:	687b      	ldr	r3, [r7, #4]
 8062796:	685b      	ldr	r3, [r3, #4]
 8062798:	085b      	lsrs	r3, r3, #1
 806279a:	f04f 0400 	mov.w	r4, #0
 806279e:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80627a2:	f144 0100 	adc.w	r1, r4, #0
 80627a6:	687b      	ldr	r3, [r7, #4]
 80627a8:	685b      	ldr	r3, [r3, #4]
 80627aa:	f04f 0400 	mov.w	r4, #0
 80627ae:	461a      	mov	r2, r3
 80627b0:	4623      	mov	r3, r4
 80627b2:	f7fd fd1b 	bl	80601ec <__aeabi_uldivmod>
 80627b6:	4603      	mov	r3, r0
 80627b8:	460c      	mov	r4, r1
 80627ba:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80627bc:	e002      	b.n	80627c4 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 80627be:	2301      	movs	r3, #1
 80627c0:	74fb      	strb	r3, [r7, #19]
            break;
 80627c2:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80627c4:	697b      	ldr	r3, [r7, #20]
 80627c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80627ca:	d308      	bcc.n	80627de <UART_SetConfig+0x486>
 80627cc:	697b      	ldr	r3, [r7, #20]
 80627ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80627d2:	d204      	bcs.n	80627de <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 80627d4:	687b      	ldr	r3, [r7, #4]
 80627d6:	681b      	ldr	r3, [r3, #0]
 80627d8:	697a      	ldr	r2, [r7, #20]
 80627da:	60da      	str	r2, [r3, #12]
 80627dc:	e0f5      	b.n	80629ca <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 80627de:	2301      	movs	r3, #1
 80627e0:	74fb      	strb	r3, [r7, #19]
 80627e2:	e0f2      	b.n	80629ca <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80627e4:	687b      	ldr	r3, [r7, #4]
 80627e6:	69db      	ldr	r3, [r3, #28]
 80627e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80627ec:	d17f      	bne.n	80628ee <UART_SetConfig+0x596>
  {
    switch (clocksource)
 80627ee:	7efb      	ldrb	r3, [r7, #27]
 80627f0:	2b08      	cmp	r3, #8
 80627f2:	d85c      	bhi.n	80628ae <UART_SetConfig+0x556>
 80627f4:	a201      	add	r2, pc, #4	; (adr r2, 80627fc <UART_SetConfig+0x4a4>)
 80627f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80627fa:	bf00      	nop
 80627fc:	08062821 	.word	0x08062821
 8062800:	0806283f 	.word	0x0806283f
 8062804:	0806285d 	.word	0x0806285d
 8062808:	080628af 	.word	0x080628af
 806280c:	08062879 	.word	0x08062879
 8062810:	080628af 	.word	0x080628af
 8062814:	080628af 	.word	0x080628af
 8062818:	080628af 	.word	0x080628af
 806281c:	08062897 	.word	0x08062897
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8062820:	f7fe ff6a 	bl	80616f8 <HAL_RCC_GetPCLK1Freq>
 8062824:	4603      	mov	r3, r0
 8062826:	005a      	lsls	r2, r3, #1
 8062828:	687b      	ldr	r3, [r7, #4]
 806282a:	685b      	ldr	r3, [r3, #4]
 806282c:	085b      	lsrs	r3, r3, #1
 806282e:	441a      	add	r2, r3
 8062830:	687b      	ldr	r3, [r7, #4]
 8062832:	685b      	ldr	r3, [r3, #4]
 8062834:	fbb2 f3f3 	udiv	r3, r2, r3
 8062838:	b29b      	uxth	r3, r3
 806283a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 806283c:	e03a      	b.n	80628b4 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 806283e:	f7fe ff71 	bl	8061724 <HAL_RCC_GetPCLK2Freq>
 8062842:	4603      	mov	r3, r0
 8062844:	005a      	lsls	r2, r3, #1
 8062846:	687b      	ldr	r3, [r7, #4]
 8062848:	685b      	ldr	r3, [r3, #4]
 806284a:	085b      	lsrs	r3, r3, #1
 806284c:	441a      	add	r2, r3
 806284e:	687b      	ldr	r3, [r7, #4]
 8062850:	685b      	ldr	r3, [r3, #4]
 8062852:	fbb2 f3f3 	udiv	r3, r2, r3
 8062856:	b29b      	uxth	r3, r3
 8062858:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 806285a:	e02b      	b.n	80628b4 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 806285c:	687b      	ldr	r3, [r7, #4]
 806285e:	685b      	ldr	r3, [r3, #4]
 8062860:	085b      	lsrs	r3, r3, #1
 8062862:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8062866:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 806286a:	687a      	ldr	r2, [r7, #4]
 806286c:	6852      	ldr	r2, [r2, #4]
 806286e:	fbb3 f3f2 	udiv	r3, r3, r2
 8062872:	b29b      	uxth	r3, r3
 8062874:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8062876:	e01d      	b.n	80628b4 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8062878:	f7fe fea8 	bl	80615cc <HAL_RCC_GetSysClockFreq>
 806287c:	4603      	mov	r3, r0
 806287e:	005a      	lsls	r2, r3, #1
 8062880:	687b      	ldr	r3, [r7, #4]
 8062882:	685b      	ldr	r3, [r3, #4]
 8062884:	085b      	lsrs	r3, r3, #1
 8062886:	441a      	add	r2, r3
 8062888:	687b      	ldr	r3, [r7, #4]
 806288a:	685b      	ldr	r3, [r3, #4]
 806288c:	fbb2 f3f3 	udiv	r3, r2, r3
 8062890:	b29b      	uxth	r3, r3
 8062892:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8062894:	e00e      	b.n	80628b4 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8062896:	687b      	ldr	r3, [r7, #4]
 8062898:	685b      	ldr	r3, [r3, #4]
 806289a:	085b      	lsrs	r3, r3, #1
 806289c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80628a0:	687b      	ldr	r3, [r7, #4]
 80628a2:	685b      	ldr	r3, [r3, #4]
 80628a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80628a8:	b29b      	uxth	r3, r3
 80628aa:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80628ac:	e002      	b.n	80628b4 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80628ae:	2301      	movs	r3, #1
 80628b0:	74fb      	strb	r3, [r7, #19]
        break;
 80628b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80628b4:	697b      	ldr	r3, [r7, #20]
 80628b6:	2b0f      	cmp	r3, #15
 80628b8:	d916      	bls.n	80628e8 <UART_SetConfig+0x590>
 80628ba:	697b      	ldr	r3, [r7, #20]
 80628bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80628c0:	d212      	bcs.n	80628e8 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80628c2:	697b      	ldr	r3, [r7, #20]
 80628c4:	b29b      	uxth	r3, r3
 80628c6:	f023 030f 	bic.w	r3, r3, #15
 80628ca:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80628cc:	697b      	ldr	r3, [r7, #20]
 80628ce:	085b      	lsrs	r3, r3, #1
 80628d0:	b29b      	uxth	r3, r3
 80628d2:	f003 0307 	and.w	r3, r3, #7
 80628d6:	b29a      	uxth	r2, r3
 80628d8:	897b      	ldrh	r3, [r7, #10]
 80628da:	4313      	orrs	r3, r2
 80628dc:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80628de:	687b      	ldr	r3, [r7, #4]
 80628e0:	681b      	ldr	r3, [r3, #0]
 80628e2:	897a      	ldrh	r2, [r7, #10]
 80628e4:	60da      	str	r2, [r3, #12]
 80628e6:	e070      	b.n	80629ca <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 80628e8:	2301      	movs	r3, #1
 80628ea:	74fb      	strb	r3, [r7, #19]
 80628ec:	e06d      	b.n	80629ca <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 80628ee:	7efb      	ldrb	r3, [r7, #27]
 80628f0:	2b08      	cmp	r3, #8
 80628f2:	d859      	bhi.n	80629a8 <UART_SetConfig+0x650>
 80628f4:	a201      	add	r2, pc, #4	; (adr r2, 80628fc <UART_SetConfig+0x5a4>)
 80628f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80628fa:	bf00      	nop
 80628fc:	08062921 	.word	0x08062921
 8062900:	0806293d 	.word	0x0806293d
 8062904:	08062959 	.word	0x08062959
 8062908:	080629a9 	.word	0x080629a9
 806290c:	08062975 	.word	0x08062975
 8062910:	080629a9 	.word	0x080629a9
 8062914:	080629a9 	.word	0x080629a9
 8062918:	080629a9 	.word	0x080629a9
 806291c:	08062991 	.word	0x08062991
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8062920:	f7fe feea 	bl	80616f8 <HAL_RCC_GetPCLK1Freq>
 8062924:	4602      	mov	r2, r0
 8062926:	687b      	ldr	r3, [r7, #4]
 8062928:	685b      	ldr	r3, [r3, #4]
 806292a:	085b      	lsrs	r3, r3, #1
 806292c:	441a      	add	r2, r3
 806292e:	687b      	ldr	r3, [r7, #4]
 8062930:	685b      	ldr	r3, [r3, #4]
 8062932:	fbb2 f3f3 	udiv	r3, r2, r3
 8062936:	b29b      	uxth	r3, r3
 8062938:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 806293a:	e038      	b.n	80629ae <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 806293c:	f7fe fef2 	bl	8061724 <HAL_RCC_GetPCLK2Freq>
 8062940:	4602      	mov	r2, r0
 8062942:	687b      	ldr	r3, [r7, #4]
 8062944:	685b      	ldr	r3, [r3, #4]
 8062946:	085b      	lsrs	r3, r3, #1
 8062948:	441a      	add	r2, r3
 806294a:	687b      	ldr	r3, [r7, #4]
 806294c:	685b      	ldr	r3, [r3, #4]
 806294e:	fbb2 f3f3 	udiv	r3, r2, r3
 8062952:	b29b      	uxth	r3, r3
 8062954:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8062956:	e02a      	b.n	80629ae <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8062958:	687b      	ldr	r3, [r7, #4]
 806295a:	685b      	ldr	r3, [r3, #4]
 806295c:	085b      	lsrs	r3, r3, #1
 806295e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8062962:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8062966:	687a      	ldr	r2, [r7, #4]
 8062968:	6852      	ldr	r2, [r2, #4]
 806296a:	fbb3 f3f2 	udiv	r3, r3, r2
 806296e:	b29b      	uxth	r3, r3
 8062970:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8062972:	e01c      	b.n	80629ae <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8062974:	f7fe fe2a 	bl	80615cc <HAL_RCC_GetSysClockFreq>
 8062978:	4602      	mov	r2, r0
 806297a:	687b      	ldr	r3, [r7, #4]
 806297c:	685b      	ldr	r3, [r3, #4]
 806297e:	085b      	lsrs	r3, r3, #1
 8062980:	441a      	add	r2, r3
 8062982:	687b      	ldr	r3, [r7, #4]
 8062984:	685b      	ldr	r3, [r3, #4]
 8062986:	fbb2 f3f3 	udiv	r3, r2, r3
 806298a:	b29b      	uxth	r3, r3
 806298c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 806298e:	e00e      	b.n	80629ae <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8062990:	687b      	ldr	r3, [r7, #4]
 8062992:	685b      	ldr	r3, [r3, #4]
 8062994:	085b      	lsrs	r3, r3, #1
 8062996:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 806299a:	687b      	ldr	r3, [r7, #4]
 806299c:	685b      	ldr	r3, [r3, #4]
 806299e:	fbb2 f3f3 	udiv	r3, r2, r3
 80629a2:	b29b      	uxth	r3, r3
 80629a4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80629a6:	e002      	b.n	80629ae <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80629a8:	2301      	movs	r3, #1
 80629aa:	74fb      	strb	r3, [r7, #19]
        break;
 80629ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80629ae:	697b      	ldr	r3, [r7, #20]
 80629b0:	2b0f      	cmp	r3, #15
 80629b2:	d908      	bls.n	80629c6 <UART_SetConfig+0x66e>
 80629b4:	697b      	ldr	r3, [r7, #20]
 80629b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80629ba:	d204      	bcs.n	80629c6 <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 80629bc:	687b      	ldr	r3, [r7, #4]
 80629be:	681b      	ldr	r3, [r3, #0]
 80629c0:	697a      	ldr	r2, [r7, #20]
 80629c2:	60da      	str	r2, [r3, #12]
 80629c4:	e001      	b.n	80629ca <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 80629c6:	2301      	movs	r3, #1
 80629c8:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80629ca:	687b      	ldr	r3, [r7, #4]
 80629cc:	2200      	movs	r2, #0
 80629ce:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80629d0:	687b      	ldr	r3, [r7, #4]
 80629d2:	2200      	movs	r2, #0
 80629d4:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80629d6:	7cfb      	ldrb	r3, [r7, #19]
}
 80629d8:	4618      	mov	r0, r3
 80629da:	3720      	adds	r7, #32
 80629dc:	46bd      	mov	sp, r7
 80629de:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80629e2:	bf00      	nop
 80629e4:	f4240000 	.word	0xf4240000

080629e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80629e8:	b480      	push	{r7}
 80629ea:	b083      	sub	sp, #12
 80629ec:	af00      	add	r7, sp, #0
 80629ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80629f0:	687b      	ldr	r3, [r7, #4]
 80629f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80629f4:	f003 0301 	and.w	r3, r3, #1
 80629f8:	2b00      	cmp	r3, #0
 80629fa:	d00a      	beq.n	8062a12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80629fc:	687b      	ldr	r3, [r7, #4]
 80629fe:	681b      	ldr	r3, [r3, #0]
 8062a00:	685b      	ldr	r3, [r3, #4]
 8062a02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8062a06:	687b      	ldr	r3, [r7, #4]
 8062a08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8062a0a:	687b      	ldr	r3, [r7, #4]
 8062a0c:	681b      	ldr	r3, [r3, #0]
 8062a0e:	430a      	orrs	r2, r1
 8062a10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8062a12:	687b      	ldr	r3, [r7, #4]
 8062a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8062a16:	f003 0302 	and.w	r3, r3, #2
 8062a1a:	2b00      	cmp	r3, #0
 8062a1c:	d00a      	beq.n	8062a34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8062a1e:	687b      	ldr	r3, [r7, #4]
 8062a20:	681b      	ldr	r3, [r3, #0]
 8062a22:	685b      	ldr	r3, [r3, #4]
 8062a24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8062a28:	687b      	ldr	r3, [r7, #4]
 8062a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8062a2c:	687b      	ldr	r3, [r7, #4]
 8062a2e:	681b      	ldr	r3, [r3, #0]
 8062a30:	430a      	orrs	r2, r1
 8062a32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8062a34:	687b      	ldr	r3, [r7, #4]
 8062a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8062a38:	f003 0304 	and.w	r3, r3, #4
 8062a3c:	2b00      	cmp	r3, #0
 8062a3e:	d00a      	beq.n	8062a56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8062a40:	687b      	ldr	r3, [r7, #4]
 8062a42:	681b      	ldr	r3, [r3, #0]
 8062a44:	685b      	ldr	r3, [r3, #4]
 8062a46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8062a4a:	687b      	ldr	r3, [r7, #4]
 8062a4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8062a4e:	687b      	ldr	r3, [r7, #4]
 8062a50:	681b      	ldr	r3, [r3, #0]
 8062a52:	430a      	orrs	r2, r1
 8062a54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8062a56:	687b      	ldr	r3, [r7, #4]
 8062a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8062a5a:	f003 0308 	and.w	r3, r3, #8
 8062a5e:	2b00      	cmp	r3, #0
 8062a60:	d00a      	beq.n	8062a78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8062a62:	687b      	ldr	r3, [r7, #4]
 8062a64:	681b      	ldr	r3, [r3, #0]
 8062a66:	685b      	ldr	r3, [r3, #4]
 8062a68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8062a6c:	687b      	ldr	r3, [r7, #4]
 8062a6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8062a70:	687b      	ldr	r3, [r7, #4]
 8062a72:	681b      	ldr	r3, [r3, #0]
 8062a74:	430a      	orrs	r2, r1
 8062a76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8062a78:	687b      	ldr	r3, [r7, #4]
 8062a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8062a7c:	f003 0310 	and.w	r3, r3, #16
 8062a80:	2b00      	cmp	r3, #0
 8062a82:	d00a      	beq.n	8062a9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8062a84:	687b      	ldr	r3, [r7, #4]
 8062a86:	681b      	ldr	r3, [r3, #0]
 8062a88:	689b      	ldr	r3, [r3, #8]
 8062a8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8062a8e:	687b      	ldr	r3, [r7, #4]
 8062a90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8062a92:	687b      	ldr	r3, [r7, #4]
 8062a94:	681b      	ldr	r3, [r3, #0]
 8062a96:	430a      	orrs	r2, r1
 8062a98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8062a9a:	687b      	ldr	r3, [r7, #4]
 8062a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8062a9e:	f003 0320 	and.w	r3, r3, #32
 8062aa2:	2b00      	cmp	r3, #0
 8062aa4:	d00a      	beq.n	8062abc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8062aa6:	687b      	ldr	r3, [r7, #4]
 8062aa8:	681b      	ldr	r3, [r3, #0]
 8062aaa:	689b      	ldr	r3, [r3, #8]
 8062aac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8062ab0:	687b      	ldr	r3, [r7, #4]
 8062ab2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8062ab4:	687b      	ldr	r3, [r7, #4]
 8062ab6:	681b      	ldr	r3, [r3, #0]
 8062ab8:	430a      	orrs	r2, r1
 8062aba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8062abc:	687b      	ldr	r3, [r7, #4]
 8062abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8062ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8062ac4:	2b00      	cmp	r3, #0
 8062ac6:	d01a      	beq.n	8062afe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8062ac8:	687b      	ldr	r3, [r7, #4]
 8062aca:	681b      	ldr	r3, [r3, #0]
 8062acc:	685b      	ldr	r3, [r3, #4]
 8062ace:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8062ad2:	687b      	ldr	r3, [r7, #4]
 8062ad4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8062ad6:	687b      	ldr	r3, [r7, #4]
 8062ad8:	681b      	ldr	r3, [r3, #0]
 8062ada:	430a      	orrs	r2, r1
 8062adc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8062ade:	687b      	ldr	r3, [r7, #4]
 8062ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8062ae2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8062ae6:	d10a      	bne.n	8062afe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8062ae8:	687b      	ldr	r3, [r7, #4]
 8062aea:	681b      	ldr	r3, [r3, #0]
 8062aec:	685b      	ldr	r3, [r3, #4]
 8062aee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8062af2:	687b      	ldr	r3, [r7, #4]
 8062af4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8062af6:	687b      	ldr	r3, [r7, #4]
 8062af8:	681b      	ldr	r3, [r3, #0]
 8062afa:	430a      	orrs	r2, r1
 8062afc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8062afe:	687b      	ldr	r3, [r7, #4]
 8062b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8062b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8062b06:	2b00      	cmp	r3, #0
 8062b08:	d00a      	beq.n	8062b20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8062b0a:	687b      	ldr	r3, [r7, #4]
 8062b0c:	681b      	ldr	r3, [r3, #0]
 8062b0e:	685b      	ldr	r3, [r3, #4]
 8062b10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8062b14:	687b      	ldr	r3, [r7, #4]
 8062b16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8062b18:	687b      	ldr	r3, [r7, #4]
 8062b1a:	681b      	ldr	r3, [r3, #0]
 8062b1c:	430a      	orrs	r2, r1
 8062b1e:	605a      	str	r2, [r3, #4]
  }
}
 8062b20:	bf00      	nop
 8062b22:	370c      	adds	r7, #12
 8062b24:	46bd      	mov	sp, r7
 8062b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8062b2a:	4770      	bx	lr

08062b2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8062b2c:	b580      	push	{r7, lr}
 8062b2e:	b086      	sub	sp, #24
 8062b30:	af02      	add	r7, sp, #8
 8062b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8062b34:	687b      	ldr	r3, [r7, #4]
 8062b36:	2200      	movs	r2, #0
 8062b38:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8062b3a:	f7fd fd3b 	bl	80605b4 <HAL_GetTick>
 8062b3e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8062b40:	687b      	ldr	r3, [r7, #4]
 8062b42:	681b      	ldr	r3, [r3, #0]
 8062b44:	681b      	ldr	r3, [r3, #0]
 8062b46:	f003 0308 	and.w	r3, r3, #8
 8062b4a:	2b08      	cmp	r3, #8
 8062b4c:	d10e      	bne.n	8062b6c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8062b4e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8062b52:	9300      	str	r3, [sp, #0]
 8062b54:	68fb      	ldr	r3, [r7, #12]
 8062b56:	2200      	movs	r2, #0
 8062b58:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8062b5c:	6878      	ldr	r0, [r7, #4]
 8062b5e:	f000 f82a 	bl	8062bb6 <UART_WaitOnFlagUntilTimeout>
 8062b62:	4603      	mov	r3, r0
 8062b64:	2b00      	cmp	r3, #0
 8062b66:	d001      	beq.n	8062b6c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8062b68:	2303      	movs	r3, #3
 8062b6a:	e020      	b.n	8062bae <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8062b6c:	687b      	ldr	r3, [r7, #4]
 8062b6e:	681b      	ldr	r3, [r3, #0]
 8062b70:	681b      	ldr	r3, [r3, #0]
 8062b72:	f003 0304 	and.w	r3, r3, #4
 8062b76:	2b04      	cmp	r3, #4
 8062b78:	d10e      	bne.n	8062b98 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8062b7a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8062b7e:	9300      	str	r3, [sp, #0]
 8062b80:	68fb      	ldr	r3, [r7, #12]
 8062b82:	2200      	movs	r2, #0
 8062b84:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8062b88:	6878      	ldr	r0, [r7, #4]
 8062b8a:	f000 f814 	bl	8062bb6 <UART_WaitOnFlagUntilTimeout>
 8062b8e:	4603      	mov	r3, r0
 8062b90:	2b00      	cmp	r3, #0
 8062b92:	d001      	beq.n	8062b98 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8062b94:	2303      	movs	r3, #3
 8062b96:	e00a      	b.n	8062bae <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8062b98:	687b      	ldr	r3, [r7, #4]
 8062b9a:	2220      	movs	r2, #32
 8062b9c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8062b9e:	687b      	ldr	r3, [r7, #4]
 8062ba0:	2220      	movs	r2, #32
 8062ba2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8062ba4:	687b      	ldr	r3, [r7, #4]
 8062ba6:	2200      	movs	r2, #0
 8062ba8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8062bac:	2300      	movs	r3, #0
}
 8062bae:	4618      	mov	r0, r3
 8062bb0:	3710      	adds	r7, #16
 8062bb2:	46bd      	mov	sp, r7
 8062bb4:	bd80      	pop	{r7, pc}

08062bb6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8062bb6:	b580      	push	{r7, lr}
 8062bb8:	b084      	sub	sp, #16
 8062bba:	af00      	add	r7, sp, #0
 8062bbc:	60f8      	str	r0, [r7, #12]
 8062bbe:	60b9      	str	r1, [r7, #8]
 8062bc0:	603b      	str	r3, [r7, #0]
 8062bc2:	4613      	mov	r3, r2
 8062bc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8062bc6:	e02a      	b.n	8062c1e <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8062bc8:	69bb      	ldr	r3, [r7, #24]
 8062bca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8062bce:	d026      	beq.n	8062c1e <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8062bd0:	f7fd fcf0 	bl	80605b4 <HAL_GetTick>
 8062bd4:	4602      	mov	r2, r0
 8062bd6:	683b      	ldr	r3, [r7, #0]
 8062bd8:	1ad3      	subs	r3, r2, r3
 8062bda:	69ba      	ldr	r2, [r7, #24]
 8062bdc:	429a      	cmp	r2, r3
 8062bde:	d302      	bcc.n	8062be6 <UART_WaitOnFlagUntilTimeout+0x30>
 8062be0:	69bb      	ldr	r3, [r7, #24]
 8062be2:	2b00      	cmp	r3, #0
 8062be4:	d11b      	bne.n	8062c1e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8062be6:	68fb      	ldr	r3, [r7, #12]
 8062be8:	681b      	ldr	r3, [r3, #0]
 8062bea:	681a      	ldr	r2, [r3, #0]
 8062bec:	68fb      	ldr	r3, [r7, #12]
 8062bee:	681b      	ldr	r3, [r3, #0]
 8062bf0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8062bf4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8062bf6:	68fb      	ldr	r3, [r7, #12]
 8062bf8:	681b      	ldr	r3, [r3, #0]
 8062bfa:	689a      	ldr	r2, [r3, #8]
 8062bfc:	68fb      	ldr	r3, [r7, #12]
 8062bfe:	681b      	ldr	r3, [r3, #0]
 8062c00:	f022 0201 	bic.w	r2, r2, #1
 8062c04:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8062c06:	68fb      	ldr	r3, [r7, #12]
 8062c08:	2220      	movs	r2, #32
 8062c0a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8062c0c:	68fb      	ldr	r3, [r7, #12]
 8062c0e:	2220      	movs	r2, #32
 8062c10:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8062c12:	68fb      	ldr	r3, [r7, #12]
 8062c14:	2200      	movs	r2, #0
 8062c16:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8062c1a:	2303      	movs	r3, #3
 8062c1c:	e00f      	b.n	8062c3e <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8062c1e:	68fb      	ldr	r3, [r7, #12]
 8062c20:	681b      	ldr	r3, [r3, #0]
 8062c22:	69da      	ldr	r2, [r3, #28]
 8062c24:	68bb      	ldr	r3, [r7, #8]
 8062c26:	4013      	ands	r3, r2
 8062c28:	68ba      	ldr	r2, [r7, #8]
 8062c2a:	429a      	cmp	r2, r3
 8062c2c:	bf0c      	ite	eq
 8062c2e:	2301      	moveq	r3, #1
 8062c30:	2300      	movne	r3, #0
 8062c32:	b2db      	uxtb	r3, r3
 8062c34:	461a      	mov	r2, r3
 8062c36:	79fb      	ldrb	r3, [r7, #7]
 8062c38:	429a      	cmp	r2, r3
 8062c3a:	d0c5      	beq.n	8062bc8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8062c3c:	2300      	movs	r3, #0
}
 8062c3e:	4618      	mov	r0, r3
 8062c40:	3710      	adds	r7, #16
 8062c42:	46bd      	mov	sp, r7
 8062c44:	bd80      	pop	{r7, pc}
	...

08062c48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8062c48:	b580      	push	{r7, lr}
 8062c4a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8062c4c:	f7fd fc4e 	bl	80604ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8062c50:	f000 f824 	bl	8062c9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8062c54:	f000 f8ea 	bl	8062e2c <MX_GPIO_Init>
  MX_UART5_Init();
 8062c58:	f000 f888 	bl	8062d6c <MX_UART5_Init>
  MX_USART3_UART_Init();
 8062c5c:	f000 f8b6 	bl	8062dcc <MX_USART3_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8062c60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8062c64:	4809      	ldr	r0, [pc, #36]	; (8062c8c <main+0x44>)
 8062c66:	f7fd ff63 	bl	8060b30 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8062c6a:	2104      	movs	r1, #4
 8062c6c:	4808      	ldr	r0, [pc, #32]	; (8062c90 <main+0x48>)
 8062c6e:	f7fd ff5f 	bl	8060b30 <HAL_GPIO_TogglePin>
	  HAL_UART_Transmit(&DEBUG_UART, "\n\r MAIN FIRMWARE RUNNING\n\r", 30, 1000);
 8062c72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8062c76:	221e      	movs	r2, #30
 8062c78:	4906      	ldr	r1, [pc, #24]	; (8062c94 <main+0x4c>)
 8062c7a:	4807      	ldr	r0, [pc, #28]	; (8062c98 <main+0x50>)
 8062c7c:	f7ff fad8 	bl	8062230 <HAL_UART_Transmit>
	  HAL_Delay(1500);
 8062c80:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8062c84:	f7fd fca2 	bl	80605cc <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8062c88:	e7ea      	b.n	8062c60 <main+0x18>
 8062c8a:	bf00      	nop
 8062c8c:	48000800 	.word	0x48000800
 8062c90:	48000400 	.word	0x48000400
 8062c94:	080631f8 	.word	0x080631f8
 8062c98:	2000002c 	.word	0x2000002c

08062c9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8062c9c:	b580      	push	{r7, lr}
 8062c9e:	b0ba      	sub	sp, #232	; 0xe8
 8062ca0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8062ca2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8062ca6:	2244      	movs	r2, #68	; 0x44
 8062ca8:	2100      	movs	r1, #0
 8062caa:	4618      	mov	r0, r3
 8062cac:	f000 fa90 	bl	80631d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8062cb0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8062cb4:	2200      	movs	r2, #0
 8062cb6:	601a      	str	r2, [r3, #0]
 8062cb8:	605a      	str	r2, [r3, #4]
 8062cba:	609a      	str	r2, [r3, #8]
 8062cbc:	60da      	str	r2, [r3, #12]
 8062cbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8062cc0:	1d3b      	adds	r3, r7, #4
 8062cc2:	228c      	movs	r2, #140	; 0x8c
 8062cc4:	2100      	movs	r1, #0
 8062cc6:	4618      	mov	r0, r3
 8062cc8:	f000 fa82 	bl	80631d0 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8062ccc:	2310      	movs	r3, #16
 8062cce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8062cd2:	2301      	movs	r3, #1
 8062cd4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8062cd8:	2300      	movs	r3, #0
 8062cda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8062cde:	2360      	movs	r3, #96	; 0x60
 8062ce0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8062ce4:	2300      	movs	r3, #0
 8062ce6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8062cea:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8062cee:	4618      	mov	r0, r3
 8062cf0:	f7fd ff9c 	bl	8060c2c <HAL_RCC_OscConfig>
 8062cf4:	4603      	mov	r3, r0
 8062cf6:	2b00      	cmp	r3, #0
 8062cf8:	d001      	beq.n	8062cfe <SystemClock_Config+0x62>
  {
    Error_Handler();
 8062cfa:	f000 f8f9 	bl	8062ef0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8062cfe:	230f      	movs	r3, #15
 8062d00:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8062d04:	2300      	movs	r3, #0
 8062d06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8062d0a:	2300      	movs	r3, #0
 8062d0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8062d10:	2300      	movs	r3, #0
 8062d12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8062d16:	2300      	movs	r3, #0
 8062d18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8062d1c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8062d20:	2100      	movs	r1, #0
 8062d22:	4618      	mov	r0, r3
 8062d24:	f7fe fb70 	bl	8061408 <HAL_RCC_ClockConfig>
 8062d28:	4603      	mov	r3, r0
 8062d2a:	2b00      	cmp	r3, #0
 8062d2c:	d001      	beq.n	8062d32 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8062d2e:	f000 f8df 	bl	8062ef0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART5;
 8062d32:	2314      	movs	r3, #20
 8062d34:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8062d36:	2300      	movs	r3, #0
 8062d38:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8062d3a:	2300      	movs	r3, #0
 8062d3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8062d3e:	1d3b      	adds	r3, r7, #4
 8062d40:	4618      	mov	r0, r3
 8062d42:	f7fe fd65 	bl	8061810 <HAL_RCCEx_PeriphCLKConfig>
 8062d46:	4603      	mov	r3, r0
 8062d48:	2b00      	cmp	r3, #0
 8062d4a:	d001      	beq.n	8062d50 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8062d4c:	f000 f8d0 	bl	8062ef0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8062d50:	f44f 7000 	mov.w	r0, #512	; 0x200
 8062d54:	f7fd ff14 	bl	8060b80 <HAL_PWREx_ControlVoltageScaling>
 8062d58:	4603      	mov	r3, r0
 8062d5a:	2b00      	cmp	r3, #0
 8062d5c:	d001      	beq.n	8062d62 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8062d5e:	f000 f8c7 	bl	8062ef0 <Error_Handler>
  }
}
 8062d62:	bf00      	nop
 8062d64:	37e8      	adds	r7, #232	; 0xe8
 8062d66:	46bd      	mov	sp, r7
 8062d68:	bd80      	pop	{r7, pc}
	...

08062d6c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8062d6c:	b580      	push	{r7, lr}
 8062d6e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8062d70:	4b14      	ldr	r3, [pc, #80]	; (8062dc4 <MX_UART5_Init+0x58>)
 8062d72:	4a15      	ldr	r2, [pc, #84]	; (8062dc8 <MX_UART5_Init+0x5c>)
 8062d74:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8062d76:	4b13      	ldr	r3, [pc, #76]	; (8062dc4 <MX_UART5_Init+0x58>)
 8062d78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8062d7c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8062d7e:	4b11      	ldr	r3, [pc, #68]	; (8062dc4 <MX_UART5_Init+0x58>)
 8062d80:	2200      	movs	r2, #0
 8062d82:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8062d84:	4b0f      	ldr	r3, [pc, #60]	; (8062dc4 <MX_UART5_Init+0x58>)
 8062d86:	2200      	movs	r2, #0
 8062d88:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8062d8a:	4b0e      	ldr	r3, [pc, #56]	; (8062dc4 <MX_UART5_Init+0x58>)
 8062d8c:	2200      	movs	r2, #0
 8062d8e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8062d90:	4b0c      	ldr	r3, [pc, #48]	; (8062dc4 <MX_UART5_Init+0x58>)
 8062d92:	220c      	movs	r2, #12
 8062d94:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8062d96:	4b0b      	ldr	r3, [pc, #44]	; (8062dc4 <MX_UART5_Init+0x58>)
 8062d98:	2200      	movs	r2, #0
 8062d9a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8062d9c:	4b09      	ldr	r3, [pc, #36]	; (8062dc4 <MX_UART5_Init+0x58>)
 8062d9e:	2200      	movs	r2, #0
 8062da0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8062da2:	4b08      	ldr	r3, [pc, #32]	; (8062dc4 <MX_UART5_Init+0x58>)
 8062da4:	2200      	movs	r2, #0
 8062da6:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8062da8:	4b06      	ldr	r3, [pc, #24]	; (8062dc4 <MX_UART5_Init+0x58>)
 8062daa:	2200      	movs	r2, #0
 8062dac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8062dae:	4805      	ldr	r0, [pc, #20]	; (8062dc4 <MX_UART5_Init+0x58>)
 8062db0:	f7ff f9f0 	bl	8062194 <HAL_UART_Init>
 8062db4:	4603      	mov	r3, r0
 8062db6:	2b00      	cmp	r3, #0
 8062db8:	d001      	beq.n	8062dbe <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8062dba:	f000 f899 	bl	8062ef0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8062dbe:	bf00      	nop
 8062dc0:	bd80      	pop	{r7, pc}
 8062dc2:	bf00      	nop
 8062dc4:	200000ac 	.word	0x200000ac
 8062dc8:	40005000 	.word	0x40005000

08062dcc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8062dcc:	b580      	push	{r7, lr}
 8062dce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8062dd0:	4b14      	ldr	r3, [pc, #80]	; (8062e24 <MX_USART3_UART_Init+0x58>)
 8062dd2:	4a15      	ldr	r2, [pc, #84]	; (8062e28 <MX_USART3_UART_Init+0x5c>)
 8062dd4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8062dd6:	4b13      	ldr	r3, [pc, #76]	; (8062e24 <MX_USART3_UART_Init+0x58>)
 8062dd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8062ddc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8062dde:	4b11      	ldr	r3, [pc, #68]	; (8062e24 <MX_USART3_UART_Init+0x58>)
 8062de0:	2200      	movs	r2, #0
 8062de2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8062de4:	4b0f      	ldr	r3, [pc, #60]	; (8062e24 <MX_USART3_UART_Init+0x58>)
 8062de6:	2200      	movs	r2, #0
 8062de8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8062dea:	4b0e      	ldr	r3, [pc, #56]	; (8062e24 <MX_USART3_UART_Init+0x58>)
 8062dec:	2200      	movs	r2, #0
 8062dee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8062df0:	4b0c      	ldr	r3, [pc, #48]	; (8062e24 <MX_USART3_UART_Init+0x58>)
 8062df2:	220c      	movs	r2, #12
 8062df4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8062df6:	4b0b      	ldr	r3, [pc, #44]	; (8062e24 <MX_USART3_UART_Init+0x58>)
 8062df8:	2200      	movs	r2, #0
 8062dfa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8062dfc:	4b09      	ldr	r3, [pc, #36]	; (8062e24 <MX_USART3_UART_Init+0x58>)
 8062dfe:	2200      	movs	r2, #0
 8062e00:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8062e02:	4b08      	ldr	r3, [pc, #32]	; (8062e24 <MX_USART3_UART_Init+0x58>)
 8062e04:	2200      	movs	r2, #0
 8062e06:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8062e08:	4b06      	ldr	r3, [pc, #24]	; (8062e24 <MX_USART3_UART_Init+0x58>)
 8062e0a:	2200      	movs	r2, #0
 8062e0c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8062e0e:	4805      	ldr	r0, [pc, #20]	; (8062e24 <MX_USART3_UART_Init+0x58>)
 8062e10:	f7ff f9c0 	bl	8062194 <HAL_UART_Init>
 8062e14:	4603      	mov	r3, r0
 8062e16:	2b00      	cmp	r3, #0
 8062e18:	d001      	beq.n	8062e1e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8062e1a:	f000 f869 	bl	8062ef0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8062e1e:	bf00      	nop
 8062e20:	bd80      	pop	{r7, pc}
 8062e22:	bf00      	nop
 8062e24:	2000002c 	.word	0x2000002c
 8062e28:	40004800 	.word	0x40004800

08062e2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8062e2c:	b580      	push	{r7, lr}
 8062e2e:	b088      	sub	sp, #32
 8062e30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8062e32:	f107 030c 	add.w	r3, r7, #12
 8062e36:	2200      	movs	r2, #0
 8062e38:	601a      	str	r2, [r3, #0]
 8062e3a:	605a      	str	r2, [r3, #4]
 8062e3c:	609a      	str	r2, [r3, #8]
 8062e3e:	60da      	str	r2, [r3, #12]
 8062e40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8062e42:	4b28      	ldr	r3, [pc, #160]	; (8062ee4 <MX_GPIO_Init+0xb8>)
 8062e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8062e46:	4a27      	ldr	r2, [pc, #156]	; (8062ee4 <MX_GPIO_Init+0xb8>)
 8062e48:	f043 0304 	orr.w	r3, r3, #4
 8062e4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8062e4e:	4b25      	ldr	r3, [pc, #148]	; (8062ee4 <MX_GPIO_Init+0xb8>)
 8062e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8062e52:	f003 0304 	and.w	r3, r3, #4
 8062e56:	60bb      	str	r3, [r7, #8]
 8062e58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8062e5a:	4b22      	ldr	r3, [pc, #136]	; (8062ee4 <MX_GPIO_Init+0xb8>)
 8062e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8062e5e:	4a21      	ldr	r2, [pc, #132]	; (8062ee4 <MX_GPIO_Init+0xb8>)
 8062e60:	f043 0302 	orr.w	r3, r3, #2
 8062e64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8062e66:	4b1f      	ldr	r3, [pc, #124]	; (8062ee4 <MX_GPIO_Init+0xb8>)
 8062e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8062e6a:	f003 0302 	and.w	r3, r3, #2
 8062e6e:	607b      	str	r3, [r7, #4]
 8062e70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8062e72:	4b1c      	ldr	r3, [pc, #112]	; (8062ee4 <MX_GPIO_Init+0xb8>)
 8062e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8062e76:	4a1b      	ldr	r2, [pc, #108]	; (8062ee4 <MX_GPIO_Init+0xb8>)
 8062e78:	f043 0308 	orr.w	r3, r3, #8
 8062e7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8062e7e:	4b19      	ldr	r3, [pc, #100]	; (8062ee4 <MX_GPIO_Init+0xb8>)
 8062e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8062e82:	f003 0308 	and.w	r3, r3, #8
 8062e86:	603b      	str	r3, [r7, #0]
 8062e88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8062e8a:	2200      	movs	r2, #0
 8062e8c:	2104      	movs	r1, #4
 8062e8e:	4816      	ldr	r0, [pc, #88]	; (8062ee8 <MX_GPIO_Init+0xbc>)
 8062e90:	f7fd fe36 	bl	8060b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8062e94:	2200      	movs	r2, #0
 8062e96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8062e9a:	4814      	ldr	r0, [pc, #80]	; (8062eec <MX_GPIO_Init+0xc0>)
 8062e9c:	f7fd fe30 	bl	8060b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8062ea0:	2304      	movs	r3, #4
 8062ea2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8062ea4:	2301      	movs	r3, #1
 8062ea6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8062ea8:	2300      	movs	r3, #0
 8062eaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8062eac:	2300      	movs	r3, #0
 8062eae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8062eb0:	f107 030c 	add.w	r3, r7, #12
 8062eb4:	4619      	mov	r1, r3
 8062eb6:	480c      	ldr	r0, [pc, #48]	; (8062ee8 <MX_GPIO_Init+0xbc>)
 8062eb8:	f7fd fc90 	bl	80607dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8062ebc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8062ec0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8062ec2:	2301      	movs	r3, #1
 8062ec4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8062ec6:	2300      	movs	r3, #0
 8062ec8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8062eca:	2300      	movs	r3, #0
 8062ecc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8062ece:	f107 030c 	add.w	r3, r7, #12
 8062ed2:	4619      	mov	r1, r3
 8062ed4:	4805      	ldr	r0, [pc, #20]	; (8062eec <MX_GPIO_Init+0xc0>)
 8062ed6:	f7fd fc81 	bl	80607dc <HAL_GPIO_Init>

}
 8062eda:	bf00      	nop
 8062edc:	3720      	adds	r7, #32
 8062ede:	46bd      	mov	sp, r7
 8062ee0:	bd80      	pop	{r7, pc}
 8062ee2:	bf00      	nop
 8062ee4:	40021000 	.word	0x40021000
 8062ee8:	48000400 	.word	0x48000400
 8062eec:	48000800 	.word	0x48000800

08062ef0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8062ef0:	b480      	push	{r7}
 8062ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8062ef4:	bf00      	nop
 8062ef6:	46bd      	mov	sp, r7
 8062ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8062efc:	4770      	bx	lr
	...

08062f00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8062f00:	b480      	push	{r7}
 8062f02:	b083      	sub	sp, #12
 8062f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8062f06:	4b0f      	ldr	r3, [pc, #60]	; (8062f44 <HAL_MspInit+0x44>)
 8062f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8062f0a:	4a0e      	ldr	r2, [pc, #56]	; (8062f44 <HAL_MspInit+0x44>)
 8062f0c:	f043 0301 	orr.w	r3, r3, #1
 8062f10:	6613      	str	r3, [r2, #96]	; 0x60
 8062f12:	4b0c      	ldr	r3, [pc, #48]	; (8062f44 <HAL_MspInit+0x44>)
 8062f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8062f16:	f003 0301 	and.w	r3, r3, #1
 8062f1a:	607b      	str	r3, [r7, #4]
 8062f1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8062f1e:	4b09      	ldr	r3, [pc, #36]	; (8062f44 <HAL_MspInit+0x44>)
 8062f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8062f22:	4a08      	ldr	r2, [pc, #32]	; (8062f44 <HAL_MspInit+0x44>)
 8062f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8062f28:	6593      	str	r3, [r2, #88]	; 0x58
 8062f2a:	4b06      	ldr	r3, [pc, #24]	; (8062f44 <HAL_MspInit+0x44>)
 8062f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8062f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8062f32:	603b      	str	r3, [r7, #0]
 8062f34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8062f36:	bf00      	nop
 8062f38:	370c      	adds	r7, #12
 8062f3a:	46bd      	mov	sp, r7
 8062f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8062f40:	4770      	bx	lr
 8062f42:	bf00      	nop
 8062f44:	40021000 	.word	0x40021000

08062f48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8062f48:	b580      	push	{r7, lr}
 8062f4a:	b08c      	sub	sp, #48	; 0x30
 8062f4c:	af00      	add	r7, sp, #0
 8062f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8062f50:	f107 031c 	add.w	r3, r7, #28
 8062f54:	2200      	movs	r2, #0
 8062f56:	601a      	str	r2, [r3, #0]
 8062f58:	605a      	str	r2, [r3, #4]
 8062f5a:	609a      	str	r2, [r3, #8]
 8062f5c:	60da      	str	r2, [r3, #12]
 8062f5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8062f60:	687b      	ldr	r3, [r7, #4]
 8062f62:	681b      	ldr	r3, [r3, #0]
 8062f64:	4a3c      	ldr	r2, [pc, #240]	; (8063058 <HAL_UART_MspInit+0x110>)
 8062f66:	4293      	cmp	r3, r2
 8062f68:	d145      	bne.n	8062ff6 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8062f6a:	4b3c      	ldr	r3, [pc, #240]	; (806305c <HAL_UART_MspInit+0x114>)
 8062f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8062f6e:	4a3b      	ldr	r2, [pc, #236]	; (806305c <HAL_UART_MspInit+0x114>)
 8062f70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8062f74:	6593      	str	r3, [r2, #88]	; 0x58
 8062f76:	4b39      	ldr	r3, [pc, #228]	; (806305c <HAL_UART_MspInit+0x114>)
 8062f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8062f7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8062f7e:	61bb      	str	r3, [r7, #24]
 8062f80:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8062f82:	4b36      	ldr	r3, [pc, #216]	; (806305c <HAL_UART_MspInit+0x114>)
 8062f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8062f86:	4a35      	ldr	r2, [pc, #212]	; (806305c <HAL_UART_MspInit+0x114>)
 8062f88:	f043 0304 	orr.w	r3, r3, #4
 8062f8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8062f8e:	4b33      	ldr	r3, [pc, #204]	; (806305c <HAL_UART_MspInit+0x114>)
 8062f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8062f92:	f003 0304 	and.w	r3, r3, #4
 8062f96:	617b      	str	r3, [r7, #20]
 8062f98:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8062f9a:	4b30      	ldr	r3, [pc, #192]	; (806305c <HAL_UART_MspInit+0x114>)
 8062f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8062f9e:	4a2f      	ldr	r2, [pc, #188]	; (806305c <HAL_UART_MspInit+0x114>)
 8062fa0:	f043 0308 	orr.w	r3, r3, #8
 8062fa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8062fa6:	4b2d      	ldr	r3, [pc, #180]	; (806305c <HAL_UART_MspInit+0x114>)
 8062fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8062faa:	f003 0308 	and.w	r3, r3, #8
 8062fae:	613b      	str	r3, [r7, #16]
 8062fb0:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8062fb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8062fb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8062fb8:	2302      	movs	r3, #2
 8062fba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8062fbc:	2300      	movs	r3, #0
 8062fbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8062fc0:	2303      	movs	r3, #3
 8062fc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8062fc4:	2308      	movs	r3, #8
 8062fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8062fc8:	f107 031c 	add.w	r3, r7, #28
 8062fcc:	4619      	mov	r1, r3
 8062fce:	4824      	ldr	r0, [pc, #144]	; (8063060 <HAL_UART_MspInit+0x118>)
 8062fd0:	f7fd fc04 	bl	80607dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8062fd4:	2304      	movs	r3, #4
 8062fd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8062fd8:	2302      	movs	r3, #2
 8062fda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8062fdc:	2300      	movs	r3, #0
 8062fde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8062fe0:	2303      	movs	r3, #3
 8062fe2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8062fe4:	2308      	movs	r3, #8
 8062fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8062fe8:	f107 031c 	add.w	r3, r7, #28
 8062fec:	4619      	mov	r1, r3
 8062fee:	481d      	ldr	r0, [pc, #116]	; (8063064 <HAL_UART_MspInit+0x11c>)
 8062ff0:	f7fd fbf4 	bl	80607dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8062ff4:	e02c      	b.n	8063050 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART3)
 8062ff6:	687b      	ldr	r3, [r7, #4]
 8062ff8:	681b      	ldr	r3, [r3, #0]
 8062ffa:	4a1b      	ldr	r2, [pc, #108]	; (8063068 <HAL_UART_MspInit+0x120>)
 8062ffc:	4293      	cmp	r3, r2
 8062ffe:	d127      	bne.n	8063050 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART3_CLK_ENABLE();
 8063000:	4b16      	ldr	r3, [pc, #88]	; (806305c <HAL_UART_MspInit+0x114>)
 8063002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8063004:	4a15      	ldr	r2, [pc, #84]	; (806305c <HAL_UART_MspInit+0x114>)
 8063006:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 806300a:	6593      	str	r3, [r2, #88]	; 0x58
 806300c:	4b13      	ldr	r3, [pc, #76]	; (806305c <HAL_UART_MspInit+0x114>)
 806300e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8063010:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8063014:	60fb      	str	r3, [r7, #12]
 8063016:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8063018:	4b10      	ldr	r3, [pc, #64]	; (806305c <HAL_UART_MspInit+0x114>)
 806301a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 806301c:	4a0f      	ldr	r2, [pc, #60]	; (806305c <HAL_UART_MspInit+0x114>)
 806301e:	f043 0304 	orr.w	r3, r3, #4
 8063022:	64d3      	str	r3, [r2, #76]	; 0x4c
 8063024:	4b0d      	ldr	r3, [pc, #52]	; (806305c <HAL_UART_MspInit+0x114>)
 8063026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8063028:	f003 0304 	and.w	r3, r3, #4
 806302c:	60bb      	str	r3, [r7, #8]
 806302e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8063030:	2330      	movs	r3, #48	; 0x30
 8063032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8063034:	2302      	movs	r3, #2
 8063036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8063038:	2300      	movs	r3, #0
 806303a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 806303c:	2303      	movs	r3, #3
 806303e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8063040:	2307      	movs	r3, #7
 8063042:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8063044:	f107 031c 	add.w	r3, r7, #28
 8063048:	4619      	mov	r1, r3
 806304a:	4805      	ldr	r0, [pc, #20]	; (8063060 <HAL_UART_MspInit+0x118>)
 806304c:	f7fd fbc6 	bl	80607dc <HAL_GPIO_Init>
}
 8063050:	bf00      	nop
 8063052:	3730      	adds	r7, #48	; 0x30
 8063054:	46bd      	mov	sp, r7
 8063056:	bd80      	pop	{r7, pc}
 8063058:	40005000 	.word	0x40005000
 806305c:	40021000 	.word	0x40021000
 8063060:	48000800 	.word	0x48000800
 8063064:	48000c00 	.word	0x48000c00
 8063068:	40004800 	.word	0x40004800

0806306c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 806306c:	b480      	push	{r7}
 806306e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8063070:	bf00      	nop
 8063072:	46bd      	mov	sp, r7
 8063074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8063078:	4770      	bx	lr

0806307a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 806307a:	b480      	push	{r7}
 806307c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 806307e:	e7fe      	b.n	806307e <HardFault_Handler+0x4>

08063080 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8063080:	b480      	push	{r7}
 8063082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8063084:	e7fe      	b.n	8063084 <MemManage_Handler+0x4>

08063086 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8063086:	b480      	push	{r7}
 8063088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 806308a:	e7fe      	b.n	806308a <BusFault_Handler+0x4>

0806308c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 806308c:	b480      	push	{r7}
 806308e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8063090:	e7fe      	b.n	8063090 <UsageFault_Handler+0x4>

08063092 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8063092:	b480      	push	{r7}
 8063094:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8063096:	bf00      	nop
 8063098:	46bd      	mov	sp, r7
 806309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 806309e:	4770      	bx	lr

080630a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80630a0:	b480      	push	{r7}
 80630a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80630a4:	bf00      	nop
 80630a6:	46bd      	mov	sp, r7
 80630a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80630ac:	4770      	bx	lr

080630ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80630ae:	b480      	push	{r7}
 80630b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80630b2:	bf00      	nop
 80630b4:	46bd      	mov	sp, r7
 80630b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80630ba:	4770      	bx	lr

080630bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80630bc:	b580      	push	{r7, lr}
 80630be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80630c0:	f7fd fa66 	bl	8060590 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80630c4:	bf00      	nop
 80630c6:	bd80      	pop	{r7, pc}

080630c8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80630c8:	b480      	push	{r7}
 80630ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80630cc:	4b16      	ldr	r3, [pc, #88]	; (8063128 <SystemInit+0x60>)
 80630ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80630d2:	4a15      	ldr	r2, [pc, #84]	; (8063128 <SystemInit+0x60>)
 80630d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80630d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80630dc:	4b13      	ldr	r3, [pc, #76]	; (806312c <SystemInit+0x64>)
 80630de:	681b      	ldr	r3, [r3, #0]
 80630e0:	4a12      	ldr	r2, [pc, #72]	; (806312c <SystemInit+0x64>)
 80630e2:	f043 0301 	orr.w	r3, r3, #1
 80630e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80630e8:	4b10      	ldr	r3, [pc, #64]	; (806312c <SystemInit+0x64>)
 80630ea:	2200      	movs	r2, #0
 80630ec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80630ee:	4b0f      	ldr	r3, [pc, #60]	; (806312c <SystemInit+0x64>)
 80630f0:	681b      	ldr	r3, [r3, #0]
 80630f2:	4a0e      	ldr	r2, [pc, #56]	; (806312c <SystemInit+0x64>)
 80630f4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80630f8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80630fc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80630fe:	4b0b      	ldr	r3, [pc, #44]	; (806312c <SystemInit+0x64>)
 8063100:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8063104:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8063106:	4b09      	ldr	r3, [pc, #36]	; (806312c <SystemInit+0x64>)
 8063108:	681b      	ldr	r3, [r3, #0]
 806310a:	4a08      	ldr	r2, [pc, #32]	; (806312c <SystemInit+0x64>)
 806310c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8063110:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8063112:	4b06      	ldr	r3, [pc, #24]	; (806312c <SystemInit+0x64>)
 8063114:	2200      	movs	r2, #0
 8063116:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8063118:	4b03      	ldr	r3, [pc, #12]	; (8063128 <SystemInit+0x60>)
 806311a:	4a05      	ldr	r2, [pc, #20]	; (8063130 <SystemInit+0x68>)
 806311c:	609a      	str	r2, [r3, #8]
#endif
}
 806311e:	bf00      	nop
 8063120:	46bd      	mov	sp, r7
 8063122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8063126:	4770      	bx	lr
 8063128:	e000ed00 	.word	0xe000ed00
 806312c:	40021000 	.word	0x40021000
 8063130:	08060000 	.word	0x08060000

08063134 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8063134:	f8df d034 	ldr.w	sp, [pc, #52]	; 806316c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8063138:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 806313a:	e003      	b.n	8063144 <LoopCopyDataInit>

0806313c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 806313c:	4b0c      	ldr	r3, [pc, #48]	; (8063170 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 806313e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8063140:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8063142:	3104      	adds	r1, #4

08063144 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8063144:	480b      	ldr	r0, [pc, #44]	; (8063174 <LoopForever+0xa>)
	ldr	r3, =_edata
 8063146:	4b0c      	ldr	r3, [pc, #48]	; (8063178 <LoopForever+0xe>)
	adds	r2, r0, r1
 8063148:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 806314a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 806314c:	d3f6      	bcc.n	806313c <CopyDataInit>
	ldr	r2, =_sbss
 806314e:	4a0b      	ldr	r2, [pc, #44]	; (806317c <LoopForever+0x12>)
	b	LoopFillZerobss
 8063150:	e002      	b.n	8063158 <LoopFillZerobss>

08063152 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8063152:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8063154:	f842 3b04 	str.w	r3, [r2], #4

08063158 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8063158:	4b09      	ldr	r3, [pc, #36]	; (8063180 <LoopForever+0x16>)
	cmp	r2, r3
 806315a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 806315c:	d3f9      	bcc.n	8063152 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 806315e:	f7ff ffb3 	bl	80630c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8063162:	f000 f811 	bl	8063188 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8063166:	f7ff fd6f 	bl	8062c48 <main>

0806316a <LoopForever>:

LoopForever:
    b LoopForever
 806316a:	e7fe      	b.n	806316a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 806316c:	2004ffff 	.word	0x2004ffff
	ldr	r3, =_sidata
 8063170:	0806326c 	.word	0x0806326c
	ldr	r0, =_sdata
 8063174:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8063178:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 806317c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8063180:	2000012c 	.word	0x2000012c

08063184 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8063184:	e7fe      	b.n	8063184 <ADC1_2_IRQHandler>
	...

08063188 <__libc_init_array>:
 8063188:	b570      	push	{r4, r5, r6, lr}
 806318a:	4e0d      	ldr	r6, [pc, #52]	; (80631c0 <__libc_init_array+0x38>)
 806318c:	4c0d      	ldr	r4, [pc, #52]	; (80631c4 <__libc_init_array+0x3c>)
 806318e:	1ba4      	subs	r4, r4, r6
 8063190:	10a4      	asrs	r4, r4, #2
 8063192:	2500      	movs	r5, #0
 8063194:	42a5      	cmp	r5, r4
 8063196:	d109      	bne.n	80631ac <__libc_init_array+0x24>
 8063198:	4e0b      	ldr	r6, [pc, #44]	; (80631c8 <__libc_init_array+0x40>)
 806319a:	4c0c      	ldr	r4, [pc, #48]	; (80631cc <__libc_init_array+0x44>)
 806319c:	f000 f820 	bl	80631e0 <_init>
 80631a0:	1ba4      	subs	r4, r4, r6
 80631a2:	10a4      	asrs	r4, r4, #2
 80631a4:	2500      	movs	r5, #0
 80631a6:	42a5      	cmp	r5, r4
 80631a8:	d105      	bne.n	80631b6 <__libc_init_array+0x2e>
 80631aa:	bd70      	pop	{r4, r5, r6, pc}
 80631ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80631b0:	4798      	blx	r3
 80631b2:	3501      	adds	r5, #1
 80631b4:	e7ee      	b.n	8063194 <__libc_init_array+0xc>
 80631b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80631ba:	4798      	blx	r3
 80631bc:	3501      	adds	r5, #1
 80631be:	e7f2      	b.n	80631a6 <__libc_init_array+0x1e>
 80631c0:	08063264 	.word	0x08063264
 80631c4:	08063264 	.word	0x08063264
 80631c8:	08063264 	.word	0x08063264
 80631cc:	08063268 	.word	0x08063268

080631d0 <memset>:
 80631d0:	4402      	add	r2, r0
 80631d2:	4603      	mov	r3, r0
 80631d4:	4293      	cmp	r3, r2
 80631d6:	d100      	bne.n	80631da <memset+0xa>
 80631d8:	4770      	bx	lr
 80631da:	f803 1b01 	strb.w	r1, [r3], #1
 80631de:	e7f9      	b.n	80631d4 <memset+0x4>

080631e0 <_init>:
 80631e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80631e2:	bf00      	nop
 80631e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80631e6:	bc08      	pop	{r3}
 80631e8:	469e      	mov	lr, r3
 80631ea:	4770      	bx	lr

080631ec <_fini>:
 80631ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80631ee:	bf00      	nop
 80631f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80631f2:	bc08      	pop	{r3}
 80631f4:	469e      	mov	lr, r3
 80631f6:	4770      	bx	lr
