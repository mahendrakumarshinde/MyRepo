STM32L433CC:
- see datasheet p20-32 for power usage:
  - 97 μA/MHz in RUN mode (default after power on)
  - 28 μA/MHz in SLEEP mode (CPU is stopped, peripherals ON)
  - 4.7 μA/MHz in STOP mode (Stop mode achieves the lowest power consumption while retaining the content of SRAM and registers)
  - 0.5 μA/MHz in STANDBY mode (The Standby mode is used to achieve the lowest power consumption with BOR)
  - 0.2 μA/MHz in SHUTDOWN mode (The Shutdown mode allows to achieve the lowest power consumption)
- Default CPU @ 80MHz:
  - 7.8mA in RUN mode
  - 2.5mA in SLEEP mode (3x less than RUN)
  - 376μA in STOP mode (20x less than RUN)
– 4 μs wakeup from Stop mode
Checkout in datasheet:
– Batch acquisition mode (BAM)
- ultra-low-power brown-out reset (BOR)


BMP280:
- Current consumption @ 1 Hz sampling rate:
  - ultra-low power: typical 2.7μA, max 4.2μA
  - standard resolution: typical 7.0μA, max 10.5μA
- Can set oversampling setting to ultra-low power since we don't use the pressure anyway (only the pressure is oversampled, temperature is not).
- Temperature / Pressure readings fail during callback because they are too long (check if there's a timeout?). See datasheet p18 table 13.


BMX055:
Accelerometer: 130μA current consumption, 1.3ms wake-up time, advanced features for system power management
=> see datasheet p11 for power consumption for each mode
  - Normal Mode		=> 130μA
  - Standby Mode	=> 62μA
  - Suspend Mode	=> 2.1μA
  - Deep Suspend Mode	=> 1μA
=>see datasheet p23 for power mode management
Normal mode is the default after power on.
=> Using low power mode at 1KHz sampling rate is not possible because the wake-up time is too long.
=> We can use got to sleep / standby mode when not sampling.

Gyroscope: < 5mA current consumption, 30ms start-up time wake-up time in fast power-up mode only 10ms
=> see datasheet p14 for power consumption: normal mode (default after power-on) use 5mA. Deep Suspend mode uses 25μA. 
=> => see datasheet p80 for power mode management
"In deep-suspend mode the device reaches the lowest possible power consumption. Only the interface section is kept alive. No data acquisition is performed and the content of the configuration registers is lost. Deep suspend mode is entered (left) by writing ‘1’ (‘0’) to the (GYR 0x11) deep_suspend bit. The I C watchdog timer remains functional. The (GYR 0x11) deep_ suspend bit, the (GYR 0x34) spi3 bit, (GYR 0x34) i2c_wdt_en bit and the (GYR 0x34) i2c_wdt_sel bit are functional in deep-suspend mode. Equally the interrupt level and driver configuration registers (GYR 0x20) int1_lvl, (GYR 0x20) int1_od, (GYR 0x20) int2_lvl, and (GYR 0x20) int2_od are accessible. Still it is possible to enter normal mode by writing to the (GYR 0x14) softreset register. Please note, that all application specific settings which are not equal to the default settings (refer to 8.2 register map gyroscope), must be re-set to its designated values after leaving deep-suspend mode."

Magnetometer: Low current consumption (170μA @ 10Hz in low power preset), short wake-up time, advanced features for system power management
=> see datasheet p17 for power consumption: normal mode is between 170μA and 0.8mA (or even 4.9mA). Suspend mode is 1μA.
=> see datasheet p120 for power mode management: Suspend mode is the default after power on.


ICS-43432:
=> power consumption (see datasheet p4):
  - Normal Mode: typical 1.1mA, max 1.5mA
  - Standby Mode: typical 7μA, max 24μA
=> power management (see datasheet p10):
  - normal operation (default at power on): The ICS-43432 will begin to output non-zero data 4462 SCK clock cycles (1.5 ms with f SCK = 3.072 MHz) after initial power-up. The part is in normal operation mode when SCK and WS are active. The startup time is a few ms (up to 9ms).
  - Standby Mode: The microphone enters standby mode when the frequency of SCK falls below about 1 kHz. It is recommended to enter standby mode by stopping both the SCK and WS clock signals and pulling those signals to ground to avoid drawing current through the WS pin’s internal pull-down resistor. The timing for exiting standby mode is the same as normal startup. It is not recommended to supply active clocks (WS and SCK) to the ICS-43432 while there is no power supplied to VDD, doing this continuously turns on ESD protection diodes, which may affect long-term reliability of the microphone.


CAM-M8Q:
- Available Mode Configurations (see datasheet p13)
  - Continuous (default) mode for best GNSS performance vs power consumption ()
  - Continuous with no compromise in power consumption
  - A 1 Hz cyclic tracking mode for aggressive power reduction
  - Choice of 2 or 4 Hz cyclic tracking modes for typical wearable applications
  - ON/OFF interval mode
- Power Save Mode provides two dedicated methods, ON/OFF and Cyclic tracking, that reduce average current consumption in different ways to match the needs of the specific application. These operations can be set by using a specific UBX message. => For more information about power management strategies, see the u-blox 8 / u-blox M8 Receiver Description Including Protocol Specification [2].



BLE:
Current Consumption
TX only @ +4 dBm, 0 dBm @ 3V, DCDC enabled 	=> 7.5 mA, 5.3 mA
TX only @ +4 dBm, 0 dBm				=> 16.6 mA, 11.6 mA
RX only @ 1 Mbps @ 3V, DCDC enabled		=> 5.4 mA
RX only @ 1 Mbps				=> 11.7 mA
CPU @ 64MHz from flash, from RAM		=> 7.4 mA, 6.7 mA
CPU @ 64MHz from flash, from RAM @ 3V, DCDC	=> 3.7 mA, 3.3 mA
System Off, On					=> 0.3 μA, 1.2 μA
Additional current for RAM retention		=> 30 nA / 4KB block
=> possibility to completely power off the BMD-350?

WiFi:
- Operating Current Average value: 80 mA
- Current consumption details:
	Tx802.11b, CCK 11Mbps, P OUT=+17dBm		=> 170mA
	Tx 802.11g, OFDM 54Mbps, P OUT =+15dBm		=> 140mA
	Tx 802.11n, MCS7, P OUT =+13dBm			=> 120mA
	Rx 802.11b, 1024 bytes packet length,-80dBm	=> 50mA
	Rx 802.11g, 1024 bytes packet length, -70dBm	=> 56mA
	Rx 802.11n, 1024 bytes packet length,  -65dBm	=> 56mA
	Modem-Sleep					=> 15mA
	Light-Sleep					=> 0.9mA
	Deep-Sleep					=> 10μA
	Power Off					=> 0.5μA
=> ESP8285 needs to be flashed with its own firmware via FTDI. We can then use Kris's API function "put_wifi_to_sleep"



check out accelerometer fifo_data 0x3F register

EST (equidistant-sampling mode): 1/(2 * bw) = n * t SLEEP where n is an integer
